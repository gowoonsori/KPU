
FLASH_RUN/stm32f103ve_mp3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b058  08002000  08002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0800d058  0800d058  0000d058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00005740  0800d060  0800d060  0000d060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000a90  20000000  080127a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .bss          000037b8  20000a90  08013230  00020a90  2**2
                  ALLOC
  5 ._usrstack    00000200  20004248  08013230  00024248  2**0
                  ALLOC
  6 .comment      000000a9  00000000  00000000  00020a90  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011f0  00000000  00000000  00020b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001b4ee  00000000  00000000  00021d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e6f  00000000  00000000  0003d217  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000cb34  00000000  00000000  00041086  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00004144  00000000  00000000  0004dbbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000049e7  00000000  00000000  00051d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000f117  00000000  00000000  000566e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001830  00000000  00000000  000657fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .ARM.attributes 0000002b  00000000  00000000  0006702e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08002000 <g_pfnVectors>:
 8002000:	00 00 01 20 59 6f 00 08 00 00 00 00 00 00 00 00     ... Yo..........
 8002010:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 00 00 00 00     .n...n...n......
	...
 800202c:	f5 6e 00 08 f5 6e 00 08 00 00 00 00 f5 6e 00 08     .n...n.......n..
 800203c:	e1 09 00 20 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     ... .n...n...n..
 800204c:	d1 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 800205c:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 bd 48 00 08     .n...n...n...H..
 800206c:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 800207c:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 800208c:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 800209c:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 80020ac:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 3d 23 00 08     .n...n...n..=#..
 80020bc:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 80020cc:	f5 6e 00 08 f5 6e 00 08 89 2a 00 08 79 2b 00 08     .n...n...*..y+..
 80020dc:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 80020ec:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 80020fc:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 800210c:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 800211c:	f5 6e 00 08 f5 6e 00 08 f5 6e 00 08 f5 6e 00 08     .n...n...n...n..
 800212c:	f5 6e 00 08 00 00 00 00 00 00 00 00 00 00 00 00     .n..............
	...
 80021e0:	5f f8 08 f1                                         _...

080021e4 <wait_ms>:

int go_back(unsigned short x,unsigned short y);

void wait_ms (unsigned short delay)
{
      jiffes = 0;
 80021e4:	2200      	movs	r2, #0
 80021e6:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <wait_ms+0x10>)
 80021e8:	801a      	strh	r2, [r3, #0]
      while (jiffes < delay) {
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	b292      	uxth	r2, r2
 80021ee:	4282      	cmp	r2, r0
 80021f0:	d3fb      	bcc.n	80021ea <wait_ms+0x6>
      }
}
 80021f2:	4770      	bx	lr
 80021f4:	20000afe 	.word	0x20000afe

080021f8 <led_control>:


void led_control (unsigned short led, unsigned short ctl)
{
      if (ctl == ON) {
 80021f8:	2901      	cmp	r1, #1
         GPIO_SetBits(GPIOD,led);
 80021fa:	4601      	mov	r1, r0
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <led_control+0x10>)
      if (ctl == ON) {
 80021fe:	d101      	bne.n	8002204 <led_control+0xc>
         GPIO_SetBits(GPIOD,led);
 8002200:	f005 ba30 	b.w	8007664 <GPIO_SetBits>
      } else {
         GPIO_ResetBits(GPIOD,led);
 8002204:	f005 ba30 	b.w	8007668 <GPIO_ResetBits>
 8002208:	40011400 	.word	0x40011400

0800220c <Periph_Configuration>:
      }
}


void Periph_Configuration (void)
{
 800220c:	b508      	push	{r3, lr}
      /* ADCCLK = PCLK2/6 */
      RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 800220e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002212:	f004 ff73 	bl	80070fc <RCC_ADCCLKConfig>
      /* Enable GPIO and AFIO clocks */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE | RCC_APB2Periph_GPIOF | RCC_APB2Periph_GPIOG | RCC_APB2Periph_AFIO, ENABLE);
 8002216:	2101      	movs	r1, #1
 8002218:	f240 10fd 	movw	r0, #509	; 0x1fd
 800221c:	f004 ffc4 	bl	80071a8 <RCC_APB2PeriphClockCmd>
      /* Enable USART1 clock */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8002220:	2101      	movs	r1, #1
 8002222:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002226:	f004 ffbf 	bl	80071a8 <RCC_APB2PeriphClockCmd>
      /* Enable USART2 clock */
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800222a:	2101      	movs	r1, #1
 800222c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002230:	f004 ffc6 	bl	80071c0 <RCC_APB1PeriphClockCmd>
      /* Enable ADC1, ADC2, ADC3 clock */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);
 8002234:	2101      	movs	r1, #1
 8002236:	f44f 4006 	mov.w	r0, #34304	; 0x8600
 800223a:	f004 ffb5 	bl	80071a8 <RCC_APB2PeriphClockCmd>
      /* Enable TIM4 clock */
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
}
 800223e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002242:	2101      	movs	r1, #1
 8002244:	2004      	movs	r0, #4
 8002246:	f004 bfbb 	b.w	80071c0 <RCC_APB1PeriphClockCmd>
	...

0800224c <GPIO_Configuration>:


void GPIO_Configuration (void)
{
 800224c:	b510      	push	{r4, lr}
      // Port A
      GPIO_Init_Pin(GPIOA,TXD2,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
 800224e:	4c36      	ldr	r4, [pc, #216]	; (8002328 <GPIO_Configuration+0xdc>)
 8002250:	2318      	movs	r3, #24
 8002252:	4620      	mov	r0, r4
 8002254:	2203      	movs	r2, #3
 8002256:	2104      	movs	r1, #4
 8002258:	f005 f9b4 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOA,RXD2,GPIO_Speed_50MHz,GPIO_Mode_IN_FLOATING);
 800225c:	4620      	mov	r0, r4
 800225e:	2304      	movs	r3, #4
 8002260:	2203      	movs	r2, #3
 8002262:	2108      	movs	r1, #8
 8002264:	f005 f9ae 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOA,TXD1,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
 8002268:	4620      	mov	r0, r4
 800226a:	2318      	movs	r3, #24
 800226c:	2203      	movs	r2, #3
 800226e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002272:	f005 f9a7 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOA,RXD1,GPIO_Speed_50MHz,GPIO_Mode_IN_FLOATING);
 8002276:	4620      	mov	r0, r4
 8002278:	2304      	movs	r3, #4
      // Port B
      // Port C
      // PORT D
      GPIO_Init_Pin(GPIOD,LED0,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 800227a:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
      GPIO_Init_Pin(GPIOA,RXD1,GPIO_Speed_50MHz,GPIO_Mode_IN_FLOATING);
 800227e:	2203      	movs	r2, #3
 8002280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002284:	f005 f99e 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,LED0,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8002288:	4620      	mov	r0, r4
 800228a:	2310      	movs	r3, #16
 800228c:	2203      	movs	r2, #3
 800228e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002292:	f005 f997 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,LED1,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8002296:	4620      	mov	r0, r4
 8002298:	2310      	movs	r3, #16
 800229a:	2203      	movs	r2, #3
 800229c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022a0:	f005 f990 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,LED2,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80022a4:	4620      	mov	r0, r4
 80022a6:	2310      	movs	r3, #16
 80022a8:	2203      	movs	r2, #3
 80022aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022ae:	f005 f989 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,LED3,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80022b2:	4620      	mov	r0, r4
 80022b4:	2310      	movs	r3, #16
 80022b6:	2203      	movs	r2, #3
 80022b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022bc:	f005 f982 	bl	80075c4 <GPIO_Init_Pin>

      GPIO_Init_Pin(GPIOD,GPIO_Pin_0,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 80022c0:	4620      	mov	r0, r4
 80022c2:	2348      	movs	r3, #72	; 0x48
 80022c4:	2203      	movs	r2, #3
 80022c6:	2101      	movs	r1, #1
 80022c8:	f005 f97c 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_1,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 80022cc:	4620      	mov	r0, r4
 80022ce:	2348      	movs	r3, #72	; 0x48
 80022d0:	2203      	movs	r2, #3
 80022d2:	2102      	movs	r1, #2
 80022d4:	f005 f976 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_2,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 80022d8:	4620      	mov	r0, r4
 80022da:	2348      	movs	r3, #72	; 0x48
 80022dc:	2203      	movs	r2, #3
 80022de:	2104      	movs	r1, #4
 80022e0:	f005 f970 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_3,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 80022e4:	4620      	mov	r0, r4
 80022e6:	2348      	movs	r3, #72	; 0x48
 80022e8:	2203      	movs	r2, #3
 80022ea:	2108      	movs	r1, #8
 80022ec:	f005 f96a 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_4,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 80022f0:	2348      	movs	r3, #72	; 0x48
 80022f2:	2203      	movs	r2, #3
 80022f4:	4620      	mov	r0, r4
 80022f6:	2110      	movs	r1, #16
 80022f8:	f005 f964 	bl	80075c4 <GPIO_Init_Pin>
         GPIO_ResetBits(GPIOD,led);
 80022fc:	4620      	mov	r0, r4
 80022fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002302:	f005 f9b1 	bl	8007668 <GPIO_ResetBits>
 8002306:	4620      	mov	r0, r4
 8002308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800230c:	f005 f9ac 	bl	8007668 <GPIO_ResetBits>
 8002310:	4620      	mov	r0, r4
 8002312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002316:	f005 f9a7 	bl	8007668 <GPIO_ResetBits>
 800231a:	4620      	mov	r0, r4
      // Default Value
      led_control(LED0,OFF);
      led_control(LED1,OFF);
      led_control(LED2,OFF);
      led_control(LED3,OFF);
}
 800231c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         GPIO_ResetBits(GPIOD,led);
 8002320:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002324:	f005 b9a0 	b.w	8007668 <GPIO_ResetBits>
 8002328:	40010800 	.word	0x40010800

0800232c <NVIC_Configuration>:
#else
extern unsigned int _isr_vectorsflash_offs;
void NVIC_Configuration (void)
{
      /* Set the Vector Table base location at 0x08000000+_isr_vectorsflash_offs */
      NVIC_SetVectorTable(NVIC_VectTab_FLASH, (unsigned int)&_isr_vectorsflash_offs);
 800232c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002330:	4901      	ldr	r1, [pc, #4]	; (8002338 <NVIC_Configuration+0xc>)
 8002332:	f004 bed9 	b.w	80070e8 <NVIC_SetVectorTable>
 8002336:	bf00      	nop
 8002338:	00002000 	.word	0x00002000

0800233c <TIM4_IRQHandler>:
}


void TIM4_IRQHandler (void)
{
      TIM_ClearITPendingBit(TIM4,TIM_IT_Update);
 800233c:	2101      	movs	r1, #1
{
 800233e:	b510      	push	{r4, lr}
      TIM_ClearITPendingBit(TIM4,TIM_IT_Update);
 8002340:	481e      	ldr	r0, [pc, #120]	; (80023bc <TIM4_IRQHandler+0x80>)
 8002342:	f005 fa31 	bl	80077a8 <TIM_ClearITPendingBit>
      static unsigned short cnt = 0;
      static unsigned char flip = 0;
      cnt++;
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <TIM4_IRQHandler+0x84>)
 8002348:	8813      	ldrh	r3, [r2, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	b29b      	uxth	r3, r3
      if (cnt >= 500) {
 800234e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002352:	d21d      	bcs.n	8002390 <TIM4_IRQHandler+0x54>
      cnt++;
 8002354:	8013      	strh	r3, [r2, #0]
            led_control(LED0,OFF);
            sec_tick = 1;
         }
      	 flip = !flip;
      }
      tick++;
 8002356:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <TIM4_IRQHandler+0x88>)
 8002358:	8813      	ldrh	r3, [r2, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	b29b      	uxth	r3, r3
 800235e:	8013      	strh	r3, [r2, #0]
      if (rxcnt1) rxck1++;
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <TIM4_IRQHandler+0x8c>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	b123      	cbz	r3, 8002372 <TIM4_IRQHandler+0x36>
 8002368:	4a18      	ldr	r2, [pc, #96]	; (80023cc <TIM4_IRQHandler+0x90>)
 800236a:	7813      	ldrb	r3, [r2, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	7013      	strb	r3, [r2, #0]
      if (rxcnt2) rxck2++;
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <TIM4_IRQHandler+0x94>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	b123      	cbz	r3, 8002384 <TIM4_IRQHandler+0x48>
 800237a:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <TIM4_IRQHandler+0x98>)
 800237c:	7813      	ldrb	r3, [r2, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	7013      	strb	r3, [r2, #0]
      jiffes++;
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <TIM4_IRQHandler+0x9c>)
 8002386:	8813      	ldrh	r3, [r2, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	b29b      	uxth	r3, r3
 800238c:	8013      	strh	r3, [r2, #0]
}
 800238e:	bd10      	pop	{r4, pc}
         cnt = 0;
 8002390:	2300      	movs	r3, #0
         if (flip) {
 8002392:	4c12      	ldr	r4, [pc, #72]	; (80023dc <TIM4_IRQHandler+0xa0>)
         cnt = 0;
 8002394:	8013      	strh	r3, [r2, #0]
         if (flip) {
 8002396:	7823      	ldrb	r3, [r4, #0]
         GPIO_SetBits(GPIOD,led);
 8002398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800239c:	4810      	ldr	r0, [pc, #64]	; (80023e0 <TIM4_IRQHandler+0xa4>)
         if (flip) {
 800239e:	b13b      	cbz	r3, 80023b0 <TIM4_IRQHandler+0x74>
         GPIO_SetBits(GPIOD,led);
 80023a0:	f005 f960 	bl	8007664 <GPIO_SetBits>
      	 flip = !flip;
 80023a4:	7823      	ldrb	r3, [r4, #0]
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	7023      	strb	r3, [r4, #0]
 80023ae:	e7d2      	b.n	8002356 <TIM4_IRQHandler+0x1a>
         GPIO_ResetBits(GPIOD,led);
 80023b0:	f005 f95a 	bl	8007668 <GPIO_ResetBits>
            sec_tick = 1;
 80023b4:	2201      	movs	r2, #1
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <TIM4_IRQHandler+0xa8>)
 80023b8:	801a      	strh	r2, [r3, #0]
 80023ba:	e7f3      	b.n	80023a4 <TIM4_IRQHandler+0x68>
 80023bc:	40000800 	.word	0x40000800
 80023c0:	20000a92 	.word	0x20000a92
 80023c4:	20000af0 	.word	0x20000af0
 80023c8:	20001214 	.word	0x20001214
 80023cc:	20001318 	.word	0x20001318
 80023d0:	2000100a 	.word	0x2000100a
 80023d4:	20000e04 	.word	0x20000e04
 80023d8:	20000afe 	.word	0x20000afe
 80023dc:	20000a95 	.word	0x20000a95
 80023e0:	40011400 	.word	0x40011400
 80023e4:	20000b00 	.word	0x20000b00

080023e8 <adc_init>:


void adc_init (void)
{
 80023e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
      ADC_InitTypeDef ADC_InitStructure;
      GPIO_Init_Pin(GPIOC,GPIO_Pin_5,GPIO_Speed_50MHz,GPIO_Mode_AIN);
 80023ea:	2300      	movs	r3, #0
 80023ec:	2203      	movs	r2, #3
 80023ee:	2120      	movs	r1, #32
 80023f0:	481d      	ldr	r0, [pc, #116]	; (8002468 <adc_init+0x80>)
 80023f2:	f005 f8e7 	bl	80075c4 <GPIO_Init_Pin>
      /* ADC1 registers reset */
      ADC_DeInit(ADC1);
 80023f6:	481d      	ldr	r0, [pc, #116]	; (800246c <adc_init+0x84>)
 80023f8:	f004 fefa 	bl	80071f0 <ADC_DeInit>
      /* Enable ADC1 */
      ADC_Cmd(ADC1, ENABLE);
 80023fc:	2101      	movs	r1, #1
 80023fe:	481b      	ldr	r0, [pc, #108]	; (800246c <adc_init+0x84>)
 8002400:	f004 ff51 	bl	80072a6 <ADC_Cmd>
      /* ADC1 configuration */
      ADC_StructInit(&ADC_InitStructure);
 8002404:	4668      	mov	r0, sp
 8002406:	f004 ff45 	bl	8007294 <ADC_StructInit>
      ADC_InitStructure.ADC_Mode = ADC_Mode_InjecSimult;
      ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 800240a:	2301      	movs	r3, #1
 800240c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
      ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
      ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8002410:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
      ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8002414:	e9cd 2300 	strd	r2, r3, [sp]
      ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8002418:	2200      	movs	r2, #0
      ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
      ADC_InitStructure.ADC_NbrOfChannel = 1;
      ADC_Init(ADC1, &ADC_InitStructure);
 800241a:	4814      	ldr	r0, [pc, #80]	; (800246c <adc_init+0x84>)
      ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 800241c:	e9cd 2102 	strd	r2, r1, [sp, #8]
      ADC_Init(ADC1, &ADC_InitStructure);
 8002420:	4669      	mov	r1, sp
      ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002422:	9204      	str	r2, [sp, #16]
      ADC_InitStructure.ADC_NbrOfChannel = 1;
 8002424:	f88d 3014 	strb.w	r3, [sp, #20]
      ADC_Init(ADC1, &ADC_InitStructure);
 8002428:	f004 ff10 	bl	800724c <ADC_Init>
      //Start calibration of ADC1
      ADC_StartCalibration(ADC1);
 800242c:	480f      	ldr	r0, [pc, #60]	; (800246c <adc_init+0x84>)
 800242e:	f004 ff43 	bl	80072b8 <ADC_StartCalibration>
      // Wait for the end of ADCs calibration
      while (ADC_GetCalibrationStatus(ADC1)) {
 8002432:	480e      	ldr	r0, [pc, #56]	; (800246c <adc_init+0x84>)
 8002434:	f004 ff45 	bl	80072c2 <ADC_GetCalibrationStatus>
 8002438:	2800      	cmp	r0, #0
 800243a:	d1fa      	bne.n	8002432 <adc_init+0x4a>
      }
      /* ADC1 Injected conversions configuration */
      ADC_InjectedSequencerLengthConfig(ADC1,1);
 800243c:	2101      	movs	r1, #1
 800243e:	480b      	ldr	r0, [pc, #44]	; (800246c <adc_init+0x84>)
 8002440:	f004 ff89 	bl	8007356 <ADC_InjectedSequencerLengthConfig>
      ADC_InjectedChannelConfig(ADC1,ADC_Channel_15,1,ADC_SampleTime_55Cycles5);
 8002444:	2305      	movs	r3, #5
 8002446:	2201      	movs	r2, #1
 8002448:	210f      	movs	r1, #15
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <adc_init+0x84>)
 800244c:	f004 ff55 	bl	80072fa <ADC_InjectedChannelConfig>
      /* ADC1 Injected conversions trigger is given by software and enabled */
      ADC_ExternalTrigInjectedConvConfig(ADC1, ADC_ExternalTrigInjecConv_None);
 8002450:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002454:	4805      	ldr	r0, [pc, #20]	; (800246c <adc_init+0x84>)
 8002456:	f004 ff38 	bl	80072ca <ADC_ExternalTrigInjectedConvConfig>
      ADC_ExternalTrigInjectedConvCmd(ADC1,ENABLE);
 800245a:	2101      	movs	r1, #1
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <adc_init+0x84>)
 800245e:	f004 ff3a 	bl	80072d6 <ADC_ExternalTrigInjectedConvCmd>
}
 8002462:	b007      	add	sp, #28
 8002464:	f85d fb04 	ldr.w	pc, [sp], #4
 8002468:	40011000 	.word	0x40011000
 800246c:	40012400 	.word	0x40012400

08002470 <main_display>:
      }
}

*/

void main_display(){
 8002470:	b508      	push	{r3, lr}
     FLASH_Lock();
 8002472:	f004 ffed 	bl	8007450 <FLASH_Lock>
      //timer4_init();
      serial_init();
 8002476:	f000 fcf1 	bl	8002e5c <serial_init>
      lcd_init();
 800247a:	f000 fe81 	bl	8003180 <lcd_init>
	  touch_init();
 800247e:	f002 f9cf 	bl	8004820 <touch_init>
      adc_init();
 8002482:	f7ff ffb1 	bl	80023e8 <adc_init>
	  mp3_init();
 8002486:	f004 fb57 	bl	8006b38 <mp3_init>
	  //init_rtc();
	  draw_apple_logo(350,570);
 800248a:	f240 213a 	movw	r1, #570	; 0x23a
 800248e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002492:	f001 fbc2 	bl	8003c1a <draw_apple_logo>
	  lcd_draw_rectangle(10,0,1000,150);
 8002496:	2396      	movs	r3, #150	; 0x96
 8002498:	22e8      	movs	r2, #232	; 0xe8
 800249a:	2100      	movs	r1, #0
 800249c:	200a      	movs	r0, #10
 800249e:	f001 fe0e 	bl	80040be <lcd_draw_rectangle>
	  
	  lcd_printf(2,14,"<");
 80024a2:	210e      	movs	r1, #14
 80024a4:	2002      	movs	r0, #2
 80024a6:	4a16      	ldr	r2, [pc, #88]	; (8002500 <main_display+0x90>)
 80024a8:	f002 f8be 	bl	8004628 <lcd_printf>
	  lcd_printf(26,14,">");
 80024ac:	210e      	movs	r1, #14
 80024ae:	201a      	movs	r0, #26
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <main_display+0x94>)
 80024b2:	f002 f8b9 	bl	8004628 <lcd_printf>
	  if (play_mp3) lcd_printf(14,14,"II");
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <main_display+0x98>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b1fb      	cbz	r3, 80024fc <main_display+0x8c>
 80024bc:	4a13      	ldr	r2, [pc, #76]	; (800250c <main_display+0x9c>)
	  else lcd_printf(14,14,"I>");
 80024be:	210e      	movs	r1, #14
 80024c0:	4608      	mov	r0, r1
 80024c2:	f002 f8b1 	bl	8004628 <lcd_printf>
	  lcd_printf(14,10,">>");
 80024c6:	210a      	movs	r1, #10
 80024c8:	200e      	movs	r0, #14
 80024ca:	4a11      	ldr	r2, [pc, #68]	; (8002510 <main_display+0xa0>)
 80024cc:	f002 f8ac 	bl	8004628 <lcd_printf>
	  //lcd_printf(13,18,"<<");
	  lcd_printf(26,10,"+");
 80024d0:	210a      	movs	r1, #10
 80024d2:	201a      	movs	r0, #26
 80024d4:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <main_display+0xa4>)
 80024d6:	f002 f8a7 	bl	8004628 <lcd_printf>
	  lcd_printf(2,10,"-");
 80024da:	210a      	movs	r1, #10
 80024dc:	2002      	movs	r0, #2
 80024de:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <main_display+0xa8>)
 80024e0:	f002 f8a2 	bl	8004628 <lcd_printf>
	  lcd_printf(1,18,"list");
 80024e4:	2112      	movs	r1, #18
 80024e6:	2001      	movs	r0, #1
 80024e8:	4a0c      	ldr	r2, [pc, #48]	; (800251c <main_display+0xac>)
 80024ea:	f002 f89d 	bl	8004628 <lcd_printf>
	  lcd_printf(25,18,"inf");

}
 80024ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  lcd_printf(25,18,"inf");
 80024f2:	2112      	movs	r1, #18
 80024f4:	2019      	movs	r0, #25
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <main_display+0xb0>)
 80024f8:	f002 b896 	b.w	8004628 <lcd_printf>
	  else lcd_printf(14,14,"I>");
 80024fc:	4a09      	ldr	r2, [pc, #36]	; (8002524 <main_display+0xb4>)
 80024fe:	e7de      	b.n	80024be <main_display+0x4e>
 8002500:	0800d060 	.word	0x0800d060
 8002504:	0800d069 	.word	0x0800d069
 8002508:	20000aee 	.word	0x20000aee
 800250c:	0800d062 	.word	0x0800d062
 8002510:	0800d068 	.word	0x0800d068
 8002514:	0800d06b 	.word	0x0800d06b
 8002518:	0800d091 	.word	0x0800d091
 800251c:	0800d06d 	.word	0x0800d06d
 8002520:	0800d072 	.word	0x0800d072
 8002524:	0800d065 	.word	0x0800d065

08002528 <go_back>:
	   return 1;
	}
	return 0;
}
int go_back(unsigned short x,unsigned short y){
	if ((x>=1300&&x<=1800)&&(y>=200&&y<=400)) {	// go back
 8002528:	f2a0 5014 	subw	r0, r0, #1300	; 0x514
 800252c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
int go_back(unsigned short x,unsigned short y){
 8002530:	b508      	push	{r3, lr}
	if ((x>=1300&&x<=1800)&&(y>=200&&y<=400)) {	// go back
 8002532:	d808      	bhi.n	8002546 <go_back+0x1e>
 8002534:	39c8      	subs	r1, #200	; 0xc8
 8002536:	29c8      	cmp	r1, #200	; 0xc8
 8002538:	d805      	bhi.n	8002546 <go_back+0x1e>
       main_display();
 800253a:	f7ff ff99 	bl	8002470 <main_display>
	   mp3_displayinit();
 800253e:	f004 fa39 	bl	80069b4 <mp3_displayinit>
	   return 1;
 8002542:	2001      	movs	r0, #1
	}
	return 0;
}
 8002544:	bd08      	pop	{r3, pc}
	return 0;
 8002546:	2000      	movs	r0, #0
 8002548:	e7fc      	b.n	8002544 <go_back+0x1c>
	...

0800254c <touch_read>:
	if ((*x>=600&&*x<=1050)&&(*y>=600&&*y<=800)) {	// Select
 800254c:	8803      	ldrh	r3, [r0, #0]
void touch_read (unsigned short *x,unsigned short *y){
 800254e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((*x>=600&&*x<=1050)&&(*y>=600&&*y<=800)) {	// Select
 8002552:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002556:	b29b      	uxth	r3, r3
 8002558:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
void touch_read (unsigned short *x,unsigned short *y){
 800255c:	4605      	mov	r5, r0
 800255e:	460e      	mov	r6, r1
 8002560:	4bac      	ldr	r3, [pc, #688]	; (8002814 <touch_read+0x2c8>)
 8002562:	4cad      	ldr	r4, [pc, #692]	; (8002818 <touch_read+0x2cc>)
	if ((*x>=600&&*x<=1050)&&(*y>=600&&*y<=800)) {	// Select
 8002564:	f200 8132 	bhi.w	80027cc <touch_read+0x280>
 8002568:	880a      	ldrh	r2, [r1, #0]
 800256a:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 800256e:	b292      	uxth	r2, r2
 8002570:	2ac8      	cmp	r2, #200	; 0xc8
 8002572:	f200 812b 	bhi.w	80027cc <touch_read+0x280>
        sw_cnt1++;
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	3201      	adds	r2, #1
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
        if (sw_cnt1 >= 40) {
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	2a27      	cmp	r2, #39	; 0x27
 8002582:	d914      	bls.n	80025ae <touch_read+0x62>
            sw_cnt1 = 0;
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
            if ((sw_value & 0x01) == 0)	{
 8002588:	7823      	ldrb	r3, [r4, #0]
 800258a:	f013 0301 	ands.w	r3, r3, #1
 800258e:	d10e      	bne.n	80025ae <touch_read+0x62>
               sw_value |= 0x01;
 8002590:	7822      	ldrb	r2, [r4, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	7022      	strb	r2, [r4, #0]
               if (play_mp3) {
 8002598:	4aa0      	ldr	r2, [pc, #640]	; (800281c <touch_read+0x2d0>)
 800259a:	7811      	ldrb	r1, [r2, #0]
 800259c:	2900      	cmp	r1, #0
 800259e:	f000 8111 	beq.w	80027c4 <touch_read+0x278>
			   play_mp3 = 0;
 80025a2:	7013      	strb	r3, [r2, #0]
			   lcd_printf(14,14,"I>");
 80025a4:	4a9e      	ldr	r2, [pc, #632]	; (8002820 <touch_read+0x2d4>)
			   lcd_printf(14,14,"II");
 80025a6:	210e      	movs	r1, #14
 80025a8:	4608      	mov	r0, r1
 80025aa:	f002 f83d 	bl	8004628 <lcd_printf>
    if ((*x>=1300&&*x<=1800)&&(*y>=600&&*y<=800)) {	// Right
 80025ae:	882b      	ldrh	r3, [r5, #0]
 80025b0:	4f9c      	ldr	r7, [pc, #624]	; (8002824 <touch_read+0x2d8>)
 80025b2:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025bc:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8002844 <touch_read+0x2f8>
 80025c0:	4b99      	ldr	r3, [pc, #612]	; (8002828 <touch_read+0x2dc>)
 80025c2:	f200 810a 	bhi.w	80027da <touch_read+0x28e>
 80025c6:	8832      	ldrh	r2, [r6, #0]
 80025c8:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 80025cc:	b292      	uxth	r2, r2
 80025ce:	2ac8      	cmp	r2, #200	; 0xc8
 80025d0:	f200 8103 	bhi.w	80027da <touch_read+0x28e>
         sw_cnt2++;
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	3201      	adds	r2, #1
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
         if (sw_cnt2 >= 40) {
 80025dc:	781a      	ldrb	r2, [r3, #0]
 80025de:	2a27      	cmp	r2, #39	; 0x27
 80025e0:	f240 8111 	bls.w	8002806 <touch_read+0x2ba>
            sw_cnt2 = 0;
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
            if ((sw_value & 0x02) == 0)	{
 80025e8:	7823      	ldrb	r3, [r4, #0]
 80025ea:	0799      	lsls	r1, r3, #30
 80025ec:	f100 810b 	bmi.w	8002806 <touch_read+0x2ba>
               sw_value |= 0x02;
 80025f0:	7823      	ldrb	r3, [r4, #0]
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	7023      	strb	r3, [r4, #0]
               play_prev();
 80025f8:	f004 fa58 	bl	8006aac <play_prev>
    if ((*x==3000)&&(*y==3000)) {	// -2���
 80025fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002600:	882b      	ldrh	r3, [r5, #0]
 8002602:	4293      	cmp	r3, r2
 8002604:	f040 80ff 	bne.w	8002806 <touch_read+0x2ba>
 8002608:	8832      	ldrh	r2, [r6, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	f040 80fb 	bne.w	8002806 <touch_read+0x2ba>
        sw_cnt3++;
 8002610:	783b      	ldrb	r3, [r7, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	703b      	strb	r3, [r7, #0]
        if (sw_cnt3 >= 40) {
 8002618:	783b      	ldrb	r3, [r7, #0]
 800261a:	2b27      	cmp	r3, #39	; 0x27
 800261c:	f240 80eb 	bls.w	80027f6 <touch_read+0x2aa>
            sw_cnt3 = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	703b      	strb	r3, [r7, #0]
            if ((sw_value & 0x04) == 0)	{
 8002624:	7820      	ldrb	r0, [r4, #0]
 8002626:	f010 0004 	ands.w	r0, r0, #4
 800262a:	f040 80e4 	bne.w	80027f6 <touch_read+0x2aa>
               sw_value |= 0x04;
 800262e:	7823      	ldrb	r3, [r4, #0]
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	7023      	strb	r3, [r4, #0]
               mp3_seek(0);
 8002636:	f004 fb05 	bl	8006c44 <mp3_seek>
    if ((*x>=600&&*x<=1000)&&(*y>=900&&*y<=1150)) {	// x2���
 800263a:	882b      	ldrh	r3, [r5, #0]
 800263c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002640:	b29b      	uxth	r3, r3
 8002642:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002646:	f200 80d6 	bhi.w	80027f6 <touch_read+0x2aa>
 800264a:	8833      	ldrh	r3, [r6, #0]
 800264c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8002650:	b29b      	uxth	r3, r3
 8002652:	2bfa      	cmp	r3, #250	; 0xfa
 8002654:	f200 80cf 	bhi.w	80027f6 <touch_read+0x2aa>
        sw_cnt4++;
 8002658:	f898 3000 	ldrb.w	r3, [r8]
 800265c:	3301      	adds	r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f888 3000 	strb.w	r3, [r8]
        if (sw_cnt4 >= 40) {
 8002664:	f898 3000 	ldrb.w	r3, [r8]
 8002668:	2b27      	cmp	r3, #39	; 0x27
 800266a:	d90c      	bls.n	8002686 <touch_read+0x13a>
            sw_cnt4 = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	f888 3000 	strb.w	r3, [r8]
            if ((sw_value & 0x08) == 0)	{
 8002672:	7823      	ldrb	r3, [r4, #0]
 8002674:	071a      	lsls	r2, r3, #28
 8002676:	d406      	bmi.n	8002686 <touch_read+0x13a>
               sw_value |= 0x08;
 8002678:	7823      	ldrb	r3, [r4, #0]
               mp3_seek(1);
 800267a:	2001      	movs	r0, #1
               sw_value |= 0x08;
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	7023      	strb	r3, [r4, #0]
               mp3_seek(1);
 8002682:	f004 fadf 	bl	8006c44 <mp3_seek>
    if ((*x>=100&&*x<=400)&&(*y>=600&&*y<=800)) {	// Left
 8002686:	882b      	ldrh	r3, [r5, #0]
 8002688:	3b64      	subs	r3, #100	; 0x64
 800268a:	b29b      	uxth	r3, r3
 800268c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002690:	4b66      	ldr	r3, [pc, #408]	; (800282c <touch_read+0x2e0>)
 8002692:	f200 80a9 	bhi.w	80027e8 <touch_read+0x29c>
 8002696:	8832      	ldrh	r2, [r6, #0]
 8002698:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 800269c:	b292      	uxth	r2, r2
 800269e:	2ac8      	cmp	r2, #200	; 0xc8
 80026a0:	f200 80a2 	bhi.w	80027e8 <touch_read+0x29c>
        sw_cnt5++;
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	3201      	adds	r2, #1
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]
        if (sw_cnt5 >= 40) {
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	2a27      	cmp	r2, #39	; 0x27
 80026b0:	d90a      	bls.n	80026c8 <touch_read+0x17c>
            sw_cnt5 = 0;
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
            if ((sw_value & 0x10) == 0)	{
 80026b6:	7823      	ldrb	r3, [r4, #0]
 80026b8:	06db      	lsls	r3, r3, #27
 80026ba:	d405      	bmi.n	80026c8 <touch_read+0x17c>
               sw_value |= 0x10;
 80026bc:	7823      	ldrb	r3, [r4, #0]
 80026be:	f043 0310 	orr.w	r3, r3, #16
 80026c2:	7023      	strb	r3, [r4, #0]
               play_next();
 80026c4:	f004 f992 	bl	80069ec <play_next>
	if ((*x>=1300&&*x<=1800)&&(*y>=900&&*y<=1150)) {	// volume up
 80026c8:	882b      	ldrh	r3, [r5, #0]
 80026ca:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026d4:	d811      	bhi.n	80026fa <touch_read+0x1ae>
 80026d6:	8833      	ldrh	r3, [r6, #0]
 80026d8:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2bfa      	cmp	r3, #250	; 0xfa
 80026e0:	d80b      	bhi.n	80026fa <touch_read+0x1ae>
		volume--;
 80026e2:	4b53      	ldr	r3, [pc, #332]	; (8002830 <touch_read+0x2e4>)
 80026e4:	881a      	ldrh	r2, [r3, #0]
 80026e6:	3a01      	subs	r2, #1
 80026e8:	b292      	uxth	r2, r2
 80026ea:	801a      	strh	r2, [r3, #0]
		if(volume==0)volume++;
 80026ec:	881a      	ldrh	r2, [r3, #0]
 80026ee:	b292      	uxth	r2, r2
 80026f0:	b91a      	cbnz	r2, 80026fa <touch_read+0x1ae>
 80026f2:	881a      	ldrh	r2, [r3, #0]
 80026f4:	3201      	adds	r2, #1
 80026f6:	b292      	uxth	r2, r2
 80026f8:	801a      	strh	r2, [r3, #0]
	if ((*x>=100&&*x<=400)&&(*y>=900&&*y<=1150)) {	//volume down
 80026fa:	882b      	ldrh	r3, [r5, #0]
 80026fc:	3b64      	subs	r3, #100	; 0x64
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002704:	d810      	bhi.n	8002728 <touch_read+0x1dc>
 8002706:	8833      	ldrh	r3, [r6, #0]
 8002708:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800270c:	b29b      	uxth	r3, r3
 800270e:	2bfa      	cmp	r3, #250	; 0xfa
 8002710:	d80a      	bhi.n	8002728 <touch_read+0x1dc>
		volume++;
 8002712:	4a47      	ldr	r2, [pc, #284]	; (8002830 <touch_read+0x2e4>)
 8002714:	8813      	ldrh	r3, [r2, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	b29b      	uxth	r3, r3
 800271a:	8013      	strh	r3, [r2, #0]
		if(volume>127)volume=127;
 800271c:	8813      	ldrh	r3, [r2, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b7f      	cmp	r3, #127	; 0x7f
 8002722:	bf84      	itt	hi
 8002724:	237f      	movhi	r3, #127	; 0x7f
 8002726:	8013      	strhhi	r3, [r2, #0]
	if ((*x>=1300&&*x<=1800)&&(*y>=200&&*y<=400)) {	// information
 8002728:	882b      	ldrh	r3, [r5, #0]
 800272a:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800272e:	b29b      	uxth	r3, r3
 8002730:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002734:	d81d      	bhi.n	8002772 <touch_read+0x226>
 8002736:	8833      	ldrh	r3, [r6, #0]
 8002738:	3bc8      	subs	r3, #200	; 0xc8
 800273a:	b29b      	uxth	r3, r3
 800273c:	2bc8      	cmp	r3, #200	; 0xc8
 800273e:	d818      	bhi.n	8002772 <touch_read+0x226>
		display_id3v1_tag();
 8002740:	f004 f896 	bl	8006870 <display_id3v1_tag>
		lcd_printf(1,18,"                         <--");
 8002744:	2112      	movs	r1, #18
 8002746:	2001      	movs	r0, #1
 8002748:	4a3a      	ldr	r2, [pc, #232]	; (8002834 <touch_read+0x2e8>)
 800274a:	f001 ff6d 	bl	8004628 <lcd_printf>
			touch_process(&x2,&y2);
 800274e:	f10d 0106 	add.w	r1, sp, #6
 8002752:	a801      	add	r0, sp, #4
 8002754:	f002 f8cc 	bl	80048f0 <touch_process>
			if(go_back(x2,y2)){
 8002758:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800275c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002760:	f7ff fee2 	bl	8002528 <go_back>
 8002764:	2800      	cmp	r0, #0
 8002766:	d0f2      	beq.n	800274e <touch_read+0x202>
				xLoc=1,yLoc=1;
 8002768:	2301      	movs	r3, #1
 800276a:	4a33      	ldr	r2, [pc, #204]	; (8002838 <touch_read+0x2ec>)
 800276c:	8013      	strh	r3, [r2, #0]
 800276e:	4a33      	ldr	r2, [pc, #204]	; (800283c <touch_read+0x2f0>)
 8002770:	8013      	strh	r3, [r2, #0]
	if ((*x>=100&&*x<=400)&&(*y>=200&&*y<=400)) {	// playlist
 8002772:	882b      	ldrh	r3, [r5, #0]
 8002774:	3b64      	subs	r3, #100	; 0x64
 8002776:	b29b      	uxth	r3, r3
 8002778:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800277c:	d81a      	bhi.n	80027b4 <touch_read+0x268>
 800277e:	8833      	ldrh	r3, [r6, #0]
 8002780:	3bc8      	subs	r3, #200	; 0xc8
 8002782:	b29b      	uxth	r3, r3
 8002784:	2bc8      	cmp	r3, #200	; 0xc8
 8002786:	d815      	bhi.n	80027b4 <touch_read+0x268>
		display_id3v1_tag();
 8002788:	f004 f872 	bl	8006870 <display_id3v1_tag>
		show_playlist();
 800278c:	f004 fa1c 	bl	8006bc8 <show_playlist>
		lcd_printf(1,18,"                         <--");
 8002790:	2112      	movs	r1, #18
 8002792:	2001      	movs	r0, #1
 8002794:	4a27      	ldr	r2, [pc, #156]	; (8002834 <touch_read+0x2e8>)
 8002796:	f001 ff47 	bl	8004628 <lcd_printf>
			touch_process(&x2,&y2);
 800279a:	f10d 0106 	add.w	r1, sp, #6
 800279e:	a801      	add	r0, sp, #4
 80027a0:	f002 f8a6 	bl	80048f0 <touch_process>
			if(go_back(x2,y2)){
 80027a4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80027a8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80027ac:	f7ff febc 	bl	8002528 <go_back>
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d0f2      	beq.n	800279a <touch_read+0x24e>
	xLoc=0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	4a20      	ldr	r2, [pc, #128]	; (8002838 <touch_read+0x2ec>)
 80027b8:	8013      	strh	r3, [r2, #0]
	yLoc=0;
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <touch_read+0x2f0>)
 80027bc:	8013      	strh	r3, [r2, #0]
}
 80027be:	b002      	add	sp, #8
 80027c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			   play_mp3 = 1;
 80027c4:	2301      	movs	r3, #1
 80027c6:	7013      	strb	r3, [r2, #0]
			   lcd_printf(14,14,"II");
 80027c8:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <touch_read+0x2f4>)
 80027ca:	e6ec      	b.n	80025a6 <touch_read+0x5a>
      	sw_cnt1 = 0;
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
      	sw_value &= ~(0x01);
 80027d0:	7823      	ldrb	r3, [r4, #0]
 80027d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80027d6:	7023      	strb	r3, [r4, #0]
 80027d8:	e6e9      	b.n	80025ae <touch_read+0x62>
      	sw_cnt2 = 0;
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
      	sw_value &= ~(0x02);
 80027de:	7823      	ldrb	r3, [r4, #0]
 80027e0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80027e4:	7023      	strb	r3, [r4, #0]
 80027e6:	e709      	b.n	80025fc <touch_read+0xb0>
        sw_cnt5 = 0;
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
      	sw_value &= ~(0x10);
 80027ec:	7823      	ldrb	r3, [r4, #0]
 80027ee:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80027f2:	7023      	strb	r3, [r4, #0]
 80027f4:	e768      	b.n	80026c8 <touch_read+0x17c>
        sw_cnt4 = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f888 3000 	strb.w	r3, [r8]
      	sw_value &= ~(0x08);
 80027fc:	7823      	ldrb	r3, [r4, #0]
 80027fe:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8002802:	7023      	strb	r3, [r4, #0]
 8002804:	e73f      	b.n	8002686 <touch_read+0x13a>
        sw_cnt3 = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	703b      	strb	r3, [r7, #0]
      	sw_value &= ~(0x04);
 800280a:	7823      	ldrb	r3, [r4, #0]
 800280c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8002810:	7023      	strb	r3, [r4, #0]
 8002812:	e712      	b.n	800263a <touch_read+0xee>
 8002814:	20000aec 	.word	0x20000aec
 8002818:	20000aed 	.word	0x20000aed
 800281c:	20000aee 	.word	0x20000aee
 8002820:	0800d065 	.word	0x0800d065
 8002824:	20000ae6 	.word	0x20000ae6
 8002828:	20000ae7 	.word	0x20000ae7
 800282c:	20000afc 	.word	0x20000afc
 8002830:	20000002 	.word	0x20000002
 8002834:	0800d076 	.word	0x0800d076
 8002838:	20000af2 	.word	0x20000af2
 800283c:	20000ae4 	.word	0x20000ae4
 8002840:	0800d062 	.word	0x0800d062
 8002844:	20000aeb 	.word	0x20000aeb

08002848 <main>:

int main (void)
{
 8002848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      int count,sec,msec,sum_adc,adc_count;
      //unsigned short ad_value;
      /* System Clocks Configuration */
      Periph_Configuration();
 800284c:	f7ff fcde 	bl	800220c <Periph_Configuration>
      /* NVIC configuration */
      NVIC_Configuration();
 8002850:	f7ff fd6c 	bl	800232c <NVIC_Configuration>
      /* Configure the GPIO ports */
      GPIO_Configuration();
 8002854:	f7ff fcfa 	bl	800224c <GPIO_Configuration>
      /* Setup SysTick Timer for 1 millisecond interrupts, also enables Systick and Systick-Interrupt */
      if (SysTick_Config(SystemCoreClock / 1000)) {
 8002858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800285c:	4b61      	ldr	r3, [pc, #388]	; (80029e4 <main+0x19c>)


static inline void NVIC_SetPriority (IRQn_Type IRQn, unsigned int priority)
{
      if (IRQn < 0) {
         SCB->SHP[((unsigned int)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);	/* set Priority for Cortex-M3 System Interrupts */
 800285e:	4d62      	ldr	r5, [pc, #392]	; (80029e8 <main+0x1a0>)
 8002860:	681b      	ldr	r3, [r3, #0]
static inline unsigned int SysTick_Config (unsigned int ticks)
{
      if (ticks > SysTick_LOAD_RELOAD_Msk) return (1);		/* Reload value impossible */
      SysTick->LOAD = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
      NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
      SysTick->VAL = 0;                                          /* Load the SysTick Counter Value */
 8002862:	2400      	movs	r4, #0
 8002864:	fbb3 f3f2 	udiv	r3, r3, r2
      SysTick->LOAD = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002868:	4a60      	ldr	r2, [pc, #384]	; (80029ec <main+0x1a4>)
 800286a:	3b01      	subs	r3, #1
 800286c:	6053      	str	r3, [r2, #4]
         SCB->SHP[((unsigned int)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);	/* set Priority for Cortex-M3 System Interrupts */
 800286e:	23f0      	movs	r3, #240	; 0xf0
 8002870:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;	/* Enable SysTick IRQ and SysTick Timer */
 8002874:	2307      	movs	r3, #7
      SysTick->VAL = 0;                                          /* Load the SysTick Counter Value */
 8002876:	6094      	str	r4, [r2, #8]
         /* Capture error */
         while (1);
      }
      /* 4 bit for pre-emption priority, 0 bits for subpriority */
      NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8002878:	f44f 7040 	mov.w	r0, #768	; 0x300
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;	/* Enable SysTick IRQ and SysTick Timer */
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	f004 fbf5 	bl	800706c <NVIC_PriorityGroupConfig>
      FLASH_Unlock();
 8002882:	f004 fdd9 	bl	8007438 <FLASH_Unlock>
      option_value = FLASH_GetReadOutProtectionStatus();
 8002886:	f004 fdeb 	bl	8007460 <FLASH_GetReadOutProtectionStatus>
 800288a:	4b59      	ldr	r3, [pc, #356]	; (80029f0 <main+0x1a8>)
 800288c:	6018      	str	r0, [r3, #0]
      if (option_value == 0) {
 800288e:	b980      	cbnz	r0, 80028b2 <main+0x6a>
         FLASHStatus = FLASH_EraseOptionBytes();
 8002890:	f004 fe14 	bl	80074bc <FLASH_EraseOptionBytes>
 8002894:	4c57      	ldr	r4, [pc, #348]	; (80029f4 <main+0x1ac>)
 8002896:	7020      	strb	r0, [r4, #0]
         FLASHStatus = FLASH_ReadOutProtection(ENABLE);
 8002898:	2001      	movs	r0, #1
 800289a:	f004 fe4d 	bl	8007538 <FLASH_ReadOutProtection>
 800289e:	7020      	strb	r0, [r4, #0]
#endif


static inline void NVIC_SystemReset (void)
{
      SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | SCB_AIRCR_SYSRESETREQ_Msk);	/* Keep priority group unchanged */
 80028a0:	68ea      	ldr	r2, [r5, #12]
 80028a2:	4b55      	ldr	r3, [pc, #340]	; (80029f8 <main+0x1b0>)
 80028a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60eb      	str	r3, [r5, #12]
static inline void __DSB()                      { __asm volatile ("dsb"); }
 80028ac:	f3bf 8f4f 	dsb	sy
      __DSB();	/* Ensure completion of memory access */
      while(1);	/* wait until reset */
 80028b0:	e7fe      	b.n	80028b0 <main+0x68>
         NVIC_SystemReset();
      }
	  
	main_display();
 80028b2:	f7ff fddd 	bl	8002470 <main_display>
	
      count = 0;
      sec = 0;
      msec = 0;
      old_volume = -1;
 80028b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
      msec = 0;
 80028ba:	46a1      	mov	r9, r4
      old_volume = -1;
 80028bc:	4d4f      	ldr	r5, [pc, #316]	; (80029fc <main+0x1b4>)
      	    mp3_play();
            if (tick) {
               tick = 0;
               count++;
               msec++;
               touch_process(&xLoc,&yLoc);
 80028be:	4f50      	ldr	r7, [pc, #320]	; (8002a00 <main+0x1b8>)
 80028c0:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8002a30 <main+0x1e8>
               }
               if (txled) led_control(LED1,ON);
               if (rxled) led_control(LED2,ON);
               if (txled == 0) led_control(LED1,OFF);
               if (rxled == 0) led_control(LED2,OFF);
               if (ADC_GetFlagStatus(ADC1,ADC_FLAG_JEOC)) {
 80028c4:	4e4f      	ldr	r6, [pc, #316]	; (8002a04 <main+0x1bc>)
      old_volume = -1;
 80028c6:	802b      	strh	r3, [r5, #0]
            if (tick) {
 80028c8:	f8df b168 	ldr.w	fp, [pc, #360]	; 8002a34 <main+0x1ec>
      	    mp3_play();
 80028cc:	f004 f9d4 	bl	8006c78 <mp3_play>
            if (tick) {
 80028d0:	f8bb 3000 	ldrh.w	r3, [fp]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f8      	beq.n	80028cc <main+0x84>
               tick = 0;
 80028da:	f04f 0a00 	mov.w	sl, #0
               touch_process(&xLoc,&yLoc);
 80028de:	4639      	mov	r1, r7
 80028e0:	4640      	mov	r0, r8
               tick = 0;
 80028e2:	f8ab a000 	strh.w	sl, [fp]
               msec++;
 80028e6:	f109 0901 	add.w	r9, r9, #1
               touch_process(&xLoc,&yLoc);
 80028ea:	f002 f801 	bl	80048f0 <touch_process>
			   touch_read(&xLoc,&yLoc);
 80028ee:	4639      	mov	r1, r7
 80028f0:	4640      	mov	r0, r8
 80028f2:	f7ff fe2b 	bl	800254c <touch_read>
               if (msec >= 500) {
 80028f6:	f5b9 7ffa 	cmp.w	r9, #500	; 0x1f4
 80028fa:	db05      	blt.n	8002908 <main+0xc0>
               	  msec = 0;
 80028fc:	46d1      	mov	r9, sl
               	  second++;
 80028fe:	4a42      	ldr	r2, [pc, #264]	; (8002a08 <main+0x1c0>)
 8002900:	8813      	ldrh	r3, [r2, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	b29b      	uxth	r3, r3
 8002906:	8013      	strh	r3, [r2, #0]
               if ((rxcnt1) && (rxck1 >= 3)) {
 8002908:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <main+0x1c4>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	b13b      	cbz	r3, 8002920 <main+0xd8>
 8002910:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <main+0x1c8>)
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	2a02      	cmp	r2, #2
 8002916:	d903      	bls.n	8002920 <main+0xd8>
               	  rxck1 = 0;
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
               	  receive_serial1();
 800291c:	f000 fa1e 	bl	8002d5c <receive_serial1>
               if ((rxcnt2) && (rxck2 >= 3)) {
 8002920:	4b3c      	ldr	r3, [pc, #240]	; (8002a14 <main+0x1cc>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	b143      	cbz	r3, 800293a <main+0xf2>
 8002928:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <main+0x1d0>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d904      	bls.n	800293a <main+0xf2>
               	  rxck1 = 0;
 8002930:	2200      	movs	r2, #0
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <main+0x1c8>)
 8002934:	701a      	strb	r2, [r3, #0]
               	  receive_serial2();
 8002936:	f000 fa51 	bl	8002ddc <receive_serial2>
               if (txled) led_control(LED1,ON);
 800293a:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 8002a38 <main+0x1f0>
 800293e:	f89b 3000 	ldrb.w	r3, [fp]
 8002942:	b123      	cbz	r3, 800294e <main+0x106>
         GPIO_SetBits(GPIOD,led);
 8002944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002948:	4834      	ldr	r0, [pc, #208]	; (8002a1c <main+0x1d4>)
 800294a:	f004 fe8b 	bl	8007664 <GPIO_SetBits>
               if (rxled) led_control(LED2,ON);
 800294e:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8002a3c <main+0x1f4>
 8002952:	f89a 3000 	ldrb.w	r3, [sl]
 8002956:	b123      	cbz	r3, 8002962 <main+0x11a>
         GPIO_SetBits(GPIOD,led);
 8002958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800295c:	482f      	ldr	r0, [pc, #188]	; (8002a1c <main+0x1d4>)
 800295e:	f004 fe81 	bl	8007664 <GPIO_SetBits>
               if (txled == 0) led_control(LED1,OFF);
 8002962:	f89b 3000 	ldrb.w	r3, [fp]
 8002966:	b923      	cbnz	r3, 8002972 <main+0x12a>
         GPIO_ResetBits(GPIOD,led);
 8002968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800296c:	482b      	ldr	r0, [pc, #172]	; (8002a1c <main+0x1d4>)
 800296e:	f004 fe7b 	bl	8007668 <GPIO_ResetBits>
               if (rxled == 0) led_control(LED2,OFF);
 8002972:	f89a 3000 	ldrb.w	r3, [sl]
 8002976:	b923      	cbnz	r3, 8002982 <main+0x13a>
         GPIO_ResetBits(GPIOD,led);
 8002978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800297c:	4827      	ldr	r0, [pc, #156]	; (8002a1c <main+0x1d4>)
 800297e:	f004 fe73 	bl	8007668 <GPIO_ResetBits>
               if (ADC_GetFlagStatus(ADC1,ADC_FLAG_JEOC)) {
 8002982:	2104      	movs	r1, #4
 8002984:	4630      	mov	r0, r6
 8002986:	f004 fcfb 	bl	8007380 <ADC_GetFlagStatus>
 800298a:	b120      	cbz	r0, 8002996 <main+0x14e>
                  sum_adc += (ADC_GetInjectedConversionValue(ADC1,ADC_InjectedChannel_1) & 0x0FFF);
 800298c:	2114      	movs	r1, #20
 800298e:	4630      	mov	r0, r6
 8002990:	f004 fce9 	bl	8007366 <ADC_GetInjectedConversionValue>
                  adc_count++;
 8002994:	3401      	adds	r4, #1
               }
               if (adc_count >= 50) {
 8002996:	2c31      	cmp	r4, #49	; 0x31
 8002998:	dd1a      	ble.n	80029d0 <main+0x188>
               	  sum_adc = 0;
	     	  ad_value = (ad_value * 330) / 4096;
		  volume = (ad_value * 255) / 330;
		  volume = abs(volume - 255) / 2;
		  */
		  if (volume != old_volume) {
 800299a:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <main+0x1d8>)
 800299c:	8829      	ldrh	r1, [r5, #0]
 800299e:	881a      	ldrh	r2, [r3, #0]
 80029a0:	b292      	uxth	r2, r2
 80029a2:	4291      	cmp	r1, r2
 80029a4:	d014      	beq.n	80029d0 <main+0x188>
		     old_volume = volume;
		     volume_flag = 1;
 80029a6:	f04f 0a01 	mov.w	sl, #1
		     old_volume = volume;
 80029aa:	881a      	ldrh	r2, [r3, #0]
					
			 
                     lcd_printf(2,1,"Volume %d ",255 - (volume + 127));
 80029ac:	4651      	mov	r1, sl
		     old_volume = volume;
 80029ae:	802a      	strh	r2, [r5, #0]
		     volume_flag = 1;
 80029b0:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <main+0x1dc>)
                     lcd_printf(2,1,"Volume %d ",255 - (volume + 127));
 80029b2:	2002      	movs	r0, #2
		     volume_flag = 1;
 80029b4:	f882 a000 	strb.w	sl, [r2]
                     lcd_printf(2,1,"Volume %d ",255 - (volume + 127));
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <main+0x1e0>)
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80029c2:	f001 fe31 	bl	8004628 <lcd_printf>
					 lcd_printf(2,1,"                   ");
 80029c6:	4651      	mov	r1, sl
 80029c8:	2002      	movs	r0, #2
 80029ca:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <main+0x1e4>)
 80029cc:	f001 fe2c 	bl	8004628 <lcd_printf>
                  }
	       }
               /* Clear the ADC1 JEOC pending flag */
               ADC_ClearFlag(ADC1, ADC_FLAG_JEOC);
 80029d0:	4630      	mov	r0, r6
 80029d2:	2104      	movs	r1, #4
 80029d4:	f004 fcda 	bl	800738c <ADC_ClearFlag>
               ADC_SoftwareStartInjectedConvCmd(ADC1,ENABLE);
 80029d8:	2101      	movs	r1, #1
 80029da:	4630      	mov	r0, r6
 80029dc:	f004 fc84 	bl	80072e8 <ADC_SoftwareStartInjectedConvCmd>
 80029e0:	e772      	b.n	80028c8 <main+0x80>
 80029e2:	bf00      	nop
 80029e4:	2000001c 	.word	0x2000001c
 80029e8:	e000ed00 	.word	0xe000ed00
 80029ec:	e000e010 	.word	0xe000e010
 80029f0:	20000af8 	.word	0x20000af8
 80029f4:	20000000 	.word	0x20000000
 80029f8:	05fa0004 	.word	0x05fa0004
 80029fc:	20000af4 	.word	0x20000af4
 8002a00:	20000ae4 	.word	0x20000ae4
 8002a04:	40012400 	.word	0x40012400
 8002a08:	20000ae8 	.word	0x20000ae8
 8002a0c:	20001214 	.word	0x20001214
 8002a10:	20001318 	.word	0x20001318
 8002a14:	2000100a 	.word	0x2000100a
 8002a18:	20000e04 	.word	0x20000e04
 8002a1c:	40011400 	.word	0x40011400
 8002a20:	20000002 	.word	0x20000002
 8002a24:	20000aea 	.word	0x20000aea
 8002a28:	0800d093 	.word	0x0800d093
 8002a2c:	0801246f 	.word	0x0801246f
 8002a30:	20000af2 	.word	0x20000af2
 8002a34:	20000af0 	.word	0x20000af0
 8002a38:	20000e05 	.word	0x20000e05
 8002a3c:	20000f08 	.word	0x20000f08

08002a40 <NVIC_SystemReset>:
      SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | SCB_AIRCR_SYSRESETREQ_Msk);	/* Keep priority group unchanged */
 8002a40:	4904      	ldr	r1, [pc, #16]	; (8002a54 <NVIC_SystemReset+0x14>)
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <NVIC_SystemReset+0x18>)
 8002a44:	68ca      	ldr	r2, [r1, #12]
 8002a46:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60cb      	str	r3, [r1, #12]
static inline void __DSB()                      { __asm volatile ("dsb"); }
 8002a4e:	f3bf 8f4f 	dsb	sy
      while(1);	/* wait until reset */
 8002a52:	e7fe      	b.n	8002a52 <NVIC_SystemReset+0x12>
 8002a54:	e000ed00 	.word	0xe000ed00
 8002a58:	05fa0004 	.word	0x05fa0004

08002a5c <flash_read>:
unsigned char USART1_PORT;
volatile unsigned int flash_para[64];


void flash_read (void)
{
 8002a5c:	b508      	push	{r3, lr}
      unsigned int idx,flash_address;
      FLASH_Unlock();
 8002a5e:	f004 fceb 	bl	8007438 <FLASH_Unlock>
      flash_address = (unsigned int)0x0807F800;
      for (idx=0;idx<64;idx++) {
 8002a62:	2300      	movs	r3, #0
          flash_para[idx] = (*(volatile unsigned int *)(flash_address + (idx * 4)));
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <flash_read+0x28>)
 8002a66:	009a      	lsls	r2, r3, #2
 8002a68:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
 8002a6c:	f502 22ff 	add.w	r2, r2, #522240	; 0x7f800
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (idx=0;idx<64;idx++) {
 8002a76:	3301      	adds	r3, #1
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d1f4      	bne.n	8002a66 <flash_read+0xa>
      }
      FLASH_Lock();
}
 8002a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      FLASH_Lock();
 8002a80:	f004 bce6 	b.w	8007450 <FLASH_Lock>
 8002a84:	20000d04 	.word	0x20000d04

08002a88 <USART1_IRQHandler>:


void USART1_IRQHandler (void)
{
 8002a88:	b510      	push	{r4, lr}
      if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 8002a8a:	f240 5125 	movw	r1, #1317	; 0x525
 8002a8e:	4830      	ldr	r0, [pc, #192]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002a90:	f004 ff10 	bl	80078b4 <USART_GetITStatus>
 8002a94:	b1c0      	cbz	r0, 8002ac8 <USART1_IRQHandler+0x40>
         /* Read one byte from the receive data register */
         rxbuff1[rxcnt1] = USART_ReceiveData(USART1);
 8002a96:	482e      	ldr	r0, [pc, #184]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002a98:	f004 ff08 	bl	80078ac <USART_ReceiveData>
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	; (8002b54 <USART1_IRQHandler+0xcc>)
 8002a9e:	492e      	ldr	r1, [pc, #184]	; (8002b58 <USART1_IRQHandler+0xd0>)
 8002aa0:	8813      	ldrh	r3, [r2, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	54c8      	strb	r0, [r1, r3]
         rxcnt1++;
 8002aa6:	8813      	ldrh	r3, [r2, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8013      	strh	r3, [r2, #0]
         rxck1 = 0;
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <USART1_IRQHandler+0xd4>)
 8002ab2:	701a      	strb	r2, [r3, #0]
         if (rxled == 0) rxled = 1;
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <USART1_IRQHandler+0xd8>)
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	b90a      	cbnz	r2, 8002abe <USART1_IRQHandler+0x36>
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
         USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8002abe:	f240 5125 	movw	r1, #1317	; 0x525
 8002ac2:	4823      	ldr	r0, [pc, #140]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002ac4:	f004 ff16 	bl	80078f4 <USART_ClearITPendingBit>
      }
      if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET) {
 8002ac8:	f240 7127 	movw	r1, #1831	; 0x727
 8002acc:	4820      	ldr	r0, [pc, #128]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002ace:	f004 fef1 	bl	80078b4 <USART_GetITStatus>
 8002ad2:	b1b8      	cbz	r0, 8002b04 <USART1_IRQHandler+0x7c>
         /* Write one byte to the transmit data register */
      	 if (txcnt1 < maxtx1) {
 8002ad4:	4c23      	ldr	r4, [pc, #140]	; (8002b64 <USART1_IRQHandler+0xdc>)
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <USART1_IRQHandler+0xe0>)
 8002ad8:	8822      	ldrh	r2, [r4, #0]
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b292      	uxth	r2, r2
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d228      	bcs.n	8002b36 <USART1_IRQHandler+0xae>
            USART_SendData(USART1, txbuff1[txcnt1]);
 8002ae4:	8823      	ldrh	r3, [r4, #0]
 8002ae6:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <USART1_IRQHandler+0xe4>)
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	5cd1      	ldrb	r1, [r2, r3]
 8002aec:	4818      	ldr	r0, [pc, #96]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002aee:	f004 fed9 	bl	80078a4 <USART_SendData>
      	    txcnt1++;
 8002af2:	8823      	ldrh	r3, [r4, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	8023      	strh	r3, [r4, #0]
      	 } else {
      	    /* Disable the USART1 Transmit interrupt */
      	    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
      	    USART_ITConfig(USART1, USART_IT_TC, ENABLE);
      	 }
      	 USART_ClearITPendingBit(USART1, USART_IT_TXE);
 8002afa:	f240 7127 	movw	r1, #1831	; 0x727
 8002afe:	4814      	ldr	r0, [pc, #80]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002b00:	f004 fef8 	bl	80078f4 <USART_ClearITPendingBit>
      }
      if (USART_GetITStatus(USART1, USART_IT_TC) != RESET) {
 8002b04:	f240 6126 	movw	r1, #1574	; 0x626
 8002b08:	4811      	ldr	r0, [pc, #68]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002b0a:	f004 fed3 	bl	80078b4 <USART_GetITStatus>
 8002b0e:	b188      	cbz	r0, 8002b34 <USART1_IRQHandler+0xac>
      	 USART_ITConfig(USART1, USART_IT_TC, DISABLE);
 8002b10:	2200      	movs	r2, #0
 8002b12:	f240 6126 	movw	r1, #1574	; 0x626
 8002b16:	480e      	ldr	r0, [pc, #56]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002b18:	f004 feac 	bl	8007874 <USART_ITConfig>
      	 USART_ClearITPendingBit(USART1, USART_IT_TC);
 8002b1c:	f240 6126 	movw	r1, #1574	; 0x626
 8002b20:	480b      	ldr	r0, [pc, #44]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002b22:	f004 fee7 	bl	80078f4 <USART_ClearITPendingBit>
         tx_flag1 = 0;
 8002b26:	2200      	movs	r2, #0
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <USART1_IRQHandler+0xe8>)
 8002b2a:	701a      	strb	r2, [r3, #0]
         if (txled) txled = 0;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <USART1_IRQHandler+0xec>)
 8002b2e:	7819      	ldrb	r1, [r3, #0]
 8002b30:	b101      	cbz	r1, 8002b34 <USART1_IRQHandler+0xac>
 8002b32:	701a      	strb	r2, [r3, #0]
      }
}
 8002b34:	bd10      	pop	{r4, pc}
      	    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8002b36:	2200      	movs	r2, #0
 8002b38:	f240 7127 	movw	r1, #1831	; 0x727
 8002b3c:	4804      	ldr	r0, [pc, #16]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002b3e:	f004 fe99 	bl	8007874 <USART_ITConfig>
      	    USART_ITConfig(USART1, USART_IT_TC, ENABLE);
 8002b42:	2201      	movs	r2, #1
 8002b44:	f240 6126 	movw	r1, #1574	; 0x626
 8002b48:	4801      	ldr	r0, [pc, #4]	; (8002b50 <USART1_IRQHandler+0xc8>)
 8002b4a:	f004 fe93 	bl	8007874 <USART_ITConfig>
 8002b4e:	e7d4      	b.n	8002afa <USART1_IRQHandler+0x72>
 8002b50:	40013800 	.word	0x40013800
 8002b54:	20001214 	.word	0x20001214
 8002b58:	20001112 	.word	0x20001112
 8002b5c:	20001318 	.word	0x20001318
 8002b60:	20000f08 	.word	0x20000f08
 8002b64:	20000f06 	.word	0x20000f06
 8002b68:	2000100c 	.word	0x2000100c
 8002b6c:	20000f09 	.word	0x20000f09
 8002b70:	2000100e 	.word	0x2000100e
 8002b74:	20000e05 	.word	0x20000e05

08002b78 <USART2_IRQHandler>:


void USART2_IRQHandler (void)
{
 8002b78:	b510      	push	{r4, lr}
      if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
 8002b7a:	f240 5125 	movw	r1, #1317	; 0x525
 8002b7e:	4830      	ldr	r0, [pc, #192]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002b80:	f004 fe98 	bl	80078b4 <USART_GetITStatus>
 8002b84:	b1c0      	cbz	r0, 8002bb8 <USART2_IRQHandler+0x40>
         /* Read one byte from the receive data register */
         rxbuff2[rxcnt2] = USART_ReceiveData(USART2);
 8002b86:	482e      	ldr	r0, [pc, #184]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002b88:	f004 fe90 	bl	80078ac <USART_ReceiveData>
 8002b8c:	4a2d      	ldr	r2, [pc, #180]	; (8002c44 <USART2_IRQHandler+0xcc>)
 8002b8e:	492e      	ldr	r1, [pc, #184]	; (8002c48 <USART2_IRQHandler+0xd0>)
 8002b90:	8813      	ldrh	r3, [r2, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	54c8      	strb	r0, [r1, r3]
         rxcnt2++;
 8002b96:	8813      	ldrh	r3, [r2, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8013      	strh	r3, [r2, #0]
         rxck2 = 0;
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <USART2_IRQHandler+0xd4>)
 8002ba2:	701a      	strb	r2, [r3, #0]
         if (rxled == 0) rxled = 1;
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <USART2_IRQHandler+0xd8>)
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	b90a      	cbnz	r2, 8002bae <USART2_IRQHandler+0x36>
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
         USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8002bae:	f240 5125 	movw	r1, #1317	; 0x525
 8002bb2:	4823      	ldr	r0, [pc, #140]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002bb4:	f004 fe9e 	bl	80078f4 <USART_ClearITPendingBit>
      }
      if (USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
 8002bb8:	f240 7127 	movw	r1, #1831	; 0x727
 8002bbc:	4820      	ldr	r0, [pc, #128]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002bbe:	f004 fe79 	bl	80078b4 <USART_GetITStatus>
 8002bc2:	b1b8      	cbz	r0, 8002bf4 <USART2_IRQHandler+0x7c>
         /* Write one byte to the transmit data register */
      	 if (txcnt2 < maxtx2) {
 8002bc4:	4c23      	ldr	r4, [pc, #140]	; (8002c54 <USART2_IRQHandler+0xdc>)
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <USART2_IRQHandler+0xe0>)
 8002bc8:	8822      	ldrh	r2, [r4, #0]
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d228      	bcs.n	8002c26 <USART2_IRQHandler+0xae>
            USART_SendData(USART2, txbuff2[txcnt2]);
 8002bd4:	8823      	ldrh	r3, [r4, #0]
 8002bd6:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <USART2_IRQHandler+0xe4>)
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	5cd1      	ldrb	r1, [r2, r3]
 8002bdc:	4818      	ldr	r0, [pc, #96]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002bde:	f004 fe61 	bl	80078a4 <USART_SendData>
      	    txcnt2++;
 8002be2:	8823      	ldrh	r3, [r4, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	8023      	strh	r3, [r4, #0]
      	 } else {
      	    /* Disable the USART2 Transmit interrupt */
      	    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
      	    USART_ITConfig(USART2, USART_IT_TC, ENABLE);
      	 }
      	 USART_ClearITPendingBit(USART2, USART_IT_TXE);
 8002bea:	f240 7127 	movw	r1, #1831	; 0x727
 8002bee:	4814      	ldr	r0, [pc, #80]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002bf0:	f004 fe80 	bl	80078f4 <USART_ClearITPendingBit>
      }
      if (USART_GetITStatus(USART2, USART_IT_TC) != RESET) {
 8002bf4:	f240 6126 	movw	r1, #1574	; 0x626
 8002bf8:	4811      	ldr	r0, [pc, #68]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002bfa:	f004 fe5b 	bl	80078b4 <USART_GetITStatus>
 8002bfe:	b188      	cbz	r0, 8002c24 <USART2_IRQHandler+0xac>
      	 USART_ITConfig(USART2, USART_IT_TC, DISABLE);
 8002c00:	2200      	movs	r2, #0
 8002c02:	f240 6126 	movw	r1, #1574	; 0x626
 8002c06:	480e      	ldr	r0, [pc, #56]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002c08:	f004 fe34 	bl	8007874 <USART_ITConfig>
      	 USART_ClearITPendingBit(USART2, USART_IT_TC);
 8002c0c:	f240 6126 	movw	r1, #1574	; 0x626
 8002c10:	480b      	ldr	r0, [pc, #44]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002c12:	f004 fe6f 	bl	80078f4 <USART_ClearITPendingBit>
         tx_flag2 = 0;
 8002c16:	2200      	movs	r2, #0
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <USART2_IRQHandler+0xe8>)
 8002c1a:	701a      	strb	r2, [r3, #0]
         if (txled) txled = 0;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <USART2_IRQHandler+0xec>)
 8002c1e:	7819      	ldrb	r1, [r3, #0]
 8002c20:	b101      	cbz	r1, 8002c24 <USART2_IRQHandler+0xac>
 8002c22:	701a      	strb	r2, [r3, #0]
      }
}
 8002c24:	bd10      	pop	{r4, pc}
      	    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8002c26:	2200      	movs	r2, #0
 8002c28:	f240 7127 	movw	r1, #1831	; 0x727
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002c2e:	f004 fe21 	bl	8007874 <USART_ITConfig>
      	    USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 8002c32:	2201      	movs	r2, #1
 8002c34:	f240 6126 	movw	r1, #1574	; 0x626
 8002c38:	4801      	ldr	r0, [pc, #4]	; (8002c40 <USART2_IRQHandler+0xc8>)
 8002c3a:	f004 fe1b 	bl	8007874 <USART_ITConfig>
 8002c3e:	e7d4      	b.n	8002bea <USART2_IRQHandler+0x72>
 8002c40:	40004400 	.word	0x40004400
 8002c44:	2000100a 	.word	0x2000100a
 8002c48:	20001216 	.word	0x20001216
 8002c4c:	20000e04 	.word	0x20000e04
 8002c50:	20000f08 	.word	0x20000f08
 8002c54:	20001212 	.word	0x20001212
 8002c58:	20001110 	.word	0x20001110
 8002c5c:	20000e06 	.word	0x20000e06
 8002c60:	20001316 	.word	0x20001316
 8002c64:	20000e05 	.word	0x20000e05

08002c68 <uasrt_send>:


void uasrt_send (USART_TypeDef *USARTx,char *buff,int length)
{
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (USARTx == USART1) {
 8002c6a:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <uasrt_send+0x94>)
{
 8002c6c:	460d      	mov	r5, r1
      if (USARTx == USART1) {
 8002c6e:	4298      	cmp	r0, r3
{
 8002c70:	4614      	mov	r4, r2
      if (USARTx == USART1) {
 8002c72:	d122      	bne.n	8002cba <uasrt_send+0x52>
      	 while (tx_flag1);
 8002c74:	4e22      	ldr	r6, [pc, #136]	; (8002d00 <uasrt_send+0x98>)
 8002c76:	7833      	ldrb	r3, [r6, #0]
 8002c78:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1fa      	bne.n	8002c76 <uasrt_send+0xe>
         bzero(txbuff1,256);
 8002c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c84:	4639      	mov	r1, r7
 8002c86:	481f      	ldr	r0, [pc, #124]	; (8002d04 <uasrt_send+0x9c>)
 8002c88:	f005 f976 	bl	8007f78 <memset>
         memcpy(txbuff1,buff,length);
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	4629      	mov	r1, r5
 8002c90:	481c      	ldr	r0, [pc, #112]	; (8002d04 <uasrt_send+0x9c>)
 8002c92:	f005 f8fb 	bl	8007e8c <memcpy>
         maxtx1 = length;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <uasrt_send+0xa0>)
 8002c98:	b2a4      	uxth	r4, r4
 8002c9a:	801c      	strh	r4, [r3, #0]
         txcnt1 = 0;
         tx_flag1 = 1;
 8002c9c:	2401      	movs	r4, #1
         USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 8002c9e:	f240 7127 	movw	r1, #1831	; 0x727
 8002ca2:	4622      	mov	r2, r4
         txcnt1 = 0;
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <uasrt_send+0xa4>)
         USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 8002ca6:	4815      	ldr	r0, [pc, #84]	; (8002cfc <uasrt_send+0x94>)
         txcnt1 = 0;
 8002ca8:	801f      	strh	r7, [r3, #0]
         tx_flag1 = 1;
 8002caa:	7034      	strb	r4, [r6, #0]
         bzero(txbuff2,256);
         memcpy(txbuff2,buff,length);
         maxtx2 = length;
         txcnt2 = 0;
         tx_flag2 = 1;
         USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 8002cac:	f004 fde2 	bl	8007874 <USART_ITConfig>
         if (txled == 0) txled = 1;
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <uasrt_send+0xa8>)
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	b902      	cbnz	r2, 8002cb8 <uasrt_send+0x50>
 8002cb6:	701c      	strb	r4, [r3, #0]
      }
}
 8002cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (USARTx == USART2) {
 8002cba:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <uasrt_send+0xac>)
 8002cbc:	4298      	cmp	r0, r3
 8002cbe:	d1fb      	bne.n	8002cb8 <uasrt_send+0x50>
         while (tx_flag2);
 8002cc0:	4e15      	ldr	r6, [pc, #84]	; (8002d18 <uasrt_send+0xb0>)
 8002cc2:	7833      	ldrb	r3, [r6, #0]
 8002cc4:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1fa      	bne.n	8002cc2 <uasrt_send+0x5a>
         bzero(txbuff2,256);
 8002ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd0:	4639      	mov	r1, r7
 8002cd2:	4812      	ldr	r0, [pc, #72]	; (8002d1c <uasrt_send+0xb4>)
 8002cd4:	f005 f950 	bl	8007f78 <memset>
         memcpy(txbuff2,buff,length);
 8002cd8:	4622      	mov	r2, r4
 8002cda:	4629      	mov	r1, r5
 8002cdc:	480f      	ldr	r0, [pc, #60]	; (8002d1c <uasrt_send+0xb4>)
 8002cde:	f005 f8d5 	bl	8007e8c <memcpy>
         maxtx2 = length;
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <uasrt_send+0xb8>)
 8002ce4:	b2a4      	uxth	r4, r4
 8002ce6:	801c      	strh	r4, [r3, #0]
         tx_flag2 = 1;
 8002ce8:	2401      	movs	r4, #1
         txcnt2 = 0;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <uasrt_send+0xbc>)
         USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 8002cec:	4622      	mov	r2, r4
         txcnt2 = 0;
 8002cee:	801f      	strh	r7, [r3, #0]
         USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 8002cf0:	f240 7127 	movw	r1, #1831	; 0x727
 8002cf4:	4807      	ldr	r0, [pc, #28]	; (8002d14 <uasrt_send+0xac>)
         tx_flag2 = 1;
 8002cf6:	7034      	strb	r4, [r6, #0]
         USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 8002cf8:	e7d8      	b.n	8002cac <uasrt_send+0x44>
 8002cfa:	bf00      	nop
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	2000100e 	.word	0x2000100e
 8002d04:	20000f09 	.word	0x20000f09
 8002d08:	2000100c 	.word	0x2000100c
 8002d0c:	20000f06 	.word	0x20000f06
 8002d10:	20000e05 	.word	0x20000e05
 8002d14:	40004400 	.word	0x40004400
 8002d18:	20001316 	.word	0x20001316
 8002d1c:	20000e06 	.word	0x20000e06
 8002d20:	20001110 	.word	0x20001110
 8002d24:	20001212 	.word	0x20001212

08002d28 <s_printf>:
      return 0;
}


void s_printf (USART_TypeDef *USARTx,char *form,...)
{
 8002d28:	b40e      	push	{r1, r2, r3}
 8002d2a:	b533      	push	{r0, r1, r4, r5, lr}
      va_list argptr;
      va_start(argptr,form);
      vsprintf(sbuff,form,argptr);
 8002d2c:	4d0a      	ldr	r5, [pc, #40]	; (8002d58 <s_printf+0x30>)
{
 8002d2e:	aa05      	add	r2, sp, #20
 8002d30:	f852 1b04 	ldr.w	r1, [r2], #4
 8002d34:	4604      	mov	r4, r0
      vsprintf(sbuff,form,argptr);
 8002d36:	4628      	mov	r0, r5
      va_start(argptr,form);
 8002d38:	9201      	str	r2, [sp, #4]
      vsprintf(sbuff,form,argptr);
 8002d3a:	f005 fa99 	bl	8008270 <vsprintf>
      uasrt_send(USARTx,sbuff,strlen(sbuff));
 8002d3e:	4628      	mov	r0, r5
 8002d40:	f005 fa54 	bl	80081ec <strlen>
 8002d44:	4629      	mov	r1, r5
 8002d46:	4602      	mov	r2, r0
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f7ff ff8d 	bl	8002c68 <uasrt_send>
      va_end(argptr);
}
 8002d4e:	b002      	add	sp, #8
 8002d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d54:	b003      	add	sp, #12
 8002d56:	4770      	bx	lr
 8002d58:	2000100f 	.word	0x2000100f

08002d5c <receive_serial1>:

void receive_serial1 (void)
{
      unsigned short idx;
      unsigned char bcc;
      if (rxcnt1) {
 8002d5c:	491b      	ldr	r1, [pc, #108]	; (8002dcc <receive_serial1+0x70>)
{
 8002d5e:	b570      	push	{r4, r5, r6, lr}
      if (rxcnt1) {
 8002d60:	880b      	ldrh	r3, [r1, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	b34b      	cbz	r3, 8002dba <receive_serial1+0x5e>
         if ((rxbuff1[0] == STX) && (rxbuff1[5] == ETX) && ((rxbuff1[1] == this_id) || (rxbuff1[1] == 33))) {
 8002d66:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <receive_serial1+0x74>)
 8002d68:	7813      	ldrb	r3, [r2, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d12b      	bne.n	8002dc6 <receive_serial1+0x6a>
 8002d6e:	7953      	ldrb	r3, [r2, #5]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d128      	bne.n	8002dc6 <receive_serial1+0x6a>
 8002d74:	4817      	ldr	r0, [pc, #92]	; (8002dd4 <receive_serial1+0x78>)
 8002d76:	7853      	ldrb	r3, [r2, #1]
 8002d78:	7800      	ldrb	r0, [r0, #0]
 8002d7a:	4283      	cmp	r3, r0
 8002d7c:	d001      	beq.n	8002d82 <receive_serial1+0x26>
 8002d7e:	2b21      	cmp	r3, #33	; 0x21
 8002d80:	d121      	bne.n	8002dc6 <receive_serial1+0x6a>
	    bcc = rxbuff1[0];
	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff1[idx];
 8002d82:	7894      	ldrb	r4, [r2, #2]
 8002d84:	78d5      	ldrb	r5, [r2, #3]
 8002d86:	f083 0302 	eor.w	r3, r3, #2
 8002d8a:	7910      	ldrb	r0, [r2, #4]
 8002d8c:	4063      	eors	r3, r4
 8002d8e:	406b      	eors	r3, r5
            if (bcc == rxbuff1[6]) {
 8002d90:	7996      	ldrb	r6, [r2, #6]
	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff1[idx];
 8002d92:	4043      	eors	r3, r0
            if (bcc == rxbuff1[6]) {
 8002d94:	f083 0303 	eor.w	r3, r3, #3
 8002d98:	429e      	cmp	r6, r3
 8002d9a:	d114      	bne.n	8002dc6 <receive_serial1+0x6a>
	       if ((rxbuff1[2] == 0xFF) && (rxbuff1[3] == 0xFF) && (rxbuff1[4] == 0xFF)) {
 8002d9c:	402c      	ands	r4, r5
 8002d9e:	4020      	ands	r0, r4
 8002da0:	28ff      	cmp	r0, #255	; 0xff
 8002da2:	d110      	bne.n	8002dc6 <receive_serial1+0x6a>
	       	  NVIC_SystemReset();
 8002da4:	f7ff fe4c 	bl	8002a40 <NVIC_SystemReset>
	       }
	    }
         }
         for (idx=0;idx<rxcnt1;idx++) {
      	     rxbuff1[idx] = 0;
 8002da8:	b298      	uxth	r0, r3
 8002daa:	5414      	strb	r4, [r2, r0]
         for (idx=0;idx<rxcnt1;idx++) {
 8002dac:	3301      	adds	r3, #1
 8002dae:	8808      	ldrh	r0, [r1, #0]
 8002db0:	b29d      	uxth	r5, r3
 8002db2:	b280      	uxth	r0, r0
 8002db4:	42a8      	cmp	r0, r5
 8002db6:	d8f7      	bhi.n	8002da8 <receive_serial1+0x4c>
      	 }
         rxcnt1 = 0;
 8002db8:	800c      	strh	r4, [r1, #0]
      }
      if (rxled) rxled = 0;
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <receive_serial1+0x7c>)
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	b10a      	cbz	r2, 8002dc4 <receive_serial1+0x68>
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
}
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2400      	movs	r4, #0
 8002dca:	e7f0      	b.n	8002dae <receive_serial1+0x52>
 8002dcc:	20001214 	.word	0x20001214
 8002dd0:	20001112 	.word	0x20001112
 8002dd4:	20001317 	.word	0x20001317
 8002dd8:	20000f08 	.word	0x20000f08

08002ddc <receive_serial2>:

void receive_serial2 (void)
{
      unsigned short idx;
      unsigned char bcc;
      if (rxcnt2) {
 8002ddc:	491b      	ldr	r1, [pc, #108]	; (8002e4c <receive_serial2+0x70>)
{
 8002dde:	b570      	push	{r4, r5, r6, lr}
      if (rxcnt2) {
 8002de0:	880b      	ldrh	r3, [r1, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	b34b      	cbz	r3, 8002e3a <receive_serial2+0x5e>
         if ((rxbuff2[0] == STX) && (rxbuff2[5] == ETX) && ((rxbuff2[1] == this_id) || (rxbuff2[1] == 33))) {
 8002de6:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <receive_serial2+0x74>)
 8002de8:	7813      	ldrb	r3, [r2, #0]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d12b      	bne.n	8002e46 <receive_serial2+0x6a>
 8002dee:	7953      	ldrb	r3, [r2, #5]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d128      	bne.n	8002e46 <receive_serial2+0x6a>
 8002df4:	4817      	ldr	r0, [pc, #92]	; (8002e54 <receive_serial2+0x78>)
 8002df6:	7853      	ldrb	r3, [r2, #1]
 8002df8:	7800      	ldrb	r0, [r0, #0]
 8002dfa:	4283      	cmp	r3, r0
 8002dfc:	d001      	beq.n	8002e02 <receive_serial2+0x26>
 8002dfe:	2b21      	cmp	r3, #33	; 0x21
 8002e00:	d121      	bne.n	8002e46 <receive_serial2+0x6a>
	    bcc = rxbuff2[0];
	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff2[idx];
 8002e02:	7894      	ldrb	r4, [r2, #2]
 8002e04:	78d5      	ldrb	r5, [r2, #3]
 8002e06:	f083 0302 	eor.w	r3, r3, #2
 8002e0a:	7910      	ldrb	r0, [r2, #4]
 8002e0c:	4063      	eors	r3, r4
 8002e0e:	406b      	eors	r3, r5
            if (bcc == rxbuff2[6]) {
 8002e10:	7996      	ldrb	r6, [r2, #6]
	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff2[idx];
 8002e12:	4043      	eors	r3, r0
            if (bcc == rxbuff2[6]) {
 8002e14:	f083 0303 	eor.w	r3, r3, #3
 8002e18:	429e      	cmp	r6, r3
 8002e1a:	d114      	bne.n	8002e46 <receive_serial2+0x6a>
	       if ((rxbuff2[2] == 0xFF) && (rxbuff2[3] == 0xFF) && (rxbuff2[4] == 0xFF)) {
 8002e1c:	402c      	ands	r4, r5
 8002e1e:	4020      	ands	r0, r4
 8002e20:	28ff      	cmp	r0, #255	; 0xff
 8002e22:	d110      	bne.n	8002e46 <receive_serial2+0x6a>
	       	  NVIC_SystemReset();
 8002e24:	f7ff fe0c 	bl	8002a40 <NVIC_SystemReset>
	       }
	    }
         }
         for (idx=0;idx<rxcnt2;idx++) {
      	     rxbuff2[idx] = 0;
 8002e28:	b298      	uxth	r0, r3
 8002e2a:	5414      	strb	r4, [r2, r0]
         for (idx=0;idx<rxcnt2;idx++) {
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	8808      	ldrh	r0, [r1, #0]
 8002e30:	b29d      	uxth	r5, r3
 8002e32:	b280      	uxth	r0, r0
 8002e34:	42a8      	cmp	r0, r5
 8002e36:	d8f7      	bhi.n	8002e28 <receive_serial2+0x4c>
      	 }
         rxcnt2 = 0;
 8002e38:	800c      	strh	r4, [r1, #0]
      }
      if (rxled) rxled = 0;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <receive_serial2+0x7c>)
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	b10a      	cbz	r2, 8002e44 <receive_serial2+0x68>
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
}
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
 8002e46:	2300      	movs	r3, #0
 8002e48:	2400      	movs	r4, #0
 8002e4a:	e7f0      	b.n	8002e2e <receive_serial2+0x52>
 8002e4c:	2000100a 	.word	0x2000100a
 8002e50:	20001216 	.word	0x20001216
 8002e54:	20001317 	.word	0x20001317
 8002e58:	20000f08 	.word	0x20000f08

08002e5c <serial_init>:


void serial_init (void)
{
 8002e5c:	b570      	push	{r4, r5, r6, lr}
      USART_InitTypeDef	USART_InitStructure;
      NVIC_InitTypeDef NVIC_InitStructure;
      USART1_PORT = 0;
 8002e5e:	2400      	movs	r4, #0
      rxcnt1 = 0;
 8002e60:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <serial_init+0x124>)
      tx_flag2 = 0;
      /* Enable the USART1 Interrupt */
      NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002e62:	2501      	movs	r5, #1
      rxcnt1 = 0;
 8002e64:	801c      	strh	r4, [r3, #0]
      txcnt1 = 0;
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <serial_init+0x128>)
{
 8002e68:	b086      	sub	sp, #24
      txcnt1 = 0;
 8002e6a:	801c      	strh	r4, [r3, #0]
      maxtx1 = 0;
 8002e6c:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <serial_init+0x12c>)
      USART1_PORT = 0;
 8002e6e:	4e47      	ldr	r6, [pc, #284]	; (8002f8c <serial_init+0x130>)
      maxtx1 = 0;
 8002e70:	801c      	strh	r4, [r3, #0]
      tx_flag1 = 0;
 8002e72:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <serial_init+0x134>)
      NVIC_Init(&NVIC_InitStructure);
 8002e74:	4668      	mov	r0, sp
      tx_flag1 = 0;
 8002e76:	701c      	strb	r4, [r3, #0]
      rxcnt2 = 0;
 8002e78:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <serial_init+0x138>)
      USART1_PORT = 0;
 8002e7a:	7034      	strb	r4, [r6, #0]
      rxcnt2 = 0;
 8002e7c:	801c      	strh	r4, [r3, #0]
      txcnt2 = 0;
 8002e7e:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <serial_init+0x13c>)
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002e80:	f88d 4002 	strb.w	r4, [sp, #2]
      txcnt2 = 0;
 8002e84:	801c      	strh	r4, [r3, #0]
      maxtx2 = 0;
 8002e86:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <serial_init+0x140>)
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002e88:	9501      	str	r5, [sp, #4]
      maxtx2 = 0;
 8002e8a:	801c      	strh	r4, [r3, #0]
      tx_flag2 = 0;
 8002e8c:	4b44      	ldr	r3, [pc, #272]	; (8002fa0 <serial_init+0x144>)
 8002e8e:	701c      	strb	r4, [r3, #0]
      NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8002e90:	f240 2325 	movw	r3, #549	; 0x225
 8002e94:	f8ad 3000 	strh.w	r3, [sp]
      NVIC_Init(&NVIC_InitStructure);
 8002e98:	f004 f8f2 	bl	8007080 <NVIC_Init>
      /* Enable the USART2 Interrupt */
      NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8002e9c:	f240 2326 	movw	r3, #550	; 0x226
      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
      NVIC_Init(&NVIC_InitStructure);
 8002ea0:	4668      	mov	r0, sp
      NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8002ea2:	f8ad 3000 	strh.w	r3, [sp]
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002ea6:	f88d 4002 	strb.w	r4, [sp, #2]
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002eaa:	9501      	str	r5, [sp, #4]
      NVIC_Init(&NVIC_InitStructure);
 8002eac:	f004 f8e8 	bl	8007080 <NVIC_Init>
      if (USART1_PORT == 0) {
 8002eb0:	7833      	ldrb	r3, [r6, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d154      	bne.n	8002f60 <serial_init+0x104>
         /* Configure USART1 TX (PA9) as push-pull */
         GPIO_Init_Pin(GPIOA,GPIO_Pin_9,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
 8002eb6:	2318      	movs	r3, #24
 8002eb8:	2203      	movs	r2, #3
 8002eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ebe:	4839      	ldr	r0, [pc, #228]	; (8002fa4 <serial_init+0x148>)
 8002ec0:	f004 fb80 	bl	80075c4 <GPIO_Init_Pin>
         /* Configure USART1 RX (PA10) as input floating */
         GPIO_Init_Pin(GPIOA,GPIO_Pin_10,GPIO_Speed_50MHz,GPIO_Mode_IN_FLOATING);
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ecc:	4835      	ldr	r0, [pc, #212]	; (8002fa4 <serial_init+0x148>)
      } else {
         GPIO_PinRemapConfig(GPIO_Remap_USART1,ENABLE);
         /* Configure USART1 TX (PB6) as push-pull */
         GPIO_Init_Pin(GPIOB,GPIO_Pin_6,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
         /* Configure USART1 RX (PB7) as input floating */
         GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_50MHz,GPIO_Mode_IN_FLOATING);
 8002ece:	f004 fb79 	bl	80075c4 <GPIO_Init_Pin>
      }
      /* Configure USART2 TX (PA2) as push-pull */
      GPIO_Init_Pin(GPIOA,GPIO_Pin_2,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
 8002ed2:	2318      	movs	r3, #24
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	4832      	ldr	r0, [pc, #200]	; (8002fa4 <serial_init+0x148>)
 8002eda:	f004 fb73 	bl	80075c4 <GPIO_Init_Pin>
      /* Configure USART2 RX (PA3) as input floating */
      GPIO_Init_Pin(GPIOA,GPIO_Pin_3,GPIO_Speed_50MHz,GPIO_Mode_IN_FLOATING);
 8002ede:	2304      	movs	r3, #4
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	2108      	movs	r1, #8
 8002ee4:	482f      	ldr	r0, [pc, #188]	; (8002fa4 <serial_init+0x148>)
 8002ee6:	f004 fb6d 	bl	80075c4 <GPIO_Init_Pin>
      USART_InitStructure.USART_BaudRate = 9600;
      USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
      USART_InitStructure.USART_StopBits = USART_StopBits_1;
      USART_InitStructure.USART_Parity = USART_Parity_No;
 8002ef4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
      USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      /* Configure USART1 */
      USART_Init(USART1, &USART_InitStructure);
 8002ef8:	482b      	ldr	r0, [pc, #172]	; (8002fa8 <serial_init+0x14c>)
 8002efa:	a902      	add	r1, sp, #8
      USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002efc:	f8ad 3014 	strh.w	r3, [sp, #20]
      USART_InitStructure.USART_Parity = USART_Parity_No;
 8002f00:	9204      	str	r2, [sp, #16]
      USART_Init(USART1, &USART_InitStructure);
 8002f02:	f004 fc55 	bl	80077b0 <USART_Init>
      /* Configure USART2 */
      USART_Init(USART2, &USART_InitStructure);
 8002f06:	4829      	ldr	r0, [pc, #164]	; (8002fac <serial_init+0x150>)
 8002f08:	a902      	add	r1, sp, #8
 8002f0a:	f004 fc51 	bl	80077b0 <USART_Init>
      /* Enable USART1 Receive and Transmit interrupts */
      USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f240 5125 	movw	r1, #1317	; 0x525
 8002f14:	4824      	ldr	r0, [pc, #144]	; (8002fa8 <serial_init+0x14c>)
 8002f16:	f004 fcad 	bl	8007874 <USART_ITConfig>
      /* Enable USART2 Receive and Transmit interrupts */
      USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f240 5125 	movw	r1, #1317	; 0x525
 8002f20:	4822      	ldr	r0, [pc, #136]	; (8002fac <serial_init+0x150>)
 8002f22:	f004 fca7 	bl	8007874 <USART_ITConfig>
      /* Enable the USART1 */
      USART_Cmd(USART1, ENABLE);
 8002f26:	2101      	movs	r1, #1
 8002f28:	481f      	ldr	r0, [pc, #124]	; (8002fa8 <serial_init+0x14c>)
 8002f2a:	f004 fc97 	bl	800785c <USART_Cmd>
      /* Enable the USART2 */
      USART_Cmd(USART2, ENABLE);
 8002f2e:	2101      	movs	r1, #1
 8002f30:	481e      	ldr	r0, [pc, #120]	; (8002fac <serial_init+0x150>)
 8002f32:	f004 fc93 	bl	800785c <USART_Cmd>
      flash_read();
 8002f36:	f7ff fd91 	bl	8002a5c <flash_read>
      if (flash_para[0] == 0x68050555) {
 8002f3a:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <serial_init+0x154>)
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <serial_init+0x158>)
 8002f3e:	6811      	ldr	r1, [r2, #0]
 8002f40:	4299      	cmp	r1, r3
         this_id = flash_para[1];
 8002f42:	bf08      	it	eq
 8002f44:	6852      	ldreq	r2, [r2, #4]
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <serial_init+0x15c>)
 8002f48:	bf04      	itt	eq
 8002f4a:	b2d2      	uxtbeq	r2, r2
 8002f4c:	701a      	strbeq	r2, [r3, #0]
      }
      if ((this_id == 0) || (this_id > 32)) this_id = 1;
 8002f4e:	781a      	ldrb	r2, [r3, #0]
 8002f50:	b112      	cbz	r2, 8002f58 <serial_init+0xfc>
 8002f52:	781a      	ldrb	r2, [r3, #0]
 8002f54:	2a20      	cmp	r2, #32
 8002f56:	d901      	bls.n	8002f5c <serial_init+0x100>
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	b006      	add	sp, #24
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
         GPIO_PinRemapConfig(GPIO_Remap_USART1,ENABLE);
 8002f60:	4629      	mov	r1, r5
 8002f62:	2004      	movs	r0, #4
 8002f64:	f004 fb82 	bl	800766c <GPIO_PinRemapConfig>
         GPIO_Init_Pin(GPIOB,GPIO_Pin_6,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
 8002f68:	2318      	movs	r3, #24
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	4813      	ldr	r0, [pc, #76]	; (8002fbc <serial_init+0x160>)
 8002f70:	f004 fb28 	bl	80075c4 <GPIO_Init_Pin>
         GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_50MHz,GPIO_Mode_IN_FLOATING);
 8002f74:	2304      	movs	r3, #4
 8002f76:	2203      	movs	r2, #3
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	4810      	ldr	r0, [pc, #64]	; (8002fbc <serial_init+0x160>)
 8002f7c:	e7a7      	b.n	8002ece <serial_init+0x72>
 8002f7e:	bf00      	nop
 8002f80:	20001214 	.word	0x20001214
 8002f84:	20000f06 	.word	0x20000f06
 8002f88:	2000100c 	.word	0x2000100c
 8002f8c:	20001009 	.word	0x20001009
 8002f90:	2000100e 	.word	0x2000100e
 8002f94:	2000100a 	.word	0x2000100a
 8002f98:	20001212 	.word	0x20001212
 8002f9c:	20001110 	.word	0x20001110
 8002fa0:	20001316 	.word	0x20001316
 8002fa4:	40010800 	.word	0x40010800
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	40004400 	.word	0x40004400
 8002fb0:	20000d04 	.word	0x20000d04
 8002fb4:	68050555 	.word	0x68050555
 8002fb8:	20001317 	.word	0x20001317
 8002fbc:	40010c00 	.word	0x40010c00

08002fc0 <lcd_data_port_input>:



void lcd_data_port_input (void)
{
      LCD_DATA_PORT->CRL = 0X88888888;
 8002fc0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <lcd_data_port_input+0x14>)
 8002fc6:	601a      	str	r2, [r3, #0]
      LCD_DATA_PORT->CRH = 0X88888888;
 8002fc8:	605a      	str	r2, [r3, #4]
      LCD_DATA_PORT->ODR = 0XFFFF;
 8002fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fce:	60da      	str	r2, [r3, #12]
}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40011800 	.word	0x40011800

08002fd8 <lcd_data_port_output>:


void lcd_data_port_output (void)
{
      LCD_DATA_PORT->CRL = 0X33333333;
 8002fd8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <lcd_data_port_output+0x14>)
 8002fde:	601a      	str	r2, [r3, #0]
      LCD_DATA_PORT->CRH = 0X33333333;
 8002fe0:	605a      	str	r2, [r3, #4]
      LCD_DATA_PORT->ODR = 0XFFFF;
 8002fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fe6:	60da      	str	r2, [r3, #12]
}
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40011800 	.word	0x40011800

08002ff0 <lcd_cs_hi>:
}


void lcd_cs_hi (void)
{
      GPIO_SetBits(LCD_CTL_PORT,LCD_CS);
 8002ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <lcd_cs_hi+0xc>)
 8002ff6:	f004 bb35 	b.w	8007664 <GPIO_SetBits>
 8002ffa:	bf00      	nop
 8002ffc:	40011400 	.word	0x40011400

08003000 <lcd_cs_lo>:
}


void lcd_cs_lo (void)
{
      GPIO_ResetBits(LCD_CTL_PORT,LCD_CS);
 8003000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003004:	4801      	ldr	r0, [pc, #4]	; (800300c <lcd_cs_lo+0xc>)
 8003006:	f004 bb2f 	b.w	8007668 <GPIO_ResetBits>
 800300a:	bf00      	nop
 800300c:	40011400 	.word	0x40011400

08003010 <lcd_rs_hi>:
}


void lcd_rs_hi (void)
{
      GPIO_SetBits(LCD_CTL_PORT,LCD_RS);
 8003010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003014:	4801      	ldr	r0, [pc, #4]	; (800301c <lcd_rs_hi+0xc>)
 8003016:	f004 bb25 	b.w	8007664 <GPIO_SetBits>
 800301a:	bf00      	nop
 800301c:	40011400 	.word	0x40011400

08003020 <lcd_rs_lo>:
}


void lcd_rs_lo (void)
{
      GPIO_ResetBits(LCD_CTL_PORT,LCD_RS);
 8003020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003024:	4801      	ldr	r0, [pc, #4]	; (800302c <lcd_rs_lo+0xc>)
 8003026:	f004 bb1f 	b.w	8007668 <GPIO_ResetBits>
 800302a:	bf00      	nop
 800302c:	40011400 	.word	0x40011400

08003030 <lcd_wr_hi>:
}


void lcd_wr_hi (void)
{
      GPIO_SetBits(LCD_CTL_PORT,LCD_WR);
 8003030:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003034:	4801      	ldr	r0, [pc, #4]	; (800303c <lcd_wr_hi+0xc>)
 8003036:	f004 bb15 	b.w	8007664 <GPIO_SetBits>
 800303a:	bf00      	nop
 800303c:	40011400 	.word	0x40011400

08003040 <lcd_wr_lo>:
}


void lcd_wr_lo (void)
{
      GPIO_ResetBits(LCD_CTL_PORT,LCD_WR);
 8003040:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003044:	4801      	ldr	r0, [pc, #4]	; (800304c <lcd_wr_lo+0xc>)
 8003046:	f004 bb0f 	b.w	8007668 <GPIO_ResetBits>
 800304a:	bf00      	nop
 800304c:	40011400 	.word	0x40011400

08003050 <lcd_rd_hi>:
}


void lcd_rd_hi (void)
{
      GPIO_SetBits(LCD_CTL_PORT,LCD_RD);
 8003050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003054:	4801      	ldr	r0, [pc, #4]	; (800305c <lcd_rd_hi+0xc>)
 8003056:	f004 bb05 	b.w	8007664 <GPIO_SetBits>
 800305a:	bf00      	nop
 800305c:	40011400 	.word	0x40011400

08003060 <lcd_rd_lo>:
}


void lcd_rd_lo (void)
{
      GPIO_ResetBits(LCD_CTL_PORT,LCD_RD);
 8003060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003064:	4801      	ldr	r0, [pc, #4]	; (800306c <lcd_rd_lo+0xc>)
 8003066:	f004 baff 	b.w	8007668 <GPIO_ResetBits>
 800306a:	bf00      	nop
 800306c:	40011400 	.word	0x40011400

08003070 <lcd_wr_data>:
}


void lcd_wr_data (unsigned short data)
{
 8003070:	b510      	push	{r4, lr}
 8003072:	4604      	mov	r4, r0
      lcd_rs_hi();
 8003074:	f7ff ffcc 	bl	8003010 <lcd_rs_hi>
      lcd_cs_lo();
 8003078:	f7ff ffc2 	bl	8003000 <lcd_cs_lo>
      LCD_DATA_PORT->ODR = value;
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <lcd_wr_data+0x20>)
 800307e:	60dc      	str	r4, [r3, #12]
      lcd_data_write(data);
      lcd_wr_lo();
 8003080:	f7ff ffde 	bl	8003040 <lcd_wr_lo>
      lcd_wr_hi();
 8003084:	f7ff ffd4 	bl	8003030 <lcd_wr_hi>
      lcd_cs_hi();
}
 8003088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lcd_cs_hi();
 800308c:	f7ff bfb0 	b.w	8002ff0 <lcd_cs_hi>
 8003090:	40011800 	.word	0x40011800

08003094 <lcd_wr_register>:


void lcd_wr_register (unsigned char data)
{
 8003094:	b510      	push	{r4, lr}
 8003096:	4604      	mov	r4, r0
      lcd_rs_lo();
 8003098:	f7ff ffc2 	bl	8003020 <lcd_rs_lo>
      lcd_cs_lo();
 800309c:	f7ff ffb0 	bl	8003000 <lcd_cs_lo>
      LCD_DATA_PORT->ODR = value;
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <lcd_wr_register+0x20>)
 80030a2:	60dc      	str	r4, [r3, #12]
      lcd_data_write(data);
      lcd_wr_lo();
 80030a4:	f7ff ffcc 	bl	8003040 <lcd_wr_lo>
      lcd_wr_hi();
 80030a8:	f7ff ffc2 	bl	8003030 <lcd_wr_hi>
      lcd_cs_hi();
}
 80030ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lcd_cs_hi();
 80030b0:	f7ff bf9e 	b.w	8002ff0 <lcd_cs_hi>
 80030b4:	40011800 	.word	0x40011800

080030b8 <lcd_write_register>:


void lcd_write_register (unsigned char reg, unsigned short value)
{
 80030b8:	b510      	push	{r4, lr}
 80030ba:	460c      	mov	r4, r1
      lcd_wr_register(reg);
 80030bc:	f7ff ffea 	bl	8003094 <lcd_wr_register>
      lcd_wr_data(value);
 80030c0:	4620      	mov	r0, r4
}
 80030c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lcd_wr_data(value);
 80030c6:	f7ff bfd3 	b.w	8003070 <lcd_wr_data>
	...

080030cc <lcd_read_register>:


unsigned short lcd_read_register (unsigned char reg)
{
 80030cc:	b510      	push	{r4, lr}
      unsigned short value;
      lcd_wr_register(reg);
 80030ce:	f7ff ffe1 	bl	8003094 <lcd_wr_register>
      lcd_data_port_input();
 80030d2:	f7ff ff75 	bl	8002fc0 <lcd_data_port_input>
      lcd_rs_hi();
 80030d6:	f7ff ff9b 	bl	8003010 <lcd_rs_hi>
      lcd_cs_lo();
 80030da:	f7ff ff91 	bl	8003000 <lcd_cs_lo>
      lcd_rd_lo();
 80030de:	f7ff ffbf 	bl	8003060 <lcd_rd_lo>
      lcd_rd_hi();
 80030e2:	f7ff ffb5 	bl	8003050 <lcd_rd_hi>
      return (LCD_DATA_PORT->IDR);
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <lcd_read_register+0x2c>)
 80030e8:	689c      	ldr	r4, [r3, #8]
      value = lcd_data_read();
      lcd_cs_hi();
 80030ea:	f7ff ff81 	bl	8002ff0 <lcd_cs_hi>
      lcd_data_port_output();
 80030ee:	f7ff ff73 	bl	8002fd8 <lcd_data_port_output>
      return value;
}
 80030f2:	b2a0      	uxth	r0, r4
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	bf00      	nop
 80030f8:	40011800 	.word	0x40011800

080030fc <lcd_write_ram_prepare>:
	lcd_draw_line(x+13,y+54,x+18,y+54);lcd_draw_line(x+32,y+54,x+36,y+54);
}

void lcd_write_ram_prepare (void)
{
      lcd_wr_register(R34);
 80030fc:	2022      	movs	r0, #34	; 0x22
 80030fe:	f7ff bfc9 	b.w	8003094 <lcd_wr_register>
	...

08003104 <lcd_set_cursor>:
}


void lcd_set_cursor (unsigned char xpos, unsigned short ypos)
{
      if ((device_code == 0x8999) || (device_code == 0x8989) || (device_code == 0x9919)) {
 8003104:	f648 1289 	movw	r2, #35209	; 0x8989
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <lcd_set_cursor+0x3c>)
{
 800310a:	b510      	push	{r4, lr}
      if ((device_code == 0x8999) || (device_code == 0x8989) || (device_code == 0x9919)) {
 800310c:	881b      	ldrh	r3, [r3, #0]
{
 800310e:	460c      	mov	r4, r1
 8003110:	4601      	mov	r1, r0
      if ((device_code == 0x8999) || (device_code == 0x8989) || (device_code == 0x9919)) {
 8003112:	f023 0010 	bic.w	r0, r3, #16
 8003116:	4290      	cmp	r0, r2
 8003118:	d003      	beq.n	8003122 <lcd_set_cursor+0x1e>
 800311a:	f649 1219 	movw	r2, #39193	; 0x9919
 800311e:	4293      	cmp	r3, r2
 8003120:	d108      	bne.n	8003134 <lcd_set_cursor+0x30>
	 lcd_write_register(0x004E,xpos);
 8003122:	204e      	movs	r0, #78	; 0x4e
 8003124:	f7ff ffc8 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0X004F,ypos);
 8003128:	4621      	mov	r1, r4
 800312a:	204f      	movs	r0, #79	; 0x4f
      } else {
	 lcd_write_register(0x0020,xpos);
	 lcd_write_register(0X0021,ypos);
      }
}
 800312c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	 lcd_write_register(0X0021,ypos);
 8003130:	f7ff bfc2 	b.w	80030b8 <lcd_write_register>
	 lcd_write_register(0x0020,xpos);
 8003134:	2020      	movs	r0, #32
 8003136:	f7ff ffbf 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0X0021,ypos);
 800313a:	4621      	mov	r1, r4
 800313c:	2021      	movs	r0, #33	; 0x21
 800313e:	e7f5      	b.n	800312c <lcd_set_cursor+0x28>
 8003140:	20001446 	.word	0x20001446

08003144 <lcd_set_pixel>:
      }
}


void lcd_set_pixel (unsigned char x,unsigned short y)
{
 8003144:	b508      	push	{r3, lr}
      lcd_set_cursor(x,y);
 8003146:	f7ff ffdd 	bl	8003104 <lcd_set_cursor>
      lcd_wr_register(R34);
 800314a:	2022      	movs	r0, #34	; 0x22
 800314c:	f7ff ffa2 	bl	8003094 <lcd_wr_register>
      lcd_wr_data(foreground_color);
 8003150:	4b02      	ldr	r3, [pc, #8]	; (800315c <lcd_set_pixel+0x18>)
 8003152:	8818      	ldrh	r0, [r3, #0]
}
 8003154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      lcd_wr_data(foreground_color);
 8003158:	f7ff bf8a 	b.w	8003070 <lcd_wr_data>
 800315c:	20001450 	.word	0x20001450

08003160 <lcd_clear>:


void lcd_clear (unsigned short color)
{
       unsigned int idx = 0;
       lcd_set_cursor(0x00,0x0000);
 8003160:	2100      	movs	r1, #0
{
 8003162:	b538      	push	{r3, r4, r5, lr}
 8003164:	4605      	mov	r5, r0
       lcd_set_cursor(0x00,0x0000);
 8003166:	4608      	mov	r0, r1
 8003168:	f7ff ffcc 	bl	8003104 <lcd_set_cursor>
       lcd_write_ram_prepare();
 800316c:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
 8003170:	f7ff ffc4 	bl	80030fc <lcd_write_ram_prepare>
       for (idx=0;idx<76800;idx++) {
	   lcd_wr_data(color);
 8003174:	4628      	mov	r0, r5
 8003176:	f7ff ff7b 	bl	8003070 <lcd_wr_data>
       for (idx=0;idx<76800;idx++) {
 800317a:	3c01      	subs	r4, #1
 800317c:	d1fa      	bne.n	8003174 <lcd_clear+0x14>
       }
}
 800317e:	bd38      	pop	{r3, r4, r5, pc}

08003180 <lcd_init>:


void lcd_init (void)
{
      maxx = 240;
 8003180:	22f0      	movs	r2, #240	; 0xf0
{
 8003182:	b538      	push	{r3, r4, r5, lr}
      maxx = 240;
 8003184:	4bde      	ldr	r3, [pc, #888]	; (8003500 <lcd_init+0x380>)
      maxy = 320;
      ax = 0;
 8003186:	2400      	movs	r4, #0
      maxx = 240;
 8003188:	801a      	strh	r2, [r3, #0]
      maxy = 320;
 800318a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800318e:	4bdd      	ldr	r3, [pc, #884]	; (8003504 <lcd_init+0x384>)
      ay = 0;
      page = 0;
      eng_mode = 0;
      hangul_mode = 0;
      max_col = (maxx / 8);
 8003190:	251e      	movs	r5, #30
      maxy = 320;
 8003192:	801a      	strh	r2, [r3, #0]
      max_row = (maxy / 16);
 8003194:	2214      	movs	r2, #20
      ax = 0;
 8003196:	4bdc      	ldr	r3, [pc, #880]	; (8003508 <lcd_init+0x388>)
      foreground_color = WHITE;
      background_color = BLACK;
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA0,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8003198:	2101      	movs	r1, #1
      ax = 0;
 800319a:	801c      	strh	r4, [r3, #0]
      ay = 0;
 800319c:	4bdb      	ldr	r3, [pc, #876]	; (800350c <lcd_init+0x38c>)
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA0,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 800319e:	48dc      	ldr	r0, [pc, #880]	; (8003510 <lcd_init+0x390>)
      ay = 0;
 80031a0:	801c      	strh	r4, [r3, #0]
      page = 0;
 80031a2:	4bdc      	ldr	r3, [pc, #880]	; (8003514 <lcd_init+0x394>)
 80031a4:	801c      	strh	r4, [r3, #0]
      eng_mode = 0;
 80031a6:	4bdc      	ldr	r3, [pc, #880]	; (8003518 <lcd_init+0x398>)
 80031a8:	801c      	strh	r4, [r3, #0]
      hangul_mode = 0;
 80031aa:	4bdc      	ldr	r3, [pc, #880]	; (800351c <lcd_init+0x39c>)
 80031ac:	701c      	strb	r4, [r3, #0]
      max_col = (maxx / 8);
 80031ae:	4bdc      	ldr	r3, [pc, #880]	; (8003520 <lcd_init+0x3a0>)
 80031b0:	801d      	strh	r5, [r3, #0]
      max_row = (maxy / 16);
 80031b2:	4bdc      	ldr	r3, [pc, #880]	; (8003524 <lcd_init+0x3a4>)
 80031b4:	801a      	strh	r2, [r3, #0]
      foreground_color = WHITE;
 80031b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ba:	4bdb      	ldr	r3, [pc, #876]	; (8003528 <lcd_init+0x3a8>)
 80031bc:	801a      	strh	r2, [r3, #0]
      background_color = BLACK;
 80031be:	4bdb      	ldr	r3, [pc, #876]	; (800352c <lcd_init+0x3ac>)
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA0,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80031c0:	2203      	movs	r2, #3
      background_color = BLACK;
 80031c2:	801c      	strh	r4, [r3, #0]
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA0,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80031c4:	2310      	movs	r3, #16
 80031c6:	f004 f9fd 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA1,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80031ca:	2310      	movs	r3, #16
 80031cc:	2203      	movs	r2, #3
 80031ce:	2102      	movs	r1, #2
 80031d0:	48cf      	ldr	r0, [pc, #828]	; (8003510 <lcd_init+0x390>)
 80031d2:	f004 f9f7 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA2,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80031d6:	2310      	movs	r3, #16
 80031d8:	2203      	movs	r2, #3
 80031da:	2104      	movs	r1, #4
 80031dc:	48cc      	ldr	r0, [pc, #816]	; (8003510 <lcd_init+0x390>)
 80031de:	f004 f9f1 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA3,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80031e2:	2310      	movs	r3, #16
 80031e4:	2203      	movs	r2, #3
 80031e6:	2108      	movs	r1, #8
 80031e8:	48c9      	ldr	r0, [pc, #804]	; (8003510 <lcd_init+0x390>)
 80031ea:	f004 f9eb 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA4,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80031ee:	2310      	movs	r3, #16
 80031f0:	2203      	movs	r2, #3
 80031f2:	4619      	mov	r1, r3
 80031f4:	48c6      	ldr	r0, [pc, #792]	; (8003510 <lcd_init+0x390>)
 80031f6:	f004 f9e5 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA5,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80031fa:	2310      	movs	r3, #16
 80031fc:	2203      	movs	r2, #3
 80031fe:	2120      	movs	r1, #32
 8003200:	48c3      	ldr	r0, [pc, #780]	; (8003510 <lcd_init+0x390>)
 8003202:	f004 f9df 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA6,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8003206:	2310      	movs	r3, #16
 8003208:	2203      	movs	r2, #3
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	48c0      	ldr	r0, [pc, #768]	; (8003510 <lcd_init+0x390>)
 800320e:	f004 f9d9 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA7,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8003212:	2310      	movs	r3, #16
 8003214:	2203      	movs	r2, #3
 8003216:	2180      	movs	r1, #128	; 0x80
 8003218:	48bd      	ldr	r0, [pc, #756]	; (8003510 <lcd_init+0x390>)
 800321a:	f004 f9d3 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA8,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 800321e:	2310      	movs	r3, #16
 8003220:	2203      	movs	r2, #3
 8003222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003226:	48ba      	ldr	r0, [pc, #744]	; (8003510 <lcd_init+0x390>)
 8003228:	f004 f9cc 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA9,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 800322c:	2310      	movs	r3, #16
 800322e:	2203      	movs	r2, #3
 8003230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003234:	48b6      	ldr	r0, [pc, #728]	; (8003510 <lcd_init+0x390>)
 8003236:	f004 f9c5 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA10,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 800323a:	2310      	movs	r3, #16
 800323c:	2203      	movs	r2, #3
 800323e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003242:	48b3      	ldr	r0, [pc, #716]	; (8003510 <lcd_init+0x390>)
 8003244:	f004 f9be 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA11,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8003248:	2310      	movs	r3, #16
 800324a:	2203      	movs	r2, #3
 800324c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003250:	48af      	ldr	r0, [pc, #700]	; (8003510 <lcd_init+0x390>)
 8003252:	f004 f9b7 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA12,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8003256:	2310      	movs	r3, #16
 8003258:	2203      	movs	r2, #3
 800325a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800325e:	48ac      	ldr	r0, [pc, #688]	; (8003510 <lcd_init+0x390>)
 8003260:	f004 f9b0 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA13,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8003264:	2310      	movs	r3, #16
 8003266:	2203      	movs	r2, #3
 8003268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800326c:	48a8      	ldr	r0, [pc, #672]	; (8003510 <lcd_init+0x390>)
 800326e:	f004 f9a9 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA14,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8003272:	2310      	movs	r3, #16
 8003274:	2203      	movs	r2, #3
 8003276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800327a:	48a5      	ldr	r0, [pc, #660]	; (8003510 <lcd_init+0x390>)
 800327c:	f004 f9a2 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_DATA_PORT,LCD_DATA15,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8003280:	2310      	movs	r3, #16
 8003282:	2203      	movs	r2, #3
 8003284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003288:	48a1      	ldr	r0, [pc, #644]	; (8003510 <lcd_init+0x390>)
 800328a:	f004 f99b 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_CTL_PORT,LCD_CS,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 800328e:	2310      	movs	r3, #16
 8003290:	2203      	movs	r2, #3
 8003292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003296:	48a6      	ldr	r0, [pc, #664]	; (8003530 <lcd_init+0x3b0>)
 8003298:	f004 f994 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_CTL_PORT,LCD_RS,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 800329c:	2310      	movs	r3, #16
 800329e:	2203      	movs	r2, #3
 80032a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032a4:	48a2      	ldr	r0, [pc, #648]	; (8003530 <lcd_init+0x3b0>)
 80032a6:	f004 f98d 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_CTL_PORT,LCD_RD,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80032aa:	2310      	movs	r3, #16
 80032ac:	2203      	movs	r2, #3
 80032ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032b2:	489f      	ldr	r0, [pc, #636]	; (8003530 <lcd_init+0x3b0>)
 80032b4:	f004 f986 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(LCD_CTL_PORT,LCD_WR,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 80032b8:	2310      	movs	r3, #16
 80032ba:	2203      	movs	r2, #3
 80032bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032c0:	489b      	ldr	r0, [pc, #620]	; (8003530 <lcd_init+0x3b0>)
 80032c2:	f004 f97f 	bl	80075c4 <GPIO_Init_Pin>
      wait_ms(count);
 80032c6:	2032      	movs	r0, #50	; 0x32
 80032c8:	f7fe ff8c 	bl	80021e4 <wait_ms>
      lcd_delay(50);
      lcd_write_register(0x0000,0x0001);
 80032cc:	2101      	movs	r1, #1
 80032ce:	4620      	mov	r0, r4
 80032d0:	f7ff fef2 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 80032d4:	2032      	movs	r0, #50	; 0x32
 80032d6:	f7fe ff85 	bl	80021e4 <wait_ms>
      lcd_delay(50);
      device_code = lcd_read_register(0x0000);
 80032da:	4620      	mov	r0, r4
 80032dc:	f7ff fef6 	bl	80030cc <lcd_read_register>
 80032e0:	4b94      	ldr	r3, [pc, #592]	; (8003534 <lcd_init+0x3b4>)
 80032e2:	8018      	strh	r0, [r3, #0]
      //s_printf(" Lcd Init -> DeviceCode %4X \r\n",device_code);
      if ((device_code == 0x9325) || (device_code == 0x9328)) {
 80032e4:	f249 3325 	movw	r3, #37669	; 0x9325
 80032e8:	4298      	cmp	r0, r3
 80032ea:	d004      	beq.n	80032f6 <lcd_init+0x176>
 80032ec:	f249 3328 	movw	r3, #37672	; 0x9328
 80032f0:	4298      	cmp	r0, r3
 80032f2:	f040 8121 	bne.w	8003538 <lcd_init+0x3b8>
  	 lcd_write_register(0x00e7,0x0010);
 80032f6:	2110      	movs	r1, #16
 80032f8:	20e7      	movs	r0, #231	; 0xe7
 80032fa:	f7ff fedd 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0000,0x0001);
 80032fe:	2101      	movs	r1, #1
 8003300:	2000      	movs	r0, #0
 8003302:	f7ff fed9 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0001,0x0100);
 8003306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800330a:	2001      	movs	r0, #1
 800330c:	f7ff fed4 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0002,0x0700);
 8003310:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003314:	2002      	movs	r0, #2
 8003316:	f7ff fecf 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0003,0x1030);
 800331a:	f241 0130 	movw	r1, #4144	; 0x1030
 800331e:	2003      	movs	r0, #3
 8003320:	f7ff feca 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0004,0x0000);
 8003324:	2100      	movs	r1, #0
 8003326:	2004      	movs	r0, #4
 8003328:	f7ff fec6 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0008,0x0207);
 800332c:	f240 2107 	movw	r1, #519	; 0x207
 8003330:	2008      	movs	r0, #8
 8003332:	f7ff fec1 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0009,0x0000);
 8003336:	2100      	movs	r1, #0
 8003338:	2009      	movs	r0, #9
 800333a:	f7ff febd 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x000a,0x0000);
 800333e:	2100      	movs	r1, #0
 8003340:	200a      	movs	r0, #10
 8003342:	f7ff feb9 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x000c,0x0001);
 8003346:	2101      	movs	r1, #1
 8003348:	200c      	movs	r0, #12
 800334a:	f7ff feb5 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x000d,0x0000);
 800334e:	2100      	movs	r1, #0
 8003350:	200d      	movs	r0, #13
 8003352:	f7ff feb1 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x000f,0x0000);
 8003356:	2100      	movs	r1, #0
 8003358:	200f      	movs	r0, #15
 800335a:	f7ff fead 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0010,0x0000);
 800335e:	2100      	movs	r1, #0
 8003360:	2010      	movs	r0, #16
 8003362:	f7ff fea9 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0011,0x0007);
 8003366:	2107      	movs	r1, #7
 8003368:	2011      	movs	r0, #17
 800336a:	f7ff fea5 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0012,0x0000);
 800336e:	2100      	movs	r1, #0
 8003370:	2012      	movs	r0, #18
 8003372:	f7ff fea1 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0013,0x0000);
 8003376:	2100      	movs	r1, #0
 8003378:	2013      	movs	r0, #19
 800337a:	f7ff fe9d 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 800337e:	2032      	movs	r0, #50	; 0x32
 8003380:	f7fe ff30 	bl	80021e4 <wait_ms>
         lcd_delay(50);
         lcd_write_register(0x0010,0x1590);
 8003384:	f241 5190 	movw	r1, #5520	; 0x1590
 8003388:	2010      	movs	r0, #16
 800338a:	f7ff fe95 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0011,0x0227);
 800338e:	f240 2127 	movw	r1, #551	; 0x227
 8003392:	2011      	movs	r0, #17
 8003394:	f7ff fe90 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 8003398:	2032      	movs	r0, #50	; 0x32
 800339a:	f7fe ff23 	bl	80021e4 <wait_ms>
         lcd_delay(50);
         lcd_write_register(0x0012,0x009c);
 800339e:	219c      	movs	r1, #156	; 0x9c
 80033a0:	2012      	movs	r0, #18
 80033a2:	f7ff fe89 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 80033a6:	2032      	movs	r0, #50	; 0x32
 80033a8:	f7fe ff1c 	bl	80021e4 <wait_ms>
         lcd_delay(50);
         lcd_write_register(0x0013,0x1900);
 80033ac:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80033b0:	2013      	movs	r0, #19
 80033b2:	f7ff fe81 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0029,0x0023);
 80033b6:	2123      	movs	r1, #35	; 0x23
 80033b8:	2029      	movs	r0, #41	; 0x29
 80033ba:	f7ff fe7d 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x002b,0x000e);
 80033be:	210e      	movs	r1, #14
 80033c0:	202b      	movs	r0, #43	; 0x2b
 80033c2:	f7ff fe79 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 80033c6:	2032      	movs	r0, #50	; 0x32
 80033c8:	f7fe ff0c 	bl	80021e4 <wait_ms>
         lcd_delay(50);
         lcd_write_register(0x0020,0x0000);
 80033cc:	2100      	movs	r1, #0
 80033ce:	2020      	movs	r0, #32
 80033d0:	f7ff fe72 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0021,0x013f);
 80033d4:	f240 113f 	movw	r1, #319	; 0x13f
 80033d8:	2021      	movs	r0, #33	; 0x21
 80033da:	f7ff fe6d 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 80033de:	2032      	movs	r0, #50	; 0x32
 80033e0:	f7fe ff00 	bl	80021e4 <wait_ms>
	 lcd_delay(50);
         lcd_write_register(0x0030,0x0007);
 80033e4:	2107      	movs	r1, #7
 80033e6:	2030      	movs	r0, #48	; 0x30
 80033e8:	f7ff fe66 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0031,0x0707);
 80033ec:	f240 7107 	movw	r1, #1799	; 0x707
 80033f0:	2031      	movs	r0, #49	; 0x31
 80033f2:	f7ff fe61 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0032,0x0006);
 80033f6:	2106      	movs	r1, #6
 80033f8:	2032      	movs	r0, #50	; 0x32
 80033fa:	f7ff fe5d 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0035,0x0704);
 80033fe:	f240 7104 	movw	r1, #1796	; 0x704
 8003402:	2035      	movs	r0, #53	; 0x35
 8003404:	f7ff fe58 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0036,0x1f04);
 8003408:	f641 7104 	movw	r1, #7940	; 0x1f04
 800340c:	2036      	movs	r0, #54	; 0x36
 800340e:	f7ff fe53 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0037,0x0004);
 8003412:	2104      	movs	r1, #4
 8003414:	2037      	movs	r0, #55	; 0x37
 8003416:	f7ff fe4f 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0038,0x0000);
 800341a:	2100      	movs	r1, #0
 800341c:	2038      	movs	r0, #56	; 0x38
 800341e:	f7ff fe4b 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0039,0x0706);
 8003422:	f240 7106 	movw	r1, #1798	; 0x706
 8003426:	2039      	movs	r0, #57	; 0x39
 8003428:	f7ff fe46 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x003c,0x0701);
 800342c:	f240 7101 	movw	r1, #1793	; 0x701
 8003430:	203c      	movs	r0, #60	; 0x3c
 8003432:	f7ff fe41 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x003d,0x000f);
 8003436:	210f      	movs	r1, #15
 8003438:	203d      	movs	r0, #61	; 0x3d
 800343a:	f7ff fe3d 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 800343e:	2032      	movs	r0, #50	; 0x32
 8003440:	f7fe fed0 	bl	80021e4 <wait_ms>
         lcd_delay(50);
         lcd_write_register(0x0050,0x0000);
 8003444:	2100      	movs	r1, #0
 8003446:	2050      	movs	r0, #80	; 0x50
 8003448:	f7ff fe36 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0051,0x00ef);
 800344c:	21ef      	movs	r1, #239	; 0xef
 800344e:	2051      	movs	r0, #81	; 0x51
 8003450:	f7ff fe32 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0052,0x0000);
 8003454:	2100      	movs	r1, #0
 8003456:	2052      	movs	r0, #82	; 0x52
 8003458:	f7ff fe2e 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0053,0x013f);
 800345c:	f240 113f 	movw	r1, #319	; 0x13f
 8003460:	2053      	movs	r0, #83	; 0x53
 8003462:	f7ff fe29 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0060,0xa700);
 8003466:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800346a:	2060      	movs	r0, #96	; 0x60
 800346c:	f7ff fe24 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0061,0x0001);
 8003470:	2101      	movs	r1, #1
 8003472:	2061      	movs	r0, #97	; 0x61
 8003474:	f7ff fe20 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x006a,0x0000);
 8003478:	2100      	movs	r1, #0
 800347a:	206a      	movs	r0, #106	; 0x6a
 800347c:	f7ff fe1c 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0080,0x0000);
 8003480:	2100      	movs	r1, #0
 8003482:	2080      	movs	r0, #128	; 0x80
 8003484:	f7ff fe18 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0081,0x0000);
 8003488:	2100      	movs	r1, #0
 800348a:	2081      	movs	r0, #129	; 0x81
 800348c:	f7ff fe14 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0082,0x0000);
 8003490:	2100      	movs	r1, #0
 8003492:	2082      	movs	r0, #130	; 0x82
 8003494:	f7ff fe10 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0083,0x0000);
 8003498:	2100      	movs	r1, #0
 800349a:	2083      	movs	r0, #131	; 0x83
 800349c:	f7ff fe0c 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0084,0x0000);
 80034a0:	2100      	movs	r1, #0
 80034a2:	2084      	movs	r0, #132	; 0x84
 80034a4:	f7ff fe08 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0085,0x0000);
 80034a8:	2100      	movs	r1, #0
 80034aa:	2085      	movs	r0, #133	; 0x85
 80034ac:	f7ff fe04 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0090,0x0010);
 80034b0:	2110      	movs	r1, #16
 80034b2:	2090      	movs	r0, #144	; 0x90
 80034b4:	f7ff fe00 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0092,0x0000);
 80034b8:	2100      	movs	r1, #0
 80034ba:	2092      	movs	r0, #146	; 0x92
 80034bc:	f7ff fdfc 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0093,0x0003);
 80034c0:	2103      	movs	r1, #3
 80034c2:	2093      	movs	r0, #147	; 0x93
 80034c4:	f7ff fdf8 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0095,0x0110);
 80034c8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80034cc:	2095      	movs	r0, #149	; 0x95
 80034ce:	f7ff fdf3 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0097,0x0000);
 80034d2:	2100      	movs	r1, #0
 80034d4:	2097      	movs	r0, #151	; 0x97
 80034d6:	f7ff fdef 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0098,0x0000);
 80034da:	2100      	movs	r1, #0
 80034dc:	2098      	movs	r0, #152	; 0x98
 80034de:	f7ff fdeb 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0007,0x0133);
 80034e2:	f240 1133 	movw	r1, #307	; 0x133
 80034e6:	2007      	movs	r0, #7
 80034e8:	f7ff fde6 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0020,0x0000);
 80034ec:	2100      	movs	r1, #0
 80034ee:	2020      	movs	r0, #32
 80034f0:	f7ff fde2 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0021,0x013f);
 80034f4:	f240 113f 	movw	r1, #319	; 0x13f
 80034f8:	2021      	movs	r0, #33	; 0x21
	 lcd_write_register(0x2E,0x7E45);
	 /************* Turn On display **************/
	 lcd_write_register(0x10,0x0000);
	 lcd_delay(30);
	 lcd_write_register(0x11,0x6870);
	 lcd_write_register(0x07,0x0033);
 80034fa:	f7ff fddd 	bl	80030b8 <lcd_write_register>
 80034fe:	e1e2      	b.n	80038c6 <lcd_init+0x746>
 8003500:	20001420 	.word	0x20001420
 8003504:	20001454 	.word	0x20001454
 8003508:	20001442 	.word	0x20001442
 800350c:	20001452 	.word	0x20001452
 8003510:	40011800 	.word	0x40011800
 8003514:	2000144a 	.word	0x2000144a
 8003518:	20001448 	.word	0x20001448
 800351c:	2000131a 	.word	0x2000131a
 8003520:	2000141e 	.word	0x2000141e
 8003524:	2000144c 	.word	0x2000144c
 8003528:	20001450 	.word	0x20001450
 800352c:	2000131c 	.word	0x2000131c
 8003530:	40011400 	.word	0x40011400
 8003534:	20001446 	.word	0x20001446
      }	else if ((device_code == 0x9320) || (device_code == 0x9300)) {
 8003538:	f020 0320 	bic.w	r3, r0, #32
 800353c:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8003540:	f040 80aa 	bne.w	8003698 <lcd_init+0x518>
	 lcd_write_register(0x00,0x0000);
 8003544:	4621      	mov	r1, r4
 8003546:	4620      	mov	r0, r4
 8003548:	f7ff fdb6 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x01,0x0100);
 800354c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003550:	2001      	movs	r0, #1
 8003552:	f7ff fdb1 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x02,0x0700);
 8003556:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800355a:	2002      	movs	r0, #2
 800355c:	f7ff fdac 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x03,0x1030);
 8003560:	f241 0130 	movw	r1, #4144	; 0x1030
 8003564:	2003      	movs	r0, #3
 8003566:	f7ff fda7 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x04,0x0000);
 800356a:	4621      	mov	r1, r4
 800356c:	2004      	movs	r0, #4
 800356e:	f7ff fda3 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x08,0x0202);
 8003572:	f240 2102 	movw	r1, #514	; 0x202
 8003576:	2008      	movs	r0, #8
 8003578:	f7ff fd9e 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x09,0x0000);
 800357c:	4621      	mov	r1, r4
 800357e:	2009      	movs	r0, #9
 8003580:	f7ff fd9a 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x0a,0x0000);
 8003584:	4621      	mov	r1, r4
 8003586:	200a      	movs	r0, #10
 8003588:	f7ff fd96 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x0c,(1 << 0));
 800358c:	2101      	movs	r1, #1
 800358e:	200c      	movs	r0, #12
 8003590:	f7ff fd92 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x0d,0x0000);
 8003594:	4621      	mov	r1, r4
 8003596:	200d      	movs	r0, #13
 8003598:	f7ff fd8e 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x0f,0x0000);
 800359c:	4621      	mov	r1, r4
 800359e:	200f      	movs	r0, #15
 80035a0:	f7ff fd8a 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 80035a4:	2032      	movs	r0, #50	; 0x32
 80035a6:	f7fe fe1d 	bl	80021e4 <wait_ms>
	 lcd_write_register(0x07,0x0101);
 80035aa:	f240 1101 	movw	r1, #257	; 0x101
 80035ae:	2007      	movs	r0, #7
 80035b0:	f7ff fd82 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 80035b4:	2032      	movs	r0, #50	; 0x32
 80035b6:	f7fe fe15 	bl	80021e4 <wait_ms>
	 lcd_write_register(0x10,(1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));
 80035ba:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80035be:	2010      	movs	r0, #16
 80035c0:	f7ff fd7a 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x11,0x0007);
 80035c4:	2107      	movs	r1, #7
 80035c6:	2011      	movs	r0, #17
 80035c8:	f7ff fd76 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x12,(1 << 8) | (1 << 4) | (0 << 0));
 80035cc:	f44f 7188 	mov.w	r1, #272	; 0x110
 80035d0:	2012      	movs	r0, #18
 80035d2:	f7ff fd71 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x13,0x0b00);
 80035d6:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80035da:	2013      	movs	r0, #19
 80035dc:	f7ff fd6c 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x29,0x0000);
 80035e0:	4621      	mov	r1, r4
 80035e2:	2029      	movs	r0, #41	; 0x29
 80035e4:	f7ff fd68 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x2b,(1 << 14) | (1 << 4));
 80035e8:	f244 0110 	movw	r1, #16400	; 0x4010
 80035ec:	202b      	movs	r0, #43	; 0x2b
 80035ee:	f7ff fd63 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x50,0);
 80035f2:	4621      	mov	r1, r4
 80035f4:	2050      	movs	r0, #80	; 0x50
 80035f6:	f7ff fd5f 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x51,239);
 80035fa:	21ef      	movs	r1, #239	; 0xef
 80035fc:	2051      	movs	r0, #81	; 0x51
 80035fe:	f7ff fd5b 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x52,0);
 8003602:	4621      	mov	r1, r4
 8003604:	2052      	movs	r0, #82	; 0x52
 8003606:	f7ff fd57 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x53,319);
 800360a:	f240 113f 	movw	r1, #319	; 0x13f
 800360e:	2053      	movs	r0, #83	; 0x53
 8003610:	f7ff fd52 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x60,0x2700);
 8003614:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8003618:	2060      	movs	r0, #96	; 0x60
 800361a:	f7ff fd4d 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x61,0x0001);
 800361e:	2101      	movs	r1, #1
 8003620:	2061      	movs	r0, #97	; 0x61
 8003622:	f7ff fd49 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x6a,0x0000);
 8003626:	4621      	mov	r1, r4
 8003628:	206a      	movs	r0, #106	; 0x6a
 800362a:	f7ff fd45 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x80,0x0000);
 800362e:	4621      	mov	r1, r4
 8003630:	2080      	movs	r0, #128	; 0x80
 8003632:	f7ff fd41 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x81,0x0000);
 8003636:	4621      	mov	r1, r4
 8003638:	2081      	movs	r0, #129	; 0x81
 800363a:	f7ff fd3d 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x82,0x0000);
 800363e:	4621      	mov	r1, r4
 8003640:	2082      	movs	r0, #130	; 0x82
 8003642:	f7ff fd39 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x83,0x0000);
 8003646:	4621      	mov	r1, r4
 8003648:	2083      	movs	r0, #131	; 0x83
 800364a:	f7ff fd35 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x84,0x0000);
 800364e:	4621      	mov	r1, r4
 8003650:	2084      	movs	r0, #132	; 0x84
 8003652:	f7ff fd31 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x85,0x0000);
 8003656:	4621      	mov	r1, r4
 8003658:	2085      	movs	r0, #133	; 0x85
 800365a:	f7ff fd2d 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x90,(0 << 7) | (16 << 0));
 800365e:	2110      	movs	r1, #16
 8003660:	2090      	movs	r0, #144	; 0x90
 8003662:	f7ff fd29 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x92,0x0000);
 8003666:	4621      	mov	r1, r4
 8003668:	2092      	movs	r0, #146	; 0x92
 800366a:	f7ff fd25 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x93,0x0001);
 800366e:	2101      	movs	r1, #1
 8003670:	2093      	movs	r0, #147	; 0x93
 8003672:	f7ff fd21 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x95,0x0110);
 8003676:	f44f 7188 	mov.w	r1, #272	; 0x110
 800367a:	2095      	movs	r0, #149	; 0x95
 800367c:	f7ff fd1c 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x97,(0 << 8));
 8003680:	4621      	mov	r1, r4
 8003682:	2097      	movs	r0, #151	; 0x97
 8003684:	f7ff fd18 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x98,0x0000);
 8003688:	4621      	mov	r1, r4
 800368a:	2098      	movs	r0, #152	; 0x98
 800368c:	f7ff fd14 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x07,0x0173);
 8003690:	f240 1173 	movw	r1, #371	; 0x173
	 lcd_write_register(0x07,0x0033);
 8003694:	2007      	movs	r0, #7
 8003696:	e730      	b.n	80034fa <lcd_init+0x37a>
      }	else if (device_code == 0x1505)	{
 8003698:	f241 5305 	movw	r3, #5381	; 0x1505
 800369c:	4298      	cmp	r0, r3
 800369e:	f040 811b 	bne.w	80038d8 <lcd_init+0x758>
         lcd_write_register(0x0007,0x0000);
 80036a2:	4621      	mov	r1, r4
 80036a4:	2007      	movs	r0, #7
 80036a6:	f7ff fd07 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 80036aa:	2032      	movs	r0, #50	; 0x32
 80036ac:	f7fe fd9a 	bl	80021e4 <wait_ms>
         lcd_write_register(0x0012,0x011C);
 80036b0:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80036b4:	2012      	movs	r0, #18
 80036b6:	f7ff fcff 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x00A4,0x0001);
 80036ba:	2101      	movs	r1, #1
 80036bc:	20a4      	movs	r0, #164	; 0xa4
 80036be:	f7ff fcfb 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0008,0x000F);
 80036c2:	210f      	movs	r1, #15
 80036c4:	2008      	movs	r0, #8
 80036c6:	f7ff fcf7 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x000A,0x0008);
 80036ca:	2108      	movs	r1, #8
 80036cc:	200a      	movs	r0, #10
 80036ce:	f7ff fcf3 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x000D,0x0008);
 80036d2:	2108      	movs	r1, #8
 80036d4:	200d      	movs	r0, #13
 80036d6:	f7ff fcef 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0030,0x0707);
 80036da:	f240 7107 	movw	r1, #1799	; 0x707
 80036de:	2030      	movs	r0, #48	; 0x30
 80036e0:	f7ff fcea 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0031,0x0007);
 80036e4:	2107      	movs	r1, #7
 80036e6:	2031      	movs	r0, #49	; 0x31
 80036e8:	f7ff fce6 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0032,0x0603);
 80036ec:	f240 6103 	movw	r1, #1539	; 0x603
 80036f0:	2032      	movs	r0, #50	; 0x32
 80036f2:	f7ff fce1 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0033,0x0700);
 80036f6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80036fa:	2033      	movs	r0, #51	; 0x33
 80036fc:	f7ff fcdc 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0034,0x0202);
 8003700:	f240 2102 	movw	r1, #514	; 0x202
 8003704:	2034      	movs	r0, #52	; 0x34
 8003706:	f7ff fcd7 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0035,0x0002);
 800370a:	2102      	movs	r1, #2
 800370c:	2035      	movs	r0, #53	; 0x35
 800370e:	f7ff fcd3 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0036,0x1F0F);
 8003712:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8003716:	2036      	movs	r0, #54	; 0x36
 8003718:	f7ff fcce 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0037,0x0707);
 800371c:	f240 7107 	movw	r1, #1799	; 0x707
 8003720:	2037      	movs	r0, #55	; 0x37
 8003722:	f7ff fcc9 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0038,0x0000);
 8003726:	4621      	mov	r1, r4
 8003728:	2038      	movs	r0, #56	; 0x38
 800372a:	f7ff fcc5 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0039,0x0000);
 800372e:	4621      	mov	r1, r4
 8003730:	2039      	movs	r0, #57	; 0x39
 8003732:	f7ff fcc1 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x003A,0x0707);
 8003736:	f240 7107 	movw	r1, #1799	; 0x707
 800373a:	203a      	movs	r0, #58	; 0x3a
 800373c:	f7ff fcbc 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x003B,0x0000);
 8003740:	4621      	mov	r1, r4
 8003742:	203b      	movs	r0, #59	; 0x3b
 8003744:	f7ff fcb8 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x003C,0x0007);
 8003748:	2107      	movs	r1, #7
 800374a:	203c      	movs	r0, #60	; 0x3c
 800374c:	f7ff fcb4 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x003D,0x0000);
 8003750:	4621      	mov	r1, r4
 8003752:	203d      	movs	r0, #61	; 0x3d
 8003754:	f7ff fcb0 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 8003758:	2032      	movs	r0, #50	; 0x32
 800375a:	f7fe fd43 	bl	80021e4 <wait_ms>
         lcd_write_register(0x0007,0x0001);
 800375e:	2101      	movs	r1, #1
 8003760:	2007      	movs	r0, #7
 8003762:	f7ff fca9 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0017,0x0001);
 8003766:	2101      	movs	r1, #1
 8003768:	2017      	movs	r0, #23
 800376a:	f7ff fca5 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 800376e:	2032      	movs	r0, #50	; 0x32
 8003770:	f7fe fd38 	bl	80021e4 <wait_ms>
         lcd_write_register(0x0010,0x17A0);
 8003774:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8003778:	2010      	movs	r0, #16
 800377a:	f7ff fc9d 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0011,0x0217);
 800377e:	f240 2117 	movw	r1, #535	; 0x217
 8003782:	2011      	movs	r0, #17
 8003784:	f7ff fc98 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0012,0x011E);
 8003788:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800378c:	2012      	movs	r0, #18
 800378e:	f7ff fc93 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0013,0x0F00);
 8003792:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8003796:	2013      	movs	r0, #19
 8003798:	f7ff fc8e 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x002A,0x0000);
 800379c:	4621      	mov	r1, r4
 800379e:	202a      	movs	r0, #42	; 0x2a
 80037a0:	f7ff fc8a 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0029,0x000A);
 80037a4:	210a      	movs	r1, #10
 80037a6:	2029      	movs	r0, #41	; 0x29
 80037a8:	f7ff fc86 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0012,0x013E);
 80037ac:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80037b0:	2012      	movs	r0, #18
 80037b2:	f7ff fc81 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0050,0x0000);
 80037b6:	4621      	mov	r1, r4
 80037b8:	2050      	movs	r0, #80	; 0x50
 80037ba:	f7ff fc7d 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0051,0x00EF);
 80037be:	21ef      	movs	r1, #239	; 0xef
 80037c0:	2051      	movs	r0, #81	; 0x51
 80037c2:	f7ff fc79 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0052,0x0000);
 80037c6:	4621      	mov	r1, r4
 80037c8:	2052      	movs	r0, #82	; 0x52
 80037ca:	f7ff fc75 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0053,0x013F);
 80037ce:	f240 113f 	movw	r1, #319	; 0x13f
 80037d2:	2053      	movs	r0, #83	; 0x53
 80037d4:	f7ff fc70 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0060,0x2700);
 80037d8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80037dc:	2060      	movs	r0, #96	; 0x60
 80037de:	f7ff fc6b 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0061,0x0001);
 80037e2:	2101      	movs	r1, #1
 80037e4:	2061      	movs	r0, #97	; 0x61
 80037e6:	f7ff fc67 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x006A,0x0000);
 80037ea:	4621      	mov	r1, r4
 80037ec:	206a      	movs	r0, #106	; 0x6a
 80037ee:	f7ff fc63 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0080,0x0000);
 80037f2:	4621      	mov	r1, r4
 80037f4:	2080      	movs	r0, #128	; 0x80
 80037f6:	f7ff fc5f 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0081,0x0000);
 80037fa:	4621      	mov	r1, r4
 80037fc:	2081      	movs	r0, #129	; 0x81
 80037fe:	f7ff fc5b 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0082,0x0000);
 8003802:	4621      	mov	r1, r4
 8003804:	2082      	movs	r0, #130	; 0x82
 8003806:	f7ff fc57 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0083,0x0000);
 800380a:	4621      	mov	r1, r4
 800380c:	2083      	movs	r0, #131	; 0x83
 800380e:	f7ff fc53 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0084,0x0000);
 8003812:	4621      	mov	r1, r4
 8003814:	2084      	movs	r0, #132	; 0x84
 8003816:	f7ff fc4f 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0085,0x0000);
 800381a:	4621      	mov	r1, r4
 800381c:	2085      	movs	r0, #133	; 0x85
 800381e:	f7ff fc4b 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0090,0x0013);
 8003822:	2113      	movs	r1, #19
 8003824:	2090      	movs	r0, #144	; 0x90
 8003826:	f7ff fc47 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0092,0x0300);
 800382a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800382e:	2092      	movs	r0, #146	; 0x92
 8003830:	f7ff fc42 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0093,0x0005);
 8003834:	2105      	movs	r1, #5
 8003836:	2093      	movs	r0, #147	; 0x93
 8003838:	f7ff fc3e 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0095,0x0000);
 800383c:	4621      	mov	r1, r4
 800383e:	2095      	movs	r0, #149	; 0x95
 8003840:	f7ff fc3a 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0097,0x0000);
 8003844:	4621      	mov	r1, r4
 8003846:	2097      	movs	r0, #151	; 0x97
 8003848:	f7ff fc36 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0098,0x0000);
 800384c:	4621      	mov	r1, r4
 800384e:	2098      	movs	r0, #152	; 0x98
 8003850:	f7ff fc32 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0001,0x0100);
 8003854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003858:	2001      	movs	r0, #1
 800385a:	f7ff fc2d 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0002,0x0700);
 800385e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003862:	2002      	movs	r0, #2
 8003864:	f7ff fc28 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0003,0x1030);
 8003868:	f241 0130 	movw	r1, #4144	; 0x1030
 800386c:	2003      	movs	r0, #3
 800386e:	f7ff fc23 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0004,0x0000);
 8003872:	4621      	mov	r1, r4
 8003874:	2004      	movs	r0, #4
 8003876:	f7ff fc1f 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x000C,0x0000);
 800387a:	4621      	mov	r1, r4
 800387c:	200c      	movs	r0, #12
 800387e:	f7ff fc1b 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x000F,0x0000);
 8003882:	4621      	mov	r1, r4
 8003884:	200f      	movs	r0, #15
 8003886:	f7ff fc17 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0020,0x0000);
 800388a:	4621      	mov	r1, r4
 800388c:	2020      	movs	r0, #32
 800388e:	f7ff fc13 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0021,0x0000);
 8003892:	4621      	mov	r1, r4
 8003894:	2021      	movs	r0, #33	; 0x21
 8003896:	f7ff fc0f 	bl	80030b8 <lcd_write_register>
         lcd_write_register(0x0007,0x0021);
 800389a:	2121      	movs	r1, #33	; 0x21
 800389c:	2007      	movs	r0, #7
 800389e:	f7ff fc0b 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 80038a2:	20c8      	movs	r0, #200	; 0xc8
 80038a4:	f7fe fc9e 	bl	80021e4 <wait_ms>
         lcd_write_register(0x0007,0x0061);
 80038a8:	2161      	movs	r1, #97	; 0x61
 80038aa:	2007      	movs	r0, #7
 80038ac:	f7ff fc04 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 80038b0:	20c8      	movs	r0, #200	; 0xc8
 80038b2:	f7fe fc97 	bl	80021e4 <wait_ms>
         lcd_write_register(0x0007,0x0173);
 80038b6:	2007      	movs	r0, #7
 80038b8:	f240 1173 	movw	r1, #371	; 0x173
 80038bc:	f7ff fbfc 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 80038c0:	20c8      	movs	r0, #200	; 0xc8
 80038c2:	f7fe fc8f 	bl	80021e4 <wait_ms>
 80038c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038ca:	f7fe fc8b 	bl	80021e4 <wait_ms>
      }
      lcd_delay(500);
      lcd_clear(BLACK);
}
 80038ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      lcd_clear(BLACK);
 80038d2:	2000      	movs	r0, #0
 80038d4:	f7ff bc44 	b.w	8003160 <lcd_clear>
      }	else if (device_code == 0x8989) {
 80038d8:	f648 1389 	movw	r3, #35209	; 0x8989
 80038dc:	4298      	cmp	r0, r3
 80038de:	f040 80b9 	bne.w	8003a54 <lcd_init+0x8d4>
	 lcd_write_register(0x0000,0x0001);
 80038e2:	2101      	movs	r1, #1
 80038e4:	4620      	mov	r0, r4
 80038e6:	f7ff fbe7 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0003,0xA8A4);
 80038ea:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80038ee:	2003      	movs	r0, #3
 80038f0:	f7ff fbe2 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x000C,0x0000);
 80038f4:	4621      	mov	r1, r4
 80038f6:	200c      	movs	r0, #12
 80038f8:	f7ff fbde 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x000D,0x080C);
 80038fc:	f640 010c 	movw	r1, #2060	; 0x80c
 8003900:	200d      	movs	r0, #13
 8003902:	f7ff fbd9 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x000E,0x2B00);
 8003906:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 800390a:	200e      	movs	r0, #14
 800390c:	f7ff fbd4 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x001E,0x00B0);
 8003910:	21b0      	movs	r1, #176	; 0xb0
 8003912:	4628      	mov	r0, r5
 8003914:	f7ff fbd0 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0001,0x2B3F);
 8003918:	f642 313f 	movw	r1, #11071	; 0x2b3f
 800391c:	2001      	movs	r0, #1
 800391e:	f7ff fbcb 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0002,0x0600);
 8003922:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003926:	2002      	movs	r0, #2
 8003928:	f7ff fbc6 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0010,0x0000);
 800392c:	4621      	mov	r1, r4
 800392e:	2010      	movs	r0, #16
 8003930:	f7ff fbc2 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0011,0x6070);
 8003934:	f246 0170 	movw	r1, #24688	; 0x6070
 8003938:	2011      	movs	r0, #17
 800393a:	f7ff fbbd 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0005,0x0000);
 800393e:	4621      	mov	r1, r4
 8003940:	2005      	movs	r0, #5
 8003942:	f7ff fbb9 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0006,0x0000);
 8003946:	4621      	mov	r1, r4
 8003948:	2006      	movs	r0, #6
 800394a:	f7ff fbb5 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0016,0xEF1C);
 800394e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8003952:	2016      	movs	r0, #22
 8003954:	f7ff fbb0 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0017,0x0003);
 8003958:	2103      	movs	r1, #3
 800395a:	2017      	movs	r0, #23
 800395c:	f7ff fbac 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0007,0x0233);
 8003960:	f240 2133 	movw	r1, #563	; 0x233
 8003964:	2007      	movs	r0, #7
 8003966:	f7ff fba7 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x000B,0x0000);
 800396a:	4621      	mov	r1, r4
 800396c:	200b      	movs	r0, #11
 800396e:	f7ff fba3 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x000F,0x0000);
 8003972:	4621      	mov	r1, r4
 8003974:	200f      	movs	r0, #15
 8003976:	f7ff fb9f 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0041,0x0000);
 800397a:	4621      	mov	r1, r4
 800397c:	2041      	movs	r0, #65	; 0x41
 800397e:	f7ff fb9b 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0042,0x0000);
 8003982:	4621      	mov	r1, r4
 8003984:	2042      	movs	r0, #66	; 0x42
 8003986:	f7ff fb97 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0048,0x0000);
 800398a:	4621      	mov	r1, r4
 800398c:	2048      	movs	r0, #72	; 0x48
 800398e:	f7ff fb93 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0049,0x013F);
 8003992:	f240 113f 	movw	r1, #319	; 0x13f
 8003996:	2049      	movs	r0, #73	; 0x49
 8003998:	f7ff fb8e 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x004A,0x0000);
 800399c:	4621      	mov	r1, r4
 800399e:	204a      	movs	r0, #74	; 0x4a
 80039a0:	f7ff fb8a 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x004B,0x0000);
 80039a4:	4621      	mov	r1, r4
 80039a6:	204b      	movs	r0, #75	; 0x4b
 80039a8:	f7ff fb86 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0044,0xEF00);
 80039ac:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80039b0:	2044      	movs	r0, #68	; 0x44
 80039b2:	f7ff fb81 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0045,0x0000);
 80039b6:	4621      	mov	r1, r4
 80039b8:	2045      	movs	r0, #69	; 0x45
 80039ba:	f7ff fb7d 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0046,0x013F);
 80039be:	f240 113f 	movw	r1, #319	; 0x13f
 80039c2:	2046      	movs	r0, #70	; 0x46
 80039c4:	f7ff fb78 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0030,0x0707);
 80039c8:	f240 7107 	movw	r1, #1799	; 0x707
 80039cc:	2030      	movs	r0, #48	; 0x30
 80039ce:	f7ff fb73 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0031,0x0204);
 80039d2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80039d6:	2031      	movs	r0, #49	; 0x31
 80039d8:	f7ff fb6e 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0032,0x0204);
 80039dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80039e0:	2032      	movs	r0, #50	; 0x32
 80039e2:	f7ff fb69 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0033,0x0502);
 80039e6:	f240 5102 	movw	r1, #1282	; 0x502
 80039ea:	2033      	movs	r0, #51	; 0x33
 80039ec:	f7ff fb64 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0034,0x0507);
 80039f0:	f240 5107 	movw	r1, #1287	; 0x507
 80039f4:	2034      	movs	r0, #52	; 0x34
 80039f6:	f7ff fb5f 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0035,0x0204);
 80039fa:	f44f 7101 	mov.w	r1, #516	; 0x204
 80039fe:	2035      	movs	r0, #53	; 0x35
 8003a00:	f7ff fb5a 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0036,0x0204);
 8003a04:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003a08:	2036      	movs	r0, #54	; 0x36
 8003a0a:	f7ff fb55 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0037,0x0502);
 8003a0e:	f240 5102 	movw	r1, #1282	; 0x502
 8003a12:	2037      	movs	r0, #55	; 0x37
 8003a14:	f7ff fb50 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x003A,0x0302);
 8003a18:	f240 3102 	movw	r1, #770	; 0x302
 8003a1c:	203a      	movs	r0, #58	; 0x3a
 8003a1e:	f7ff fb4b 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x003B,0x0302);
 8003a22:	f240 3102 	movw	r1, #770	; 0x302
 8003a26:	203b      	movs	r0, #59	; 0x3b
 8003a28:	f7ff fb46 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0023,0x0000);
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	2023      	movs	r0, #35	; 0x23
 8003a30:	f7ff fb42 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0024,0x0000);
 8003a34:	4621      	mov	r1, r4
 8003a36:	2024      	movs	r0, #36	; 0x24
 8003a38:	f7ff fb3e 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x0025,0x8000);
 8003a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a40:	2025      	movs	r0, #37	; 0x25
 8003a42:	f7ff fb39 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x004f,0);
 8003a46:	4621      	mov	r1, r4
 8003a48:	204f      	movs	r0, #79	; 0x4f
 8003a4a:	f7ff fb35 	bl	80030b8 <lcd_write_register>
    	 lcd_write_register(0x004e,0);
 8003a4e:	4621      	mov	r1, r4
 8003a50:	204e      	movs	r0, #78	; 0x4e
 8003a52:	e552      	b.n	80034fa <lcd_init+0x37a>
      }	else if (device_code == 0x8999) {
 8003a54:	f648 1399 	movw	r3, #35225	; 0x8999
 8003a58:	4298      	cmp	r0, r3
 8003a5a:	f47f af34 	bne.w	80038c6 <lcd_init+0x746>
	 lcd_write_register(0x00,0x0001);
 8003a5e:	2101      	movs	r1, #1
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7ff fb29 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x01,0x3B3F);
 8003a66:	f643 313f 	movw	r1, #15167	; 0x3b3f
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f7ff fb24 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x02,0x0600);
 8003a70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a74:	2002      	movs	r0, #2
 8003a76:	f7ff fb1f 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x0C,0x0007);
 8003a7a:	2107      	movs	r1, #7
 8003a7c:	200c      	movs	r0, #12
 8003a7e:	f7ff fb1b 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x0D,0x0006);
 8003a82:	2106      	movs	r1, #6
 8003a84:	200d      	movs	r0, #13
 8003a86:	f7ff fb17 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x0E,0x3200);
 8003a8a:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 8003a8e:	200e      	movs	r0, #14
 8003a90:	f7ff fb12 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x1E,0x00BB);
 8003a94:	21bb      	movs	r1, #187	; 0xbb
 8003a96:	4628      	mov	r0, r5
 8003a98:	f7ff fb0e 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x03,0x6A64);
 8003a9c:	f646 2164 	movw	r1, #27236	; 0x6a64
 8003aa0:	2003      	movs	r0, #3
 8003aa2:	f7ff fb09 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x0F,0x0000);
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	200f      	movs	r0, #15
 8003aaa:	f7ff fb05 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x44,0xEF00);
 8003aae:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8003ab2:	2044      	movs	r0, #68	; 0x44
 8003ab4:	f7ff fb00 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x45,0x0000);
 8003ab8:	4621      	mov	r1, r4
 8003aba:	2045      	movs	r0, #69	; 0x45
 8003abc:	f7ff fafc 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x46,0x013F);
 8003ac0:	f240 113f 	movw	r1, #319	; 0x13f
 8003ac4:	2046      	movs	r0, #70	; 0x46
 8003ac6:	f7ff faf7 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x30,0x0000);
 8003aca:	4621      	mov	r1, r4
 8003acc:	2030      	movs	r0, #48	; 0x30
 8003ace:	f7ff faf3 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x31,0x0706);
 8003ad2:	f240 7106 	movw	r1, #1798	; 0x706
 8003ad6:	2031      	movs	r0, #49	; 0x31
 8003ad8:	f7ff faee 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x32,0x0206);
 8003adc:	f240 2106 	movw	r1, #518	; 0x206
 8003ae0:	2032      	movs	r0, #50	; 0x32
 8003ae2:	f7ff fae9 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x33,0x0300);
 8003ae6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003aea:	2033      	movs	r0, #51	; 0x33
 8003aec:	f7ff fae4 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x34,0x0002);
 8003af0:	2102      	movs	r1, #2
 8003af2:	2034      	movs	r0, #52	; 0x34
 8003af4:	f7ff fae0 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x35,0x0000);
 8003af8:	4621      	mov	r1, r4
 8003afa:	2035      	movs	r0, #53	; 0x35
 8003afc:	f7ff fadc 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x36,0x0707);
 8003b00:	f240 7107 	movw	r1, #1799	; 0x707
 8003b04:	2036      	movs	r0, #54	; 0x36
 8003b06:	f7ff fad7 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x37,0x0200);
 8003b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b0e:	2037      	movs	r0, #55	; 0x37
 8003b10:	f7ff fad2 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x3A,0x0908);
 8003b14:	f640 1108 	movw	r1, #2312	; 0x908
 8003b18:	203a      	movs	r0, #58	; 0x3a
 8003b1a:	f7ff facd 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x3B,0x0F0D);
 8003b1e:	f640 710d 	movw	r1, #3853	; 0xf0d
 8003b22:	203b      	movs	r0, #59	; 0x3b
 8003b24:	f7ff fac8 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x28,0x0006);
 8003b28:	2106      	movs	r1, #6
 8003b2a:	2028      	movs	r0, #40	; 0x28
 8003b2c:	f7ff fac4 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x2F,0x12EB);
 8003b30:	f241 21eb 	movw	r1, #4843	; 0x12eb
 8003b34:	202f      	movs	r0, #47	; 0x2f
 8003b36:	f7ff fabf 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x26,0x7000);
 8003b3a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8003b3e:	2026      	movs	r0, #38	; 0x26
 8003b40:	f7ff faba 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x20,0xB0E3);
 8003b44:	f24b 01e3 	movw	r1, #45283	; 0xb0e3
 8003b48:	2020      	movs	r0, #32
 8003b4a:	f7ff fab5 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x27,0x0044);
 8003b4e:	2144      	movs	r1, #68	; 0x44
 8003b50:	2027      	movs	r0, #39	; 0x27
 8003b52:	f7ff fab1 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x2E,0x7E45);
 8003b56:	f647 6145 	movw	r1, #32325	; 0x7e45
 8003b5a:	202e      	movs	r0, #46	; 0x2e
 8003b5c:	f7ff faac 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x10,0x0000);
 8003b60:	4621      	mov	r1, r4
 8003b62:	2010      	movs	r0, #16
 8003b64:	f7ff faa8 	bl	80030b8 <lcd_write_register>
      wait_ms(count);
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f7fe fb3b 	bl	80021e4 <wait_ms>
	 lcd_write_register(0x11,0x6870);
 8003b6e:	f646 0170 	movw	r1, #26736	; 0x6870
 8003b72:	2011      	movs	r0, #17
 8003b74:	f7ff faa0 	bl	80030b8 <lcd_write_register>
	 lcd_write_register(0x07,0x0033);
 8003b78:	2133      	movs	r1, #51	; 0x33
 8003b7a:	e58b      	b.n	8003694 <lcd_init+0x514>

08003b7c <lcd_draw_line>:


void lcd_draw_line (unsigned char x1, unsigned short y1, unsigned char x2, unsigned short y2)
{
      unsigned short x, y, t;
      if ((x1 == x2) && (y1 == y2)) lcd_set_pixel(x1, y1);
 8003b7c:	4290      	cmp	r0, r2
{
 8003b7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b82:	4605      	mov	r5, r0
 8003b84:	460c      	mov	r4, r1
 8003b86:	461e      	mov	r6, r3
      if ((x1 == x2) && (y1 == y2)) lcd_set_pixel(x1, y1);
 8003b88:	d105      	bne.n	8003b96 <lcd_draw_line+0x1a>
 8003b8a:	4299      	cmp	r1, r3
 8003b8c:	d103      	bne.n	8003b96 <lcd_draw_line+0x1a>
	 for (x=x1;x<=x2;x++) {
	     y =(unsigned int)(x - x1) * (y2 - y1) / (x2 - x1) + y1;
	     lcd_set_pixel(x,y);
	 }
      }
}
 8003b8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      if ((x1 == x2) && (y1 == y2)) lcd_set_pixel(x1, y1);
 8003b92:	f7ff bad7 	b.w	8003144 <lcd_set_pixel>
      else if (abs(y2 - y1) > abs(x2 - x1)) {
 8003b96:	1b31      	subs	r1, r6, r4
 8003b98:	1b53      	subs	r3, r2, r5
 8003b9a:	2900      	cmp	r1, #0
 8003b9c:	bfb8      	it	lt
 8003b9e:	4249      	neglt	r1, r1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bfb8      	it	lt
 8003ba4:	425b      	neglt	r3, r3
 8003ba6:	4299      	cmp	r1, r3
 8003ba8:	dd1b      	ble.n	8003be2 <lcd_draw_line+0x66>
	 if (y1 > y2) {
 8003baa:	42b4      	cmp	r4, r6
 8003bac:	d905      	bls.n	8003bba <lcd_draw_line+0x3e>
 8003bae:	4623      	mov	r3, r4
 8003bb0:	4634      	mov	r4, r6
 8003bb2:	461e      	mov	r6, r3
 8003bb4:	462b      	mov	r3, r5
 8003bb6:	4615      	mov	r5, r2
 8003bb8:	461a      	mov	r2, r3
	 for (y=y1;y<y2;y++) {
 8003bba:	2700      	movs	r7, #0
 8003bbc:	eba2 0805 	sub.w	r8, r2, r5
	     x = (unsigned int)(y - y1) * (x2 - x1) / (y2 - y1) + x1;
 8003bc0:	eba6 0904 	sub.w	r9, r6, r4
	 for (y=y1;y<y2;y++) {
 8003bc4:	42b4      	cmp	r4, r6
 8003bc6:	d301      	bcc.n	8003bcc <lcd_draw_line+0x50>
}
 8003bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	     x = (unsigned int)(y - y1) * (x2 - x1) / (y2 - y1) + x1;
 8003bcc:	fbb7 f0f9 	udiv	r0, r7, r9
 8003bd0:	4428      	add	r0, r5
	     lcd_set_pixel(x, y);
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	b2c0      	uxtb	r0, r0
	 for (y=y1;y<y2;y++) {
 8003bd6:	3401      	adds	r4, #1
	     lcd_set_pixel(x, y);
 8003bd8:	f7ff fab4 	bl	8003144 <lcd_set_pixel>
	 for (y=y1;y<y2;y++) {
 8003bdc:	b2a4      	uxth	r4, r4
 8003bde:	4447      	add	r7, r8
 8003be0:	e7f0      	b.n	8003bc4 <lcd_draw_line+0x48>
	 if (x1 > x2) {
 8003be2:	4295      	cmp	r5, r2
 8003be4:	d905      	bls.n	8003bf2 <lcd_draw_line+0x76>
 8003be6:	4623      	mov	r3, r4
 8003be8:	4634      	mov	r4, r6
 8003bea:	461e      	mov	r6, r3
 8003bec:	462b      	mov	r3, r5
 8003bee:	4615      	mov	r5, r2
 8003bf0:	461a      	mov	r2, r3
	 for (x=x1;x<=x2;x++) {
 8003bf2:	f04f 0800 	mov.w	r8, #0
 8003bf6:	b2af      	uxth	r7, r5
 8003bf8:	1b36      	subs	r6, r6, r4
 8003bfa:	fa1f f982 	uxth.w	r9, r2
	     y =(unsigned int)(x - x1) * (y2 - y1) / (x2 - x1) + y1;
 8003bfe:	1b55      	subs	r5, r2, r5
	 for (x=x1;x<=x2;x++) {
 8003c00:	45b9      	cmp	r9, r7
 8003c02:	d3e1      	bcc.n	8003bc8 <lcd_draw_line+0x4c>
	     y =(unsigned int)(x - x1) * (y2 - y1) / (x2 - x1) + y1;
 8003c04:	fbb8 f1f5 	udiv	r1, r8, r5
 8003c08:	4421      	add	r1, r4
	     lcd_set_pixel(x,y);
 8003c0a:	b2f8      	uxtb	r0, r7
 8003c0c:	b289      	uxth	r1, r1
	 for (x=x1;x<=x2;x++) {
 8003c0e:	3701      	adds	r7, #1
	     lcd_set_pixel(x,y);
 8003c10:	f7ff fa98 	bl	8003144 <lcd_set_pixel>
	 for (x=x1;x<=x2;x++) {
 8003c14:	b2bf      	uxth	r7, r7
 8003c16:	44b0      	add	r8, r6
 8003c18:	e7f2      	b.n	8003c00 <lcd_draw_line+0x84>

08003c1a <draw_apple_logo>:
void draw_apple_logo(unsigned short x,unsigned short y){
 8003c1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c1e:	460c      	mov	r4, r1
	lcd_draw_line(x+32,y,x+34,y);
 8003c20:	b2c5      	uxtb	r5, r0
 8003c22:	f105 0320 	add.w	r3, r5, #32
void draw_apple_logo(unsigned short x,unsigned short y){
 8003c26:	b08f      	sub	sp, #60	; 0x3c
	lcd_draw_line(x+32,y,x+34,y);
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f105 0622 	add.w	r6, r5, #34	; 0x22
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	b2f6      	uxtb	r6, r6
 8003c32:	460b      	mov	r3, r1
 8003c34:	4632      	mov	r2, r6
 8003c36:	9801      	ldr	r0, [sp, #4]
 8003c38:	f7ff ffa0 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+30,y+1,x+34,y+1);
 8003c3c:	f105 031e 	add.w	r3, r5, #30
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	9305      	str	r3, [sp, #20]
 8003c44:	1c63      	adds	r3, r4, #1
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	4632      	mov	r2, r6
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	9805      	ldr	r0, [sp, #20]
 8003c4e:	f7ff ff95 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+28,y+2,x+34,y+2);
 8003c52:	f105 0a1c 	add.w	sl, r5, #28
 8003c56:	1ca3      	adds	r3, r4, #2
 8003c58:	fa5f fa8a 	uxtb.w	sl, sl
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	4632      	mov	r2, r6
 8003c60:	4619      	mov	r1, r3
 8003c62:	4650      	mov	r0, sl
 8003c64:	f7ff ff8a 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+27,y+3,x+33,y+3);
 8003c68:	f105 091b 	add.w	r9, r5, #27
 8003c6c:	1ce3      	adds	r3, r4, #3
 8003c6e:	f105 0721 	add.w	r7, r5, #33	; 0x21
 8003c72:	b2ff      	uxtb	r7, r7
 8003c74:	fa5f f989 	uxtb.w	r9, r9
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	463a      	mov	r2, r7
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4648      	mov	r0, r9
 8003c80:	f7ff ff7c 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+26,y+4,x+33,y+4);
 8003c84:	f105 061a 	add.w	r6, r5, #26
 8003c88:	1d23      	adds	r3, r4, #4
 8003c8a:	b2f6      	uxtb	r6, r6
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	463a      	mov	r2, r7
 8003c90:	4619      	mov	r1, r3
 8003c92:	4630      	mov	r0, r6
 8003c94:	f7ff ff72 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+26,y+5,x+33,y+5);
 8003c98:	1d63      	adds	r3, r4, #5
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	463a      	mov	r2, r7
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f7ff ff6b 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+25,y+6,x+32,y+6);
 8003ca6:	f105 0719 	add.w	r7, r5, #25
 8003caa:	1da3      	adds	r3, r4, #6
 8003cac:	b2ff      	uxtb	r7, r7
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	9a01      	ldr	r2, [sp, #4]
 8003cb6:	f7ff ff61 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+25,y+7,x+32,y+7);
 8003cba:	1de3      	adds	r3, r4, #7
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	9a01      	ldr	r2, [sp, #4]
 8003cc4:	f7ff ff5a 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+24,y+8,x+31,y+8);
 8003cc8:	f105 0b18 	add.w	fp, r5, #24
 8003ccc:	f104 0308 	add.w	r3, r4, #8
 8003cd0:	f105 081f 	add.w	r8, r5, #31
 8003cd4:	fa5f fb8b 	uxtb.w	fp, fp
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	fa5f f888 	uxtb.w	r8, r8
 8003cde:	4642      	mov	r2, r8
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4658      	mov	r0, fp
 8003ce4:	f7ff ff4a 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+24,y+9,x+30,y+9);
 8003ce8:	f104 0309 	add.w	r3, r4, #9
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4658      	mov	r0, fp
 8003cf2:	9a05      	ldr	r2, [sp, #20]
 8003cf4:	f7ff ff42 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+24,y+10,x+29,y+10);
 8003cf8:	f105 071d 	add.w	r7, r5, #29
 8003cfc:	f104 030a 	add.w	r3, r4, #10
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b2ff      	uxtb	r7, r7
 8003d04:	463a      	mov	r2, r7
 8003d06:	4619      	mov	r1, r3
 8003d08:	4658      	mov	r0, fp
 8003d0a:	f7ff ff37 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+24,y+11,x+28,y+11);
 8003d0e:	f104 030b 	add.w	r3, r4, #11
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	4652      	mov	r2, sl
 8003d16:	4619      	mov	r1, r3
 8003d18:	4658      	mov	r0, fp
 8003d1a:	f7ff ff2f 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+24,y+12,x+27,y+12);
 8003d1e:	f104 030c 	add.w	r3, r4, #12
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	464a      	mov	r2, r9
 8003d26:	4619      	mov	r1, r3
 8003d28:	4658      	mov	r0, fp
 8003d2a:	f7ff ff27 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+13,y+13,x+15,y+13);lcd_draw_line(x+31,y+13,x+37,y+13);
 8003d2e:	f105 030d 	add.w	r3, r5, #13
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f104 090d 	add.w	r9, r4, #13
 8003d38:	fa1f f989 	uxth.w	r9, r9
 8003d3c:	9308      	str	r3, [sp, #32]
 8003d3e:	f105 020f 	add.w	r2, r5, #15
 8003d42:	464b      	mov	r3, r9
 8003d44:	4649      	mov	r1, r9
 8003d46:	9808      	ldr	r0, [sp, #32]
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	f7ff ff17 	bl	8003b7c <lcd_draw_line>
 8003d4e:	f105 0325 	add.w	r3, r5, #37	; 0x25
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	9309      	str	r3, [sp, #36]	; 0x24
 8003d56:	4649      	mov	r1, r9
 8003d58:	464b      	mov	r3, r9
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d5e:	f7ff ff0d 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+9,y+14,x+19,y+14);lcd_draw_line(x+29,y+14,x+39,y+14);
 8003d62:	f105 0309 	add.w	r3, r5, #9
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	930a      	str	r3, [sp, #40]	; 0x28
 8003d6a:	f105 0313 	add.w	r3, r5, #19
 8003d6e:	f104 090e 	add.w	r9, r4, #14
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	fa1f f989 	uxth.w	r9, r9
 8003d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d7a:	f105 0827 	add.w	r8, r5, #39	; 0x27
 8003d7e:	fa5f f888 	uxtb.w	r8, r8
 8003d82:	464b      	mov	r3, r9
 8003d84:	4649      	mov	r1, r9
 8003d86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d8a:	f7ff fef7 	bl	8003b7c <lcd_draw_line>
 8003d8e:	464b      	mov	r3, r9
 8003d90:	4642      	mov	r2, r8
 8003d92:	4649      	mov	r1, r9
 8003d94:	4638      	mov	r0, r7
 8003d96:	f7ff fef1 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+8,y+15,x+22,y+15);lcd_draw_line(x+26,y+15,x+41,y+15);
 8003d9a:	f105 0308 	add.w	r3, r5, #8
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f104 070f 	add.w	r7, r4, #15
 8003da4:	b2bf      	uxth	r7, r7
 8003da6:	930c      	str	r3, [sp, #48]	; 0x30
 8003da8:	f105 0216 	add.w	r2, r5, #22
 8003dac:	463b      	mov	r3, r7
 8003dae:	4639      	mov	r1, r7
 8003db0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	f7ff fee2 	bl	8003b7c <lcd_draw_line>
 8003db8:	f105 0329 	add.w	r3, r5, #41	; 0x29
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	9302      	str	r3, [sp, #8]
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	463b      	mov	r3, r7
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	9a02      	ldr	r2, [sp, #8]
 8003dc8:	f7ff fed8 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+6,y+16,x+42,y+16);
 8003dcc:	1dab      	adds	r3, r5, #6
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	9306      	str	r3, [sp, #24]
 8003dd2:	f104 0310 	add.w	r3, r4, #16
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f105 022a 	add.w	r2, r5, #42	; 0x2a
 8003ddc:	4619      	mov	r1, r3
 8003dde:	9806      	ldr	r0, [sp, #24]
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	9203      	str	r2, [sp, #12]
 8003de4:	f7ff feca 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+5,y+17,x+43,y+17);
 8003de8:	1d6b      	adds	r3, r5, #5
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	9304      	str	r3, [sp, #16]
 8003dee:	f105 0b2b 	add.w	fp, r5, #43	; 0x2b
 8003df2:	f104 0311 	add.w	r3, r4, #17
 8003df6:	fa5f fb8b 	uxtb.w	fp, fp
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	465a      	mov	r2, fp
 8003dfe:	4619      	mov	r1, r3
 8003e00:	9804      	ldr	r0, [sp, #16]
 8003e02:	f7ff febb 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+5,y+18,x+43,y+18);
 8003e06:	f104 0312 	add.w	r3, r4, #18
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	465a      	mov	r2, fp
 8003e0e:	4619      	mov	r1, r3
 8003e10:	9804      	ldr	r0, [sp, #16]
 8003e12:	f7ff feb3 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+4,y+19,x+43,y+19);
 8003e16:	1d2b      	adds	r3, r5, #4
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	9307      	str	r3, [sp, #28]
 8003e1c:	f104 0313 	add.w	r3, r4, #19
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	465a      	mov	r2, fp
 8003e24:	4619      	mov	r1, r3
 8003e26:	9807      	ldr	r0, [sp, #28]
 8003e28:	f7ff fea8 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+3,y+20,x+41,y+20);
 8003e2c:	f105 0903 	add.w	r9, r5, #3
 8003e30:	f104 0314 	add.w	r3, r4, #20
 8003e34:	fa5f f989 	uxtb.w	r9, r9
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4648      	mov	r0, r9
 8003e3e:	9a02      	ldr	r2, [sp, #8]
 8003e40:	f7ff fe9c 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+3,y+21,x+40,y+21);
 8003e44:	f104 0315 	add.w	r3, r4, #21
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f105 0a28 	add.w	sl, r5, #40	; 0x28
 8003e4e:	fa5f f28a 	uxtb.w	r2, sl
 8003e52:	4619      	mov	r1, r3
 8003e54:	4648      	mov	r0, r9
 8003e56:	9200      	str	r2, [sp, #0]
	lcd_draw_line(x+2,y+22,x+40,y+22);
 8003e58:	1caf      	adds	r7, r5, #2
	lcd_draw_line(x+3,y+21,x+40,y+21);
 8003e5a:	f7ff fe8f 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+2,y+22,x+40,y+22);
 8003e5e:	f104 0316 	add.w	r3, r4, #22
 8003e62:	b2ff      	uxtb	r7, r7
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	4638      	mov	r0, r7
 8003e6a:	9a00      	ldr	r2, [sp, #0]
 8003e6c:	f7ff fe86 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+2,y+23,x+39,y+23);
 8003e70:	f104 0317 	add.w	r3, r4, #23
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	4642      	mov	r2, r8
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	f7ff fe7e 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+2,y+24,x+39,y+24);
 8003e80:	f104 0318 	add.w	r3, r4, #24
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	4642      	mov	r2, r8
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f7ff fe76 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+1,y+25,x+38,y+25);
 8003e90:	f105 0626 	add.w	r6, r5, #38	; 0x26
 8003e94:	1c68      	adds	r0, r5, #1
 8003e96:	f104 0319 	add.w	r3, r4, #25
 8003e9a:	fa5f fa80 	uxtb.w	sl, r0
 8003e9e:	b2f6      	uxtb	r6, r6
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	4632      	mov	r2, r6
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	f7ff fe68 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+1,y+26,x+38,y+26);
 8003eac:	f104 031a 	add.w	r3, r4, #26
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4632      	mov	r2, r6
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	f7ff fe60 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+1,y+27,x+38,y+27);	
 8003ebc:	f104 031b 	add.w	r3, r4, #27
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4650      	mov	r0, sl
 8003ec8:	f7ff fe58 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+1,y+28,x+38,y+28);
 8003ecc:	f104 031c 	add.w	r3, r4, #28
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4650      	mov	r0, sl
 8003ed8:	f7ff fe50 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+1,y+29,x+38,y+29);
 8003edc:	f104 031d 	add.w	r3, r4, #29
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4632      	mov	r2, r6
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	f7ff fe48 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+1,y+30,x+38,y+30);
 8003eec:	f104 031e 	add.w	r3, r4, #30
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	4632      	mov	r2, r6
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4650      	mov	r0, sl
 8003ef8:	f7ff fe40 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+1,y+31,x+38,y+31);
 8003efc:	f104 031f 	add.w	r3, r4, #31
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	4632      	mov	r2, r6
 8003f04:	4619      	mov	r1, r3
 8003f06:	4650      	mov	r0, sl
 8003f08:	f7ff fe38 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+1,y+32,x+38,y+32);
 8003f0c:	f104 0320 	add.w	r3, r4, #32
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	4632      	mov	r2, r6
 8003f14:	4619      	mov	r1, r3
 8003f16:	4650      	mov	r0, sl
 8003f18:	f7ff fe30 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+1,y+33,x+39,y+33);
 8003f1c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	4642      	mov	r2, r8
 8003f24:	4619      	mov	r1, r3
 8003f26:	4650      	mov	r0, sl
 8003f28:	f7ff fe28 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+2,y+34,x+39,y+34);
 8003f2c:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	4642      	mov	r2, r8
 8003f34:	4619      	mov	r1, r3
 8003f36:	4638      	mov	r0, r7
 8003f38:	f7ff fe20 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+2,y+35,x+40,y+35);
 8003f3c:	f104 0323 	add.w	r3, r4, #35	; 0x23
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4619      	mov	r1, r3
 8003f44:	4638      	mov	r0, r7
 8003f46:	9a00      	ldr	r2, [sp, #0]
 8003f48:	f7ff fe18 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+2,y+36,x+40,y+36);
 8003f4c:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4619      	mov	r1, r3
 8003f54:	4638      	mov	r0, r7
 8003f56:	9a00      	ldr	r2, [sp, #0]
 8003f58:	f7ff fe10 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+2,y+37,x+41,y+37);
 8003f5c:	f104 0325 	add.w	r3, r4, #37	; 0x25
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	4619      	mov	r1, r3
 8003f64:	4638      	mov	r0, r7
 8003f66:	9a02      	ldr	r2, [sp, #8]
 8003f68:	f7ff fe08 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+3,y+38,x+42,y+38);
 8003f6c:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4619      	mov	r1, r3
 8003f74:	4648      	mov	r0, r9
 8003f76:	9a03      	ldr	r2, [sp, #12]
 8003f78:	f7ff fe00 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+3,y+39,x+44,y+39);
 8003f7c:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 8003f80:	f104 0327 	add.w	r3, r4, #39	; 0x27
 8003f84:	b2ff      	uxtb	r7, r7
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	463a      	mov	r2, r7
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4648      	mov	r0, r9
 8003f8e:	f7ff fdf5 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+3,y+40,x+45,y+40);
 8003f92:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f105 022d 	add.w	r2, r5, #45	; 0x2d
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4648      	mov	r0, r9
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	920d      	str	r2, [sp, #52]	; 0x34
 8003fa4:	f7ff fdea 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+3,y+41,x+45,y+41);
 8003fa8:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4648      	mov	r0, r9
 8003fb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003fb4:	f7ff fde2 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+4,y+42,x+45,y+42);
 8003fb8:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003fc2:	9807      	ldr	r0, [sp, #28]
 8003fc4:	f7ff fdda 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+4,y+43,x+44,y+43);
 8003fc8:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	463a      	mov	r2, r7
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	9807      	ldr	r0, [sp, #28]
 8003fd4:	f7ff fdd2 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+5,y+44,x+44,y+44);
 8003fd8:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	463a      	mov	r2, r7
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	9804      	ldr	r0, [sp, #16]
 8003fe4:	f7ff fdca 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+5,y+45,x+43,y+45);
 8003fe8:	f104 032d 	add.w	r3, r4, #45	; 0x2d
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	465a      	mov	r2, fp
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	9804      	ldr	r0, [sp, #16]
 8003ff4:	f7ff fdc2 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+6,y+46,x+43,y+46);
 8003ff8:	f104 032e 	add.w	r3, r4, #46	; 0x2e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	465a      	mov	r2, fp
 8004000:	4619      	mov	r1, r3
 8004002:	9806      	ldr	r0, [sp, #24]
 8004004:	f7ff fdba 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+6,y+47,x+42,y+47);
 8004008:	f104 032f 	add.w	r3, r4, #47	; 0x2f
 800400c:	b29b      	uxth	r3, r3
 800400e:	4619      	mov	r1, r3
 8004010:	9a03      	ldr	r2, [sp, #12]
 8004012:	9806      	ldr	r0, [sp, #24]
 8004014:	f7ff fdb2 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+7,y+48,x+42,y+48);
 8004018:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800401c:	b29b      	uxth	r3, r3
 800401e:	1de8      	adds	r0, r5, #7
 8004020:	4619      	mov	r1, r3
 8004022:	9a03      	ldr	r2, [sp, #12]
 8004024:	b2c0      	uxtb	r0, r0
 8004026:	f7ff fda9 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+8,y+49,x+41,y+49);
 800402a:	f104 0331 	add.w	r3, r4, #49	; 0x31
 800402e:	b29b      	uxth	r3, r3
 8004030:	4619      	mov	r1, r3
 8004032:	9a02      	ldr	r2, [sp, #8]
 8004034:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004036:	f7ff fda1 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+9,y+50,x+40,y+50);
 800403a:	f104 0332 	add.w	r3, r4, #50	; 0x32
 800403e:	b29b      	uxth	r3, r3
 8004040:	4619      	mov	r1, r3
 8004042:	9a00      	ldr	r2, [sp, #0]
 8004044:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004046:	f7ff fd99 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+10,y+51,x+39,y+51);
 800404a:	f104 0333 	add.w	r3, r4, #51	; 0x33
 800404e:	b29b      	uxth	r3, r3
 8004050:	f105 000a 	add.w	r0, r5, #10
 8004054:	4642      	mov	r2, r8
 8004056:	4619      	mov	r1, r3
 8004058:	b2c0      	uxtb	r0, r0
 800405a:	f7ff fd8f 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+11,y+52,x+38,y+52);
 800405e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004062:	b29b      	uxth	r3, r3
 8004064:	f105 000b 	add.w	r0, r5, #11
 8004068:	4632      	mov	r2, r6
 800406a:	4619      	mov	r1, r3
 800406c:	b2c0      	uxtb	r0, r0
	lcd_draw_line(x+12,y+53,x+19,y+53);lcd_draw_line(x+30,y+53,x+37,y+53);
 800406e:	f104 0635 	add.w	r6, r4, #53	; 0x35
	lcd_draw_line(x+11,y+52,x+38,y+52);
 8004072:	f7ff fd83 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+12,y+53,x+19,y+53);lcd_draw_line(x+30,y+53,x+37,y+53);
 8004076:	b2b6      	uxth	r6, r6
 8004078:	f105 000c 	add.w	r0, r5, #12
 800407c:	4633      	mov	r3, r6
 800407e:	4631      	mov	r1, r6
 8004080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004082:	b2c0      	uxtb	r0, r0
 8004084:	f7ff fd7a 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+13,y+54,x+18,y+54);lcd_draw_line(x+32,y+54,x+36,y+54);
 8004088:	3436      	adds	r4, #54	; 0x36
	lcd_draw_line(x+12,y+53,x+19,y+53);lcd_draw_line(x+30,y+53,x+37,y+53);
 800408a:	4633      	mov	r3, r6
 800408c:	4631      	mov	r1, r6
 800408e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004090:	9805      	ldr	r0, [sp, #20]
 8004092:	f7ff fd73 	bl	8003b7c <lcd_draw_line>
	lcd_draw_line(x+13,y+54,x+18,y+54);lcd_draw_line(x+32,y+54,x+36,y+54);
 8004096:	b2a4      	uxth	r4, r4
 8004098:	f105 0212 	add.w	r2, r5, #18
 800409c:	4623      	mov	r3, r4
 800409e:	4621      	mov	r1, r4
 80040a0:	9808      	ldr	r0, [sp, #32]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	f7ff fd6a 	bl	8003b7c <lcd_draw_line>
 80040a8:	4623      	mov	r3, r4
 80040aa:	4621      	mov	r1, r4
 80040ac:	f105 0224 	add.w	r2, r5, #36	; 0x24
 80040b0:	9801      	ldr	r0, [sp, #4]
 80040b2:	b2d2      	uxtb	r2, r2
}
 80040b4:	b00f      	add	sp, #60	; 0x3c
 80040b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	lcd_draw_line(x+13,y+54,x+18,y+54);lcd_draw_line(x+32,y+54,x+36,y+54);
 80040ba:	f7ff bd5f 	b.w	8003b7c <lcd_draw_line>

080040be <lcd_draw_rectangle>:


void lcd_draw_rectangle (unsigned char x1, unsigned short y1, unsigned char x2, unsigned short y2)
{
 80040be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c2:	461c      	mov	r4, r3
 80040c4:	4606      	mov	r6, r0
 80040c6:	460d      	mov	r5, r1
 80040c8:	4617      	mov	r7, r2
      lcd_draw_line(x1,y1,x2,y1);
 80040ca:	460b      	mov	r3, r1
 80040cc:	f7ff fd56 	bl	8003b7c <lcd_draw_line>
      lcd_draw_line(x1,y1,x1,y2);
 80040d0:	4623      	mov	r3, r4
 80040d2:	4632      	mov	r2, r6
 80040d4:	4629      	mov	r1, r5
 80040d6:	4630      	mov	r0, r6
 80040d8:	f7ff fd50 	bl	8003b7c <lcd_draw_line>
      lcd_draw_line(x1,y2,x2,y2);
 80040dc:	4623      	mov	r3, r4
 80040de:	463a      	mov	r2, r7
 80040e0:	4621      	mov	r1, r4
 80040e2:	4630      	mov	r0, r6
 80040e4:	f7ff fd4a 	bl	8003b7c <lcd_draw_line>
      lcd_draw_line(x2,y1,x2,y2);
 80040e8:	4623      	mov	r3, r4
 80040ea:	463a      	mov	r2, r7
 80040ec:	4629      	mov	r1, r5
 80040ee:	4638      	mov	r0, r7
}
 80040f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      lcd_draw_line(x2,y1,x2,y2);
 80040f4:	f7ff bd42 	b.w	8003b7c <lcd_draw_line>

080040f8 <set_pixel>:
      background_color = color;
}


void set_pixel (unsigned short x, unsigned short y, unsigned short color)
{
 80040f8:	b538      	push	{r3, r4, r5, lr}
      unsigned short temp = foreground_color;
 80040fa:	4c04      	ldr	r4, [pc, #16]	; (800410c <set_pixel+0x14>)
      foreground_color = color;
      lcd_set_pixel(x,y);
 80040fc:	b2c0      	uxtb	r0, r0
      unsigned short temp = foreground_color;
 80040fe:	8825      	ldrh	r5, [r4, #0]
      foreground_color = color;
 8004100:	8022      	strh	r2, [r4, #0]
      lcd_set_pixel(x,y);
 8004102:	f7ff f81f 	bl	8003144 <lcd_set_pixel>
      foreground_color = temp;
 8004106:	8025      	strh	r5, [r4, #0]
}
 8004108:	bd38      	pop	{r3, r4, r5, pc}
 800410a:	bf00      	nop
 800410c:	20001450 	.word	0x20001450

08004110 <out_lcd>:


void out_lcd (char wchar)
{
 8004110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004114:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800415c <out_lcd+0x4c>
 8004118:	4605      	mov	r5, r0
      int idx;
      for (idx=0;idx<8;idx++) {
 800411a:	2400      	movs	r4, #0
 800411c:	4646      	mov	r6, r8
 800411e:	4f0c      	ldr	r7, [pc, #48]	; (8004150 <out_lcd+0x40>)
 8004120:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8004160 <out_lcd+0x50>
          if ((s_bit[idx] & wchar) == 0) set_pixel(tx,ty,background_color); else set_pixel(tx,ty,foreground_color);
 8004124:	f817 3b01 	ldrb.w	r3, [r7], #1
 8004128:	f8b8 0000 	ldrh.w	r0, [r8]
 800412c:	422b      	tst	r3, r5
 800412e:	bf0c      	ite	eq
 8004130:	4b08      	ldreq	r3, [pc, #32]	; (8004154 <out_lcd+0x44>)
 8004132:	4b09      	ldrne	r3, [pc, #36]	; (8004158 <out_lcd+0x48>)
 8004134:	f8b9 1000 	ldrh.w	r1, [r9]
 8004138:	881a      	ldrh	r2, [r3, #0]
 800413a:	f7ff ffdd 	bl	80040f8 <set_pixel>
          tx++;
 800413e:	8833      	ldrh	r3, [r6, #0]
      for (idx=0;idx<8;idx++) {
 8004140:	3401      	adds	r4, #1
          tx++;
 8004142:	3301      	adds	r3, #1
      for (idx=0;idx<8;idx++) {
 8004144:	2c08      	cmp	r4, #8
          tx++;
 8004146:	8033      	strh	r3, [r6, #0]
      for (idx=0;idx<8;idx++) {
 8004148:	d1ec      	bne.n	8004124 <out_lcd+0x14>
      }
}
 800414a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800414e:	bf00      	nop
 8004150:	080118de 	.word	0x080118de
 8004154:	2000131c 	.word	0x2000131c
 8004158:	20001450 	.word	0x20001450
 800415c:	20001444 	.word	0x20001444
 8004160:	2000144e 	.word	0x2000144e

08004164 <uni_to_kssm>:
      return result;
}


unsigned short uni_to_kssm (unsigned short wchar)
{
 8004164:	b530      	push	{r4, r5, lr}
      unsigned short cho,joong,jong;
      unsigned short result = 0x8000;
      cho = 2 + (wchar - 0xAC00) / (21 * 28);
 8004166:	f44f 7513 	mov.w	r5, #588	; 0x24c
 800416a:	f5a0 442c 	sub.w	r4, r0, #44032	; 0xac00
 800416e:	fb94 f2f5 	sdiv	r2, r4, r5
 8004172:	1c93      	adds	r3, r2, #2
 8004174:	b299      	uxth	r1, r3
      joong = (wchar - 0xAC00) % (21 * 28) / 28;
 8004176:	231c      	movs	r3, #28
 8004178:	fb05 4212 	mls	r2, r5, r2, r4
 800417c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004180:	b29b      	uxth	r3, r3
      if (joong < 5) joong += 3;
 8004182:	2b04      	cmp	r3, #4
 8004184:	d816      	bhi.n	80041b4 <uni_to_kssm+0x50>
 8004186:	3303      	adds	r3, #3
      else if (joong < 11) joong += 5;
      else if (joong < 17) joong += 7;
      else joong += 9;
      jong  = (wchar - 0xAC00) % 28;
 8004188:	221c      	movs	r2, #28
      else joong += 9;
 800418a:	b29b      	uxth	r3, r3
      if (jong < 17) jong++;
      else jong += 2;
      result |= cho << 10;
      result |= joong << 5;
 800418c:	015b      	lsls	r3, r3, #5
 800418e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
      jong  = (wchar - 0xAC00) % 28;
 8004196:	fb94 f0f2 	sdiv	r0, r4, r2
      result |= joong << 5;
 800419a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
      jong  = (wchar - 0xAC00) % 28;
 800419e:	fb02 4010 	mls	r0, r2, r0, r4
 80041a2:	b280      	uxth	r0, r0
      if (jong < 17) jong++;
 80041a4:	2810      	cmp	r0, #16
 80041a6:	bf94      	ite	ls
 80041a8:	3001      	addls	r0, #1
      else jong += 2;
 80041aa:	3002      	addhi	r0, #2
      result |= joong << 5;
 80041ac:	b29b      	uxth	r3, r3
      else jong += 2;
 80041ae:	b280      	uxth	r0, r0
      result |= jong;
      return result;
}
 80041b0:	4318      	orrs	r0, r3
 80041b2:	bd30      	pop	{r4, r5, pc}
      else if (joong < 11) joong += 5;
 80041b4:	2b0a      	cmp	r3, #10
 80041b6:	d801      	bhi.n	80041bc <uni_to_kssm+0x58>
 80041b8:	3305      	adds	r3, #5
 80041ba:	e7e5      	b.n	8004188 <uni_to_kssm+0x24>
      else if (joong < 17) joong += 7;
 80041bc:	2b10      	cmp	r3, #16
 80041be:	bf94      	ite	ls
 80041c0:	3307      	addls	r3, #7
      else joong += 9;
 80041c2:	3309      	addhi	r3, #9
 80041c4:	e7e0      	b.n	8004188 <uni_to_kssm+0x24>
	...

080041c8 <ks5601_to_kssm>:
{
      unsigned char xh,xl;
      unsigned short i,result;
      xh = ((wchar >> 8) & 0xFF);
      xl = (wchar & 0x00FF);
      if ((xh >= 0xB0) && (xl >= 0xA0)) {
 80041c8:	f5b0 4f30 	cmp.w	r0, #45056	; 0xb000
      xh = ((wchar >> 8) & 0xFF);
 80041cc:	ea4f 2310 	mov.w	r3, r0, lsr #8
      if ((xh >= 0xB0) && (xl >= 0xA0)) {
 80041d0:	d313      	bcc.n	80041fa <ks5601_to_kssm+0x32>
      xl = (wchar & 0x00FF);
 80041d2:	b2c0      	uxtb	r0, r0
      if ((xh >= 0xB0) && (xl >= 0xA0)) {
 80041d4:	289f      	cmp	r0, #159	; 0x9f
 80041d6:	d910      	bls.n	80041fa <ks5601_to_kssm+0x32>
         xh = xh - 0xB0;
 80041d8:	3350      	adds	r3, #80	; 0x50
         xl = xl - 0xA0;
         i = xl + xh * 96;
 80041da:	b2db      	uxtb	r3, r3
         xl = xl - 0xA0;
 80041dc:	3060      	adds	r0, #96	; 0x60
         i = xl + xh * 96;
 80041de:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80041e2:	b2c3      	uxtb	r3, r0
         result = KS_CODE[i][0] << 8 | KS_CODE[i][1];
 80041e4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80041e8:	4a05      	ldr	r2, [pc, #20]	; (8004200 <ks5601_to_kssm+0x38>)
 80041ea:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80041ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80041f2:	7858      	ldrb	r0, [r3, #1]
 80041f4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
         return result;
 80041f8:	4770      	bx	lr
      }
      return 0;
 80041fa:	2000      	movs	r0, #0
}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	0800d09e 	.word	0x0800d09e

08004204 <put_eng>:


void put_eng (char cdata)
{
      unsigned short val,pi;
      if (cdata < 0x20) {
 8004204:	281f      	cmp	r0, #31
{
 8004206:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (cdata < 0x20) {
 800420a:	d813      	bhi.n	8004234 <put_eng+0x30>
         if (cdata == 0x0D) ax = 0;
 800420c:	280d      	cmp	r0, #13
 800420e:	d104      	bne.n	800421a <put_eng+0x16>
         if (cdata == 0x0A) {
            ay++;
            if (ay >= max_row) {
               ay -= 1;
               ax = 0;
 8004210:	2200      	movs	r2, #0
 8004212:	4b30      	ldr	r3, [pc, #192]	; (80042d4 <put_eng+0xd0>)
 8004214:	801a      	strh	r2, [r3, #0]
            if (ay >= max_row) {
               ay -= 1;
            }
         }
      }
}
 8004216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if (cdata == 0x0A) {
 800421a:	280a      	cmp	r0, #10
 800421c:	d1fb      	bne.n	8004216 <put_eng+0x12>
            ay++;
 800421e:	4a2e      	ldr	r2, [pc, #184]	; (80042d8 <put_eng+0xd4>)
            if (ay >= max_row) {
 8004220:	482e      	ldr	r0, [pc, #184]	; (80042dc <put_eng+0xd8>)
            ay++;
 8004222:	8811      	ldrh	r1, [r2, #0]
            if (ay >= max_row) {
 8004224:	8800      	ldrh	r0, [r0, #0]
            ay++;
 8004226:	1c4b      	adds	r3, r1, #1
 8004228:	b29b      	uxth	r3, r3
            if (ay >= max_row) {
 800422a:	4298      	cmp	r0, r3
            ay++;
 800422c:	8013      	strh	r3, [r2, #0]
            if (ay >= max_row) {
 800422e:	d8f2      	bhi.n	8004216 <put_eng+0x12>
               ay -= 1;
 8004230:	8011      	strh	r1, [r2, #0]
 8004232:	e7ed      	b.n	8004210 <put_eng+0xc>
         ty = ay * 16;
 8004234:	4f28      	ldr	r7, [pc, #160]	; (80042d8 <put_eng+0xd4>)
 8004236:	492a      	ldr	r1, [pc, #168]	; (80042e0 <put_eng+0xdc>)
 8004238:	883b      	ldrh	r3, [r7, #0]
 800423a:	f06f 0a0f 	mvn.w	sl, #15
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	800b      	strh	r3, [r1, #0]
             tx = ax * 8;
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <put_eng+0xd0>)
 8004244:	fb0a fa00 	mul.w	sl, sl, r0
 8004248:	4699      	mov	r9, r3
 800424a:	4e26      	ldr	r6, [pc, #152]	; (80042e4 <put_eng+0xe0>)
 800424c:	4688      	mov	r8, r1
                if (page == 0) dumy_data[pi] = eng_font[val*2][pi];else dumy_data[pi] = eng_font[val*2+1][pi];
 800424e:	ea4f 1b40 	mov.w	fp, r0, lsl #5
 8004252:	4d25      	ldr	r5, [pc, #148]	; (80042e8 <put_eng+0xe4>)
             tx = ax * 8;
 8004254:	4925      	ldr	r1, [pc, #148]	; (80042ec <put_eng+0xe8>)
 8004256:	eb06 1600 	add.w	r6, r6, r0, lsl #4
 800425a:	f10b 0b10 	add.w	fp, fp, #16
 800425e:	0144      	lsls	r4, r0, #5
 8004260:	8818      	ldrh	r0, [r3, #0]
 8004262:	00c0      	lsls	r0, r0, #3
 8004264:	8008      	strh	r0, [r1, #0]
             if (eng_mode == 0) {
 8004266:	4822      	ldr	r0, [pc, #136]	; (80042f0 <put_eng+0xec>)
 8004268:	8800      	ldrh	r0, [r0, #0]
 800426a:	bb40      	cbnz	r0, 80042be <put_eng+0xba>
                dumy_data[pi] = eng_font[val][pi];
 800426c:	7830      	ldrb	r0, [r6, #0]
                if (page == 0) dumy_data[pi] = eng_font[val*2][pi];else dumy_data[pi] = eng_font[val*2+1][pi];
 800426e:	7028      	strb	r0, [r5, #0]
             out_lcd(dumy_data[pi]);
 8004270:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004274:	f7ff ff4c 	bl	8004110 <out_lcd>
             ty++;
 8004278:	f8b8 0000 	ldrh.w	r0, [r8]
         for (pi=0;pi<16;pi++) {
 800427c:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <put_eng+0xf0>)
             ty++;
 800427e:	3001      	adds	r0, #1
         for (pi=0;pi<16;pi++) {
 8004280:	429d      	cmp	r5, r3
 8004282:	491a      	ldr	r1, [pc, #104]	; (80042ec <put_eng+0xe8>)
 8004284:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <put_eng+0xd0>)
             ty++;
 8004286:	f8a8 0000 	strh.w	r0, [r8]
         for (pi=0;pi<16;pi++) {
 800428a:	f106 0601 	add.w	r6, r6, #1
 800428e:	d1e7      	bne.n	8004260 <put_eng+0x5c>
         ax++;
 8004290:	f8b9 3000 	ldrh.w	r3, [r9]
         if (ax >= max_col) {
 8004294:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <put_eng+0xf4>)
         ax++;
 8004296:	3301      	adds	r3, #1
         if (ax >= max_col) {
 8004298:	8812      	ldrh	r2, [r2, #0]
         ax++;
 800429a:	b29b      	uxth	r3, r3
         if (ax >= max_col) {
 800429c:	429a      	cmp	r2, r3
         ax++;
 800429e:	f8a9 3000 	strh.w	r3, [r9]
         if (ax >= max_col) {
 80042a2:	d8b8      	bhi.n	8004216 <put_eng+0x12>
            ax = 0;
 80042a4:	2300      	movs	r3, #0
            ay++;
 80042a6:	883a      	ldrh	r2, [r7, #0]
            if (ay >= max_row) {
 80042a8:	490c      	ldr	r1, [pc, #48]	; (80042dc <put_eng+0xd8>)
            ax = 0;
 80042aa:	f8a9 3000 	strh.w	r3, [r9]
            if (ay >= max_row) {
 80042ae:	8809      	ldrh	r1, [r1, #0]
            ay++;
 80042b0:	1c53      	adds	r3, r2, #1
 80042b2:	b29b      	uxth	r3, r3
               ay -= 1;
 80042b4:	4299      	cmp	r1, r3
 80042b6:	bf98      	it	ls
 80042b8:	4613      	movls	r3, r2
 80042ba:	803b      	strh	r3, [r7, #0]
 80042bc:	e7ab      	b.n	8004216 <put_eng+0x12>
                if (page == 0) dumy_data[pi] = eng_font[val*2][pi];else dumy_data[pi] = eng_font[val*2+1][pi];
 80042be:	480f      	ldr	r0, [pc, #60]	; (80042fc <put_eng+0xf8>)
 80042c0:	8802      	ldrh	r2, [r0, #0]
 80042c2:	eb06 000a 	add.w	r0, r6, sl
 80042c6:	b90a      	cbnz	r2, 80042cc <put_eng+0xc8>
 80042c8:	5d00      	ldrb	r0, [r0, r4]
 80042ca:	e7d0      	b.n	800426e <put_eng+0x6a>
 80042cc:	f810 000b 	ldrb.w	r0, [r0, fp]
 80042d0:	e7cd      	b.n	800426e <put_eng+0x6a>
 80042d2:	bf00      	nop
 80042d4:	20001442 	.word	0x20001442
 80042d8:	20001452 	.word	0x20001452
 80042dc:	2000144c 	.word	0x2000144c
 80042e0:	2000144e 	.word	0x2000144e
 80042e4:	0800e35e 	.word	0x0800e35e
 80042e8:	20001422 	.word	0x20001422
 80042ec:	20001444 	.word	0x20001444
 80042f0:	20001448 	.word	0x20001448
 80042f4:	20001432 	.word	0x20001432
 80042f8:	2000141e 	.word	0x2000141e
 80042fc:	2000144a 	.word	0x2000144a

08004300 <put_han>:


void put_han (unsigned short c)
{
 8004300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      unsigned char i,first,mid,last,b1,b2,b3;
      unsigned short cc,hlx1,hlx2,hlx3;
      if (hangul_mode == 0) cc = ks5601_to_kssm(c);else cc = uni_to_kssm(c);
 8004304:	4b99      	ldr	r3, [pc, #612]	; (800456c <put_han+0x26c>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b9f3      	cbnz	r3, 8004348 <put_han+0x48>
 800430a:	f7ff ff5d 	bl	80041c8 <ks5601_to_kssm>
      first = ((cc & 0x7C00) >> 10);
      mid = ((cc & 0x03E0) >> 5);
      last = (cc & 0x001F);
      first = han_tbl[0][first];
 800430e:	4b98      	ldr	r3, [pc, #608]	; (8004570 <put_han+0x270>)
 8004310:	f3c0 2284 	ubfx	r2, r0, #10, #5
 8004314:	5c9e      	ldrb	r6, [r3, r2]
      mid = han_tbl[1][mid];
 8004316:	f3c0 1244 	ubfx	r2, r0, #5, #5
 800431a:	441a      	add	r2, r3
 800431c:	f892 7020 	ldrb.w	r7, [r2, #32]
      last = han_tbl[2][last];
 8004320:	f000 001f 	and.w	r0, r0, #31
 8004324:	4418      	add	r0, r3
 8004326:	1ebb      	subs	r3, r7, #2
 8004328:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
      b1 = 0;
      b2 = 0;
      b3 = 0;
      switch (mid) {
 800432c:	2b13      	cmp	r3, #19
 800432e:	d838      	bhi.n	80043a2 <put_han+0xa2>
 8004330:	e8df f003 	tbb	[pc, r3]
 8004334:	0d333733 	.word	0x0d333733
 8004338:	35330d33 	.word	0x35330d33
 800433c:	350d3337 	.word	0x350d3337
 8004340:	0d330d35 	.word	0x0d330d35
 8004344:	0d0d3535 	.word	0x0d0d3535
      if (hangul_mode == 0) cc = ks5601_to_kssm(c);else cc = uni_to_kssm(c);
 8004348:	f7ff ff0c 	bl	8004164 <uni_to_kssm>
 800434c:	e7df      	b.n	800430e <put_han+0xe>
         case 12:
         case 15:
         case 17:
         case 20:
         case 21:
           b3 = 1;
 800434e:	2501      	movs	r5, #1
         case 18:
         case 19:
           b3 = 3;
           break;
      }
      switch (first) {
 8004350:	2e01      	cmp	r6, #1
 8004352:	f107 33ff 	add.w	r3, r7, #4294967295
 8004356:	d001      	beq.n	800435c <put_han+0x5c>
 8004358:	2e10      	cmp	r6, #16
 800435a:	d124      	bne.n	80043a6 <put_han+0xa6>
         case 1:
         case 16:
           if (last == 0) b2 = 0;else b2 = 2;
 800435c:	2800      	cmp	r0, #0
 800435e:	f000 80cf 	beq.w	8004500 <put_han+0x200>
 8004362:	f04f 0c02 	mov.w	ip, #2
           break;
         default:
           if (last == 0) b2 = 1;else b2 = 3;
      }
      switch (mid) {
 8004366:	2b14      	cmp	r3, #20
 8004368:	f200 80c2 	bhi.w	80044f0 <put_han+0x1f0>
 800436c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004370:	00fb00fb 	.word	0x00fb00fb
 8004374:	00fb00fb 	.word	0x00fb00fb
 8004378:	00fb00fb 	.word	0x00fb00fb
 800437c:	00fb00fb 	.word	0x00fb00fb
 8004380:	00260024 	.word	0x00260024
 8004384:	00260026 	.word	0x00260026
 8004388:	00210024 	.word	0x00210024
 800438c:	00bb00bb 	.word	0x00bb00bb
 8004390:	002100bb 	.word	0x002100bb
 8004394:	00260024 	.word	0x00260024
 8004398:	00fb      	.short	0x00fb
           b3 = 2;
 800439a:	2502      	movs	r5, #2
           break;
 800439c:	e7d8      	b.n	8004350 <put_han+0x50>
           b3 = 3;
 800439e:	2503      	movs	r5, #3
           break;
 80043a0:	e7d6      	b.n	8004350 <put_han+0x50>
      last = han_tbl[2][last];
 80043a2:	2500      	movs	r5, #0
 80043a4:	e7d4      	b.n	8004350 <put_han+0x50>
           if (last == 0) b2 = 1;else b2 = 3;
 80043a6:	2800      	cmp	r0, #0
 80043a8:	f000 80da 	beq.w	8004560 <put_han+0x260>
 80043ac:	f04f 0c03 	mov.w	ip, #3
 80043b0:	e7d9      	b.n	8004366 <put_han+0x66>
         case 13:
         case 19:
           if (last == 0) b1 = 1;else b1 = 6;
           break;
         case 14: case 18:
           if (last == 0) b1 = 2;else b1 = 6;
 80043b2:	2800      	cmp	r0, #0
 80043b4:	f000 809e 	beq.w	80044f4 <put_han+0x1f4>
           if (last == 0) b1 = 1;else b1 = 6;
 80043b8:	2206      	movs	r2, #6
         case 16:
         case 17:
           if (last == 0) b1 = 4;else b1 = 7;
           break;
      }
      if ((mid == 0) && (last == 0)) b1 = 0;
 80043ba:	e003      	b.n	80043c4 <put_han+0xc4>
           if (last == 0) b1 = 3;else b1 = 7;
 80043bc:	2800      	cmp	r0, #0
 80043be:	f000 809b 	beq.w	80044f8 <put_han+0x1f8>
           if (last == 0) b1 = 4;else b1 = 7;
 80043c2:	2207      	movs	r2, #7
      for (i=0;i<16;i++) {
 80043c4:	4b6b      	ldr	r3, [pc, #428]	; (8004574 <put_han+0x274>)
      if ((mid == 0) && (last == 0)) b1 = 0;
 80043c6:	2100      	movs	r1, #0
 80043c8:	469a      	mov	sl, r3
          if (first != 0) {
             hlx1 = first + loc1[b1];
             dumy_data[i*2] = kor_font[hlx1][i*2];
 80043ca:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 8004594 <put_han+0x294>
             dumy_data[i*2+1] = kor_font[hlx1][i*2+1];
          }
          if (mid != 0) {
             hlx2 = mid + loc2[b2];
 80043ce:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8004598 <put_han+0x298>
          if (first != 0) {
 80043d2:	b16e      	cbz	r6, 80043f0 <put_han+0xf0>
             hlx1 = first + loc1[b1];
 80043d4:	4c68      	ldr	r4, [pc, #416]	; (8004578 <put_han+0x278>)
 80043d6:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
 80043da:	4434      	add	r4, r6
             dumy_data[i*2] = kor_font[hlx1][i*2];
 80043dc:	b2a4      	uxth	r4, r4
 80043de:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 80043e2:	eb04 0801 	add.w	r8, r4, r1
 80043e6:	5c64      	ldrb	r4, [r4, r1]
 80043e8:	701c      	strb	r4, [r3, #0]
             dumy_data[i*2+1] = kor_font[hlx1][i*2+1];
 80043ea:	f898 4001 	ldrb.w	r4, [r8, #1]
 80043ee:	705c      	strb	r4, [r3, #1]
          if (mid != 0) {
 80043f0:	b1af      	cbz	r7, 800441e <put_han+0x11e>
             hlx2 = mid + loc2[b2];
 80043f2:	f839 401c 	ldrh.w	r4, [r9, ip, lsl #1]
             dumy_data[i*2] = dumy_data[i*2] | kor_font[hlx2][i*2];
 80043f6:	f893 8000 	ldrb.w	r8, [r3]
             hlx2 = mid + loc2[b2];
 80043fa:	443c      	add	r4, r7
             dumy_data[i*2] = dumy_data[i*2] | kor_font[hlx2][i*2];
 80043fc:	b2a4      	uxth	r4, r4
 80043fe:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 8004402:	eb04 0b01 	add.w	fp, r4, r1
 8004406:	5c64      	ldrb	r4, [r4, r1]
 8004408:	ea48 0804 	orr.w	r8, r8, r4
 800440c:	f883 8000 	strb.w	r8, [r3]
             dumy_data[i*2+1] = dumy_data[i*2+1] | kor_font[hlx2][i*2+1];
 8004410:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8004414:	f893 8001 	ldrb.w	r8, [r3, #1]
 8004418:	ea44 0408 	orr.w	r4, r4, r8
 800441c:	705c      	strb	r4, [r3, #1]
          }
          if (last != 0) {
 800441e:	b1b0      	cbz	r0, 800444e <put_han+0x14e>
             hlx3 = last + loc3[b3];
 8004420:	4c56      	ldr	r4, [pc, #344]	; (800457c <put_han+0x27c>)
             dumy_data[i*2] = dumy_data[i*2] | kor_font[hlx3][i*2];
 8004422:	f893 8000 	ldrb.w	r8, [r3]
             hlx3 = last + loc3[b3];
 8004426:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 800442a:	4404      	add	r4, r0
             dumy_data[i*2] = dumy_data[i*2] | kor_font[hlx3][i*2];
 800442c:	b2a4      	uxth	r4, r4
 800442e:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
 8004432:	eb04 0b01 	add.w	fp, r4, r1
 8004436:	5c64      	ldrb	r4, [r4, r1]
 8004438:	ea48 0804 	orr.w	r8, r8, r4
 800443c:	f883 8000 	strb.w	r8, [r3]
             dumy_data[i*2+1] = dumy_data[i*2+1] | kor_font[hlx3][i*2+1];
 8004440:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8004444:	f893 8001 	ldrb.w	r8, [r3, #1]
 8004448:	ea44 0408 	orr.w	r4, r4, r8
 800444c:	705c      	strb	r4, [r3, #1]
      for (i=0;i<16;i++) {
 800444e:	3102      	adds	r1, #2
 8004450:	2920      	cmp	r1, #32
 8004452:	f103 0302 	add.w	r3, r3, #2
 8004456:	d1bc      	bne.n	80043d2 <put_han+0xd2>
          }
      }
      ty = ay * 16;
      for (i=0;i<16;i++) {
          tx = ax * 8;
 8004458:	f8df 9140 	ldr.w	r9, [pc, #320]	; 800459c <put_han+0x29c>
      ty = ay * 16;
 800445c:	f04f 0800 	mov.w	r8, #0
 8004460:	464f      	mov	r7, r9
 8004462:	4d47      	ldr	r5, [pc, #284]	; (8004580 <put_han+0x280>)
 8004464:	4c47      	ldr	r4, [pc, #284]	; (8004584 <put_han+0x284>)
 8004466:	882b      	ldrh	r3, [r5, #0]
          tx = ax * 8;
 8004468:	4e47      	ldr	r6, [pc, #284]	; (8004588 <put_han+0x288>)
      ty = ay * 16;
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	8023      	strh	r3, [r4, #0]
          tx = ax * 8;
 800446e:	8833      	ldrh	r3, [r6, #0]
          out_lcd(dumy_data[i*2]);
 8004470:	f81a 0018 	ldrb.w	r0, [sl, r8, lsl #1]
          tx = ax * 8;
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	f8a9 3000 	strh.w	r3, [r9]
          out_lcd(dumy_data[i*2]);
 800447a:	f7ff fe49 	bl	8004110 <out_lcd>
          ty++;
 800447e:	8823      	ldrh	r3, [r4, #0]
 8004480:	f108 0801 	add.w	r8, r8, #1
 8004484:	3301      	adds	r3, #1
      for (i=0;i<16;i++) {
 8004486:	f1b8 0f10 	cmp.w	r8, #16
          ty++;
 800448a:	8023      	strh	r3, [r4, #0]
      for (i=0;i<16;i++) {
 800448c:	d1ef      	bne.n	800446e <put_han+0x16e>
      }
      ty = ay * 16;
 800448e:	f04f 0800 	mov.w	r8, #0
 8004492:	882b      	ldrh	r3, [r5, #0]
      for (i=0;i<16;i++) {
          tx = (ax+1) * 8;
          out_lcd(dumy_data[i*2+1]);
 8004494:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80045a0 <put_han+0x2a0>
      ty = ay * 16;
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	8023      	strh	r3, [r4, #0]
          tx = (ax+1) * 8;
 800449c:	8833      	ldrh	r3, [r6, #0]
          out_lcd(dumy_data[i*2+1]);
 800449e:	f819 0018 	ldrb.w	r0, [r9, r8, lsl #1]
          tx = (ax+1) * 8;
 80044a2:	3301      	adds	r3, #1
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	803b      	strh	r3, [r7, #0]
          out_lcd(dumy_data[i*2+1]);
 80044a8:	f7ff fe32 	bl	8004110 <out_lcd>
          ty++;
 80044ac:	8823      	ldrh	r3, [r4, #0]
 80044ae:	f108 0801 	add.w	r8, r8, #1
 80044b2:	3301      	adds	r3, #1
      for (i=0;i<16;i++) {
 80044b4:	f1b8 0f10 	cmp.w	r8, #16
          ty++;
 80044b8:	8023      	strh	r3, [r4, #0]
      for (i=0;i<16;i++) {
 80044ba:	d1ef      	bne.n	800449c <put_han+0x19c>
      }
      ax += 2;
 80044bc:	8833      	ldrh	r3, [r6, #0]
      if (ax >= max_col) {
 80044be:	4a33      	ldr	r2, [pc, #204]	; (800458c <put_han+0x28c>)
      ax += 2;
 80044c0:	3302      	adds	r3, #2
      if (ax >= max_col) {
 80044c2:	8812      	ldrh	r2, [r2, #0]
      ax += 2;
 80044c4:	b29b      	uxth	r3, r3
      if (ax >= max_col) {
 80044c6:	429a      	cmp	r2, r3
      ax += 2;
 80044c8:	8033      	strh	r3, [r6, #0]
      if (ax >= max_col) {
 80044ca:	d80a      	bhi.n	80044e2 <put_han+0x1e2>
         ax = 0;
 80044cc:	2300      	movs	r3, #0
         ay++;
 80044ce:	882a      	ldrh	r2, [r5, #0]
         if (ay >= max_row) {
 80044d0:	492f      	ldr	r1, [pc, #188]	; (8004590 <put_han+0x290>)
         ax = 0;
 80044d2:	8033      	strh	r3, [r6, #0]
         if (ay >= max_row) {
 80044d4:	8809      	ldrh	r1, [r1, #0]
         ay++;
 80044d6:	1c53      	adds	r3, r2, #1
 80044d8:	b29b      	uxth	r3, r3
            ay -= 1;
 80044da:	4299      	cmp	r1, r3
 80044dc:	bf98      	it	ls
 80044de:	4613      	movls	r3, r2
 80044e0:	802b      	strh	r3, [r5, #0]
         }
      }
}
 80044e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
           if (last == 0) b1 = 4;else b1 = 7;
 80044e6:	2800      	cmp	r0, #0
 80044e8:	f47f af6b 	bne.w	80043c2 <put_han+0xc2>
 80044ec:	2204      	movs	r2, #4
 80044ee:	e769      	b.n	80043c4 <put_han+0xc4>
      if ((mid == 0) && (last == 0)) b1 = 0;
 80044f0:	2200      	movs	r2, #0
 80044f2:	e767      	b.n	80043c4 <put_han+0xc4>
           if (last == 0) b1 = 2;else b1 = 6;
 80044f4:	2202      	movs	r2, #2
 80044f6:	e765      	b.n	80043c4 <put_han+0xc4>
           if (last == 0) b1 = 3;else b1 = 7;
 80044f8:	2203      	movs	r2, #3
 80044fa:	e763      	b.n	80043c4 <put_han+0xc4>
           if (last == 0) b1 = 1;else b1 = 6;
 80044fc:	2201      	movs	r2, #1
      if ((mid == 0) && (last == 0)) b1 = 0;
 80044fe:	e761      	b.n	80043c4 <put_han+0xc4>
           if (last == 0) b2 = 0;else b2 = 2;
 8004500:	4684      	mov	ip, r0
      switch (mid) {
 8004502:	2b14      	cmp	r3, #20
 8004504:	d8f4      	bhi.n	80044f0 <put_han+0x1f0>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <put_han+0x20c>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	080044f1 	.word	0x080044f1
 8004510:	080044f1 	.word	0x080044f1
 8004514:	080044f1 	.word	0x080044f1
 8004518:	080044f1 	.word	0x080044f1
 800451c:	080044f1 	.word	0x080044f1
 8004520:	080044f1 	.word	0x080044f1
 8004524:	080044f1 	.word	0x080044f1
 8004528:	080044f1 	.word	0x080044f1
 800452c:	080044fd 	.word	0x080044fd
 8004530:	080044f9 	.word	0x080044f9
 8004534:	080044f9 	.word	0x080044f9
 8004538:	080044f9 	.word	0x080044f9
 800453c:	080044fd 	.word	0x080044fd
 8004540:	080044f5 	.word	0x080044f5
 8004544:	080044ed 	.word	0x080044ed
 8004548:	080044ed 	.word	0x080044ed
 800454c:	080044ed 	.word	0x080044ed
 8004550:	080044f5 	.word	0x080044f5
 8004554:	080044fd 	.word	0x080044fd
 8004558:	080044f9 	.word	0x080044f9
 800455c:	080044f1 	.word	0x080044f1
           if (last == 0) b2 = 1;else b2 = 3;
 8004560:	f04f 0c01 	mov.w	ip, #1
 8004564:	e7cd      	b.n	8004502 <put_han+0x202>
           if (last == 0) b1 = 2;else b1 = 6;
 8004566:	2205      	movs	r2, #5
 8004568:	e72c      	b.n	80043c4 <put_han+0xc4>
 800456a:	bf00      	nop
 800456c:	2000131a 	.word	0x2000131a
 8004570:	0800eb5e 	.word	0x0800eb5e
 8004574:	20001422 	.word	0x20001422
 8004578:	080118be 	.word	0x080118be
 800457c:	080118d6 	.word	0x080118d6
 8004580:	20001452 	.word	0x20001452
 8004584:	2000144e 	.word	0x2000144e
 8004588:	20001442 	.word	0x20001442
 800458c:	2000141e 	.word	0x2000141e
 8004590:	2000144c 	.word	0x2000144c
 8004594:	0800ebbe 	.word	0x0800ebbe
 8004598:	080118ce 	.word	0x080118ce
 800459c:	20001444 	.word	0x20001444
 80045a0:	20001423 	.word	0x20001423

080045a4 <lput_char>:
      }
}


void lput_char (char *str)
{
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	4605      	mov	r5, r0
      unsigned char len,n;
      unsigned short hangul_char;
      len = strlen(str);
 80045a8:	f003 fe20 	bl	80081ec <strlen>
      for (n=0;n<len;n++) {
 80045ac:	2400      	movs	r4, #0
      len = strlen(str);
 80045ae:	b2c6      	uxtb	r6, r0
      for (n=0;n<len;n++) {
 80045b0:	42b4      	cmp	r4, r6
 80045b2:	d300      	bcc.n	80045b6 <lput_char+0x12>
             hangul_char = hangul_char | str[n + 1];
             put_han(hangul_char);
             n++;
          }
      }
}
 80045b4:	bd70      	pop	{r4, r5, r6, pc}
      	  if ((str[n] & 0x80) == 0) {
 80045b6:	572a      	ldrsb	r2, [r5, r4]
 80045b8:	4623      	mov	r3, r4
 80045ba:	2a00      	cmp	r2, #0
 80045bc:	5d28      	ldrb	r0, [r5, r4]
 80045be:	db04      	blt.n	80045ca <lput_char+0x26>
             put_eng(str[n]);
 80045c0:	f7ff fe20 	bl	8004204 <put_eng>
      for (n=0;n<len;n++) {
 80045c4:	3401      	adds	r4, #1
 80045c6:	b2e4      	uxtb	r4, r4
 80045c8:	e7f2      	b.n	80045b0 <lput_char+0xc>
             hangul_char = hangul_char | str[n + 1];
 80045ca:	442b      	add	r3, r5
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	3401      	adds	r4, #1
             put_han(hangul_char);
 80045d0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80045d4:	b2e4      	uxtb	r4, r4
 80045d6:	f7ff fe93 	bl	8004300 <put_han>
             n++;
 80045da:	e7f3      	b.n	80045c4 <lput_char+0x20>

080045dc <lput_char_xy>:

void lput_char_xy (unsigned short x,unsigned short y,char *str)
{
      unsigned char len,n;
      unsigned short hangul_char;
      ax = x;
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <lput_char_xy+0x44>)
{
 80045de:	b570      	push	{r4, r5, r6, lr}
      ax = x;
 80045e0:	8018      	strh	r0, [r3, #0]
      ay = y;
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <lput_char_xy+0x48>)
      len = strlen(str);
 80045e4:	4610      	mov	r0, r2
{
 80045e6:	4615      	mov	r5, r2
      ay = y;
 80045e8:	8019      	strh	r1, [r3, #0]
      len = strlen(str);
 80045ea:	f003 fdff 	bl	80081ec <strlen>
      for (n=0;n<len;n++) {
 80045ee:	2400      	movs	r4, #0
      len = strlen(str);
 80045f0:	b2c6      	uxtb	r6, r0
      for (n=0;n<len;n++) {
 80045f2:	42b4      	cmp	r4, r6
 80045f4:	d300      	bcc.n	80045f8 <lput_char_xy+0x1c>
             hangul_char = hangul_char | str[n + 1];
             put_han(hangul_char);
             n++;
          }
      }
}
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
      	  if ((str[n] & 0x80) == 0) {
 80045f8:	572a      	ldrsb	r2, [r5, r4]
 80045fa:	4623      	mov	r3, r4
 80045fc:	2a00      	cmp	r2, #0
 80045fe:	5d28      	ldrb	r0, [r5, r4]
 8004600:	db04      	blt.n	800460c <lput_char_xy+0x30>
             put_eng(str[n]);
 8004602:	f7ff fdff 	bl	8004204 <put_eng>
      for (n=0;n<len;n++) {
 8004606:	3401      	adds	r4, #1
 8004608:	b2e4      	uxtb	r4, r4
 800460a:	e7f2      	b.n	80045f2 <lput_char_xy+0x16>
             hangul_char = hangul_char | str[n + 1];
 800460c:	442b      	add	r3, r5
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	3401      	adds	r4, #1
             put_han(hangul_char);
 8004612:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8004616:	b2e4      	uxtb	r4, r4
 8004618:	f7ff fe72 	bl	8004300 <put_han>
             n++;
 800461c:	e7f3      	b.n	8004606 <lput_char_xy+0x2a>
 800461e:	bf00      	nop
 8004620:	20001442 	.word	0x20001442
 8004624:	20001452 	.word	0x20001452

08004628 <lcd_printf>:


void lcd_printf (unsigned short x,unsigned short y,char *form,...)
{
 8004628:	b40c      	push	{r2, r3}
 800462a:	b513      	push	{r0, r1, r4, lr}
      va_list argptr;
      ax = x;
 800462c:	4c0a      	ldr	r4, [pc, #40]	; (8004658 <lcd_printf+0x30>)
{
 800462e:	aa04      	add	r2, sp, #16
 8004630:	f852 3b04 	ldr.w	r3, [r2], #4
      ax = x;
 8004634:	8020      	strh	r0, [r4, #0]
      ay = y;
      va_start(argptr,form);
      vsprintf(buff,form,argptr);
 8004636:	4c09      	ldr	r4, [pc, #36]	; (800465c <lcd_printf+0x34>)
      ay = y;
 8004638:	4809      	ldr	r0, [pc, #36]	; (8004660 <lcd_printf+0x38>)
      va_start(argptr,form);
 800463a:	9201      	str	r2, [sp, #4]
      ay = y;
 800463c:	8001      	strh	r1, [r0, #0]
      vsprintf(buff,form,argptr);
 800463e:	4619      	mov	r1, r3
 8004640:	4620      	mov	r0, r4
 8004642:	f003 fe15 	bl	8008270 <vsprintf>
      lput_char(buff);
 8004646:	4620      	mov	r0, r4
 8004648:	f7ff ffac 	bl	80045a4 <lput_char>
      va_end(argptr);
}
 800464c:	b002      	add	sp, #8
 800464e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004652:	b002      	add	sp, #8
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20001442 	.word	0x20001442
 800465c:	2000131e 	.word	0x2000131e
 8004660:	20001452 	.word	0x20001452

08004664 <pen_interrupt_set.part.0>:
}


void pen_interrupt_set (unsigned char enable)
{
      if (enable) EXTI->IMR |= (1 << 4);else EXTI->IMR &= ~(1 << 4);
 8004664:	4a02      	ldr	r2, [pc, #8]	; (8004670 <pen_interrupt_set.part.0+0xc>)
 8004666:	6813      	ldr	r3, [r2, #0]
 8004668:	f043 0310 	orr.w	r3, r3, #16
 800466c:	6013      	str	r3, [r2, #0]
}
 800466e:	4770      	bx	lr
 8004670:	40010400 	.word	0x40010400

08004674 <ads7843_write_byte>:
{
 8004674:	b570      	push	{r4, r5, r6, lr}
	  if (num & 0x80) TDIN = 1;else TDIN = 0;
 8004676:	2500      	movs	r5, #0
{
 8004678:	2308      	movs	r3, #8
	  if (num & 0x80) TDIN = 1;else TDIN = 0;
 800467a:	2101      	movs	r1, #1
	  TCLK = 0;
 800467c:	462e      	mov	r6, r5
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <ads7843_write_byte+0x30>)
 8004680:	4c09      	ldr	r4, [pc, #36]	; (80046a8 <ads7843_write_byte+0x34>)
	  if (num & 0x80) TDIN = 1;else TDIN = 0;
 8004682:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004686:	f103 33ff 	add.w	r3, r3, #4294967295
 800468a:	bf14      	ite	ne
 800468c:	6011      	strne	r1, [r2, #0]
 800468e:	6015      	streq	r5, [r2, #0]
	  num <<= 1;
 8004690:	0040      	lsls	r0, r0, #1
      for (count=0;count<8;count++) {
 8004692:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
	  TCLK = 0;
 8004696:	6026      	str	r6, [r4, #0]
	  num <<= 1;
 8004698:	b2c0      	uxtb	r0, r0
	  TCLK = 1;
 800469a:	6021      	str	r1, [r4, #0]
      for (count=0;count<8;count++) {
 800469c:	d1f1      	bne.n	8004682 <ads7843_write_byte+0xe>
      TDIN = 1;
 800469e:	6011      	str	r1, [r2, #0]
}
 80046a0:	bd70      	pop	{r4, r5, r6, pc}
 80046a2:	bf00      	nop
 80046a4:	4221019c 	.word	0x4221019c
 80046a8:	42210194 	.word	0x42210194

080046ac <ads7843_read_adc>:
{
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      TCLK = 0;
 80046ae:	2400      	movs	r4, #0
 80046b0:	4d0e      	ldr	r5, [pc, #56]	; (80046ec <ads7843_read_adc+0x40>)
      TCS = 0;
 80046b2:	4e0f      	ldr	r6, [pc, #60]	; (80046f0 <ads7843_read_adc+0x44>)
      TCLK = 0;
 80046b4:	602c      	str	r4, [r5, #0]
      TCS = 0;
 80046b6:	6034      	str	r4, [r6, #0]
      ads7843_write_byte(cmd);
 80046b8:	f7ff ffdc 	bl	8004674 <ads7843_write_byte>
      TCLK = 1;
 80046bc:	2201      	movs	r2, #1
      TCLK = 0;
 80046be:	2310      	movs	r3, #16
      unsigned short num = 0;
 80046c0:	4620      	mov	r0, r4
	  TCLK = 0;
 80046c2:	4621      	mov	r1, r4
      TCLK = 1;
 80046c4:	602a      	str	r2, [r5, #0]
      TCLK = 0;
 80046c6:	602c      	str	r4, [r5, #0]
	  if (DOUT) num++;
 80046c8:	4c0a      	ldr	r4, [pc, #40]	; (80046f4 <ads7843_read_adc+0x48>)
	  TCLK = 0;
 80046ca:	6029      	str	r1, [r5, #0]
	  TCLK = 1;
 80046cc:	602a      	str	r2, [r5, #0]
	  if (DOUT) num++;
 80046ce:	6827      	ldr	r7, [r4, #0]
	  num <<= 1;
 80046d0:	0040      	lsls	r0, r0, #1
 80046d2:	b280      	uxth	r0, r0
	  if (DOUT) num++;
 80046d4:	b10f      	cbz	r7, 80046da <ads7843_read_adc+0x2e>
 80046d6:	3001      	adds	r0, #1
 80046d8:	b280      	uxth	r0, r0
      for (count=0;count<16;count++) {
 80046da:	3b01      	subs	r3, #1
 80046dc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80046e0:	d1f3      	bne.n	80046ca <ads7843_read_adc+0x1e>
      TCS = 1;
 80046e2:	2301      	movs	r3, #1
}
 80046e4:	0900      	lsrs	r0, r0, #4
      TCS = 1;
 80046e6:	6033      	str	r3, [r6, #0]
}
 80046e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ea:	bf00      	nop
 80046ec:	42210194 	.word	0x42210194
 80046f0:	42220198 	.word	0x42220198
 80046f4:	42210118 	.word	0x42210118

080046f8 <ads7843_read_xy>:
{
 80046f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fc:	b088      	sub	sp, #32
 80046fe:	466c      	mov	r4, sp
 8004700:	4606      	mov	r6, r0
 8004702:	46a0      	mov	r8, r4
 8004704:	250f      	movs	r5, #15
 8004706:	4627      	mov	r7, r4
	  buf[i] = ads7843_read_adc(xy);
 8004708:	4630      	mov	r0, r6
 800470a:	f7ff ffcf 	bl	80046ac <ads7843_read_adc>
 800470e:	3d01      	subs	r5, #1
 8004710:	b2ad      	uxth	r5, r5
 8004712:	f828 0b02 	strh.w	r0, [r8], #2
      for (i=0;i<READ_TIMES;i++) {
 8004716:	2d00      	cmp	r5, #0
 8004718:	d1f6      	bne.n	8004708 <ads7843_read_xy+0x10>
 800471a:	2201      	movs	r2, #1
	  for (j=i+1;j<READ_TIMES;j++) {
 800471c:	4613      	mov	r3, r2
	      if (buf[i] > buf[j]) {
 800471e:	8821      	ldrh	r1, [r4, #0]
 8004720:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 8004724:	4281      	cmp	r1, r0
		 buf[i] = buf[j];
 8004726:	bf84      	itt	hi
 8004728:	8020      	strhhi	r0, [r4, #0]
	 	 buf[j] = temp;
 800472a:	f827 1013 	strhhi.w	r1, [r7, r3, lsl #1]
	  for (j=i+1;j<READ_TIMES;j++) {
 800472e:	3301      	adds	r3, #1
 8004730:	b299      	uxth	r1, r3
 8004732:	290f      	cmp	r1, #15
 8004734:	d1f3      	bne.n	800471e <ads7843_read_xy+0x26>
      for (i=0;i<READ_TIMES-1; i++) {
 8004736:	3201      	adds	r2, #1
 8004738:	2a0f      	cmp	r2, #15
 800473a:	f104 0402 	add.w	r4, r4, #2
 800473e:	d1ed      	bne.n	800471c <ads7843_read_xy+0x24>
      for (i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) sum += buf[i];
 8004740:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8004744:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8004748:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800474c:	4413      	add	r3, r2
 800474e:	4403      	add	r3, r0
 8004750:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8004754:	4403      	add	r3, r0
 8004756:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 800475a:	4403      	add	r3, r0
}
 800475c:	2005      	movs	r0, #5
      temp = sum / (READ_TIMES - 2 * LOST_VAL);
 800475e:	b29b      	uxth	r3, r3
}
 8004760:	fbb3 f0f0 	udiv	r0, r3, r0
 8004764:	b008      	add	sp, #32
 8004766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800476a <read_ads7843>:
{
 800476a:	b570      	push	{r4, r5, r6, lr}
 800476c:	4606      	mov	r6, r0
      xtemp = ads7843_read_xy(CMD_RDX);
 800476e:	20d0      	movs	r0, #208	; 0xd0
{
 8004770:	460d      	mov	r5, r1
      xtemp = ads7843_read_xy(CMD_RDX);
 8004772:	f7ff ffc1 	bl	80046f8 <ads7843_read_xy>
 8004776:	4604      	mov	r4, r0
      ytemp = ads7843_read_xy(CMD_RDY);
 8004778:	2090      	movs	r0, #144	; 0x90
 800477a:	f7ff ffbd 	bl	80046f8 <ads7843_read_xy>
      if ((xtemp < 100) || (ytemp < 100)) return 0;
 800477e:	2c63      	cmp	r4, #99	; 0x63
 8004780:	d905      	bls.n	800478e <read_ads7843+0x24>
 8004782:	2863      	cmp	r0, #99	; 0x63
 8004784:	d903      	bls.n	800478e <read_ads7843+0x24>
      *x = xtemp;
 8004786:	8034      	strh	r4, [r6, #0]
      *y = ytemp;
 8004788:	8028      	strh	r0, [r5, #0]
      return 1;
 800478a:	2001      	movs	r0, #1
}
 800478c:	bd70      	pop	{r4, r5, r6, pc}
      if ((xtemp < 100) || (ytemp < 100)) return 0;
 800478e:	2000      	movs	r0, #0
 8004790:	e7fc      	b.n	800478c <read_ads7843+0x22>

08004792 <read_ads7843_2>:
{
 8004792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004794:	4606      	mov	r6, r0
 8004796:	460d      	mov	r5, r1
      flag = read_ads7843(&x1,&y1);
 8004798:	4668      	mov	r0, sp
 800479a:	f10d 0102 	add.w	r1, sp, #2
 800479e:	f7ff ffe4 	bl	800476a <read_ads7843>
      if (flag == 0) return(0);
 80047a2:	b910      	cbnz	r0, 80047aa <read_ads7843_2+0x18>
 80047a4:	2000      	movs	r0, #0
}
 80047a6:	b002      	add	sp, #8
 80047a8:	bd70      	pop	{r4, r5, r6, pc}
      flag = read_ads7843(&x2,&y2);
 80047aa:	f10d 0106 	add.w	r1, sp, #6
 80047ae:	a801      	add	r0, sp, #4
 80047b0:	f7ff ffdb 	bl	800476a <read_ads7843>
      if (flag == 0) return(0);
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d0f5      	beq.n	80047a4 <read_ads7843_2+0x12>
      if ((((x2 <= x1) && (x1 < x2 + ERR_RANGE)) || ((x1 <= x2) && (x2 < x1 + ERR_RANGE))) && (((y2 <= y1) && (y1 < y2 + ERR_RANGE)) || ((y1 <= y2) && (y2 < y1 + ERR_RANGE)))) {
 80047b8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80047bc:	f8bd 2000 	ldrh.w	r2, [sp]
 80047c0:	4291      	cmp	r1, r2
 80047c2:	d805      	bhi.n	80047d0 <read_ads7843_2+0x3e>
 80047c4:	f101 0331 	add.w	r3, r1, #49	; 0x31
 80047c8:	4293      	cmp	r3, r2
 80047ca:	da05      	bge.n	80047d8 <read_ads7843_2+0x46>
 80047cc:	4291      	cmp	r1, r2
 80047ce:	d1e9      	bne.n	80047a4 <read_ads7843_2+0x12>
 80047d0:	f102 0331 	add.w	r3, r2, #49	; 0x31
 80047d4:	428b      	cmp	r3, r1
 80047d6:	dbe5      	blt.n	80047a4 <read_ads7843_2+0x12>
 80047d8:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 80047dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80047e0:	429c      	cmp	r4, r3
 80047e2:	d805      	bhi.n	80047f0 <read_ads7843_2+0x5e>
 80047e4:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80047e8:	4298      	cmp	r0, r3
 80047ea:	da05      	bge.n	80047f8 <read_ads7843_2+0x66>
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d1d9      	bne.n	80047a4 <read_ads7843_2+0x12>
 80047f0:	f103 0031 	add.w	r0, r3, #49	; 0x31
 80047f4:	42a0      	cmp	r0, r4
 80047f6:	dbd5      	blt.n	80047a4 <read_ads7843_2+0x12>
         *x = (x1 + x2) / 2;
 80047f8:	440a      	add	r2, r1
         *y = (y1 + y2) / 2;
 80047fa:	4423      	add	r3, r4
         *x = (x1 + x2) / 2;
 80047fc:	1052      	asrs	r2, r2, #1
         *y = (y1 + y2) / 2;
 80047fe:	105b      	asrs	r3, r3, #1
         *x = (x1 + x2) / 2;
 8004800:	8032      	strh	r2, [r6, #0]
         return 1;
 8004802:	2001      	movs	r0, #1
         *y = (y1 + y2) / 2;
 8004804:	802b      	strh	r3, [r5, #0]
         return 1;
 8004806:	e7ce      	b.n	80047a6 <read_ads7843_2+0x14>

08004808 <pen_interrupt_set>:
      if (enable) EXTI->IMR |= (1 << 4);else EXTI->IMR &= ~(1 << 4);
 8004808:	b108      	cbz	r0, 800480e <pen_interrupt_set+0x6>
 800480a:	f7ff bf2b 	b.w	8004664 <pen_interrupt_set.part.0>
 800480e:	4a03      	ldr	r2, [pc, #12]	; (800481c <pen_interrupt_set+0x14>)
 8004810:	6813      	ldr	r3, [r2, #0]
 8004812:	f023 0310 	bic.w	r3, r3, #16
 8004816:	6013      	str	r3, [r2, #0]
}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40010400 	.word	0x40010400

08004820 <touch_init>:
      }
}


void touch_init (void)
{
 8004820:	b530      	push	{r4, r5, lr}
      NVIC_InitTypeDef NVIC_InitStructure;
      EXTI_InitTypeDef EXTI_InitStructure;
      //TCLK, TDIN
      GPIO_Init_Pin(GPIOA,GPIO_Pin_5,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8004822:	4c23      	ldr	r4, [pc, #140]	; (80048b0 <touch_init+0x90>)
{
 8004824:	b087      	sub	sp, #28
      GPIO_Init_Pin(GPIOA,GPIO_Pin_5,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8004826:	4620      	mov	r0, r4
 8004828:	2310      	movs	r3, #16
 800482a:	2203      	movs	r2, #3
 800482c:	2120      	movs	r1, #32
 800482e:	f002 fec9 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOA,GPIO_Pin_7,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
      //DOUT
      GPIO_Init_Pin(GPIOA,GPIO_Pin_6,GPIO_Speed_50MHz,GPIO_Mode_IPU);
      //TCS
      GPIO_Init_Pin(GPIOC,GPIO_Pin_6,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8004832:	4d20      	ldr	r5, [pc, #128]	; (80048b4 <touch_init+0x94>)
      GPIO_Init_Pin(GPIOA,GPIO_Pin_7,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8004834:	4620      	mov	r0, r4
 8004836:	2310      	movs	r3, #16
 8004838:	2203      	movs	r2, #3
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	f002 fec2 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOA,GPIO_Pin_6,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 8004840:	4620      	mov	r0, r4
 8004842:	2348      	movs	r3, #72	; 0x48
 8004844:	2203      	movs	r2, #3
 8004846:	2140      	movs	r1, #64	; 0x40
 8004848:	f002 febc 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOC,GPIO_Pin_6,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 800484c:	4628      	mov	r0, r5
 800484e:	2310      	movs	r3, #16
 8004850:	2203      	movs	r2, #3
 8004852:	2140      	movs	r1, #64	; 0x40
 8004854:	f002 feb6 	bl	80075c4 <GPIO_Init_Pin>
      //PEN
      GPIO_Init_Pin(GPIOC,GPIO_Pin_4,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 8004858:	4628      	mov	r0, r5
 800485a:	2348      	movs	r3, #72	; 0x48
 800485c:	2203      	movs	r2, #3
 800485e:	2110      	movs	r1, #16
 8004860:	f002 feb0 	bl	80075c4 <GPIO_Init_Pin>
      //USER
      GPIO_Init_Pin(GPIOA,GPIO_Pin_8,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 8004864:	2203      	movs	r2, #3
 8004866:	2348      	movs	r3, #72	; 0x48
 8004868:	4620      	mov	r0, r4
 800486a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800486e:	f002 fea9 	bl	80075c4 <GPIO_Init_Pin>
      read_ads7843(&pen_point.x,&pen_point.y);
 8004872:	4911      	ldr	r1, [pc, #68]	; (80048b8 <touch_init+0x98>)
      GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource4);
      /* Configure PEN EXTI Line to generate an interrupt on falling edge */
      EXTI_InitStructure.EXTI_Line = EXTI_Line4;
      EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
      EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004874:	2401      	movs	r4, #1
      read_ads7843(&pen_point.x,&pen_point.y);
 8004876:	1e88      	subs	r0, r1, #2
 8004878:	f7ff ff77 	bl	800476a <read_ads7843>
      GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource4);
 800487c:	2104      	movs	r1, #4
 800487e:	2002      	movs	r0, #2
 8004880:	f002 ff24 	bl	80076cc <GPIO_EXTILineConfig>
      EXTI_InitStructure.EXTI_Line = EXTI_Line4;
 8004884:	2310      	movs	r3, #16
 8004886:	9303      	str	r3, [sp, #12]
      EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004888:	f44f 6340 	mov.w	r3, #3072	; 0xc00
      EXTI_Init(&EXTI_InitStructure);
 800488c:	a803      	add	r0, sp, #12
      EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800488e:	f8ad 3010 	strh.w	r3, [sp, #16]
      EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004892:	9405      	str	r4, [sp, #20]
      EXTI_Init(&EXTI_InitStructure);
 8004894:	f002 fd7e 	bl	8007394 <EXTI_Init>
      /* Generate software interrupt: simulate a falling edge applied on PEN EXTI line */
      //EXTI_GenerateSWInterrupt(EXTI_Line4);
      /* Enable the EXTI Line4 Interrupt */
      NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
 8004898:	230a      	movs	r3, #10
 800489a:	f8ad 3004 	strh.w	r3, [sp, #4]
      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800489e:	2300      	movs	r3, #0
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
      NVIC_Init(&NVIC_InitStructure);
 80048a0:	a801      	add	r0, sp, #4
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80048a2:	f88d 3006 	strb.w	r3, [sp, #6]
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80048a6:	9402      	str	r4, [sp, #8]
      NVIC_Init(&NVIC_InitStructure);
 80048a8:	f002 fbea 	bl	8007080 <NVIC_Init>
      //touch_adjust();
}
 80048ac:	b007      	add	sp, #28
 80048ae:	bd30      	pop	{r4, r5, pc}
 80048b0:	40010800 	.word	0x40010800
 80048b4:	40011000 	.word	0x40011000
 80048b8:	2000145e 	.word	0x2000145e

080048bc <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void)
{
 80048bc:	b510      	push	{r4, lr}
      if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 80048be:	2010      	movs	r0, #16
 80048c0:	f002 fda6 	bl	8007410 <EXTI_GetITStatus>
 80048c4:	b178      	cbz	r0, 80048e6 <EXTI4_IRQHandler+0x2a>
    	 EXTI_ClearITPendingBit(EXTI_Line4);
    	 if (pen_enable) {
 80048c6:	4c08      	ldr	r4, [pc, #32]	; (80048e8 <EXTI4_IRQHandler+0x2c>)
    	 EXTI_ClearITPendingBit(EXTI_Line4);
 80048c8:	2010      	movs	r0, #16
 80048ca:	f002 fdaf 	bl	800742c <EXTI_ClearITPendingBit>
    	 if (pen_enable) {
 80048ce:	7823      	ldrb	r3, [r4, #0]
 80048d0:	b14b      	cbz	r3, 80048e6 <EXTI4_IRQHandler+0x2a>
    	    led_control(LED3,ON);
 80048d2:	2101      	movs	r1, #1
 80048d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80048d8:	f7fd fc8e 	bl	80021f8 <led_control>
	    pen_status = KEY_DOWN;
 80048dc:	2201      	movs	r2, #1
 80048de:	4b03      	ldr	r3, [pc, #12]	; (80048ec <EXTI4_IRQHandler+0x30>)
 80048e0:	701a      	strb	r2, [r3, #0]
	    pen_enable = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	7023      	strb	r3, [r4, #0]
	 }
      }
}
 80048e6:	bd10      	pop	{r4, pc}
 80048e8:	20001456 	.word	0x20001456
 80048ec:	20001468 	.word	0x20001468

080048f0 <touch_process>:
	lcd_set_pixel(x + 1,y + 1);
}


void touch_process (unsigned short *x,unsigned short *y)
{
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (pen_status == KEY_DOWN) {
 80048f2:	4f22      	ldr	r7, [pc, #136]	; (800497c <touch_process+0x8c>)
{
 80048f4:	4606      	mov	r6, r0
      if (pen_status == KEY_DOWN) {
 80048f6:	783a      	ldrb	r2, [r7, #0]
{
 80048f8:	460d      	mov	r5, r1
      if (pen_status == KEY_DOWN) {
 80048fa:	2a01      	cmp	r2, #1
 80048fc:	d123      	bne.n	8004946 <touch_process+0x56>
	 led_control(LED3,OFF);
 80048fe:	2100      	movs	r1, #0
 8004900:	f44f 6000 	mov.w	r0, #2048	; 0x800
	 pen_interrupt_set(0);
	 if (read_ads7843_2(&pen_point.x,&pen_point.y)) {
 8004904:	4c1e      	ldr	r4, [pc, #120]	; (8004980 <touch_process+0x90>)
	 led_control(LED3,OFF);
 8004906:	f7fd fc77 	bl	80021f8 <led_control>
	 pen_interrupt_set(0);
 800490a:	2000      	movs	r0, #0
 800490c:	f7ff ff7c 	bl	8004808 <pen_interrupt_set>
	 if (read_ads7843_2(&pen_point.x,&pen_point.y)) {
 8004910:	4621      	mov	r1, r4
 8004912:	1ea0      	subs	r0, r4, #2
 8004914:	f7ff ff3d 	bl	8004792 <read_ads7843_2>
 8004918:	b158      	cbz	r0, 8004932 <touch_process+0x42>
	    pen_point.x0 = pen_point.x;
	    pen_point.y0 = pen_point.y;
 800491a:	8821      	ldrh	r1, [r4, #0]
	    pen_point.x0 = pen_point.x;
 800491c:	f834 2c02 	ldrh.w	r2, [r4, #-2]
	    pen_point.y0 = pen_point.y;
 8004920:	f824 1c04 	strh.w	r1, [r4, #-4]
	    pen_point.x0 = pen_point.x;
 8004924:	f824 2c06 	strh.w	r2, [r4, #-6]
		*x=pen_point.x0;
 8004928:	8032      	strh	r2, [r6, #0]
	    pen_point.x0 = pen_point.x;
 800492a:	1fa3      	subs	r3, r4, #6
		*y=pen_point.y0;
 800492c:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 8004930:	802b      	strh	r3, [r5, #0]
	    //lcd_printf(8,5,"X:%5d Y%5d ",pen_point.x0,pen_point.y0);
	    //draw_point(pen_point.x0,pen_point.y0);
         }
         if (PEN) {
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <touch_process+0x94>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	b133      	cbz	r3, 8004946 <touch_process+0x56>
      	    pen_status = KEY_UP;
 8004938:	2300      	movs	r3, #0
            EXTI_ClearFlag(EXTI_Line4);
 800493a:	2010      	movs	r0, #16
      	    pen_status = KEY_UP;
 800493c:	703b      	strb	r3, [r7, #0]
            EXTI_ClearFlag(EXTI_Line4);
 800493e:	f002 fd61 	bl	8007404 <EXTI_ClearFlag>
      if (enable) EXTI->IMR |= (1 << 4);else EXTI->IMR &= ~(1 << 4);
 8004942:	f7ff fe8f 	bl	8004664 <pen_interrupt_set.part.0>
            pen_interrupt_set(1);
         }
      }
      if (pen_enable == 0) {
 8004946:	4910      	ldr	r1, [pc, #64]	; (8004988 <touch_process+0x98>)
 8004948:	780b      	ldrb	r3, [r1, #0]
 800494a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800494e:	b953      	cbnz	r3, 8004966 <touch_process+0x76>
      	 pen_count++;
 8004950:	4a0e      	ldr	r2, [pc, #56]	; (800498c <touch_process+0x9c>)
 8004952:	7813      	ldrb	r3, [r2, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	7013      	strb	r3, [r2, #0]
      	 if (pen_count >= 2) {
 800495a:	7813      	ldrb	r3, [r2, #0]
 800495c:	2b01      	cmp	r3, #1
      	    pen_count = 0;
      	    pen_enable = 1;
 800495e:	bf82      	ittt	hi
 8004960:	2301      	movhi	r3, #1
      	    pen_count = 0;
 8004962:	7010      	strbhi	r0, [r2, #0]
      	    pen_enable = 1;
 8004964:	700b      	strbhi	r3, [r1, #0]
      	 }
      }
      if (USER == 0) {
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <touch_process+0xa0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	b92b      	cbnz	r3, 8004978 <touch_process+0x88>
      	 lcd_clear(background_color);
 800496c:	4b09      	ldr	r3, [pc, #36]	; (8004994 <touch_process+0xa4>)
 800496e:	8818      	ldrh	r0, [r3, #0]
      }
 8004970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      	 lcd_clear(background_color);
 8004974:	f7fe bbf4 	b.w	8003160 <lcd_clear>
 8004978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800497a:	bf00      	nop
 800497c:	20001468 	.word	0x20001468
 8004980:	2000145e 	.word	0x2000145e
 8004984:	42220110 	.word	0x42220110
 8004988:	20001456 	.word	0x20001456
 800498c:	20001469 	.word	0x20001469
 8004990:	42210120 	.word	0x42210120
 8004994:	2000131c 	.word	0x2000131c

08004998 <disk_initialize>:
#include "hwdefs.h"
#include "diskio.h"


DSTATUS disk_initialize (unsigned char drv)
{
 8004998:	b508      	push	{r3, lr}
      unsigned char state;
      if (drv) {
 800499a:	b938      	cbnz	r0, 80049ac <disk_initialize+0x14>
         return STA_NOINIT;
      }
      state = SD_init();
 800499c:	f001 f90c 	bl	8005bb8 <SD_init>
      if (state == STA_NODISK) {
 80049a0:	2802      	cmp	r0, #2
 80049a2:	d002      	beq.n	80049aa <disk_initialize+0x12>
         return STA_NOINIT;
 80049a4:	3800      	subs	r0, #0
 80049a6:	bf18      	it	ne
 80049a8:	2001      	movne	r0, #1
      } else if (state != 0) {
         return STA_NOINIT;
      } else {
         return 0;
      }
}
 80049aa:	bd08      	pop	{r3, pc}
         return STA_NOINIT;
 80049ac:	2001      	movs	r0, #1
 80049ae:	e7fc      	b.n	80049aa <disk_initialize+0x12>

080049b0 <disk_status>:
{
      if (drv) {
         return STA_NOINIT;
      }
      return 0;
}
 80049b0:	3800      	subs	r0, #0
 80049b2:	bf18      	it	ne
 80049b4:	2001      	movne	r0, #1
 80049b6:	4770      	bx	lr

080049b8 <disk_read>:


DRESULT disk_read (unsigned char drv,unsigned char *buff,unsigned int sector,unsigned char count)
{
 80049b8:	b510      	push	{r4, lr}
 80049ba:	4604      	mov	r4, r0
 80049bc:	4610      	mov	r0, r2
 80049be:	461a      	mov	r2, r3
      unsigned char res = 0;
      if (drv || !count) {
 80049c0:	b95c      	cbnz	r4, 80049da <disk_read+0x22>
 80049c2:	b153      	cbz	r3, 80049da <disk_read+0x22>
         return RES_PARERR;
    }
    if (count == 1) {
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <disk_read+0x1c>
       res = SD_read_single_block(sector, buff);
 80049c8:	f001 f9f4 	bl	8005db4 <SD_read_single_block>
         return RES_PARERR;
 80049cc:	3800      	subs	r0, #0
 80049ce:	bf18      	it	ne
 80049d0:	2001      	movne	r0, #1
    if (res == 0x00) {
       return RES_OK;
    } else {
       return RES_ERROR;
    }
}
 80049d2:	bd10      	pop	{r4, pc}
       res = SD_read_multi_block(sector, buff, count);
 80049d4:	f001 fa68 	bl	8005ea8 <SD_read_multi_block>
 80049d8:	e7f8      	b.n	80049cc <disk_read+0x14>
         return RES_PARERR;
 80049da:	2004      	movs	r0, #4
 80049dc:	e7f9      	b.n	80049d2 <disk_read+0x1a>

080049de <disk_write>:


#if _READONLY == 0
DRESULT disk_write (unsigned char drv,const unsigned char *buff,unsigned int sector,unsigned char count)
{
 80049de:	b510      	push	{r4, lr}
 80049e0:	4604      	mov	r4, r0
 80049e2:	4610      	mov	r0, r2
 80049e4:	461a      	mov	r2, r3
      unsigned char res;
      if (drv || !count) {
 80049e6:	b95c      	cbnz	r4, 8004a00 <disk_write+0x22>
 80049e8:	b153      	cbz	r3, 8004a00 <disk_write+0x22>
         return RES_PARERR;
      }
      if (count == 1) {
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d105      	bne.n	80049fa <disk_write+0x1c>
         res = SD_write_single_block(sector, buff);
 80049ee:	f001 f9fd 	bl	8005dec <SD_write_single_block>
         return RES_PARERR;
 80049f2:	3800      	subs	r0, #0
 80049f4:	bf18      	it	ne
 80049f6:	2001      	movne	r0, #1
      if (res == 0) {
         return RES_OK;
      } else {
         return RES_ERROR;
      }
}
 80049f8:	bd10      	pop	{r4, pc}
         res = SD_write_multi_block(sector, buff, count);
 80049fa:	f001 fa87 	bl	8005f0c <SD_write_multi_block>
 80049fe:	e7f8      	b.n	80049f2 <disk_write+0x14>
         return RES_PARERR;
 8004a00:	2004      	movs	r0, #4
 8004a02:	e7f9      	b.n	80049f8 <disk_write+0x1a>

08004a04 <get_fattime>:


DWORD get_fattime (void)
{
      return 0;
}
 8004a04:	2000      	movs	r0, #0
 8004a06:	4770      	bx	lr

08004a08 <mem_cpy>:
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
 8004a08:	3801      	subs	r0, #1
 8004a0a:	440a      	add	r2, r1
 8004a0c:	4291      	cmp	r1, r2
 8004a0e:	d100      	bne.n	8004a12 <mem_cpy+0xa>
}
 8004a10:	4770      	bx	lr
	while (cnt--) *d++ = *s++;
 8004a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a16:	f800 3f01 	strb.w	r3, [r0, #1]!
 8004a1a:	e7f7      	b.n	8004a0c <mem_cpy+0x4>

08004a1c <mem_cmp>:
	while (cnt--) *d++ = (char)val;
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	b510      	push	{r4, lr}
 8004a20:	4402      	add	r2, r0
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d006      	beq.n	8004a34 <mem_cmp+0x18>
 8004a26:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a2e:	1b00      	subs	r0, r0, r4
 8004a30:	d0f7      	beq.n	8004a22 <mem_cmp+0x6>
	return r;
}
 8004a32:	bd10      	pop	{r4, pc}
 8004a34:	2000      	movs	r0, #0
	return r;
 8004a36:	e7fc      	b.n	8004a32 <mem_cmp+0x16>

08004a38 <clust2sect>:
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 8004a38:	6a03      	ldr	r3, [r0, #32]
	clst -= 2;
 8004a3a:	3902      	subs	r1, #2
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 8004a3c:	3b02      	subs	r3, #2
 8004a3e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8004a40:	bf83      	ittte	hi
 8004a42:	7883      	ldrbhi	r3, [r0, #2]
 8004a44:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 8004a46:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 8004a4a:	2000      	movls	r0, #0
}
 8004a4c:	4770      	bx	lr

08004a4e <get_fileinfo>:
	XCHAR *tp;
#endif


	p = fno->fname;
	if (dj->sect) {
 8004a4e:	6902      	ldr	r2, [r0, #16]
{
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
	p = fno->fname;
 8004a52:	f101 0309 	add.w	r3, r1, #9
	if (dj->sect) {
 8004a56:	2a00      	cmp	r2, #0
 8004a58:	d041      	beq.n	8004ade <get_fileinfo+0x90>
		dir = dj->dir;
 8004a5a:	6942      	ldr	r2, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
 8004a5c:	f101 0611 	add.w	r6, r1, #17
 8004a60:	7b14      	ldrb	r4, [r2, #12]
		for (i = 0; i < 8; i++) {	/* Copy name body */
 8004a62:	1e55      	subs	r5, r2, #1
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
 8004a64:	f004 0708 	and.w	r7, r4, #8
			c = dir[i];
 8004a68:	f815 0f01 	ldrb.w	r0, [r5, #1]!
			if (c == ' ') break;
 8004a6c:	2820      	cmp	r0, #32
 8004a6e:	d00e      	beq.n	8004a8e <get_fileinfo+0x40>
			if (c == 0x05) c = 0xE5;
 8004a70:	2805      	cmp	r0, #5
 8004a72:	bf08      	it	eq
 8004a74:	20e5      	moveq	r0, #229	; 0xe5
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
 8004a76:	b137      	cbz	r7, 8004a86 <get_fileinfo+0x38>
 8004a78:	f1a0 0c41 	sub.w	ip, r0, #65	; 0x41
 8004a7c:	f1bc 0f19 	cmp.w	ip, #25
 8004a80:	bf9c      	itt	ls
 8004a82:	3020      	addls	r0, #32
 8004a84:	b2c0      	uxtbls	r0, r0
			*p++ = c;
 8004a86:	f803 0b01 	strb.w	r0, [r3], #1
		for (i = 0; i < 8; i++) {	/* Copy name body */
 8004a8a:	42b3      	cmp	r3, r6
 8004a8c:	d1ec      	bne.n	8004a68 <get_fileinfo+0x1a>
		}
		if (dir[8] != ' ') {		/* Copy name extension */
 8004a8e:	7a10      	ldrb	r0, [r2, #8]
 8004a90:	2820      	cmp	r0, #32
 8004a92:	d016      	beq.n	8004ac2 <get_fileinfo+0x74>
			*p++ = '.';
 8004a94:	461d      	mov	r5, r3
 8004a96:	202e      	movs	r0, #46	; 0x2e
 8004a98:	1dd6      	adds	r6, r2, #7
 8004a9a:	f805 0b04 	strb.w	r0, [r5], #4
 8004a9e:	3301      	adds	r3, #1
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
 8004aa0:	f004 0410 	and.w	r4, r4, #16
				c = dir[i];
 8004aa4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
				if (c == ' ') break;
 8004aa8:	2820      	cmp	r0, #32
 8004aaa:	d00a      	beq.n	8004ac2 <get_fileinfo+0x74>
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
 8004aac:	b12c      	cbz	r4, 8004aba <get_fileinfo+0x6c>
 8004aae:	f1a0 0741 	sub.w	r7, r0, #65	; 0x41
 8004ab2:	2f19      	cmp	r7, #25
 8004ab4:	bf9c      	itt	ls
 8004ab6:	3020      	addls	r0, #32
 8004ab8:	b2c0      	uxtbls	r0, r0
				*p++ = c;
 8004aba:	f803 0b01 	strb.w	r0, [r3], #1
			for (i = 8; i < 11; i++) {
 8004abe:	429d      	cmp	r5, r3
 8004ac0:	d1f0      	bne.n	8004aa4 <get_fileinfo+0x56>
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8004ac2:	7ad0      	ldrb	r0, [r2, #11]
 8004ac4:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 8004ac6:	69d0      	ldr	r0, [r2, #28]
 8004ac8:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 8004aca:	7e54      	ldrb	r4, [r2, #25]
 8004acc:	7e10      	ldrb	r0, [r2, #24]
 8004ace:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8004ad2:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 8004ad4:	7dd0      	ldrb	r0, [r2, #23]
 8004ad6:	7d92      	ldrb	r2, [r2, #22]
 8004ad8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004adc:	80ca      	strh	r2, [r1, #6]
	}
	*p = 0;
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
 8004ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ae4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 8004ae4:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
 8004ae6:	b160      	cbz	r0, 8004b02 <validate+0x1e>
 8004ae8:	7803      	ldrb	r3, [r0, #0]
 8004aea:	b153      	cbz	r3, 8004b02 <validate+0x1e>
 8004aec:	88c3      	ldrh	r3, [r0, #6]
 8004aee:	428b      	cmp	r3, r1
 8004af0:	d107      	bne.n	8004b02 <validate+0x1e>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
 8004af2:	7840      	ldrb	r0, [r0, #1]
 8004af4:	f7ff ff5c 	bl	80049b0 <disk_status>
 8004af8:	f010 0001 	ands.w	r0, r0, #1
		return FR_NOT_READY;
 8004afc:	bf18      	it	ne
 8004afe:	2003      	movne	r0, #3

	return FR_OK;
}
 8004b00:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
 8004b02:	2009      	movs	r0, #9
 8004b04:	e7fc      	b.n	8004b00 <validate+0x1c>
	...

08004b08 <check_fs>:
{
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	4605      	mov	r5, r0
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8004b0e:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8004b12:	2301      	movs	r3, #1
 8004b14:	7840      	ldrb	r0, [r0, #1]
 8004b16:	f7ff ff4f 	bl	80049b8 <disk_read>
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	b9e0      	cbnz	r0, 8004b58 <check_fs+0x50>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8004b1e:	f895 2233 	ldrb.w	r2, [r5, #563]	; 0x233
 8004b22:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
 8004b26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b2a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d114      	bne.n	8004b5c <check_fs+0x54>
	if (!mem_cmp(&fs->win[BS_FilSysType], fatstr, 3))	/* Check FAT signature */
 8004b32:	2203      	movs	r2, #3
 8004b34:	490b      	ldr	r1, [pc, #44]	; (8004b64 <check_fs+0x5c>)
 8004b36:	f105 006a 	add.w	r0, r5, #106	; 0x6a
 8004b3a:	f7ff ff6f 	bl	8004a1c <mem_cmp>
 8004b3e:	b148      	cbz	r0, 8004b54 <check_fs+0x4c>
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
 8004b40:	2203      	movs	r2, #3
 8004b42:	4908      	ldr	r1, [pc, #32]	; (8004b64 <check_fs+0x5c>)
 8004b44:	f105 0086 	add.w	r0, r5, #134	; 0x86
 8004b48:	f7ff ff68 	bl	8004a1c <mem_cmp>
 8004b4c:	b940      	cbnz	r0, 8004b60 <check_fs+0x58>
 8004b4e:	f895 405c 	ldrb.w	r4, [r5, #92]	; 0x5c
		return 3;
 8004b52:	09e4      	lsrs	r4, r4, #7
}
 8004b54:	4620      	mov	r0, r4
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
		return 3;
 8004b58:	2403      	movs	r4, #3
 8004b5a:	e7fb      	b.n	8004b54 <check_fs+0x4c>
		return 2;
 8004b5c:	2402      	movs	r4, #2
 8004b5e:	e7f9      	b.n	8004b54 <check_fs+0x4c>
	return 1;
 8004b60:	2401      	movs	r4, #1
 8004b62:	e7f7      	b.n	8004b54 <check_fs+0x4c>
 8004b64:	080118f1 	.word	0x080118f1

08004b68 <auto_mount>:
{
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const XCHAR *p = *path;
 8004b6a:	6803      	ldr	r3, [r0, #0]
{
 8004b6c:	4615      	mov	r5, r2
	vol = p[0] - '0';				/* Is there a drive number? */
 8004b6e:	781e      	ldrb	r6, [r3, #0]
 8004b70:	3e30      	subs	r6, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 8004b72:	2e09      	cmp	r6, #9
 8004b74:	d81b      	bhi.n	8004bae <auto_mount+0x46>
 8004b76:	785a      	ldrb	r2, [r3, #1]
 8004b78:	2a3a      	cmp	r2, #58	; 0x3a
 8004b7a:	d118      	bne.n	8004bae <auto_mount+0x46>
		p += 2; *path = p;			/* Return pointer to the path name */
 8004b7c:	3302      	adds	r3, #2
 8004b7e:	6003      	str	r3, [r0, #0]
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
 8004b80:	2e00      	cmp	r6, #0
 8004b82:	f040 80c9 	bne.w	8004d18 <auto_mount+0x1b0>
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
 8004b86:	4b68      	ldr	r3, [pc, #416]	; (8004d28 <auto_mount+0x1c0>)
 8004b88:	681c      	ldr	r4, [r3, #0]
 8004b8a:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
 8004b8c:	2c00      	cmp	r4, #0
 8004b8e:	f000 80c5 	beq.w	8004d1c <auto_mount+0x1b4>
	if (fs->fs_type) {				/* If the logical drive has been mounted */
 8004b92:	7823      	ldrb	r3, [r4, #0]
 8004b94:	b173      	cbz	r3, 8004bb4 <auto_mount+0x4c>
		stat = disk_status(fs->drive);
 8004b96:	7860      	ldrb	r0, [r4, #1]
 8004b98:	f7ff ff0a 	bl	80049b0 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
 8004b9c:	07c1      	lsls	r1, r0, #31
 8004b9e:	d409      	bmi.n	8004bb4 <auto_mount+0x4c>
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004ba0:	b11d      	cbz	r5, 8004baa <auto_mount+0x42>
 8004ba2:	f010 0504 	ands.w	r5, r0, #4
 8004ba6:	d000      	beq.n	8004baa <auto_mount+0x42>
				return FR_WRITE_PROTECTED;
 8004ba8:	250a      	movs	r5, #10
}
 8004baa:	4628      	mov	r0, r5
 8004bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vol = Drive;				/* Use current drive */
 8004bae:	4b5f      	ldr	r3, [pc, #380]	; (8004d2c <auto_mount+0x1c4>)
 8004bb0:	781e      	ldrb	r6, [r3, #0]
 8004bb2:	e7e5      	b.n	8004b80 <auto_mount+0x18>
	fs->fs_type = 0;					/* Clear the file system object */
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
 8004bb8:	f7ff feee 	bl	8004998 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
 8004bbc:	07c2      	lsls	r2, r0, #31
 8004bbe:	f100 80af 	bmi.w	8004d20 <auto_mount+0x1b8>
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004bc2:	b10d      	cbz	r5, 8004bc8 <auto_mount+0x60>
 8004bc4:	0743      	lsls	r3, r0, #29
 8004bc6:	d4ef      	bmi.n	8004ba8 <auto_mount+0x40>
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7ff ff9c 	bl	8004b08 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
 8004bd0:	2801      	cmp	r0, #1
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 8004bd2:	4605      	mov	r5, r0
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
 8004bd4:	d10b      	bne.n	8004bee <auto_mount+0x86>
		if (tbl[4]) {									/* Is the partition existing? */
 8004bd6:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
 8004bda:	b90b      	cbnz	r3, 8004be0 <auto_mount+0x78>
		return FR_NO_FILESYSTEM;
 8004bdc:	250d      	movs	r5, #13
 8004bde:	e7e4      	b.n	8004baa <auto_mount+0x42>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 8004be0:	f8d4 61fa 	ldr.w	r6, [r4, #506]	; 0x1fa
			fmt = check_fs(fs, bsect);					/* Check the partition */
 8004be4:	4620      	mov	r0, r4
 8004be6:	4631      	mov	r1, r6
 8004be8:	f7ff ff8e 	bl	8004b08 <check_fs>
 8004bec:	4605      	mov	r5, r0
	if (fmt == 3) return FR_DISK_ERR;
 8004bee:	2d03      	cmp	r5, #3
 8004bf0:	f000 8098 	beq.w	8004d24 <auto_mount+0x1bc>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
 8004bf4:	2d00      	cmp	r5, #0
 8004bf6:	d1f1      	bne.n	8004bdc <auto_mount+0x74>
 8004bf8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004bfc:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8004c00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c08:	d1e8      	bne.n	8004bdc <auto_mount+0x74>
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8004c0a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8004c0e:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 8004c12:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
 8004c16:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8004c1a:	bf08      	it	eq
 8004c1c:	6da0      	ldreq	r0, [r4, #88]	; 0x58
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8004c1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
	fs->sects_fat = fsize;
 8004c22:	61e0      	str	r0, [r4, #28]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8004c24:	70e3      	strb	r3, [r4, #3]
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
 8004c26:	4358      	muls	r0, r3
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 8004c28:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 8004c2c:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 8004c30:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 8004c34:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
 8004c38:	f894 e048 	ldrb.w	lr, [r4, #72]	; 0x48
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 8004c3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
 8004c40:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 8004c44:	8123      	strh	r3, [r4, #8]
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8004c46:	ea51 210e 	orrs.w	r1, r1, lr, lsl #8
 8004c4a:	bf08      	it	eq
 8004c4c:	6d61      	ldreq	r1, [r4, #84]	; 0x54
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
 8004c4e:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8004c52:	eb02 1313 	add.w	r3, r2, r3, lsr #4
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004c56:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
 8004c5a:	4403      	add	r3, r0
 8004c5c:	1acb      	subs	r3, r1, r3
		) / fs->csize + 2;
 8004c5e:	fbb3 f3f7 	udiv	r3, r3, r7
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 8004c62:	eb02 0c06 	add.w	ip, r2, r6
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 8004c66:	f640 72f6 	movw	r2, #4086	; 0xff6
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
 8004c6a:	3302      	adds	r3, #2
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 8004c6c:	4293      	cmp	r3, r2
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 8004c6e:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004c72:	70a7      	strb	r7, [r4, #2]
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
 8004c74:	6223      	str	r3, [r4, #32]
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 8004c76:	d949      	bls.n	8004d0c <auto_mount+0x1a4>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 8004c78:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d949      	bls.n	8004d14 <auto_mount+0x1ac>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8004c80:	2703      	movs	r7, #3
 8004c82:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c84:	62a3      	str	r3, [r4, #40]	; 0x28
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 8004c86:	eb0c 030e 	add.w	r3, ip, lr
 8004c8a:	4418      	add	r0, r3
	fs->free_clust = 0xFFFFFFFF;
 8004c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c90:	6123      	str	r3, [r4, #16]
	fs->wflag = 0;
 8004c92:	2300      	movs	r3, #0
	if (fmt == FS_FAT32) {
 8004c94:	2f03      	cmp	r7, #3
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 8004c96:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->wflag = 0;
 8004c98:	7123      	strb	r3, [r4, #4]
	if (fmt == FS_FAT32) {
 8004c9a:	d12c      	bne.n	8004cf6 <auto_mount+0x18e>
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8004c9c:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
	 	fs->fsi_flag = 0;
 8004ca0:	72a3      	strb	r3, [r4, #10]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8004ca2:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8004ca6:	7860      	ldrb	r0, [r4, #1]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8004ca8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004cac:	4432      	add	r2, r6
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8004cae:	2301      	movs	r3, #1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8004cb0:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8004cb2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8004cb6:	f7ff fe7f 	bl	80049b8 <disk_read>
 8004cba:	b9e0      	cbnz	r0, 8004cf6 <auto_mount+0x18e>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8004cbc:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8004cc0:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8004cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8004cc8:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d112      	bne.n	8004cf6 <auto_mount+0x18e>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8004cd0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004cd2:	4b17      	ldr	r3, [pc, #92]	; (8004d30 <auto_mount+0x1c8>)
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d10e      	bne.n	8004cf6 <auto_mount+0x18e>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8004cd8:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8004cdc:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8004ce0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004ce4:	3320      	adds	r3, #32
 8004ce6:	429a      	cmp	r2, r3
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8004ce8:	bf01      	itttt	eq
 8004cea:	f8d4 3220 	ldreq.w	r3, [r4, #544]	; 0x220
 8004cee:	60e3      	streq	r3, [r4, #12]
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8004cf0:	f8d4 321c 	ldreq.w	r3, [r4, #540]	; 0x21c
 8004cf4:	6123      	streq	r3, [r4, #16]
	fs->winsect = 0;		/* Invalidate sector cache */
 8004cf6:	2300      	movs	r3, #0
	fs->id = ++Fsid;		/* File system mount ID */
 8004cf8:	4a0e      	ldr	r2, [pc, #56]	; (8004d34 <auto_mount+0x1cc>)
	fs->winsect = 0;		/* Invalidate sector cache */
 8004cfa:	6323      	str	r3, [r4, #48]	; 0x30
	fs->cdir = 0;			/* Current directory (root dir) */
 8004cfc:	61a3      	str	r3, [r4, #24]
	fs->id = ++Fsid;		/* File system mount ID */
 8004cfe:	8813      	ldrh	r3, [r2, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 8004d00:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004d02:	3301      	adds	r3, #1
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]
 8004d08:	80e3      	strh	r3, [r4, #6]
	return res;
 8004d0a:	e74e      	b.n	8004baa <auto_mount+0x42>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
 8004d0c:	2701      	movs	r7, #1
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 8004d0e:	eb0c 0300 	add.w	r3, ip, r0
 8004d12:	e7b7      	b.n	8004c84 <auto_mount+0x11c>
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 8004d14:	2702      	movs	r7, #2
 8004d16:	e7fa      	b.n	8004d0e <auto_mount+0x1a6>
		return FR_INVALID_DRIVE;
 8004d18:	250b      	movs	r5, #11
 8004d1a:	e746      	b.n	8004baa <auto_mount+0x42>
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
 8004d1c:	250c      	movs	r5, #12
 8004d1e:	e744      	b.n	8004baa <auto_mount+0x42>
		return FR_NOT_READY;
 8004d20:	2503      	movs	r5, #3
 8004d22:	e742      	b.n	8004baa <auto_mount+0x42>
	if (fmt == 3) return FR_DISK_ERR;
 8004d24:	2501      	movs	r5, #1
 8004d26:	e740      	b.n	8004baa <auto_mount+0x42>
 8004d28:	20000a98 	.word	0x20000a98
 8004d2c:	20000a96 	.word	0x20000a96
 8004d30:	41615252 	.word	0x41615252
 8004d34:	20000a9c 	.word	0x20000a9c

08004d38 <move_window>:
{
 8004d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	wsect = fs->winsect;
 8004d3c:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
 8004d3e:	4604      	mov	r4, r0
	if (wsect != sector) {	/* Changed current window */
 8004d40:	428e      	cmp	r6, r1
{
 8004d42:	460d      	mov	r5, r1
	if (wsect != sector) {	/* Changed current window */
 8004d44:	d102      	bne.n	8004d4c <move_window+0x14>
	return FR_OK;
 8004d46:	2000      	movs	r0, #0
}
 8004d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (fs->wflag) {	/* Write back dirty window if needed */
 8004d4c:	7903      	ldrb	r3, [r0, #4]
 8004d4e:	b95b      	cbnz	r3, 8004d68 <move_window+0x30>
		if (sector) {
 8004d50:	2d00      	cmp	r5, #0
 8004d52:	d0f8      	beq.n	8004d46 <move_window+0xe>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 8004d54:	2301      	movs	r3, #1
 8004d56:	462a      	mov	r2, r5
 8004d58:	7860      	ldrb	r0, [r4, #1]
 8004d5a:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8004d5e:	f7ff fe2b 	bl	80049b8 <disk_read>
 8004d62:	b950      	cbnz	r0, 8004d7a <move_window+0x42>
			fs->winsect = sector;
 8004d64:	6325      	str	r5, [r4, #48]	; 0x30
 8004d66:	e7ef      	b.n	8004d48 <move_window+0x10>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 8004d68:	f100 0834 	add.w	r8, r0, #52	; 0x34
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	4632      	mov	r2, r6
 8004d70:	4641      	mov	r1, r8
 8004d72:	7840      	ldrb	r0, [r0, #1]
 8004d74:	f7ff fe33 	bl	80049de <disk_write>
 8004d78:	b108      	cbz	r0, 8004d7e <move_window+0x46>
				return FR_DISK_ERR;
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	e7e4      	b.n	8004d48 <move_window+0x10>
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 8004d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d80:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 8004d82:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 8004d84:	4413      	add	r3, r2
 8004d86:	42b3      	cmp	r3, r6
 8004d88:	d9e2      	bls.n	8004d50 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8004d8a:	78e7      	ldrb	r7, [r4, #3]
 8004d8c:	2f01      	cmp	r7, #1
 8004d8e:	d9df      	bls.n	8004d50 <move_window+0x18>
					wsect += fs->sects_fat;
 8004d90:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drive, fs->win, wsect, 1);
 8004d92:	4641      	mov	r1, r8
					wsect += fs->sects_fat;
 8004d94:	441e      	add	r6, r3
					disk_write(fs->drive, fs->win, wsect, 1);
 8004d96:	4632      	mov	r2, r6
 8004d98:	2301      	movs	r3, #1
 8004d9a:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8004d9c:	3f01      	subs	r7, #1
					disk_write(fs->drive, fs->win, wsect, 1);
 8004d9e:	f7ff fe1e 	bl	80049de <disk_write>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8004da2:	b2ff      	uxtb	r7, r7
 8004da4:	e7f2      	b.n	8004d8c <move_window+0x54>

08004da6 <get_fat>:
	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 8004da6:	2901      	cmp	r1, #1
{
 8004da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dac:	4606      	mov	r6, r0
 8004dae:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 8004db0:	d95c      	bls.n	8004e6c <get_fat+0xc6>
 8004db2:	6a03      	ldr	r3, [r0, #32]
 8004db4:	428b      	cmp	r3, r1
 8004db6:	d959      	bls.n	8004e6c <get_fat+0xc6>
	switch (fs->fs_type) {
 8004db8:	7803      	ldrb	r3, [r0, #0]
	fsect = fs->fatbase;
 8004dba:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
	switch (fs->fs_type) {
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d028      	beq.n	8004e14 <get_fat+0x6e>
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d037      	beq.n	8004e36 <get_fat+0x90>
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d106      	bne.n	8004dd8 <get_fat+0x32>
		bc = clst; bc += bc / 2;
 8004dca:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8004dce:	eb08 2157 	add.w	r1, r8, r7, lsr #9
 8004dd2:	f7ff ffb1 	bl	8004d38 <move_window>
 8004dd6:	b110      	cbz	r0, 8004dde <get_fat+0x38>
	switch (fs->fs_type) {
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	e018      	b.n	8004e10 <get_fat+0x6a>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 8004dde:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8004de2:	3701      	adds	r7, #1
 8004de4:	4433      	add	r3, r6
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8004de6:	4630      	mov	r0, r6
 8004de8:	eb08 2157 	add.w	r1, r8, r7, lsr #9
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 8004dec:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8004df0:	f7ff ffa2 	bl	8004d38 <move_window>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d1ef      	bne.n	8004dd8 <get_fat+0x32>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 8004df8:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004dfc:	443e      	add	r6, r7
 8004dfe:	f896 0034 	ldrb.w	r0, [r6, #52]	; 0x34
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004e02:	07eb      	lsls	r3, r5, #31
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 8004e04:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004e08:	bf4c      	ite	mi
 8004e0a:	0900      	lsrmi	r0, r0, #4
 8004e0c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8004e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 8004e14:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8004e18:	f7ff ff8e 	bl	8004d38 <move_window>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d1db      	bne.n	8004dd8 <get_fat+0x32>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 8004e20:	006d      	lsls	r5, r5, #1
 8004e22:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8004e26:	442e      	add	r6, r5
 8004e28:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8004e2c:	f896 0034 	ldrb.w	r0, [r6, #52]	; 0x34
 8004e30:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004e34:	e7ec      	b.n	8004e10 <get_fat+0x6a>
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 8004e36:	eb08 11d1 	add.w	r1, r8, r1, lsr #7
 8004e3a:	f7ff ff7d 	bl	8004d38 <move_window>
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d1ca      	bne.n	8004dd8 <get_fat+0x32>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 8004e42:	00ad      	lsls	r5, r5, #2
 8004e44:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8004e48:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8004e4c:	4433      	add	r3, r6
 8004e4e:	7898      	ldrb	r0, [r3, #2]
 8004e50:	78da      	ldrb	r2, [r3, #3]
 8004e52:	0400      	lsls	r0, r0, #16
 8004e54:	4435      	add	r5, r6
 8004e56:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8004e5a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	4310      	orrs	r0, r2
 8004e62:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004e66:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8004e6a:	e7d1      	b.n	8004e10 <get_fat+0x6a>
		return 1;
 8004e6c:	2001      	movs	r0, #1
 8004e6e:	e7cf      	b.n	8004e10 <get_fat+0x6a>

08004e70 <dir_seek>:
{
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	460c      	mov	r4, r1
	dj->index = idx;
 8004e74:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
 8004e76:	6881      	ldr	r1, [r0, #8]
{
 8004e78:	4605      	mov	r5, r0
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 8004e7a:	2901      	cmp	r1, #1
 8004e7c:	d101      	bne.n	8004e82 <dir_seek+0x12>
		return FR_INT_ERR;
 8004e7e:	2002      	movs	r0, #2
}
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 8004e82:	6803      	ldr	r3, [r0, #0]
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	428a      	cmp	r2, r1
 8004e88:	d9f9      	bls.n	8004e7e <dir_seek+0xe>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004e8a:	b9b1      	cbnz	r1, 8004eba <dir_seek+0x4a>
 8004e8c:	781a      	ldrb	r2, [r3, #0]
 8004e8e:	2a03      	cmp	r2, #3
 8004e90:	d101      	bne.n	8004e96 <dir_seek+0x26>
		clst = dj->fs->dirbase;
 8004e92:	6a99      	ldr	r1, [r3, #40]	; 0x28
	if (clst == 0) {	/* Static table */
 8004e94:	b989      	cbnz	r1, 8004eba <dir_seek+0x4a>
		dj->clust = clst;
 8004e96:	2200      	movs	r2, #0
 8004e98:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8004e9a:	891a      	ldrh	r2, [r3, #8]
 8004e9c:	42a2      	cmp	r2, r4
 8004e9e:	d9ee      	bls.n	8004e7e <dir_seek+0xe>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	eb03 1314 	add.w	r3, r3, r4, lsr #4
 8004ea6:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	f004 040f 	and.w	r4, r4, #15
 8004eae:	3334      	adds	r3, #52	; 0x34
 8004eb0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
	return FR_OK;	/* Seek succeeded */
 8004eb4:	2000      	movs	r0, #0
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 8004eb6:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
 8004eb8:	e7e2      	b.n	8004e80 <dir_seek+0x10>
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 8004eba:	789e      	ldrb	r6, [r3, #2]
 8004ebc:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8004ebe:	42b4      	cmp	r4, r6
 8004ec0:	6828      	ldr	r0, [r5, #0]
 8004ec2:	d206      	bcs.n	8004ed2 <dir_seek+0x62>
		dj->clust = clst;
 8004ec4:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 8004ec6:	f7ff fdb7 	bl	8004a38 <clust2sect>
 8004eca:	eb00 1014 	add.w	r0, r0, r4, lsr #4
 8004ece:	6128      	str	r0, [r5, #16]
 8004ed0:	e7ea      	b.n	8004ea8 <dir_seek+0x38>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8004ed2:	f7ff ff68 	bl	8004da6 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ed6:	1c43      	adds	r3, r0, #1
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8004ed8:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004eda:	d008      	beq.n	8004eee <dir_seek+0x7e>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 8004edc:	2801      	cmp	r0, #1
 8004ede:	d9ce      	bls.n	8004e7e <dir_seek+0xe>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	4283      	cmp	r3, r0
 8004ee6:	d9ca      	bls.n	8004e7e <dir_seek+0xe>
			idx -= ic;
 8004ee8:	1ba4      	subs	r4, r4, r6
 8004eea:	b2a4      	uxth	r4, r4
 8004eec:	e7e7      	b.n	8004ebe <dir_seek+0x4e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004eee:	2001      	movs	r0, #1
 8004ef0:	e7c6      	b.n	8004e80 <dir_seek+0x10>

08004ef2 <put_fat>:
	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 8004ef2:	2901      	cmp	r1, #1
{
 8004ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef8:	4606      	mov	r6, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	4615      	mov	r5, r2
	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 8004efe:	d96a      	bls.n	8004fd6 <put_fat+0xe4>
 8004f00:	6a03      	ldr	r3, [r0, #32]
 8004f02:	428b      	cmp	r3, r1
 8004f04:	d967      	bls.n	8004fd6 <put_fat+0xe4>
		switch (fs->fs_type) {
 8004f06:	7803      	ldrb	r3, [r0, #0]
		fsect = fs->fatbase;
 8004f08:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
		switch (fs->fs_type) {
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d039      	beq.n	8004f84 <put_fat+0x92>
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d048      	beq.n	8004fa6 <put_fat+0xb4>
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d15c      	bne.n	8004fd2 <put_fat+0xe0>
			bc = clst; bc += bc / 2;
 8004f18:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fsect + (bc / SS(fs)));
 8004f1c:	eb08 2157 	add.w	r1, r8, r7, lsr #9
 8004f20:	f7ff ff0a 	bl	8004d38 <move_window>
			if (res != FR_OK) break;
 8004f24:	bb10      	cbnz	r0, 8004f6c <put_fat+0x7a>
			p = &fs->win[bc & (SS(fs) - 1)];
 8004f26:	f3c7 0308 	ubfx	r3, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004f2a:	f014 0401 	ands.w	r4, r4, #1
 8004f2e:	4433      	add	r3, r6
 8004f30:	bf17      	itett	ne
 8004f32:	f893 2034 	ldrbne.w	r2, [r3, #52]	; 0x34
 8004f36:	b2ea      	uxtbeq	r2, r5
 8004f38:	f002 010f 	andne.w	r1, r2, #15
 8004f3c:	012a      	lslne	r2, r5, #4
 8004f3e:	bf1c      	itt	ne
 8004f40:	f002 02f0 	andne.w	r2, r2, #240	; 0xf0
 8004f44:	430a      	orrne	r2, r1
 8004f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			fs->wflag = 1;
 8004f4a:	2301      	movs	r3, #1
			bc++;
 8004f4c:	3701      	adds	r7, #1
			res = move_window(fs, fsect + (bc / SS(fs)));
 8004f4e:	4630      	mov	r0, r6
			fs->wflag = 1;
 8004f50:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fsect + (bc / SS(fs)));
 8004f52:	eb08 2157 	add.w	r1, r8, r7, lsr #9
 8004f56:	f7ff feef 	bl	8004d38 <move_window>
			if (res != FR_OK) break;
 8004f5a:	b938      	cbnz	r0, 8004f6c <put_fat+0x7a>
			p = &fs->win[bc & (SS(fs) - 1)];
 8004f5c:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004f60:	4437      	add	r7, r6
 8004f62:	b13c      	cbz	r4, 8004f74 <put_fat+0x82>
 8004f64:	f3c5 1507 	ubfx	r5, r5, #4, #8
 8004f68:	f887 5034 	strb.w	r5, [r7, #52]	; 0x34
		fs->wflag = 1;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	7133      	strb	r3, [r6, #4]
}
 8004f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004f74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f78:	f3c5 2503 	ubfx	r5, r5, #8, #4
 8004f7c:	f023 030f 	bic.w	r3, r3, #15
 8004f80:	431d      	orrs	r5, r3
 8004f82:	e7f1      	b.n	8004f68 <put_fat+0x76>
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 8004f84:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8004f88:	f7ff fed6 	bl	8004d38 <move_window>
			if (res != FR_OK) break;
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d1ed      	bne.n	8004f6c <put_fat+0x7a>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 8004f90:	0064      	lsls	r4, r4, #1
 8004f92:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8004f96:	4434      	add	r4, r6
 8004f98:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8004f9c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8004fa0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
			break;
 8004fa4:	e7e2      	b.n	8004f6c <put_fat+0x7a>
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 8004fa6:	eb08 11d1 	add.w	r1, r8, r1, lsr #7
 8004faa:	f7ff fec5 	bl	8004d38 <move_window>
			if (res != FR_OK) break;
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d1dc      	bne.n	8004f6c <put_fat+0x7a>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 8004fb2:	00a4      	lsls	r4, r4, #2
 8004fb4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004fb8:	1933      	adds	r3, r6, r4
 8004fba:	3434      	adds	r4, #52	; 0x34
 8004fbc:	f883 5034 	strb.w	r5, [r3, #52]	; 0x34
 8004fc0:	4434      	add	r4, r6
 8004fc2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8004fc6:	7063      	strb	r3, [r4, #1]
 8004fc8:	0c2b      	lsrs	r3, r5, #16
 8004fca:	0e2d      	lsrs	r5, r5, #24
 8004fcc:	70a3      	strb	r3, [r4, #2]
 8004fce:	70e5      	strb	r5, [r4, #3]
			break;
 8004fd0:	e7cc      	b.n	8004f6c <put_fat+0x7a>
		switch (fs->fs_type) {
 8004fd2:	2002      	movs	r0, #2
 8004fd4:	e7ca      	b.n	8004f6c <put_fat+0x7a>
		res = FR_INT_ERR;
 8004fd6:	2002      	movs	r0, #2
 8004fd8:	e7ca      	b.n	8004f70 <put_fat+0x7e>

08004fda <create_chain>:
{
 8004fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fde:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create new chain */
 8004fe0:	460f      	mov	r7, r1
	mcl = fs->max_clust;
 8004fe2:	f8d0 8020 	ldr.w	r8, [r0, #32]
	if (clst == 0) {		/* Create new chain */
 8004fe6:	b961      	cbnz	r1, 8005002 <create_chain+0x28>
		scl = fs->last_clust;			/* Get suggested start point */
 8004fe8:	68c6      	ldr	r6, [r0, #12]
		if (scl == 0 || scl >= mcl) scl = 1;
 8004fea:	b1be      	cbz	r6, 800501c <create_chain+0x42>
 8004fec:	45b0      	cmp	r8, r6
 8004fee:	bf98      	it	ls
 8004ff0:	2601      	movls	r6, #1
	ncl = scl;				/* Start cluster */
 8004ff2:	4634      	mov	r4, r6
		ncl++;							/* Next cluster */
 8004ff4:	3401      	adds	r4, #1
		if (ncl >= mcl) {				/* Wrap around */
 8004ff6:	45a0      	cmp	r8, r4
 8004ff8:	d813      	bhi.n	8005022 <create_chain+0x48>
			if (ncl > scl) return 0;	/* No free custer */
 8004ffa:	2e01      	cmp	r6, #1
 8004ffc:	d810      	bhi.n	8005020 <create_chain+0x46>
 8004ffe:	2400      	movs	r4, #0
 8005000:	e005      	b.n	800500e <create_chain+0x34>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005002:	f7ff fed0 	bl	8004da6 <get_fat>
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8005006:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005008:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
 800500a:	d803      	bhi.n	8005014 <create_chain+0x3a>
 800500c:	2401      	movs	r4, #1
}
 800500e:	4620      	mov	r0, r4
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 8005014:	4580      	cmp	r8, r0
 8005016:	d8fa      	bhi.n	800500e <create_chain+0x34>
 8005018:	463e      	mov	r6, r7
 800501a:	e7ea      	b.n	8004ff2 <create_chain+0x18>
		if (scl == 0 || scl >= mcl) scl = 1;
 800501c:	2601      	movs	r6, #1
 800501e:	e7e8      	b.n	8004ff2 <create_chain+0x18>
			ncl = 2;
 8005020:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005022:	4621      	mov	r1, r4
 8005024:	4628      	mov	r0, r5
 8005026:	f7ff febe 	bl	8004da6 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 800502a:	b148      	cbz	r0, 8005040 <create_chain+0x66>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 800502c:	1c41      	adds	r1, r0, #1
 800502e:	d102      	bne.n	8005036 <create_chain+0x5c>
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8005030:	f04f 34ff 	mov.w	r4, #4294967295
 8005034:	e7eb      	b.n	800500e <create_chain+0x34>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 8005036:	2801      	cmp	r0, #1
 8005038:	d0e8      	beq.n	800500c <create_chain+0x32>
		if (ncl == scl) return 0;		/* No free custer */
 800503a:	42b4      	cmp	r4, r6
 800503c:	d1da      	bne.n	8004ff4 <create_chain+0x1a>
 800503e:	e7de      	b.n	8004ffe <create_chain+0x24>
	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 8005040:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005044:	4621      	mov	r1, r4
 8005046:	4628      	mov	r0, r5
 8005048:	f7ff ff53 	bl	8004ef2 <put_fat>
 800504c:	2800      	cmp	r0, #0
 800504e:	d1ef      	bne.n	8005030 <create_chain+0x56>
	if (clst != 0) {					/* Link it to the previous one if needed */
 8005050:	b947      	cbnz	r7, 8005064 <create_chain+0x8a>
	if (fs->free_clust != 0xFFFFFFFF) {
 8005052:	692b      	ldr	r3, [r5, #16]
	fs->last_clust = ncl;				/* Update FSINFO */
 8005054:	60ec      	str	r4, [r5, #12]
	if (fs->free_clust != 0xFFFFFFFF) {
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	d0d9      	beq.n	800500e <create_chain+0x34>
		fs->free_clust--;
 800505a:	3b01      	subs	r3, #1
 800505c:	612b      	str	r3, [r5, #16]
		fs->fsi_flag = 1;
 800505e:	2301      	movs	r3, #1
 8005060:	72ab      	strb	r3, [r5, #10]
 8005062:	e7d4      	b.n	800500e <create_chain+0x34>
		if (put_fat(fs, clst, ncl))
 8005064:	4622      	mov	r2, r4
 8005066:	4639      	mov	r1, r7
 8005068:	4628      	mov	r0, r5
 800506a:	f7ff ff42 	bl	8004ef2 <put_fat>
 800506e:	2800      	cmp	r0, #0
 8005070:	d0ef      	beq.n	8005052 <create_chain+0x78>
 8005072:	e7dd      	b.n	8005030 <create_chain+0x56>

08005074 <dir_next>:
{
 8005074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dj->index + 1;
 8005078:	88c6      	ldrh	r6, [r0, #6]
{
 800507a:	4604      	mov	r4, r0
	i = dj->index + 1;
 800507c:	3601      	adds	r6, #1
 800507e:	b2b6      	uxth	r6, r6
{
 8005080:	4689      	mov	r9, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8005082:	b916      	cbnz	r6, 800508a <dir_next+0x16>
		return FR_NO_FILE;
 8005084:	2004      	movs	r0, #4
}
 8005086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 800508a:	6903      	ldr	r3, [r0, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f9      	beq.n	8005084 <dir_next+0x10>
	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 8005090:	f016 080f 	ands.w	r8, r6, #15
 8005094:	d107      	bne.n	80050a6 <dir_next+0x32>
		if (dj->clust == 0) {	/* Static table */
 8005096:	68e1      	ldr	r1, [r4, #12]
		dj->sect++;					/* Next sector */
 8005098:	3301      	adds	r3, #1
 800509a:	6800      	ldr	r0, [r0, #0]
 800509c:	6123      	str	r3, [r4, #16]
		if (dj->clust == 0) {	/* Static table */
 800509e:	b951      	cbnz	r1, 80050b6 <dir_next+0x42>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 80050a0:	8903      	ldrh	r3, [r0, #8]
 80050a2:	42b3      	cmp	r3, r6
 80050a4:	d9ee      	bls.n	8005084 <dir_next+0x10>
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 80050a6:	6823      	ldr	r3, [r4, #0]
	return FR_OK;
 80050a8:	2000      	movs	r0, #0
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 80050aa:	3334      	adds	r3, #52	; 0x34
 80050ac:	eb03 1348 	add.w	r3, r3, r8, lsl #5
	dj->index = i;
 80050b0:	80e6      	strh	r6, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 80050b2:	6163      	str	r3, [r4, #20]
	return FR_OK;
 80050b4:	e7e7      	b.n	8005086 <dir_next+0x12>
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80050b6:	7887      	ldrb	r7, [r0, #2]
 80050b8:	3f01      	subs	r7, #1
 80050ba:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 80050be:	d1f2      	bne.n	80050a6 <dir_next+0x32>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 80050c0:	f7ff fe71 	bl	8004da6 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80050c4:	2801      	cmp	r0, #1
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 80050c6:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80050c8:	d801      	bhi.n	80050ce <dir_next+0x5a>
 80050ca:	2002      	movs	r0, #2
 80050cc:	e7db      	b.n	8005086 <dir_next+0x12>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80050ce:	1c42      	adds	r2, r0, #1
 80050d0:	d101      	bne.n	80050d6 <dir_next+0x62>
 80050d2:	2001      	movs	r0, #1
 80050d4:	e7d7      	b.n	8005086 <dir_next+0x12>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 80050d6:	6820      	ldr	r0, [r4, #0]
 80050d8:	6a03      	ldr	r3, [r0, #32]
 80050da:	42ab      	cmp	r3, r5
 80050dc:	d829      	bhi.n	8005132 <dir_next+0xbe>
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 80050de:	f1b9 0f00 	cmp.w	r9, #0
 80050e2:	d0cf      	beq.n	8005084 <dir_next+0x10>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
 80050e4:	68e1      	ldr	r1, [r4, #12]
 80050e6:	f7ff ff78 	bl	8004fda <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80050ea:	4605      	mov	r5, r0
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d037      	beq.n	8005160 <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;
 80050f0:	2801      	cmp	r0, #1
 80050f2:	d0ea      	beq.n	80050ca <dir_next+0x56>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d0ec      	beq.n	80050d2 <dir_next+0x5e>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 80050f8:	2100      	movs	r1, #0
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	f7ff fe1c 	bl	8004d38 <move_window>
 8005100:	2800      	cmp	r0, #0
 8005102:	d1e6      	bne.n	80050d2 <dir_next+0x5e>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	f103 0234 	add.w	r2, r3, #52	; 0x34
	while (cnt--) *d++ = (char)val;
 800510a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800510e:	4293      	cmp	r3, r2
 8005110:	d116      	bne.n	8005140 <dir_next+0xcc>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	4629      	mov	r1, r5
 8005116:	4610      	mov	r0, r2
 8005118:	f7ff fc8e 	bl	8004a38 <clust2sect>
						dj->fs->wflag = 1;
 800511c:	f04f 0901 	mov.w	r9, #1
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8005120:	6310      	str	r0, [r2, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005122:	6820      	ldr	r0, [r4, #0]
 8005124:	b2fa      	uxtb	r2, r7
 8005126:	7883      	ldrb	r3, [r0, #2]
 8005128:	4293      	cmp	r3, r2
 800512a:	d80c      	bhi.n	8005146 <dir_next+0xd2>
					dj->fs->winsect -= c;						/* Rewind window address */
 800512c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	6303      	str	r3, [r0, #48]	; 0x30
				dj->sect = clust2sect(dj->fs, clst);
 8005132:	4629      	mov	r1, r5
 8005134:	6820      	ldr	r0, [r4, #0]
				dj->clust = clst;				/* Initialize data for new cluster */
 8005136:	60e5      	str	r5, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8005138:	f7ff fc7e 	bl	8004a38 <clust2sect>
 800513c:	6120      	str	r0, [r4, #16]
 800513e:	e7b2      	b.n	80050a6 <dir_next+0x32>
	while (cnt--) *d++ = (char)val;
 8005140:	f802 0b01 	strb.w	r0, [r2], #1
 8005144:	e7e3      	b.n	800510e <dir_next+0x9a>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8005146:	2100      	movs	r1, #0
						dj->fs->wflag = 1;
 8005148:	f880 9004 	strb.w	r9, [r0, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 800514c:	f7ff fdf4 	bl	8004d38 <move_window>
 8005150:	3701      	adds	r7, #1
 8005152:	2800      	cmp	r0, #0
 8005154:	d1bd      	bne.n	80050d2 <dir_next+0x5e>
						dj->fs->winsect++;
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800515a:	3301      	adds	r3, #1
 800515c:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800515e:	e7e0      	b.n	8005122 <dir_next+0xae>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005160:	2007      	movs	r0, #7
 8005162:	e790      	b.n	8005086 <dir_next+0x12>

08005164 <dir_read>:
{
 8005164:	b510      	push	{r4, lr}
 8005166:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 8005168:	2004      	movs	r0, #4
	while (dj->sect) {
 800516a:	6921      	ldr	r1, [r4, #16]
 800516c:	b909      	cbnz	r1, 8005172 <dir_read+0xe>
	if (res != FR_OK) dj->sect = 0;
 800516e:	b160      	cbz	r0, 800518a <dir_read+0x26>
 8005170:	e013      	b.n	800519a <dir_read+0x36>
		res = move_window(dj->fs, dj->sect);
 8005172:	6820      	ldr	r0, [r4, #0]
 8005174:	f7ff fde0 	bl	8004d38 <move_window>
		if (res != FR_OK) break;
 8005178:	b978      	cbnz	r0, 800519a <dir_read+0x36>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 800517a:	6963      	ldr	r3, [r4, #20]
		c = dir[DIR_Name];
 800517c:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800517e:	b17a      	cbz	r2, 80051a0 <dir_read+0x3c>
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 8005180:	2ae5      	cmp	r2, #229	; 0xe5
 8005182:	d004      	beq.n	800518e <dir_read+0x2a>
 8005184:	7adb      	ldrb	r3, [r3, #11]
 8005186:	071b      	lsls	r3, r3, #28
 8005188:	d401      	bmi.n	800518e <dir_read+0x2a>
		res = move_window(dj->fs, dj->sect);
 800518a:	2000      	movs	r0, #0
}
 800518c:	bd10      	pop	{r4, pc}
		res = dir_next(dj, FALSE);				/* Next entry */
 800518e:	2100      	movs	r1, #0
 8005190:	4620      	mov	r0, r4
 8005192:	f7ff ff6f 	bl	8005074 <dir_next>
		if (res != FR_OK) break;
 8005196:	2800      	cmp	r0, #0
 8005198:	d0e7      	beq.n	800516a <dir_read+0x6>
	if (res != FR_OK) dj->sect = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	e7f5      	b.n	800518c <dir_read+0x28>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80051a0:	2004      	movs	r0, #4
 80051a2:	e7fa      	b.n	800519a <dir_read+0x36>

080051a4 <remove_chain>:
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 80051a4:	2901      	cmp	r1, #1
{
 80051a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a8:	4605      	mov	r5, r0
 80051aa:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 80051ac:	d922      	bls.n	80051f4 <remove_chain+0x50>
 80051ae:	6a03      	ldr	r3, [r0, #32]
 80051b0:	428b      	cmp	r3, r1
 80051b2:	d91f      	bls.n	80051f4 <remove_chain+0x50>
				fs->fsi_flag = 1;
 80051b4:	2701      	movs	r7, #1
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80051b6:	4621      	mov	r1, r4
 80051b8:	4628      	mov	r0, r5
 80051ba:	f7ff fdf4 	bl	8004da6 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 80051be:	4626      	mov	r6, r4
 80051c0:	4604      	mov	r4, r0
 80051c2:	b908      	cbnz	r0, 80051c8 <remove_chain+0x24>
		res = FR_INT_ERR;
 80051c4:	2000      	movs	r0, #0
}
 80051c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80051c8:	2801      	cmp	r0, #1
 80051ca:	d013      	beq.n	80051f4 <remove_chain+0x50>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80051cc:	1c41      	adds	r1, r0, #1
 80051ce:	d013      	beq.n	80051f8 <remove_chain+0x54>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80051d0:	2200      	movs	r2, #0
 80051d2:	4631      	mov	r1, r6
 80051d4:	4628      	mov	r0, r5
 80051d6:	f7ff fe8c 	bl	8004ef2 <put_fat>
			if (res != FR_OK) break;
 80051da:	2800      	cmp	r0, #0
 80051dc:	d1f3      	bne.n	80051c6 <remove_chain+0x22>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 80051de:	692b      	ldr	r3, [r5, #16]
 80051e0:	1c5a      	adds	r2, r3, #1
				fs->free_clust++;
 80051e2:	bf1c      	itt	ne
 80051e4:	3301      	addne	r3, #1
 80051e6:	612b      	strne	r3, [r5, #16]
		while (clst < fs->max_clust) {			/* Not a last link? */
 80051e8:	6a2b      	ldr	r3, [r5, #32]
				fs->fsi_flag = 1;
 80051ea:	bf18      	it	ne
 80051ec:	72af      	strbne	r7, [r5, #10]
		while (clst < fs->max_clust) {			/* Not a last link? */
 80051ee:	429c      	cmp	r4, r3
 80051f0:	d3e1      	bcc.n	80051b6 <remove_chain+0x12>
 80051f2:	e7e7      	b.n	80051c4 <remove_chain+0x20>
		res = FR_INT_ERR;
 80051f4:	2002      	movs	r0, #2
 80051f6:	e7e6      	b.n	80051c6 <remove_chain+0x22>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80051f8:	2001      	movs	r0, #1
 80051fa:	e7e4      	b.n	80051c6 <remove_chain+0x22>

080051fc <dir_register>:
{
 80051fc:	b570      	push	{r4, r5, r6, lr}
	res = dir_seek(dj, 0);
 80051fe:	2100      	movs	r1, #0
{
 8005200:	4606      	mov	r6, r0
	res = dir_seek(dj, 0);
 8005202:	f7ff fe35 	bl	8004e70 <dir_seek>
	if (res == FR_OK) {
 8005206:	4604      	mov	r4, r0
 8005208:	bb60      	cbnz	r0, 8005264 <dir_register+0x68>
			res = move_window(dj->fs, dj->sect);
 800520a:	6931      	ldr	r1, [r6, #16]
 800520c:	6830      	ldr	r0, [r6, #0]
 800520e:	f7ff fd93 	bl	8004d38 <move_window>
			if (res != FR_OK) break;
 8005212:	4604      	mov	r4, r0
 8005214:	bb30      	cbnz	r0, 8005264 <dir_register+0x68>
			c = *dj->dir;
 8005216:	6973      	ldr	r3, [r6, #20]
 8005218:	781b      	ldrb	r3, [r3, #0]
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 800521a:	2be5      	cmp	r3, #229	; 0xe5
 800521c:	d008      	beq.n	8005230 <dir_register+0x34>
 800521e:	b13b      	cbz	r3, 8005230 <dir_register+0x34>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
 8005220:	2101      	movs	r1, #1
 8005222:	4630      	mov	r0, r6
 8005224:	f7ff ff26 	bl	8005074 <dir_next>
 8005228:	e7ed      	b.n	8005206 <dir_register+0xa>
	while (cnt--) *d++ = (char)val;
 800522a:	f803 1b01 	strb.w	r1, [r3], #1
 800522e:	e00a      	b.n	8005246 <dir_register+0x4a>
		res = move_window(dj->fs, dj->sect);
 8005230:	6931      	ldr	r1, [r6, #16]
 8005232:	6830      	ldr	r0, [r6, #0]
 8005234:	f7ff fd80 	bl	8004d38 <move_window>
		if (res == FR_OK) {
 8005238:	4604      	mov	r4, r0
 800523a:	b998      	cbnz	r0, 8005264 <dir_register+0x68>
			dir = dj->dir;
 800523c:	6975      	ldr	r5, [r6, #20]
	while (cnt--) *d++ = (char)val;
 800523e:	4621      	mov	r1, r4
	char *d = (char*)dst;
 8005240:	462b      	mov	r3, r5
 8005242:	f105 0220 	add.w	r2, r5, #32
	while (cnt--) *d++ = (char)val;
 8005246:	429a      	cmp	r2, r3
 8005248:	d1ef      	bne.n	800522a <dir_register+0x2e>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 800524a:	220b      	movs	r2, #11
 800524c:	4628      	mov	r0, r5
 800524e:	69b1      	ldr	r1, [r6, #24]
 8005250:	f7ff fbda 	bl	8004a08 <mem_cpy>
			dj->fs->wflag = 1;
 8005254:	2201      	movs	r2, #1
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
 8005256:	69b3      	ldr	r3, [r6, #24]
 8005258:	7adb      	ldrb	r3, [r3, #11]
 800525a:	f003 0318 	and.w	r3, r3, #24
 800525e:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
 8005260:	6833      	ldr	r3, [r6, #0]
 8005262:	711a      	strb	r2, [r3, #4]
}
 8005264:	4620      	mov	r0, r4
 8005266:	bd70      	pop	{r4, r5, r6, pc}

08005268 <follow_path>:
{
 8005268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 800526c:	780b      	ldrb	r3, [r1, #0]
{
 800526e:	4606      	mov	r6, r0
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 8005270:	2b2f      	cmp	r3, #47	; 0x2f
{
 8005272:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 8005274:	d001      	beq.n	800527a <follow_path+0x12>
 8005276:	2b5c      	cmp	r3, #92	; 0x5c
 8005278:	d142      	bne.n	8005300 <follow_path+0x98>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 800527a:	2300      	movs	r3, #0
 800527c:	3501      	adds	r5, #1
 800527e:	60b3      	str	r3, [r6, #8]
	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
 8005280:	782b      	ldrb	r3, [r5, #0]
 8005282:	2b1f      	cmp	r3, #31
 8005284:	d93f      	bls.n	8005306 <follow_path+0x9e>
	while (cnt--) *d++ = (char)val;
 8005286:	2720      	movs	r7, #32
			res = create_name(dj, &path);	/* Get a segment */
 8005288:	69b0      	ldr	r0, [r6, #24]
 800528a:	4603      	mov	r3, r0
 800528c:	f100 020b 	add.w	r2, r0, #11
	while (cnt--) *d++ = (char)val;
 8005290:	4293      	cmp	r3, r2
 8005292:	d142      	bne.n	800531a <follow_path+0xb2>
	if (p[si] == '.') { /* Is this a dot entry? */
 8005294:	782b      	ldrb	r3, [r5, #0]
 8005296:	2b2e      	cmp	r3, #46	; 0x2e
 8005298:	d14c      	bne.n	8005334 <follow_path+0xcc>
			sfn[i++] = c;
 800529a:	7003      	strb	r3, [r0, #0]
			c = p[si++];
 800529c:	786b      	ldrb	r3, [r5, #1]
			if (c != '.' || si >= 3) break;
 800529e:	2b2e      	cmp	r3, #46	; 0x2e
 80052a0:	d13e      	bne.n	8005320 <follow_path+0xb8>
			sfn[i++] = c;
 80052a2:	7043      	strb	r3, [r0, #1]
			c = p[si++];
 80052a4:	78ab      	ldrb	r3, [r5, #2]
			if (c != '.' || si >= 3) break;
 80052a6:	2b2e      	cmp	r3, #46	; 0x2e
 80052a8:	f000 80e7 	beq.w	800547a <follow_path+0x212>
			c = p[si++];
 80052ac:	2203      	movs	r2, #3
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
 80052ae:	2b2f      	cmp	r3, #47	; 0x2f
 80052b0:	d138      	bne.n	8005324 <follow_path+0xbc>
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 80052b2:	2320      	movs	r3, #32
		*path = &p[si];									/* Rerurn pointer to the next segment */
 80052b4:	4415      	add	r5, r2
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 80052b6:	72c3      	strb	r3, [r0, #11]
	res = dir_seek(dj, 0);			/* Rewind directory object */
 80052b8:	2100      	movs	r1, #0
 80052ba:	4630      	mov	r0, r6
 80052bc:	f7ff fdd8 	bl	8004e70 <dir_seek>
	if (res != FR_OK) return res;
 80052c0:	4604      	mov	r4, r0
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f040 808f 	bne.w	80053e6 <follow_path+0x17e>
		res = move_window(dj->fs, dj->sect);
 80052c8:	6931      	ldr	r1, [r6, #16]
 80052ca:	6830      	ldr	r0, [r6, #0]
 80052cc:	f7ff fd34 	bl	8004d38 <move_window>
		if (res != FR_OK) break;
 80052d0:	4604      	mov	r4, r0
 80052d2:	2800      	cmp	r0, #0
 80052d4:	f040 8087 	bne.w	80053e6 <follow_path+0x17e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 80052d8:	6970      	ldr	r0, [r6, #20]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80052da:	7803      	ldrb	r3, [r0, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8081 	beq.w	80053e4 <follow_path+0x17c>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 80052e2:	7ac4      	ldrb	r4, [r0, #11]
 80052e4:	f014 0408 	ands.w	r4, r4, #8
 80052e8:	d105      	bne.n	80052f6 <follow_path+0x8e>
 80052ea:	220b      	movs	r2, #11
 80052ec:	69b1      	ldr	r1, [r6, #24]
 80052ee:	f7ff fb95 	bl	8004a1c <mem_cmp>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d077      	beq.n	80053e6 <follow_path+0x17e>
		res = dir_next(dj, FALSE);				/* Next entry */
 80052f6:	2100      	movs	r1, #0
 80052f8:	4630      	mov	r0, r6
 80052fa:	f7ff febb 	bl	8005074 <dir_next>
 80052fe:	e7df      	b.n	80052c0 <follow_path+0x58>
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 8005300:	6803      	ldr	r3, [r0, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	e7bb      	b.n	800527e <follow_path+0x16>
		res = dir_seek(dj, 0);
 8005306:	2100      	movs	r1, #0
 8005308:	4630      	mov	r0, r6
 800530a:	f7ff fdb1 	bl	8004e70 <dir_seek>
		dj->dir = NULL;
 800530e:	2300      	movs	r3, #0
		res = dir_seek(dj, 0);
 8005310:	4604      	mov	r4, r0
		dj->dir = NULL;
 8005312:	6173      	str	r3, [r6, #20]
}
 8005314:	4620      	mov	r0, r4
 8005316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (cnt--) *d++ = (char)val;
 800531a:	f803 7b01 	strb.w	r7, [r3], #1
 800531e:	e7b7      	b.n	8005290 <follow_path+0x28>
			c = p[si++];
 8005320:	2202      	movs	r2, #2
 8005322:	e7c4      	b.n	80052ae <follow_path+0x46>
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
 8005324:	2b5c      	cmp	r3, #92	; 0x5c
 8005326:	d0c4      	beq.n	80052b2 <follow_path+0x4a>
 8005328:	2b1f      	cmp	r3, #31
 800532a:	f200 80a6 	bhi.w	800547a <follow_path+0x212>
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 800532e:	2324      	movs	r3, #36	; 0x24
		*path = &p[si];									/* Rerurn pointer to the next segment */
 8005330:	4415      	add	r5, r2
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 8005332:	e7c0      	b.n	80052b6 <follow_path+0x4e>
	si = i = b = 0; ni = 8;
 8005334:	2100      	movs	r1, #0
 8005336:	2408      	movs	r4, #8
 8005338:	468c      	mov	ip, r1
 800533a:	460b      	mov	r3, r1
 800533c:	e079      	b.n	8005432 <follow_path+0x1ca>
			d = p[si++];				/* Get 2nd byte */
 800533e:	f815 8008 	ldrb.w	r8, [r5, r8]
 8005342:	f10c 0c02 	add.w	ip, ip, #2
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
 8005346:	f028 0e20 	bic.w	lr, r8, #32
 800534a:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 800534e:	f1be 0f19 	cmp.w	lr, #25
 8005352:	d907      	bls.n	8005364 <follow_path+0xfc>
 8005354:	f108 0e7f 	add.w	lr, r8, #127	; 0x7f
 8005358:	fa5f fe8e 	uxtb.w	lr, lr
 800535c:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8005360:	f200 808b 	bhi.w	800547a <follow_path+0x212>
 8005364:	f104 3eff 	add.w	lr, r4, #4294967295
 8005368:	4571      	cmp	r1, lr
 800536a:	f280 8086 	bge.w	800547a <follow_path+0x212>
			sfn[i++] = c;
 800536e:	f101 0e01 	add.w	lr, r1, #1
 8005372:	5442      	strb	r2, [r0, r1]
			sfn[i++] = d;
 8005374:	f800 800e 	strb.w	r8, [r0, lr]
 8005378:	3102      	adds	r1, #2
			d = p[si++];				/* Get 2nd byte */
 800537a:	46e0      	mov	r8, ip
 800537c:	e058      	b.n	8005430 <follow_path+0x1c8>
			if (IsUpper(c)) {
 800537e:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 8005382:	f1bc 0f19 	cmp.w	ip, #25
 8005386:	d804      	bhi.n	8005392 <follow_path+0x12a>
				b |= 2;
 8005388:	f043 0302 	orr.w	r3, r3, #2
			sfn[i++] = c;
 800538c:	5442      	strb	r2, [r0, r1]
 800538e:	3101      	adds	r1, #1
 8005390:	e04e      	b.n	8005430 <follow_path+0x1c8>
				if (IsLower(c)) {
 8005392:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
 8005396:	f1bc 0f19 	cmp.w	ip, #25
					b |= 1; c -= 0x20;
 800539a:	bf9e      	ittt	ls
 800539c:	3a20      	subls	r2, #32
 800539e:	f043 0301 	orrls.w	r3, r3, #1
 80053a2:	b2d2      	uxtbls	r2, r2
 80053a4:	e7f2      	b.n	800538c <follow_path+0x124>
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80053a6:	2a20      	cmp	r2, #32
 80053a8:	bf34      	ite	cc
 80053aa:	2204      	movcc	r2, #4
 80053ac:	2200      	movcs	r2, #0
	*path = &p[si];						/* Rerurn pointer to the next segment */
 80053ae:	4445      	add	r5, r8
	if (!i) return FR_INVALID_NAME;		/* Reject null string */
 80053b0:	2900      	cmp	r1, #0
 80053b2:	d062      	beq.n	800547a <follow_path+0x212>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 80053b4:	7801      	ldrb	r1, [r0, #0]
 80053b6:	29e5      	cmp	r1, #229	; 0xe5
 80053b8:	bf04      	itt	eq
 80053ba:	2105      	moveq	r1, #5
 80053bc:	7001      	strbeq	r1, [r0, #0]
	if (ni == 8) b <<= 2;
 80053be:	2c08      	cmp	r4, #8
 80053c0:	d109      	bne.n	80053d6 <follow_path+0x16e>
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	b2db      	uxtb	r3, r3
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	bf08      	it	eq
 80053ce:	f042 0208 	orreq.w	r2, r2, #8
	sfn[11] = c;		/* Store NT flag, File name is created */
 80053d2:	72c2      	strb	r2, [r0, #11]
			if (res != FR_OK) break;
 80053d4:	e770      	b.n	80052b8 <follow_path+0x50>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80053d6:	f003 0103 	and.w	r1, r3, #3
 80053da:	2901      	cmp	r1, #1
 80053dc:	bf08      	it	eq
 80053de:	f042 0210 	orreq.w	r2, r2, #16
 80053e2:	e7f0      	b.n	80053c6 <follow_path+0x15e>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053e4:	2404      	movs	r4, #4
			last = *(dj->fn+11) & NS_LAST;
 80053e6:	69b3      	ldr	r3, [r6, #24]
 80053e8:	7adb      	ldrb	r3, [r3, #11]
 80053ea:	f003 0304 	and.w	r3, r3, #4
			if (res != FR_OK) {				/* Could not find the object */
 80053ee:	b12c      	cbz	r4, 80053fc <follow_path+0x194>
				if (res == FR_NO_FILE && !last)
 80053f0:	2c04      	cmp	r4, #4
 80053f2:	d18f      	bne.n	8005314 <follow_path+0xac>
					res = FR_NO_PATH;
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf08      	it	eq
 80053f8:	2405      	moveq	r4, #5
 80053fa:	e78b      	b.n	8005314 <follow_path+0xac>
			if (last) break;				/* Last segment match. Function completed. */
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d189      	bne.n	8005314 <follow_path+0xac>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
 8005400:	6972      	ldr	r2, [r6, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 8005402:	7ad3      	ldrb	r3, [r2, #11]
 8005404:	06db      	lsls	r3, r3, #27
 8005406:	d50b      	bpl.n	8005420 <follow_path+0x1b8>
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8005408:	7d13      	ldrb	r3, [r2, #20]
 800540a:	7d51      	ldrb	r1, [r2, #21]
 800540c:	7ed0      	ldrb	r0, [r2, #27]
 800540e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005412:	7e93      	ldrb	r3, [r2, #26]
 8005414:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800541c:	60b3      	str	r3, [r6, #8]
			res = create_name(dj, &path);	/* Get a segment */
 800541e:	e733      	b.n	8005288 <follow_path+0x20>
				res = FR_NO_PATH; break;
 8005420:	2405      	movs	r4, #5
	return res;
 8005422:	e777      	b.n	8005314 <follow_path+0xac>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005424:	2c08      	cmp	r4, #8
 8005426:	d128      	bne.n	800547a <follow_path+0x212>
			i = 8; ni = 11;
 8005428:	4621      	mov	r1, r4
 800542a:	240b      	movs	r4, #11
			b <<= 2; continue;
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	b2db      	uxtb	r3, r3
			d = p[si++];				/* Get 2nd byte */
 8005430:	46c4      	mov	ip, r8
		c = p[si++];
 8005432:	f815 200c 	ldrb.w	r2, [r5, ip]
 8005436:	f10c 0801 	add.w	r8, ip, #1
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800543a:	2a1f      	cmp	r2, #31
 800543c:	d9b3      	bls.n	80053a6 <follow_path+0x13e>
 800543e:	2a2f      	cmp	r2, #47	; 0x2f
 8005440:	d0b1      	beq.n	80053a6 <follow_path+0x13e>
 8005442:	2a5c      	cmp	r2, #92	; 0x5c
 8005444:	d0af      	beq.n	80053a6 <follow_path+0x13e>
		if (c == '.' || i >= ni) {
 8005446:	2a2e      	cmp	r2, #46	; 0x2e
 8005448:	d0ec      	beq.n	8005424 <follow_path+0x1bc>
 800544a:	428c      	cmp	r4, r1
 800544c:	dd15      	ble.n	800547a <follow_path+0x212>
		if (IsDBCS1(c)) {				/* If it is DBC 1st byte */
 800544e:	f102 0e7f 	add.w	lr, r2, #127	; 0x7f
		if (c >= 0x80) {				/* Extended char */
 8005452:	f012 0f80 	tst.w	r2, #128	; 0x80
		if (IsDBCS1(c)) {				/* If it is DBC 1st byte */
 8005456:	fa5f fe8e 	uxtb.w	lr, lr
			b |= 3;						/* Eliminate NT flag if ext char is exist */
 800545a:	bf18      	it	ne
 800545c:	f043 0303 	orrne.w	r3, r3, #3
		if (IsDBCS1(c)) {				/* If it is DBC 1st byte */
 8005460:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8005464:	f67f af6b 	bls.w	800533e <follow_path+0xd6>
 8005468:	f8df e014 	ldr.w	lr, [pc, #20]	; 8005480 <follow_path+0x218>
	while (*str && *str != chr) str++;
 800546c:	f81e cb01 	ldrb.w	ip, [lr], #1
 8005470:	f1bc 0f00 	cmp.w	ip, #0
 8005474:	d083      	beq.n	800537e <follow_path+0x116>
 8005476:	4562      	cmp	r2, ip
 8005478:	d1f8      	bne.n	800546c <follow_path+0x204>
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
 800547a:	2406      	movs	r4, #6
 800547c:	e74a      	b.n	8005314 <follow_path+0xac>
 800547e:	bf00      	nop
 8005480:	080118e6 	.word	0x080118e6

08005484 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 8005484:	b940      	cbnz	r0, 8005498 <f_mount+0x14>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <f_mount+0x18>)
 8005488:	681a      	ldr	r2, [r3, #0]

	if (rfs) {
 800548a:	b102      	cbz	r2, 800548e <f_mount+0xa>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 800548c:	7010      	strb	r0, [r2, #0]
	}

	if (fs) {
 800548e:	b109      	cbz	r1, 8005494 <f_mount+0x10>
		fs->fs_type = 0;			/* Clear new fs object */
 8005490:	2200      	movs	r2, #0
 8005492:	700a      	strb	r2, [r1, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 8005494:	6019      	str	r1, [r3, #0]

	return FR_OK;
 8005496:	4770      	bx	lr
		return FR_INVALID_DRIVE;
 8005498:	200b      	movs	r0, #11
}
 800549a:	4770      	bx	lr
 800549c:	20000a98 	.word	0x20000a98

080054a0 <f_open>:
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
 80054a0:	2300      	movs	r3, #0
{
 80054a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a6:	b08c      	sub	sp, #48	; 0x30
 80054a8:	4604      	mov	r4, r0
 80054aa:	4617      	mov	r7, r2
 80054ac:	9101      	str	r1, [sp, #4]
	fp->fs = NULL;		/* Clear file object */
 80054ae:	6003      	str	r3, [r0, #0]
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
 80054b0:	f002 021e 	and.w	r2, r2, #30
 80054b4:	a905      	add	r1, sp, #20
 80054b6:	a801      	add	r0, sp, #4
 80054b8:	f7ff fb56 	bl	8004b68 <auto_mount>
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 80054bc:	2800      	cmp	r0, #0
 80054be:	d175      	bne.n	80055ac <f_open+0x10c>
	INITBUF(dj, sfn, lfn);
 80054c0:	ab02      	add	r3, sp, #8
	res = follow_path(&dj, path);	/* Follow the file path */
 80054c2:	9901      	ldr	r1, [sp, #4]
 80054c4:	a805      	add	r0, sp, #20
	INITBUF(dj, sfn, lfn);
 80054c6:	930b      	str	r3, [sp, #44]	; 0x2c
	res = follow_path(&dj, path);	/* Follow the file path */
 80054c8:	f7ff fece 	bl	8005268 <follow_path>

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80054cc:	f017 0f1c 	tst.w	r7, #28
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 80054d0:	f007 061f 	and.w	r6, r7, #31
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80054d4:	d06d      	beq.n	80055b2 <f_open+0x112>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d038      	beq.n	800554c <f_open+0xac>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
 80054da:	2804      	cmp	r0, #4
 80054dc:	d166      	bne.n	80055ac <f_open+0x10c>
				res = dir_register(&dj);
 80054de:	a805      	add	r0, sp, #20
 80054e0:	f7ff fe8c 	bl	80051fc <dir_register>
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d161      	bne.n	80055ac <f_open+0x10c>
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;			/* Created entry (SFN entry) */
 80054e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			mode |= FA_CREATE_ALWAYS;
 80054ea:	f046 0608 	orr.w	r6, r6, #8
				}
				res = move_window(dj.fs, ps);
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
 80054ee:	0730      	lsls	r0, r6, #28
 80054f0:	d510      	bpl.n	8005514 <f_open+0x74>
			dir[DIR_Attr] = 0;					/* Reset attribute */
 80054f2:	2300      	movs	r3, #0
 80054f4:	72eb      	strb	r3, [r5, #11]
			ps = get_fattime();
 80054f6:	f7ff fa85 	bl	8004a04 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
			dj.fs->wflag = 1;
 80054fa:	2201      	movs	r2, #1
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 80054fc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005500:	73eb      	strb	r3, [r5, #15]
 8005502:	0c03      	lsrs	r3, r0, #16
 8005504:	742b      	strb	r3, [r5, #16]
			dj.fs->wflag = 1;
 8005506:	9b05      	ldr	r3, [sp, #20]
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 8005508:	73a8      	strb	r0, [r5, #14]
 800550a:	0e00      	lsrs	r0, r0, #24
 800550c:	7468      	strb	r0, [r5, #17]
			mode |= FA__WRITTEN;				/* Set file changed flag */
 800550e:	f046 0620 	orr.w	r6, r6, #32
			dj.fs->wflag = 1;
 8005512:	711a      	strb	r2, [r3, #4]
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005514:	9a05      	ldr	r2, [sp, #20]
 8005516:	6b13      	ldr	r3, [r2, #48]	; 0x30
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
 8005518:	71a6      	strb	r6, [r4, #6]
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800551a:	61e3      	str	r3, [r4, #28]
	fp->dir_ptr = dj.dir;
 800551c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800551e:	6223      	str	r3, [r4, #32]
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8005520:	7d2b      	ldrb	r3, [r5, #20]
 8005522:	7d69      	ldrb	r1, [r5, #21]
 8005524:	7ee8      	ldrb	r0, [r5, #27]
 8005526:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800552a:	7eab      	ldrb	r3, [r5, #26]
 800552c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005530:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	fp->org_clust =						/* File start cluster */
 8005534:	6123      	str	r3, [r4, #16]
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8005536:	69eb      	ldr	r3, [r5, #28]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 8005538:	2000      	movs	r0, #0
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 800553a:	60e3      	str	r3, [r4, #12]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 800553c:	23ff      	movs	r3, #255	; 0xff
 800553e:	71e3      	strb	r3, [r4, #7]
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 8005540:	88d3      	ldrh	r3, [r2, #6]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 8005542:	60a0      	str	r0, [r4, #8]
	fp->dsect = 0;
 8005544:	61a0      	str	r0, [r4, #24]
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 8005546:	6022      	str	r2, [r4, #0]
 8005548:	80a3      	strh	r3, [r4, #4]

	LEAVE_FF(dj.fs, FR_OK);
 800554a:	e02f      	b.n	80055ac <f_open+0x10c>
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
 800554c:	077b      	lsls	r3, r7, #29
 800554e:	d43d      	bmi.n	80055cc <f_open+0x12c>
			dir = dj.dir;
 8005550:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 8005552:	2d00      	cmp	r5, #0
 8005554:	d038      	beq.n	80055c8 <f_open+0x128>
 8005556:	7aeb      	ldrb	r3, [r5, #11]
 8005558:	f013 0311 	ands.w	r3, r3, #17
 800555c:	d134      	bne.n	80055c8 <f_open+0x128>
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
 800555e:	073f      	lsls	r7, r7, #28
 8005560:	d5c5      	bpl.n	80054ee <f_open+0x4e>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 8005562:	7d6f      	ldrb	r7, [r5, #21]
 8005564:	7d29      	ldrb	r1, [r5, #20]
 8005566:	7eea      	ldrb	r2, [r5, #27]
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 8005568:	752b      	strb	r3, [r5, #20]
 800556a:	756b      	strb	r3, [r5, #21]
				ST_WORD(dir+DIR_FstClusLO, 0);
 800556c:	76eb      	strb	r3, [r5, #27]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 800556e:	772b      	strb	r3, [r5, #28]
 8005570:	776b      	strb	r3, [r5, #29]
 8005572:	77ab      	strb	r3, [r5, #30]
 8005574:	77eb      	strb	r3, [r5, #31]
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 8005576:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800557a:	7eaf      	ldrb	r7, [r5, #26]
				ST_WORD(dir+DIR_FstClusLO, 0);
 800557c:	76ab      	strb	r3, [r5, #26]
				dj.fs->wflag = 1;
 800557e:	2301      	movs	r3, #1
 8005580:	9805      	ldr	r0, [sp, #20]
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 8005582:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
				if (cl) {
 8005586:	ea57 4701 	orrs.w	r7, r7, r1, lsl #16
				ps = dj.fs->winsect;			/* Remove the cluster chain */
 800558a:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
				dj.fs->wflag = 1;
 800558e:	7103      	strb	r3, [r0, #4]
				if (cl) {
 8005590:	d006      	beq.n	80055a0 <f_open+0x100>
					res = remove_chain(dj.fs, cl);
 8005592:	4639      	mov	r1, r7
 8005594:	f7ff fe06 	bl	80051a4 <remove_chain>
					if (res) LEAVE_FF(dj.fs, res);
 8005598:	b940      	cbnz	r0, 80055ac <f_open+0x10c>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800559a:	9b05      	ldr	r3, [sp, #20]
 800559c:	3f01      	subs	r7, #1
 800559e:	60df      	str	r7, [r3, #12]
				res = move_window(dj.fs, ps);
 80055a0:	4641      	mov	r1, r8
 80055a2:	9805      	ldr	r0, [sp, #20]
 80055a4:	f7ff fbc8 	bl	8004d38 <move_window>
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d0a0      	beq.n	80054ee <f_open+0x4e>
}
 80055ac:	b00c      	add	sp, #48	; 0x30
 80055ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d1fa      	bne.n	80055ac <f_open+0x10c>
		dir = dj.dir;
 80055b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 80055b8:	b155      	cbz	r5, 80055d0 <f_open+0x130>
 80055ba:	7aeb      	ldrb	r3, [r5, #11]
 80055bc:	06d9      	lsls	r1, r3, #27
 80055be:	d407      	bmi.n	80055d0 <f_open+0x130>
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80055c0:	07ba      	lsls	r2, r7, #30
 80055c2:	d5a7      	bpl.n	8005514 <f_open+0x74>
 80055c4:	07db      	lsls	r3, r3, #31
 80055c6:	d5a5      	bpl.n	8005514 <f_open+0x74>
				LEAVE_FF(dj.fs, FR_DENIED);
 80055c8:	2007      	movs	r0, #7
 80055ca:	e7ef      	b.n	80055ac <f_open+0x10c>
				LEAVE_FF(dj.fs, FR_EXIST);
 80055cc:	2008      	movs	r0, #8
 80055ce:	e7ed      	b.n	80055ac <f_open+0x10c>
			LEAVE_FF(dj.fs, FR_NO_FILE);
 80055d0:	2004      	movs	r0, #4
 80055d2:	e7eb      	b.n	80055ac <f_open+0x10c>

080055d4 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 80055d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d8:	b085      	sub	sp, #20
 80055da:	9302      	str	r3, [sp, #8]
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;
 80055dc:	2300      	movs	r3, #0
{
 80055de:	4615      	mov	r5, r2
	*br = 0;
 80055e0:	9a02      	ldr	r2, [sp, #8]
{
 80055e2:	4604      	mov	r4, r0
 80055e4:	4689      	mov	r9, r1
	*br = 0;
 80055e6:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 80055e8:	8881      	ldrh	r1, [r0, #4]
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	f7ff fa7a 	bl	8004ae4 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80055f0:	4606      	mov	r6, r0
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d158      	bne.n	80056a8 <f_read+0xd4>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 80055f6:	f994 2006 	ldrsb.w	r2, [r4, #6]
 80055fa:	79a3      	ldrb	r3, [r4, #6]
 80055fc:	2a00      	cmp	r2, #0
 80055fe:	db21      	blt.n	8005644 <f_read+0x70>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 8005600:	f013 0301 	ands.w	r3, r3, #1
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	f000 80a1 	beq.w	800574c <f_read+0x178>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 800560a:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
 800560e:	1abf      	subs	r7, r7, r2
 8005610:	42af      	cmp	r7, r5
 8005612:	bf28      	it	cs
 8005614:	462f      	movcs	r7, r5
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 8005616:	f104 0b24 	add.w	fp, r4, #36	; 0x24
	for ( ;  btr;									/* Repeat until all data transferred */
 800561a:	2f00      	cmp	r7, #0
 800561c:	d044      	beq.n	80056a8 <f_read+0xd4>
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 800561e:	68a3      	ldr	r3, [r4, #8]
 8005620:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005624:	2a00      	cmp	r2, #0
 8005626:	f040 8082 	bne.w	800572e <f_read+0x15a>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 800562a:	6820      	ldr	r0, [r4, #0]
 800562c:	79e1      	ldrb	r1, [r4, #7]
 800562e:	7882      	ldrb	r2, [r0, #2]
 8005630:	4291      	cmp	r1, r2
 8005632:	d314      	bcc.n	800565e <f_read+0x8a>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 8005634:	b943      	cbnz	r3, 8005648 <f_read+0x74>
 8005636:	6920      	ldr	r0, [r4, #16]
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 8005638:	2801      	cmp	r0, #1
 800563a:	d809      	bhi.n	8005650 <f_read+0x7c>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800563c:	79a3      	ldrb	r3, [r4, #6]
 800563e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005642:	71a3      	strb	r3, [r4, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8005644:	2602      	movs	r6, #2
 8005646:	e02f      	b.n	80056a8 <f_read+0xd4>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 8005648:	6961      	ldr	r1, [r4, #20]
 800564a:	f7ff fbac 	bl	8004da6 <get_fat>
 800564e:	e7f3      	b.n	8005638 <f_read+0x64>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005650:	1c41      	adds	r1, r0, #1
 8005652:	d101      	bne.n	8005658 <f_read+0x84>
					ABORT(fp->fs, FR_DISK_ERR);
 8005654:	79a3      	ldrb	r3, [r4, #6]
 8005656:	e023      	b.n	80056a0 <f_read+0xcc>
				fp->csect = 0;						/* Reset sector offset in the cluster */
 8005658:	2300      	movs	r3, #0
				fp->curr_clust = clst;				/* Update current cluster */
 800565a:	6160      	str	r0, [r4, #20]
				fp->csect = 0;						/* Reset sector offset in the cluster */
 800565c:	71e3      	strb	r3, [r4, #7]
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 800565e:	f8d4 a000 	ldr.w	sl, [r4]
 8005662:	6961      	ldr	r1, [r4, #20]
 8005664:	4650      	mov	r0, sl
 8005666:	f7ff f9e7 	bl	8004a38 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800566a:	2800      	cmp	r0, #0
 800566c:	d0e6      	beq.n	800563c <f_read+0x68>
			sect += fp->csect;
 800566e:	79e3      	ldrb	r3, [r4, #7]
			if (cc) {								/* Read maximum contiguous sectors directly */
 8005670:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += fp->csect;
 8005674:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {								/* Read maximum contiguous sectors directly */
 8005678:	d338      	bcc.n	80056ec <f_read+0x118>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800567a:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800567e:	eb03 2157 	add.w	r1, r3, r7, lsr #9
 8005682:	4291      	cmp	r1, r2
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
 8005684:	ea4f 2557 	mov.w	r5, r7, lsr #9
					cc = fp->fs->csize - fp->csect;
 8005688:	bf88      	it	hi
 800568a:	1ad5      	subhi	r5, r2, r3
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
 800568c:	b2eb      	uxtb	r3, r5
 800568e:	4642      	mov	r2, r8
 8005690:	4649      	mov	r1, r9
 8005692:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8005696:	9303      	str	r3, [sp, #12]
 8005698:	f7ff f98e 	bl	80049b8 <disk_read>
 800569c:	79a3      	ldrb	r3, [r4, #6]
 800569e:	b138      	cbz	r0, 80056b0 <f_read+0xdc>
					ABORT(fp->fs, FR_DISK_ERR);
 80056a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056a4:	9e01      	ldr	r6, [sp, #4]
 80056a6:	71a3      	strb	r3, [r4, #6]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 80056a8:	4630      	mov	r0, r6
 80056aa:	b005      	add	sp, #20
 80056ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
 80056b0:	065a      	lsls	r2, r3, #25
 80056b2:	d50b      	bpl.n	80056cc <f_read+0xf8>
 80056b4:	69a0      	ldr	r0, [r4, #24]
 80056b6:	eba0 0008 	sub.w	r0, r0, r8
 80056ba:	4285      	cmp	r5, r0
 80056bc:	d906      	bls.n	80056cc <f_read+0xf8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 80056be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c2:	4659      	mov	r1, fp
 80056c4:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 80056c8:	f7ff f99e 	bl	8004a08 <mem_cpy>
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 80056cc:	79e3      	ldrb	r3, [r4, #7]
 80056ce:	9a03      	ldr	r2, [sp, #12]
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 80056d0:	026d      	lsls	r5, r5, #9
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 80056d2:	441a      	add	r2, r3
 80056d4:	71e2      	strb	r2, [r4, #7]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80056d6:	68a3      	ldr	r3, [r4, #8]
 80056d8:	9a02      	ldr	r2, [sp, #8]
 80056da:	442b      	add	r3, r5
 80056dc:	60a3      	str	r3, [r4, #8]
 80056de:	9b02      	ldr	r3, [sp, #8]
 80056e0:	44a9      	add	r9, r5
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	1b7f      	subs	r7, r7, r5
 80056e6:	442b      	add	r3, r5
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e796      	b.n	800561a <f_read+0x46>
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
 80056ec:	79a3      	ldrb	r3, [r4, #6]
 80056ee:	065b      	lsls	r3, r3, #25
 80056f0:	d50c      	bpl.n	800570c <f_read+0x138>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 80056f2:	2301      	movs	r3, #1
 80056f4:	4659      	mov	r1, fp
 80056f6:	69a2      	ldr	r2, [r4, #24]
 80056f8:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80056fc:	f7ff f96f 	bl	80049de <disk_write>
 8005700:	79a3      	ldrb	r3, [r4, #6]
 8005702:	2800      	cmp	r0, #0
 8005704:	d1cc      	bne.n	80056a0 <f_read+0xcc>
				fp->flag &= ~FA__DIRTY;
 8005706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800570a:	71a3      	strb	r3, [r4, #6]
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
 800570c:	69a3      	ldr	r3, [r4, #24]
 800570e:	4598      	cmp	r8, r3
 8005710:	d008      	beq.n	8005724 <f_read+0x150>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 8005712:	6820      	ldr	r0, [r4, #0]
 8005714:	2301      	movs	r3, #1
 8005716:	4642      	mov	r2, r8
 8005718:	4659      	mov	r1, fp
 800571a:	7840      	ldrb	r0, [r0, #1]
 800571c:	f7ff f94c 	bl	80049b8 <disk_read>
 8005720:	2800      	cmp	r0, #0
 8005722:	d197      	bne.n	8005654 <f_read+0x80>
			fp->csect++;							/* Next sector address in the cluster */
 8005724:	79e3      	ldrb	r3, [r4, #7]
			fp->dsect = sect;
 8005726:	f8c4 8018 	str.w	r8, [r4, #24]
			fp->csect++;							/* Next sector address in the cluster */
 800572a:	3301      	adds	r3, #1
 800572c:	71e3      	strb	r3, [r4, #7]
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800572e:	68a1      	ldr	r1, [r4, #8]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005730:	4648      	mov	r0, r9
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005732:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005736:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;
 800573a:	42bd      	cmp	r5, r7
 800573c:	bf28      	it	cs
 800573e:	463d      	movcs	r5, r7
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005740:	3124      	adds	r1, #36	; 0x24
 8005742:	462a      	mov	r2, r5
 8005744:	4421      	add	r1, r4
 8005746:	f7ff f95f 	bl	8004a08 <mem_cpy>
 800574a:	e7c4      	b.n	80056d6 <f_read+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);
 800574c:	2607      	movs	r6, #7
 800574e:	e7ab      	b.n	80056a8 <f_read+0xd4>

08005750 <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
 8005750:	b500      	push	{lr}
 8005752:	b08d      	sub	sp, #52	; 0x34
 8005754:	9001      	str	r0, [sp, #4]
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 0);
 8005756:	2200      	movs	r2, #0
 8005758:	a905      	add	r1, sp, #20
 800575a:	a801      	add	r0, sp, #4
 800575c:	f7ff fa04 	bl	8004b68 <auto_mount>
	if (res == FR_OK) {
 8005760:	b950      	cbnz	r0, 8005778 <f_chdir+0x28>
		INITBUF(dj, sfn, lfn);
 8005762:	ab02      	add	r3, sp, #8
		res = follow_path(&dj, path);		/* Follow the file path */
 8005764:	9901      	ldr	r1, [sp, #4]
 8005766:	a805      	add	r0, sp, #20
		INITBUF(dj, sfn, lfn);
 8005768:	930b      	str	r3, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);		/* Follow the file path */
 800576a:	f7ff fd7d 	bl	8005268 <follow_path>
		if (res == FR_OK) {					/* Follow completed */
 800576e:	b9b0      	cbnz	r0, 800579e <f_chdir+0x4e>
			dir = dj.dir;					/* Pointer to the entry */
 8005770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			if (!dir) {
 8005772:	b923      	cbnz	r3, 800577e <f_chdir+0x2e>
				dj.fs->cdir = 0;			/* No entry (root dir) */
 8005774:	9b05      	ldr	r3, [sp, #20]
 8005776:	6198      	str	r0, [r3, #24]
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj.fs, res);
}
 8005778:	b00d      	add	sp, #52	; 0x34
 800577a:	f85d fb04 	ldr.w	pc, [sp], #4
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
 800577e:	7ada      	ldrb	r2, [r3, #11]
 8005780:	06d2      	lsls	r2, r2, #27
 8005782:	d510      	bpl.n	80057a6 <f_chdir+0x56>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8005784:	7d59      	ldrb	r1, [r3, #21]
 8005786:	7d1a      	ldrb	r2, [r3, #20]
 8005788:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800578c:	7ed9      	ldrb	r1, [r3, #27]
 800578e:	7e9b      	ldrb	r3, [r3, #26]
 8005790:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005798:	9a05      	ldr	r2, [sp, #20]
 800579a:	6193      	str	r3, [r2, #24]
 800579c:	e7ec      	b.n	8005778 <f_chdir+0x28>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800579e:	2804      	cmp	r0, #4
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
 80057a0:	bf08      	it	eq
 80057a2:	2005      	moveq	r0, #5
 80057a4:	e7e8      	b.n	8005778 <f_chdir+0x28>
 80057a6:	2005      	movs	r0, #5
 80057a8:	e7e6      	b.n	8005778 <f_chdir+0x28>

080057aa <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80057aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ac:	4604      	mov	r4, r0
 80057ae:	460d      	mov	r5, r1
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 80057b0:	8881      	ldrh	r1, [r0, #4]
 80057b2:	6800      	ldr	r0, [r0, #0]
 80057b4:	f7ff f996 	bl	8004ae4 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80057b8:	4606      	mov	r6, r0
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d149      	bne.n	8005852 <f_lseek+0xa8>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
 80057be:	f994 3006 	ldrsb.w	r3, [r4, #6]
 80057c2:	79a2      	ldrb	r2, [r4, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	db51      	blt.n	800586c <f_lseek+0xc2>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80057c8:	68e3      	ldr	r3, [r4, #12]
 80057ca:	42ab      	cmp	r3, r5
 80057cc:	d203      	bcs.n	80057d6 <f_lseek+0x2c>
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
 80057ce:	f012 0f02 	tst.w	r2, #2
 80057d2:	bf08      	it	eq
 80057d4:	461d      	moveq	r5, r3
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
 80057d6:	2200      	movs	r2, #0
	ifptr = fp->fptr;
 80057d8:	68a3      	ldr	r3, [r4, #8]
	fp->fptr = nsect = 0; fp->csect = 255;
 80057da:	60a2      	str	r2, [r4, #8]
 80057dc:	22ff      	movs	r2, #255	; 0xff
 80057de:	71e2      	strb	r2, [r4, #7]
	if (ofs > 0) {
 80057e0:	b94d      	cbnz	r5, 80057f6 <f_lseek+0x4c>
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
 80057e2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d933      	bls.n	8005852 <f_lseek+0xa8>
		fp->fsize = fp->fptr;
 80057ea:	60e3      	str	r3, [r4, #12]
		fp->flag |= FA__WRITTEN;
 80057ec:	79a3      	ldrb	r3, [r4, #6]
 80057ee:	f043 0320 	orr.w	r3, r3, #32
 80057f2:	71a3      	strb	r3, [r4, #6]
 80057f4:	e02d      	b.n	8005852 <f_lseek+0xa8>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80057f6:	6820      	ldr	r0, [r4, #0]
 80057f8:	7887      	ldrb	r7, [r0, #2]
 80057fa:	027f      	lsls	r7, r7, #9
		if (ifptr > 0 &&
 80057fc:	b35b      	cbz	r3, 8005856 <f_lseek+0xac>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80057fe:	3b01      	subs	r3, #1
 8005800:	1e6a      	subs	r2, r5, #1
 8005802:	fbb2 f2f7 	udiv	r2, r2, r7
 8005806:	fbb3 f1f7 	udiv	r1, r3, r7
		if (ifptr > 0 &&
 800580a:	428a      	cmp	r2, r1
 800580c:	d323      	bcc.n	8005856 <f_lseek+0xac>
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800580e:	427a      	negs	r2, r7
 8005810:	4013      	ands	r3, r2
			clst = fp->curr_clust;
 8005812:	6961      	ldr	r1, [r4, #20]
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8005814:	60a3      	str	r3, [r4, #8]
			ofs -= fp->fptr;
 8005816:	1aed      	subs	r5, r5, r3
		if (clst != 0) {
 8005818:	2900      	cmp	r1, #0
 800581a:	d14a      	bne.n	80058b2 <f_lseek+0x108>
	fp->fptr = nsect = 0; fp->csect = 255;
 800581c:	2500      	movs	r5, #0
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
 800581e:	68a3      	ldr	r3, [r4, #8]
 8005820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0dc      	beq.n	80057e2 <f_lseek+0x38>
 8005828:	69a2      	ldr	r2, [r4, #24]
 800582a:	42aa      	cmp	r2, r5
 800582c:	d0d9      	beq.n	80057e2 <f_lseek+0x38>
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
 800582e:	79a3      	ldrb	r3, [r4, #6]
 8005830:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8005834:	065b      	lsls	r3, r3, #25
 8005836:	d555      	bpl.n	80058e4 <f_lseek+0x13a>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	2301      	movs	r3, #1
 800583c:	4639      	mov	r1, r7
 800583e:	7840      	ldrb	r0, [r0, #1]
 8005840:	f7ff f8cd 	bl	80049de <disk_write>
 8005844:	79a3      	ldrb	r3, [r4, #6]
 8005846:	2800      	cmp	r0, #0
 8005848:	d049      	beq.n	80058de <f_lseek+0x134>
			ABORT(fp->fs, FR_DISK_ERR);
 800584a:	2601      	movs	r6, #1
 800584c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005850:	71a3      	strb	r3, [r4, #6]
	}
#endif

	LEAVE_FF(fp->fs, res);
}
 8005852:	4630      	mov	r0, r6
 8005854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			clst = fp->org_clust;					/* start from the first cluster */
 8005856:	6921      	ldr	r1, [r4, #16]
			if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005858:	b979      	cbnz	r1, 800587a <f_lseek+0xd0>
				clst = create_chain(fp->fs, 0);
 800585a:	f7ff fbbe 	bl	8004fda <create_chain>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800585e:	2801      	cmp	r0, #1
				clst = create_chain(fp->fs, 0);
 8005860:	4601      	mov	r1, r0
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005862:	d105      	bne.n	8005870 <f_lseek+0xc6>
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8005864:	79a3      	ldrb	r3, [r4, #6]
 8005866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800586a:	71a3      	strb	r3, [r4, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
 800586c:	2602      	movs	r6, #2
 800586e:	e7f0      	b.n	8005852 <f_lseek+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005870:	1c42      	adds	r2, r0, #1
 8005872:	d101      	bne.n	8005878 <f_lseek+0xce>
			ABORT(fp->fs, FR_DISK_ERR);
 8005874:	79a3      	ldrb	r3, [r4, #6]
 8005876:	e7e8      	b.n	800584a <f_lseek+0xa0>
				fp->org_clust = clst;
 8005878:	6120      	str	r0, [r4, #16]
			fp->curr_clust = clst;
 800587a:	6161      	str	r1, [r4, #20]
 800587c:	e7cc      	b.n	8005818 <f_lseek+0x6e>
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800587e:	79a3      	ldrb	r3, [r4, #6]
 8005880:	6820      	ldr	r0, [r4, #0]
 8005882:	079b      	lsls	r3, r3, #30
 8005884:	d505      	bpl.n	8005892 <f_lseek+0xe8>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
 8005886:	f7ff fba8 	bl	8004fda <create_chain>
					if (clst == 0) {				/* When disk gets full, clip file size */
 800588a:	4601      	mov	r1, r0
 800588c:	b920      	cbnz	r0, 8005898 <f_lseek+0xee>
 800588e:	463d      	mov	r5, r7
 8005890:	e011      	b.n	80058b6 <f_lseek+0x10c>
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8005892:	f7ff fa88 	bl	8004da6 <get_fat>
 8005896:	4601      	mov	r1, r0
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005898:	1c4a      	adds	r2, r1, #1
 800589a:	d0eb      	beq.n	8005874 <f_lseek+0xca>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
 800589c:	2901      	cmp	r1, #1
 800589e:	d9e1      	bls.n	8005864 <f_lseek+0xba>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	428b      	cmp	r3, r1
 80058a6:	d9dd      	bls.n	8005864 <f_lseek+0xba>
				fp->fptr += bcs;
 80058a8:	68a3      	ldr	r3, [r4, #8]
				fp->curr_clust = clst;
 80058aa:	6161      	str	r1, [r4, #20]
				fp->fptr += bcs;
 80058ac:	443b      	add	r3, r7
 80058ae:	60a3      	str	r3, [r4, #8]
				ofs -= bcs;
 80058b0:	1bed      	subs	r5, r5, r7
			while (ofs > bcs) {						/* Cluster following loop */
 80058b2:	42bd      	cmp	r5, r7
 80058b4:	d8e3      	bhi.n	800587e <f_lseek+0xd4>
			fp->fptr += ofs;
 80058b6:	68a3      	ldr	r3, [r4, #8]
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 80058b8:	f3c5 2247 	ubfx	r2, r5, #9, #8
			fp->fptr += ofs;
 80058bc:	442b      	add	r3, r5
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 80058be:	0a6f      	lsrs	r7, r5, #9
			if (ofs % SS(fp->fs)) {
 80058c0:	f3c5 0508 	ubfx	r5, r5, #0, #9
			fp->fptr += ofs;
 80058c4:	60a3      	str	r3, [r4, #8]
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 80058c6:	71e2      	strb	r2, [r4, #7]
			if (ofs % SS(fp->fs)) {
 80058c8:	2d00      	cmp	r5, #0
 80058ca:	d0a7      	beq.n	800581c <f_lseek+0x72>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80058cc:	6820      	ldr	r0, [r4, #0]
 80058ce:	f7ff f8b3 	bl	8004a38 <clust2sect>
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d0c6      	beq.n	8005864 <f_lseek+0xba>
				fp->csect++;
 80058d6:	3201      	adds	r2, #1
				nsect += fp->csect;
 80058d8:	183d      	adds	r5, r7, r0
				fp->csect++;
 80058da:	71e2      	strb	r2, [r4, #7]
 80058dc:	e79f      	b.n	800581e <f_lseek+0x74>
			fp->flag &= ~FA__DIRTY;
 80058de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e2:	71a3      	strb	r3, [r4, #6]
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	2301      	movs	r3, #1
 80058e8:	462a      	mov	r2, r5
 80058ea:	4639      	mov	r1, r7
 80058ec:	7840      	ldrb	r0, [r0, #1]
 80058ee:	f7ff f863 	bl	80049b8 <disk_read>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d1be      	bne.n	8005874 <f_lseek+0xca>
		fp->dsect = nsect;
 80058f6:	61a5      	str	r5, [r4, #24]
 80058f8:	e773      	b.n	80057e2 <f_lseek+0x38>

080058fa <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
 80058fa:	b510      	push	{r4, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	4604      	mov	r4, r0
 8005900:	9101      	str	r1, [sp, #4]
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj->fs, 0);
 8005902:	2200      	movs	r2, #0
 8005904:	4601      	mov	r1, r0
 8005906:	a801      	add	r0, sp, #4
 8005908:	f7ff f92e 	bl	8004b68 <auto_mount>
	if (res == FR_OK) {
 800590c:	b960      	cbnz	r0, 8005928 <f_opendir+0x2e>
		INITBUF((*dj), sfn, lfn);
 800590e:	ab03      	add	r3, sp, #12
		res = follow_path(dj, path);			/* Follow the path to the directory */
 8005910:	4620      	mov	r0, r4
 8005912:	9901      	ldr	r1, [sp, #4]
		INITBUF((*dj), sfn, lfn);
 8005914:	61a3      	str	r3, [r4, #24]
		res = follow_path(dj, path);			/* Follow the path to the directory */
 8005916:	f7ff fca7 	bl	8005268 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800591a:	b9c8      	cbnz	r0, 8005950 <f_opendir+0x56>
			dir = dj->dir;
 800591c:	6963      	ldr	r3, [r4, #20]
			if (dir) {							/* It is not the root dir */
 800591e:	b183      	cbz	r3, 8005942 <f_opendir+0x48>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 8005920:	7ada      	ldrb	r2, [r3, #11]
 8005922:	06d2      	lsls	r2, r2, #27
 8005924:	d402      	bmi.n	800592c <f_opendir+0x32>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
 8005926:	2005      	movs	r0, #5
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
 8005928:	b006      	add	sp, #24
 800592a:	bd10      	pop	{r4, pc}
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 800592c:	7d59      	ldrb	r1, [r3, #21]
 800592e:	7d1a      	ldrb	r2, [r3, #20]
 8005930:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005934:	7ed9      	ldrb	r1, [r3, #27]
 8005936:	7e9b      	ldrb	r3, [r3, #26]
 8005938:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800593c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005940:	60a3      	str	r3, [r4, #8]
				dj->id = dj->fs->id;
 8005942:	6823      	ldr	r3, [r4, #0]
				res = dir_seek(dj, 0);			/* Rewind dir */
 8005944:	2100      	movs	r1, #0
				dj->id = dj->fs->id;
 8005946:	88db      	ldrh	r3, [r3, #6]
				res = dir_seek(dj, 0);			/* Rewind dir */
 8005948:	4620      	mov	r0, r4
				dj->id = dj->fs->id;
 800594a:	80a3      	strh	r3, [r4, #4]
				res = dir_seek(dj, 0);			/* Rewind dir */
 800594c:	f7ff fa90 	bl	8004e70 <dir_seek>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005950:	2804      	cmp	r0, #4
 8005952:	d1e9      	bne.n	8005928 <f_opendir+0x2e>
 8005954:	e7e7      	b.n	8005926 <f_opendir+0x2c>

08005956 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 8005956:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005958:	4605      	mov	r5, r0
 800595a:	460e      	mov	r6, r1
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 800595c:	8881      	ldrh	r1, [r0, #4]
 800595e:	6800      	ldr	r0, [r0, #0]
 8005960:	f7ff f8c0 	bl	8004ae4 <validate>
	if (res == FR_OK) {
 8005964:	4604      	mov	r4, r0
 8005966:	b9d0      	cbnz	r0, 800599e <f_readdir+0x48>
		INITBUF((*dj), sfn, lfn);
 8005968:	ab01      	add	r3, sp, #4
 800596a:	61ab      	str	r3, [r5, #24]
		if (!fno) {
 800596c:	b92e      	cbnz	r6, 800597a <f_readdir+0x24>
			res = dir_seek(dj, 0);
 800596e:	4601      	mov	r1, r0
 8005970:	4628      	mov	r0, r5
 8005972:	f7ff fa7d 	bl	8004e70 <dir_seek>
 8005976:	4604      	mov	r4, r0
 8005978:	e011      	b.n	800599e <f_readdir+0x48>
		} else {
			res = dir_read(dj);
 800597a:	4628      	mov	r0, r5
 800597c:	f7ff fbf2 	bl	8005164 <dir_read>
			if (res == FR_NO_FILE) {
 8005980:	2804      	cmp	r0, #4
 8005982:	d10f      	bne.n	80059a4 <f_readdir+0x4e>
				dj->sect = 0;
 8005984:	612c      	str	r4, [r5, #16]
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
 8005986:	4631      	mov	r1, r6
 8005988:	4628      	mov	r0, r5
 800598a:	f7ff f860 	bl	8004a4e <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
 800598e:	2100      	movs	r1, #0
 8005990:	4628      	mov	r0, r5
 8005992:	f7ff fb6f 	bl	8005074 <dir_next>
				if (res == FR_NO_FILE) {
 8005996:	2804      	cmp	r0, #4
 8005998:	d1ed      	bne.n	8005976 <f_readdir+0x20>
					dj->sect = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	612b      	str	r3, [r5, #16]
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
 800599e:	4620      	mov	r0, r4
 80059a0:	b004      	add	sp, #16
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
			if (res == FR_OK) {				/* A valid entry is found */
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d1e6      	bne.n	8005976 <f_readdir+0x20>
 80059a8:	e7ed      	b.n	8005986 <f_readdir+0x30>
	...

080059ac <SPI_configuration>:

unsigned char  SD_type = 0;


void SPI_configuration (void)
{
 80059ac:	b510      	push	{r4, lr}
      SPI_InitTypeDef SPI_InitStructure;
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
      GPIO_Init_Pin(GPIOC,GPIO_Pin_8,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
 80059ae:	4c27      	ldr	r4, [pc, #156]	; (8005a4c <SPI_configuration+0xa0>)
{
 80059b0:	b086      	sub	sp, #24
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80059b2:	2101      	movs	r1, #1
 80059b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80059b8:	f001 fc02 	bl	80071c0 <RCC_APB1PeriphClockCmd>
      GPIO_Init_Pin(GPIOC,GPIO_Pin_8,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
 80059bc:	4620      	mov	r0, r4
 80059be:	2318      	movs	r3, #24
 80059c0:	2203      	movs	r2, #3
 80059c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059c6:	f001 fdfd 	bl	80075c4 <GPIO_Init_Pin>
      SD_PWR_ON();
 80059ca:	68e3      	ldr	r3, [r4, #12]
      GPIO_Init_Pin(GPIOB,GPIO_Pin_13,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
 80059cc:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
      SD_PWR_ON();
 80059d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d4:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
      GPIO_Init_Pin(GPIOB,GPIO_Pin_13,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
 80059d8:	2203      	movs	r2, #3
 80059da:	4620      	mov	r0, r4
 80059dc:	2318      	movs	r3, #24
 80059de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059e2:	f001 fdef 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOB,GPIO_Pin_14,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 80059e6:	4620      	mov	r0, r4
 80059e8:	2348      	movs	r3, #72	; 0x48
 80059ea:	2203      	movs	r2, #3
 80059ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059f0:	f001 fde8 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOB,GPIO_Pin_15,GPIO_Speed_50MHz,GPIO_Mode_AF_PP);
 80059f4:	4620      	mov	r0, r4
 80059f6:	2318      	movs	r3, #24
 80059f8:	2203      	movs	r2, #3
 80059fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059fe:	f001 fde1 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOB,GPIO_Pin_12,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8005a02:	4620      	mov	r0, r4
 8005a04:	2310      	movs	r3, #16
 8005a06:	2203      	movs	r2, #3
 8005a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a0c:	f001 fdda 	bl	80075c4 <GPIO_Init_Pin>
      SD_CS_DISABLE();
 8005a10:	68e3      	ldr	r3, [r4, #12]
      /* SPI2 configuration */
      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
      SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
      SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8005a12:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
      SD_CS_DISABLE();
 8005a16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a1a:	60e3      	str	r3, [r4, #12]
      SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8005a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a20:	e9cd 2301 	strd	r2, r3, [sp, #4]
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
      SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
      SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8005a24:	2308      	movs	r3, #8
 8005a26:	490a      	ldr	r1, [pc, #40]	; (8005a50 <SPI_configuration+0xa4>)
      SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
      SPI_InitStructure.SPI_CRCPolynomial = 7;
      SPI_Init(SPI2, &SPI_InitStructure);
 8005a28:	f5a4 4454 	sub.w	r4, r4, #54272	; 0xd400
      SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8005a2c:	e9cd 1303 	strd	r1, r3, [sp, #12]
      SPI_InitStructure.SPI_CRCPolynomial = 7;
 8005a30:	2307      	movs	r3, #7
      SPI_Init(SPI2, &SPI_InitStructure);
 8005a32:	4620      	mov	r0, r4
 8005a34:	a901      	add	r1, sp, #4
      SPI_InitStructure.SPI_CRCPolynomial = 7;
 8005a36:	f8ad 3014 	strh.w	r3, [sp, #20]
      SPI_Init(SPI2, &SPI_InitStructure);
 8005a3a:	f001 fe7f 	bl	800773c <SPI_Init>
      /* Enable SPI2  */
      SPI_Cmd(SPI2, ENABLE);
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4620      	mov	r0, r4
 8005a42:	f001 fe9a 	bl	800777a <SPI_Cmd>
}
 8005a46:	b006      	add	sp, #24
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40011000 	.word	0x40011000
 8005a50:	02000001 	.word	0x02000001

08005a54 <SPI_set_speed>:


void SPI_set_speed (unsigned char speed_set)
{
 8005a54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
      SPI_InitTypeDef SPI_InitStructure;
      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
      SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
      SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8005a56:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
 8005a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a5e:	e9cd 2301 	strd	r2, r3, [sp, #4]
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8005a62:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <SPI_set_speed+0x38>)
      SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
      if (speed_set == SPI_SPEED_LOW) {
 8005a64:	2800      	cmp	r0, #0
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8005a66:	9303      	str	r3, [sp, #12]
         SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
      } else {
         SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8005a68:	bf0c      	ite	eq
 8005a6a:	2338      	moveq	r3, #56	; 0x38
 8005a6c:	2308      	movne	r3, #8
 8005a6e:	f8ad 3010 	strh.w	r3, [sp, #16]
      }
      SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8005a72:	2300      	movs	r3, #0
 8005a74:	f8ad 3012 	strh.w	r3, [sp, #18]
      SPI_InitStructure.SPI_CRCPolynomial = 7;
 8005a78:	2307      	movs	r3, #7
      SPI_Init(SPI2,&SPI_InitStructure);
 8005a7a:	4805      	ldr	r0, [pc, #20]	; (8005a90 <SPI_set_speed+0x3c>)
 8005a7c:	a901      	add	r1, sp, #4
      SPI_InitStructure.SPI_CRCPolynomial = 7;
 8005a7e:	f8ad 3014 	strh.w	r3, [sp, #20]
      SPI_Init(SPI2,&SPI_InitStructure);
 8005a82:	f001 fe5b 	bl	800773c <SPI_Init>
}
 8005a86:	b007      	add	sp, #28
 8005a88:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a8c:	02000001 	.word	0x02000001
 8005a90:	40003800 	.word	0x40003800

08005a94 <SPI_read_write_byte>:


unsigned char SPI_read_write_byte (unsigned char tx_data)
{
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4604      	mov	r4, r0
      /* Loop while DR register in not emplty */
      while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 8005a98:	4d0b      	ldr	r5, [pc, #44]	; (8005ac8 <SPI_read_write_byte+0x34>)
 8005a9a:	2102      	movs	r1, #2
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f001 fe7d 	bl	800779c <SPI_I2S_GetFlagStatus>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d0f9      	beq.n	8005a9a <SPI_read_write_byte+0x6>
      /* Send byte through the SPI1 peripheral */
      SPI_I2S_SendData(SPI2, tx_data);
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4807      	ldr	r0, [pc, #28]	; (8005ac8 <SPI_read_write_byte+0x34>)
 8005aaa:	f001 fe72 	bl	8007792 <SPI_I2S_SendData>
      /* Wait to receive a byte */
      while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 8005aae:	4c06      	ldr	r4, [pc, #24]	; (8005ac8 <SPI_read_write_byte+0x34>)
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f001 fe72 	bl	800779c <SPI_I2S_GetFlagStatus>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d0f9      	beq.n	8005ab0 <SPI_read_write_byte+0x1c>
      /* Return the byte read from the SPI bus */
      return SPI_I2S_ReceiveData(SPI2);
 8005abc:	4802      	ldr	r0, [pc, #8]	; (8005ac8 <SPI_read_write_byte+0x34>)
 8005abe:	f001 fe6a 	bl	8007796 <SPI_I2S_ReceiveData>
}
 8005ac2:	b2c0      	uxtb	r0, r0
 8005ac4:	bd38      	pop	{r3, r4, r5, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40003800 	.word	0x40003800

08005acc <SD_wait_ready>:


unsigned char SD_wait_ready (void)
{
 8005acc:	b510      	push	{r4, lr}
 8005ace:	f64f 74fe 	movw	r4, #65534	; 0xfffe
      unsigned char r1;
      unsigned short retry;
      retry = 0;
      do {
          r1 = SPI_read_write_byte(0xFF);
 8005ad2:	3c01      	subs	r4, #1
 8005ad4:	20ff      	movs	r0, #255	; 0xff
 8005ad6:	b2a4      	uxth	r4, r4
 8005ad8:	f7ff ffdc 	bl	8005a94 <SPI_read_write_byte>
          retry++;
          if (retry == 0xfffe) {
 8005adc:	b11c      	cbz	r4, 8005ae6 <SD_wait_ready+0x1a>
             return 1;
          }
      } while (r1 != 0xFF);
 8005ade:	28ff      	cmp	r0, #255	; 0xff
 8005ae0:	d1f7      	bne.n	8005ad2 <SD_wait_ready+0x6>
      return 0;
 8005ae2:	2000      	movs	r0, #0
}
 8005ae4:	bd10      	pop	{r4, pc}
             return 1;
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	e7fc      	b.n	8005ae4 <SD_wait_ready+0x18>
	...

08005aec <SD_send_command>:


unsigned char SD_send_command (unsigned char cmd, unsigned int arg, unsigned char crc)
{
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4606      	mov	r6, r0
 8005af0:	460c      	mov	r4, r1
 8005af2:	4615      	mov	r5, r2
      unsigned char r1;
      unsigned char retry = 0;
      SPI_read_write_byte(0xff);
 8005af4:	20ff      	movs	r0, #255	; 0xff
 8005af6:	f7ff ffcd 	bl	8005a94 <SPI_read_write_byte>
      SD_CS_ENABLE();
 8005afa:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <SD_send_command+0x6c>)
      SPI_read_write_byte(cmd | 0x40);
 8005afc:	f046 0040 	orr.w	r0, r6, #64	; 0x40
      SD_CS_ENABLE();
 8005b00:	68d3      	ldr	r3, [r2, #12]
 8005b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b06:	60d3      	str	r3, [r2, #12]
      SPI_read_write_byte(cmd | 0x40);
 8005b08:	f7ff ffc4 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(arg >> 24);
 8005b0c:	0e20      	lsrs	r0, r4, #24
 8005b0e:	f7ff ffc1 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(arg >> 16);
 8005b12:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8005b16:	f7ff ffbd 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(arg >> 8);
 8005b1a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8005b1e:	f7ff ffb9 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(arg);
 8005b22:	b2e0      	uxtb	r0, r4
 8005b24:	f7ff ffb6 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(crc);
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f7ff ffb3 	bl	8005a94 <SPI_read_write_byte>
      while ((r1 = SPI_read_write_byte(0xFF)) == 0xFF) {
 8005b2e:	24c9      	movs	r4, #201	; 0xc9
 8005b30:	20ff      	movs	r0, #255	; 0xff
 8005b32:	f7ff ffaf 	bl	8005a94 <SPI_read_write_byte>
 8005b36:	28ff      	cmp	r0, #255	; 0xff
 8005b38:	4605      	mov	r5, r0
 8005b3a:	d103      	bne.n	8005b44 <SD_send_command+0x58>
            retry++;
            if (retry > 200) {
 8005b3c:	3c01      	subs	r4, #1
 8005b3e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8005b42:	d1f5      	bne.n	8005b30 <SD_send_command+0x44>
               break;
            }
      }
      SD_CS_DISABLE();
 8005b44:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <SD_send_command+0x6c>)
      SPI_read_write_byte(0xFF);
 8005b46:	20ff      	movs	r0, #255	; 0xff
      SD_CS_DISABLE();
 8005b48:	68d3      	ldr	r3, [r2, #12]
 8005b4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b4e:	60d3      	str	r3, [r2, #12]
      SPI_read_write_byte(0xFF);
 8005b50:	f7ff ffa0 	bl	8005a94 <SPI_read_write_byte>
      return r1;
}
 8005b54:	4628      	mov	r0, r5
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	40010c00 	.word	0x40010c00

08005b5c <SD_send_command_no_deassert>:


unsigned char SD_send_command_no_deassert (unsigned char cmd, unsigned int arg, unsigned char crc)
{
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4606      	mov	r6, r0
 8005b60:	460c      	mov	r4, r1
 8005b62:	4615      	mov	r5, r2
      unsigned char r1;
      unsigned char retry = 0;
      SPI_read_write_byte(0xff);
 8005b64:	20ff      	movs	r0, #255	; 0xff
 8005b66:	f7ff ff95 	bl	8005a94 <SPI_read_write_byte>
      SD_CS_ENABLE();
 8005b6a:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <SD_send_command_no_deassert+0x58>)
      SPI_read_write_byte(cmd | 0x40);
 8005b6c:	f046 0040 	orr.w	r0, r6, #64	; 0x40
      SD_CS_ENABLE();
 8005b70:	68d3      	ldr	r3, [r2, #12]
 8005b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b76:	60d3      	str	r3, [r2, #12]
      SPI_read_write_byte(cmd | 0x40);
 8005b78:	f7ff ff8c 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(arg >> 24);
 8005b7c:	0e20      	lsrs	r0, r4, #24
 8005b7e:	f7ff ff89 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(arg >> 16);
 8005b82:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8005b86:	f7ff ff85 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(arg >> 8);
 8005b8a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8005b8e:	f7ff ff81 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(arg);
 8005b92:	b2e0      	uxtb	r0, r4
 8005b94:	f7ff ff7e 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(crc);
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f7ff ff7b 	bl	8005a94 <SPI_read_write_byte>
      while ((r1 = SPI_read_write_byte(0xFF)) == 0xFF) {
 8005b9e:	24c9      	movs	r4, #201	; 0xc9
 8005ba0:	20ff      	movs	r0, #255	; 0xff
 8005ba2:	f7ff ff77 	bl	8005a94 <SPI_read_write_byte>
 8005ba6:	28ff      	cmp	r0, #255	; 0xff
 8005ba8:	d103      	bne.n	8005bb2 <SD_send_command_no_deassert+0x56>
            retry++;
            if (retry > 200) {
 8005baa:	3c01      	subs	r4, #1
 8005bac:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8005bb0:	d1f6      	bne.n	8005ba0 <SD_send_command_no_deassert+0x44>
               break;
            }
      }
      return r1;
}
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	40010c00 	.word	0x40010c00

08005bb8 <SD_init>:


unsigned char SD_init (void)
{
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      unsigned short i;
      unsigned char r1;
      unsigned short retry;
      unsigned char buff[6];
      SPI_set_speed(0);
 8005bba:	2000      	movs	r0, #0
 8005bbc:	f7ff ff4a 	bl	8005a54 <SPI_set_speed>
 8005bc0:	250a      	movs	r5, #10
      for (i=0;i<10;i++) {
          SPI_read_write_byte(0xFF);
 8005bc2:	3d01      	subs	r5, #1
 8005bc4:	20ff      	movs	r0, #255	; 0xff
 8005bc6:	b2ad      	uxth	r5, r5
 8005bc8:	f7ff ff64 	bl	8005a94 <SPI_read_write_byte>
      for (i=0;i<10;i++) {
 8005bcc:	2d00      	cmp	r5, #0
 8005bce:	d1f8      	bne.n	8005bc2 <SD_init+0xa>
      }
      retry = 0;
 8005bd0:	462c      	mov	r4, r5
      do {
          r1 = SD_send_command(CMD0, 0, 0x95);
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	2295      	movs	r2, #149	; 0x95
 8005bd6:	4608      	mov	r0, r1
 8005bd8:	f7ff ff88 	bl	8005aec <SD_send_command>
          retry++;
 8005bdc:	3401      	adds	r4, #1
      } while ((r1 != 0x01) && (retry<200));
 8005bde:	2801      	cmp	r0, #1
          r1 = SD_send_command(CMD0, 0, 0x95);
 8005be0:	4606      	mov	r6, r0
          retry++;
 8005be2:	b2a4      	uxth	r4, r4
      } while ((r1 != 0x01) && (retry<200));
 8005be4:	d004      	beq.n	8005bf0 <SD_init+0x38>
 8005be6:	2cc8      	cmp	r4, #200	; 0xc8
 8005be8:	d1f3      	bne.n	8005bd2 <SD_init+0x1a>
      if (retry == 200) {
         return 1;
 8005bea:	2401      	movs	r4, #1
            }
            SPI_set_speed(1);
         }
      }
      return r1;
}
 8005bec:	4620      	mov	r0, r4
 8005bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (retry == 200) {
 8005bf0:	2cc8      	cmp	r4, #200	; 0xc8
 8005bf2:	d0fa      	beq.n	8005bea <SD_init+0x32>
      r1 = SD_send_command_no_deassert(8, 0x1aa, 0x87);
 8005bf4:	2287      	movs	r2, #135	; 0x87
 8005bf6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005bfa:	2008      	movs	r0, #8
 8005bfc:	f7ff ffae 	bl	8005b5c <SD_send_command_no_deassert>
      if (r1 == 0x05) {
 8005c00:	2805      	cmp	r0, #5
      r1 = SD_send_command_no_deassert(8, 0x1aa, 0x87);
 8005c02:	4604      	mov	r4, r0
      if (r1 == 0x05) {
 8005c04:	d13f      	bne.n	8005c86 <SD_init+0xce>
         SD_type = SD_TYPE_V1;
 8005c06:	4f4d      	ldr	r7, [pc, #308]	; (8005d3c <SD_init+0x184>)
         SD_CS_DISABLE();
 8005c08:	4a4d      	ldr	r2, [pc, #308]	; (8005d40 <SD_init+0x188>)
         SD_type = SD_TYPE_V1;
 8005c0a:	703e      	strb	r6, [r7, #0]
         SD_CS_DISABLE();
 8005c0c:	68d3      	ldr	r3, [r2, #12]
         SPI_read_write_byte(0xFF);
 8005c0e:	20ff      	movs	r0, #255	; 0xff
         SD_CS_DISABLE();
 8005c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c14:	60d3      	str	r3, [r2, #12]
         SPI_read_write_byte(0xFF);
 8005c16:	f7ff ff3d 	bl	8005a94 <SPI_read_write_byte>
         retry = 0;
 8005c1a:	2600      	movs	r6, #0
             r1 = SD_send_command(CMD55, 0, 0);
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2037      	movs	r0, #55	; 0x37
 8005c20:	4611      	mov	r1, r2
 8005c22:	f7ff ff63 	bl	8005aec <SD_send_command>
             if (r1 != 0x01) {
 8005c26:	2801      	cmp	r0, #1
             r1 = SD_send_command(CMD55, 0, 0);
 8005c28:	4604      	mov	r4, r0
             if (r1 != 0x01) {
 8005c2a:	d1df      	bne.n	8005bec <SD_init+0x34>
             r1 = SD_send_command(ACMD41, 0, 0);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2029      	movs	r0, #41	; 0x29
 8005c30:	4611      	mov	r1, r2
 8005c32:	f7ff ff5b 	bl	8005aec <SD_send_command>
             retry++;
 8005c36:	3601      	adds	r6, #1
 8005c38:	b2b6      	uxth	r6, r6
         } while ((r1 != 0x00) && (retry < 400));
 8005c3a:	b170      	cbz	r0, 8005c5a <SD_init+0xa2>
 8005c3c:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
 8005c40:	d1ec      	bne.n	8005c1c <SD_init+0x64>
                r1 = SD_send_command(1, 0, 0);
 8005c42:	2200      	movs	r2, #0
 8005c44:	2001      	movs	r0, #1
 8005c46:	4611      	mov	r1, r2
 8005c48:	f7ff ff50 	bl	8005aec <SD_send_command>
                retry++;
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	b2ad      	uxth	r5, r5
            } while ((r1 != 0x00) && (retry < 400));
 8005c50:	b1a0      	cbz	r0, 8005c7c <SD_init+0xc4>
 8005c52:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8005c56:	d1f4      	bne.n	8005c42 <SD_init+0x8a>
 8005c58:	e7c7      	b.n	8005bea <SD_init+0x32>
         if (retry == 400) {
 8005c5a:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
 8005c5e:	d0f0      	beq.n	8005c42 <SD_init+0x8a>
         SPI_set_speed(1);
 8005c60:	2001      	movs	r0, #1
 8005c62:	f7ff fef7 	bl	8005a54 <SPI_set_speed>
	 SPI_read_write_byte(0xFF);
 8005c66:	20ff      	movs	r0, #255	; 0xff
 8005c68:	f7ff ff14 	bl	8005a94 <SPI_read_write_byte>
}
 8005c6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
         r1 = SD_send_command(CMD16, 512, 0xff);
 8005c70:	22ff      	movs	r2, #255	; 0xff
 8005c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c76:	2010      	movs	r0, #16
 8005c78:	f7ff bf38 	b.w	8005aec <SD_send_command>
            if (retry == 400) {
 8005c7c:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8005c80:	d0b3      	beq.n	8005bea <SD_init+0x32>
            SD_type = SD_TYPE_MMC;
 8005c82:	7038      	strb	r0, [r7, #0]
 8005c84:	e7ec      	b.n	8005c60 <SD_init+0xa8>
      } else if (r1 == 0x01) {
 8005c86:	2801      	cmp	r0, #1
 8005c88:	d1b0      	bne.n	8005bec <SD_init+0x34>
         buff[0] = SPI_read_write_byte(0xFF);  //should be 0x00
 8005c8a:	20ff      	movs	r0, #255	; 0xff
 8005c8c:	f7ff ff02 	bl	8005a94 <SPI_read_write_byte>
         buff[1] = SPI_read_write_byte(0xFF);  //should be 0x00
 8005c90:	20ff      	movs	r0, #255	; 0xff
 8005c92:	f7ff feff 	bl	8005a94 <SPI_read_write_byte>
         buff[2] = SPI_read_write_byte(0xFF);  //should be 0x01
 8005c96:	20ff      	movs	r0, #255	; 0xff
 8005c98:	f7ff fefc 	bl	8005a94 <SPI_read_write_byte>
 8005c9c:	4605      	mov	r5, r0
         buff[3] = SPI_read_write_byte(0xFF);  //should be 0xAA
 8005c9e:	20ff      	movs	r0, #255	; 0xff
 8005ca0:	f7ff fef8 	bl	8005a94 <SPI_read_write_byte>
         SD_CS_DISABLE();
 8005ca4:	4a26      	ldr	r2, [pc, #152]	; (8005d40 <SD_init+0x188>)
         buff[3] = SPI_read_write_byte(0xFF);  //should be 0xAA
 8005ca6:	4604      	mov	r4, r0
         SD_CS_DISABLE();
 8005ca8:	68d3      	ldr	r3, [r2, #12]
         SPI_read_write_byte(0xFF);
 8005caa:	20ff      	movs	r0, #255	; 0xff
         SD_CS_DISABLE();
 8005cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cb0:	60d3      	str	r3, [r2, #12]
         SPI_read_write_byte(0xFF);
 8005cb2:	f7ff feef 	bl	8005a94 <SPI_read_write_byte>
         if (buff[2] == 0x01 && buff[3] == 0xAA) {
 8005cb6:	2d01      	cmp	r5, #1
 8005cb8:	d197      	bne.n	8005bea <SD_init+0x32>
 8005cba:	2caa      	cmp	r4, #170	; 0xaa
 8005cbc:	d195      	bne.n	8005bea <SD_init+0x32>
 8005cbe:	25c9      	movs	r5, #201	; 0xc9
    		r1 = SD_send_command(CMD55, 0, 0);
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2037      	movs	r0, #55	; 0x37
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	f7ff ff11 	bl	8005aec <SD_send_command>
    		if (r1 != 0x01) {
 8005cca:	2801      	cmp	r0, #1
    		r1 = SD_send_command(CMD55, 0, 0);
 8005ccc:	4604      	mov	r4, r0
    		if (r1 != 0x01) {
 8005cce:	d18d      	bne.n	8005bec <SD_init+0x34>
    		r1 = SD_send_command(ACMD41, 0x40000000, 0);
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005cd6:	2029      	movs	r0, #41	; 0x29
 8005cd8:	f7ff ff08 	bl	8005aec <SD_send_command>
 8005cdc:	3d01      	subs	r5, #1
 8005cde:	b2ad      	uxth	r5, r5
 8005ce0:	4604      	mov	r4, r0
                if (retry > 200) {
 8005ce2:	2d00      	cmp	r5, #0
 8005ce4:	d082      	beq.n	8005bec <SD_init+0x34>
            } while (r1 != 0);
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d1ea      	bne.n	8005cc0 <SD_init+0x108>
            r1 = SD_send_command_no_deassert(CMD58, 0, 0);
 8005cea:	4602      	mov	r2, r0
 8005cec:	4601      	mov	r1, r0
 8005cee:	203a      	movs	r0, #58	; 0x3a
 8005cf0:	f7ff ff34 	bl	8005b5c <SD_send_command_no_deassert>
            if (r1 != 0x00) {
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	f47f af78 	bne.w	8005bec <SD_init+0x34>
            buff[0] = SPI_read_write_byte(0xFF);
 8005cfc:	20ff      	movs	r0, #255	; 0xff
 8005cfe:	f7ff fec9 	bl	8005a94 <SPI_read_write_byte>
 8005d02:	4605      	mov	r5, r0
            buff[1] = SPI_read_write_byte(0xFF);
 8005d04:	20ff      	movs	r0, #255	; 0xff
 8005d06:	f7ff fec5 	bl	8005a94 <SPI_read_write_byte>
            buff[2] = SPI_read_write_byte(0xFF);
 8005d0a:	20ff      	movs	r0, #255	; 0xff
 8005d0c:	f7ff fec2 	bl	8005a94 <SPI_read_write_byte>
            buff[3] = SPI_read_write_byte(0xFF);
 8005d10:	20ff      	movs	r0, #255	; 0xff
 8005d12:	f7ff febf 	bl	8005a94 <SPI_read_write_byte>
            SD_CS_DISABLE();
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <SD_init+0x188>)
            SPI_read_write_byte(0xFF);
 8005d18:	20ff      	movs	r0, #255	; 0xff
            SD_CS_DISABLE();
 8005d1a:	68d3      	ldr	r3, [r2, #12]
 8005d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d20:	60d3      	str	r3, [r2, #12]
            SPI_read_write_byte(0xFF);
 8005d22:	f7ff feb7 	bl	8005a94 <SPI_read_write_byte>
               SD_type = SD_TYPE_V2;
 8005d26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d2a:	bf14      	ite	ne
 8005d2c:	2204      	movne	r2, #4
 8005d2e:	2202      	moveq	r2, #2
 8005d30:	4b02      	ldr	r3, [pc, #8]	; (8005d3c <SD_init+0x184>)
            SPI_set_speed(1);
 8005d32:	2001      	movs	r0, #1
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	f7ff fe8d 	bl	8005a54 <SPI_set_speed>
 8005d3a:	e757      	b.n	8005bec <SD_init+0x34>
 8005d3c:	20000a9e 	.word	0x20000a9e
 8005d40:	40010c00 	.word	0x40010c00

08005d44 <SD_receive_data>:


unsigned char SD_receive_data (unsigned char *data, unsigned short len, unsigned char release)
{
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	4604      	mov	r4, r0
 8005d48:	460d      	mov	r5, r1
      unsigned short retry;
      unsigned char r1;
      SD_CS_ENABLE();
 8005d4a:	f240 76d1 	movw	r6, #2001	; 0x7d1
{
 8005d4e:	4617      	mov	r7, r2
      SD_CS_ENABLE();
 8005d50:	4a17      	ldr	r2, [pc, #92]	; (8005db0 <SD_receive_data+0x6c>)
 8005d52:	68d3      	ldr	r3, [r2, #12]
 8005d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d58:	60d3      	str	r3, [r2, #12]
      retry = 0;
      do {
          r1 = SPI_read_write_byte(0xFF);
 8005d5a:	3e01      	subs	r6, #1
 8005d5c:	20ff      	movs	r0, #255	; 0xff
 8005d5e:	b2b6      	uxth	r6, r6
 8005d60:	f7ff fe98 	bl	8005a94 <SPI_read_write_byte>
          retry++;
          if (retry > 2000) {
 8005d64:	b936      	cbnz	r6, 8005d74 <SD_receive_data+0x30>
             SD_CS_DISABLE();
 8005d66:	2001      	movs	r0, #1
 8005d68:	4a11      	ldr	r2, [pc, #68]	; (8005db0 <SD_receive_data+0x6c>)
 8005d6a:	68d3      	ldr	r3, [r2, #12]
 8005d6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d70:	60d3      	str	r3, [r2, #12]
      if (release == RELEASE) {
         SD_CS_DISABLE();
         SPI_read_write_byte(0xFF);
      }
      return 0;
}
 8005d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } while (r1 != 0xFE);
 8005d74:	28fe      	cmp	r0, #254	; 0xfe
 8005d76:	d1f0      	bne.n	8005d5a <SD_receive_data+0x16>
 8005d78:	4425      	add	r5, r4
      while (len--) {
 8005d7a:	42a5      	cmp	r5, r4
            *data = SPI_read_write_byte(0xFF);
 8005d7c:	f04f 00ff 	mov.w	r0, #255	; 0xff
      while (len--) {
 8005d80:	d110      	bne.n	8005da4 <SD_receive_data+0x60>
      SPI_read_write_byte(0xFF);
 8005d82:	f7ff fe87 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xFF);
 8005d86:	20ff      	movs	r0, #255	; 0xff
 8005d88:	f7ff fe84 	bl	8005a94 <SPI_read_write_byte>
      if (release == RELEASE) {
 8005d8c:	2f01      	cmp	r7, #1
 8005d8e:	d107      	bne.n	8005da0 <SD_receive_data+0x5c>
         SD_CS_DISABLE();
 8005d90:	4a07      	ldr	r2, [pc, #28]	; (8005db0 <SD_receive_data+0x6c>)
         SPI_read_write_byte(0xFF);
 8005d92:	20ff      	movs	r0, #255	; 0xff
         SD_CS_DISABLE();
 8005d94:	68d3      	ldr	r3, [r2, #12]
 8005d96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d9a:	60d3      	str	r3, [r2, #12]
         SPI_read_write_byte(0xFF);
 8005d9c:	f7ff fe7a 	bl	8005a94 <SPI_read_write_byte>
      return 0;
 8005da0:	2000      	movs	r0, #0
 8005da2:	e7e6      	b.n	8005d72 <SD_receive_data+0x2e>
            *data = SPI_read_write_byte(0xFF);
 8005da4:	f7ff fe76 	bl	8005a94 <SPI_read_write_byte>
 8005da8:	f804 0b01 	strb.w	r0, [r4], #1
            data++;
 8005dac:	e7e5      	b.n	8005d7a <SD_receive_data+0x36>
 8005dae:	bf00      	nop
 8005db0:	40010c00 	.word	0x40010c00

08005db4 <SD_read_single_block>:
      return (unsigned int)capacity;
}


unsigned char SD_read_single_block (unsigned int sector, unsigned char *buffer)
{
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4604      	mov	r4, r0
      unsigned char r1;
      SPI_set_speed(SPI_SPEED_HIGH);
 8005db8:	2001      	movs	r0, #1
{
 8005dba:	460d      	mov	r5, r1
      SPI_set_speed(SPI_SPEED_HIGH);
 8005dbc:	f7ff fe4a 	bl	8005a54 <SPI_set_speed>
	  if (SD_type != SD_TYPE_V2HC) {
 8005dc0:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <SD_read_single_block+0x34>)
         sector = sector << 9;
	  }
      r1 = SD_send_command(CMD17, sector, 0);
 8005dc2:	2200      	movs	r2, #0
	  if (SD_type != SD_TYPE_V2HC) {
 8005dc4:	781b      	ldrb	r3, [r3, #0]
      r1 = SD_send_command(CMD17, sector, 0);
 8005dc6:	2011      	movs	r0, #17
	  if (SD_type != SD_TYPE_V2HC) {
 8005dc8:	2b04      	cmp	r3, #4
         sector = sector << 9;
 8005dca:	bf18      	it	ne
 8005dcc:	0264      	lslne	r4, r4, #9
      r1 = SD_send_command(CMD17, sector, 0);
 8005dce:	4621      	mov	r1, r4
 8005dd0:	f7ff fe8c 	bl	8005aec <SD_send_command>
      if (r1 != 0x00) {
 8005dd4:	b938      	cbnz	r0, 8005de6 <SD_read_single_block+0x32>
         return r1;
      }
      r1 = SD_receive_data(buffer, 512, RELEASE);
 8005dd6:	4628      	mov	r0, r5
      if (r1 != 0) {
         return r1;
      } else {
         return 0;
      }
}
 8005dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      r1 = SD_receive_data(buffer, 512, RELEASE);
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005de2:	f7ff bfaf 	b.w	8005d44 <SD_receive_data>
}
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20000a9e 	.word	0x20000a9e

08005dec <SD_write_single_block>:


unsigned char SD_write_single_block (unsigned int sector, const unsigned char *data)
{
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4604      	mov	r4, r0
      unsigned char r1;
      unsigned short i;
      unsigned short retry;
      SPI_set_speed(SPI_SPEED_HIGH);
 8005df0:	2001      	movs	r0, #1
{
 8005df2:	460d      	mov	r5, r1
      SPI_set_speed(SPI_SPEED_HIGH);
 8005df4:	f7ff fe2e 	bl	8005a54 <SPI_set_speed>
      if (SD_type != SD_TYPE_V2HC) {
 8005df8:	4b29      	ldr	r3, [pc, #164]	; (8005ea0 <SD_write_single_block+0xb4>)
         sector = sector << 9;
      }
      r1 = SD_send_command(CMD24, sector, 0x00);
 8005dfa:	2200      	movs	r2, #0
      if (SD_type != SD_TYPE_V2HC) {
 8005dfc:	781b      	ldrb	r3, [r3, #0]
      r1 = SD_send_command(CMD24, sector, 0x00);
 8005dfe:	2018      	movs	r0, #24
      if (SD_type != SD_TYPE_V2HC) {
 8005e00:	2b04      	cmp	r3, #4
         sector = sector << 9;
 8005e02:	bf18      	it	ne
 8005e04:	0264      	lslne	r4, r4, #9
      r1 = SD_send_command(CMD24, sector, 0x00);
 8005e06:	4621      	mov	r1, r4
 8005e08:	f7ff fe70 	bl	8005aec <SD_send_command>
      if (r1 != 0x00) {
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	bb58      	cbnz	r0, 8005e68 <SD_write_single_block+0x7c>
         return r1;
      }
      SD_CS_ENABLE();
 8005e10:	4a24      	ldr	r2, [pc, #144]	; (8005ea4 <SD_write_single_block+0xb8>)
      SPI_read_write_byte(0xff);
 8005e12:	20ff      	movs	r0, #255	; 0xff
      SD_CS_ENABLE();
 8005e14:	68d3      	ldr	r3, [r2, #12]
 8005e16:	f505 7600 	add.w	r6, r5, #512	; 0x200
 8005e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e1e:	60d3      	str	r3, [r2, #12]
      SPI_read_write_byte(0xff);
 8005e20:	f7ff fe38 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xff);
 8005e24:	20ff      	movs	r0, #255	; 0xff
 8005e26:	f7ff fe35 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xff);
 8005e2a:	20ff      	movs	r0, #255	; 0xff
 8005e2c:	f7ff fe32 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xFE);
 8005e30:	20fe      	movs	r0, #254	; 0xfe
 8005e32:	f7ff fe2f 	bl	8005a94 <SPI_read_write_byte>
      for (i=0;i<512;i++) {
          SPI_read_write_byte(*data++);
 8005e36:	f815 0b01 	ldrb.w	r0, [r5], #1
 8005e3a:	f7ff fe2b 	bl	8005a94 <SPI_read_write_byte>
      for (i=0;i<512;i++) {
 8005e3e:	42b5      	cmp	r5, r6
 8005e40:	d1f9      	bne.n	8005e36 <SD_write_single_block+0x4a>
      }
      SPI_read_write_byte(0xff);
 8005e42:	20ff      	movs	r0, #255	; 0xff
 8005e44:	f7ff fe26 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xff);
 8005e48:	20ff      	movs	r0, #255	; 0xff
 8005e4a:	f7ff fe23 	bl	8005a94 <SPI_read_write_byte>
      r1 = SPI_read_write_byte(0xff);
 8005e4e:	20ff      	movs	r0, #255	; 0xff
 8005e50:	f7ff fe20 	bl	8005a94 <SPI_read_write_byte>
      if ((r1 & 0x1F) != 0x05) {
 8005e54:	f000 031f 	and.w	r3, r0, #31
 8005e58:	2b05      	cmp	r3, #5
 8005e5a:	d011      	beq.n	8005e80 <SD_write_single_block+0x94>
      r1 = SPI_read_write_byte(0xff);
 8005e5c:	4604      	mov	r4, r0
         SD_CS_DISABLE();
 8005e5e:	4a11      	ldr	r2, [pc, #68]	; (8005ea4 <SD_write_single_block+0xb8>)
 8005e60:	68d3      	ldr	r3, [r2, #12]
 8005e62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e66:	60d3      	str	r3, [r2, #12]
            }
      }
      SD_CS_DISABLE();
      SPI_read_write_byte(0xff);
      return 0;
}
 8005e68:	4620      	mov	r0, r4
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
            if (retry > 0xfffe) {
 8005e6c:	3d01      	subs	r5, #1
 8005e6e:	b2ad      	uxth	r5, r5
 8005e70:	b945      	cbnz	r5, 8005e84 <SD_write_single_block+0x98>
               SD_CS_DISABLE();
 8005e72:	4a0c      	ldr	r2, [pc, #48]	; (8005ea4 <SD_write_single_block+0xb8>)
               return 1;
 8005e74:	2401      	movs	r4, #1
               SD_CS_DISABLE();
 8005e76:	68d3      	ldr	r3, [r2, #12]
 8005e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e7c:	60d3      	str	r3, [r2, #12]
               return 1;
 8005e7e:	e7f3      	b.n	8005e68 <SD_write_single_block+0x7c>
 8005e80:	f64f 75ff 	movw	r5, #65535	; 0xffff
      while (!SPI_read_write_byte(0xff)) {
 8005e84:	20ff      	movs	r0, #255	; 0xff
 8005e86:	f7ff fe05 	bl	8005a94 <SPI_read_write_byte>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d0ee      	beq.n	8005e6c <SD_write_single_block+0x80>
      SD_CS_DISABLE();
 8005e8e:	4a05      	ldr	r2, [pc, #20]	; (8005ea4 <SD_write_single_block+0xb8>)
      SPI_read_write_byte(0xff);
 8005e90:	20ff      	movs	r0, #255	; 0xff
      SD_CS_DISABLE();
 8005e92:	68d3      	ldr	r3, [r2, #12]
 8005e94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e98:	60d3      	str	r3, [r2, #12]
      SPI_read_write_byte(0xff);
 8005e9a:	f7ff fdfb 	bl	8005a94 <SPI_read_write_byte>
      return 0;
 8005e9e:	e7e3      	b.n	8005e68 <SD_write_single_block+0x7c>
 8005ea0:	20000a9e 	.word	0x20000a9e
 8005ea4:	40010c00 	.word	0x40010c00

08005ea8 <SD_read_multi_block>:


unsigned char SD_read_multi_block (unsigned int sector, unsigned char *buffer, unsigned char count)
{
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	4606      	mov	r6, r0
      unsigned char r1;
      SPI_set_speed(SPI_SPEED_HIGH);
 8005eac:	2001      	movs	r0, #1
{
 8005eae:	460d      	mov	r5, r1
 8005eb0:	4614      	mov	r4, r2
      SPI_set_speed(SPI_SPEED_HIGH);
 8005eb2:	f7ff fdcf 	bl	8005a54 <SPI_set_speed>
	  if (SD_type != SD_TYPE_V2HC) {
 8005eb6:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <SD_read_multi_block+0x5c>)
         sector = sector << 9;
	  }
      r1 = SD_send_command(CMD18, sector, 0);
 8005eb8:	2200      	movs	r2, #0
	  if (SD_type != SD_TYPE_V2HC) {
 8005eba:	781b      	ldrb	r3, [r3, #0]
      r1 = SD_send_command(CMD18, sector, 0);
 8005ebc:	2012      	movs	r0, #18
	  if (SD_type != SD_TYPE_V2HC) {
 8005ebe:	2b04      	cmp	r3, #4
         sector = sector << 9;
 8005ec0:	bf18      	it	ne
 8005ec2:	0276      	lslne	r6, r6, #9
      r1 = SD_send_command(CMD18, sector, 0);
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	f7ff fe11 	bl	8005aec <SD_send_command>
      if (r1 != 0x00) {
 8005eca:	b9d0      	cbnz	r0, 8005f02 <SD_read_multi_block+0x5a>
         return r1;
      }
      do {
          if (SD_receive_data(buffer, 512, NO_RELEASE) != 0x00) {
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7ff ff36 	bl	8005d44 <SD_receive_data>
 8005ed8:	b928      	cbnz	r0, 8005ee6 <SD_read_multi_block+0x3e>
             break;
          }
          buffer += 512;
      } while (--count);
 8005eda:	3c01      	subs	r4, #1
 8005edc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
          buffer += 512;
 8005ee0:	f505 7500 	add.w	r5, r5, #512	; 0x200
      } while (--count);
 8005ee4:	d1f2      	bne.n	8005ecc <SD_read_multi_block+0x24>
      SD_send_command(CMD12, 0, 0);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	200c      	movs	r0, #12
 8005eea:	4611      	mov	r1, r2
 8005eec:	f7ff fdfe 	bl	8005aec <SD_send_command>
      SD_CS_DISABLE();
 8005ef0:	4a05      	ldr	r2, [pc, #20]	; (8005f08 <SD_read_multi_block+0x60>)
      SPI_read_write_byte(0xFF);
 8005ef2:	20ff      	movs	r0, #255	; 0xff
      SD_CS_DISABLE();
 8005ef4:	68d3      	ldr	r3, [r2, #12]
 8005ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005efa:	60d3      	str	r3, [r2, #12]
      SPI_read_write_byte(0xFF);
 8005efc:	f7ff fdca 	bl	8005a94 <SPI_read_write_byte>
      if (count != 0) {
         return count;
      } else {
         return 0;
 8005f00:	4620      	mov	r0, r4
      }
}
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	20000a9e 	.word	0x20000a9e
 8005f08:	40010c00 	.word	0x40010c00

08005f0c <SD_write_multi_block>:


unsigned char SD_write_multi_block (unsigned int sector, const unsigned char *data, unsigned char count)
{
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	4606      	mov	r6, r0
      unsigned char r1;
      unsigned short i;
      SPI_set_speed(SPI_SPEED_HIGH);
 8005f10:	2001      	movs	r0, #1
{
 8005f12:	460d      	mov	r5, r1
 8005f14:	4614      	mov	r4, r2
      SPI_set_speed(SPI_SPEED_HIGH);
 8005f16:	f7ff fd9d 	bl	8005a54 <SPI_set_speed>
      if (SD_type != SD_TYPE_V2HC) {
 8005f1a:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <SD_write_multi_block+0xc4>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d001      	beq.n	8005f26 <SD_write_multi_block+0x1a>
         sector = sector << 9;
 8005f22:	0276      	lsls	r6, r6, #9
      }
      if (SD_type != SD_TYPE_MMC) {
 8005f24:	b123      	cbz	r3, 8005f30 <SD_write_multi_block+0x24>
         r1 = SD_send_command(ACMD23, count, 0x00);
 8005f26:	2200      	movs	r2, #0
 8005f28:	4621      	mov	r1, r4
 8005f2a:	2017      	movs	r0, #23
 8005f2c:	f7ff fdde 	bl	8005aec <SD_send_command>
      }
      r1 = SD_send_command(CMD25, sector, 0x00);
 8005f30:	2200      	movs	r2, #0
 8005f32:	4631      	mov	r1, r6
 8005f34:	2019      	movs	r0, #25
 8005f36:	f7ff fdd9 	bl	8005aec <SD_send_command>
      if (r1 != 0x00) {
 8005f3a:	bb48      	cbnz	r0, 8005f90 <SD_write_multi_block+0x84>
         return r1;
      }
      SD_CS_ENABLE();
 8005f3c:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <SD_write_multi_block+0xc8>)
      SPI_read_write_byte(0xff);
 8005f3e:	20ff      	movs	r0, #255	; 0xff
      SD_CS_ENABLE();
 8005f40:	68d3      	ldr	r3, [r2, #12]
 8005f42:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8005f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f4a:	60d3      	str	r3, [r2, #12]
      SPI_read_write_byte(0xff);
 8005f4c:	f7ff fda2 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xff);
 8005f50:	20ff      	movs	r0, #255	; 0xff
 8005f52:	f7ff fd9f 	bl	8005a94 <SPI_read_write_byte>
      do {
          SPI_read_write_byte(0xFC);
 8005f56:	20fc      	movs	r0, #252	; 0xfc
 8005f58:	f5a5 7600 	sub.w	r6, r5, #512	; 0x200
 8005f5c:	f7ff fd9a 	bl	8005a94 <SPI_read_write_byte>
          for (i=0;i<512;i++) {
              SPI_read_write_byte(*data++);
 8005f60:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005f64:	f7ff fd96 	bl	8005a94 <SPI_read_write_byte>
          for (i=0;i<512;i++) {
 8005f68:	42ae      	cmp	r6, r5
 8005f6a:	d1f9      	bne.n	8005f60 <SD_write_multi_block+0x54>
          }
          SPI_read_write_byte(0xff);
 8005f6c:	20ff      	movs	r0, #255	; 0xff
 8005f6e:	f7ff fd91 	bl	8005a94 <SPI_read_write_byte>
          SPI_read_write_byte(0xff);
 8005f72:	20ff      	movs	r0, #255	; 0xff
 8005f74:	f7ff fd8e 	bl	8005a94 <SPI_read_write_byte>
          r1 = SPI_read_write_byte(0xff);
 8005f78:	20ff      	movs	r0, #255	; 0xff
 8005f7a:	f7ff fd8b 	bl	8005a94 <SPI_read_write_byte>
          if ((r1 & 0x1F) != 0x05) {
 8005f7e:	f000 031f 	and.w	r3, r0, #31
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	d005      	beq.n	8005f92 <SD_write_multi_block+0x86>
             SD_CS_DISABLE();
             return r1;
          }
          if (SD_wait_ready() == 1) {
             SD_CS_DISABLE();
 8005f86:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <SD_write_multi_block+0xc8>)
 8005f88:	68d3      	ldr	r3, [r2, #12]
 8005f8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f8e:	60d3      	str	r3, [r2, #12]
         }
      }
      SD_CS_DISABLE();
      SPI_read_write_byte(0xff);
      return count;
}
 8005f90:	bd70      	pop	{r4, r5, r6, pc}
          if (SD_wait_ready() == 1) {
 8005f92:	f7ff fd9b 	bl	8005acc <SD_wait_ready>
 8005f96:	2801      	cmp	r0, #1
 8005f98:	d0f5      	beq.n	8005f86 <SD_write_multi_block+0x7a>
      } while (--count);
 8005f9a:	3c01      	subs	r4, #1
 8005f9c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8005fa0:	f506 7500 	add.w	r5, r6, #512	; 0x200
 8005fa4:	d1d7      	bne.n	8005f56 <SD_write_multi_block+0x4a>
      r1 = SPI_read_write_byte(0xFD);
 8005fa6:	20fd      	movs	r0, #253	; 0xfd
 8005fa8:	f7ff fd74 	bl	8005a94 <SPI_read_write_byte>
         count =  0xfe;
 8005fac:	2800      	cmp	r0, #0
 8005fae:	bf08      	it	eq
 8005fb0:	24fe      	moveq	r4, #254	; 0xfe
      if (SD_wait_ready()) {
 8005fb2:	f7ff fd8b 	bl	8005acc <SD_wait_ready>
 8005fb6:	b100      	cbz	r0, 8005fba <SD_write_multi_block+0xae>
         while (1) {
 8005fb8:	e7fe      	b.n	8005fb8 <SD_write_multi_block+0xac>
      SD_CS_DISABLE();
 8005fba:	4a06      	ldr	r2, [pc, #24]	; (8005fd4 <SD_write_multi_block+0xc8>)
      SPI_read_write_byte(0xff);
 8005fbc:	20ff      	movs	r0, #255	; 0xff
      SD_CS_DISABLE();
 8005fbe:	68d3      	ldr	r3, [r2, #12]
 8005fc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fc4:	60d3      	str	r3, [r2, #12]
      SPI_read_write_byte(0xff);
 8005fc6:	f7ff fd65 	bl	8005a94 <SPI_read_write_byte>
      return count;
 8005fca:	4620      	mov	r0, r4
 8005fcc:	e7e0      	b.n	8005f90 <SD_write_multi_block+0x84>
 8005fce:	bf00      	nop
 8005fd0:	20000a9e 	.word	0x20000a9e
 8005fd4:	40010c00 	.word	0x40010c00

08005fd8 <delay_ms>:
extern unsigned short f_kbps;


void delay_ms (unsigned short nms)
{
      wait_ms(nms);
 8005fd8:	f7fc b904 	b.w	80021e4 <wait_ms>

08005fdc <mp3_reset>:
      MP3_DCS_SET(1);
      delay_ms(20);
}

void mp3_reset (void)
{
 8005fdc:	b508      	push	{r3, lr}
      wait_ms(nms);
 8005fde:	2014      	movs	r0, #20
 8005fe0:	f7fc f900 	bl	80021e4 <wait_ms>
      delay_ms(20);
      SPI_read_write_byte(0xFF);
 8005fe4:	20ff      	movs	r0, #255	; 0xff
 8005fe6:	f7ff fd55 	bl	8005a94 <SPI_read_write_byte>
      MP3_DCS_SET(1);
 8005fea:	4b08      	ldr	r3, [pc, #32]	; (800600c <mp3_reset+0x30>)
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff2:	60da      	str	r2, [r3, #12]
      MP3_CCS_SET(1);
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ffa:	60da      	str	r2, [r3, #12]
      while ((GPIOC->IDR & MP3_DREQ) == 0);
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	0712      	lsls	r2, r2, #28
 8006000:	d5fc      	bpl.n	8005ffc <mp3_reset+0x20>
      delay_ms(20);
}
 8006002:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      wait_ms(nms);
 8006006:	2014      	movs	r0, #20
 8006008:	f7fc b8ec 	b.w	80021e4 <wait_ms>
 800600c:	40011000 	.word	0x40011000

08006010 <vs1003_cmd_write>:
      regvalue = vs1003_reg_read(SPI_HDAT0);
}


void vs1003_cmd_write (unsigned char address,unsigned short data)
{
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	4606      	mov	r6, r0
 8006014:	460d      	mov	r5, r1
      while((GPIOC->IDR & MP3_DREQ) == 0);
 8006016:	4c12      	ldr	r4, [pc, #72]	; (8006060 <vs1003_cmd_write+0x50>)
 8006018:	68a3      	ldr	r3, [r4, #8]
 800601a:	071b      	lsls	r3, r3, #28
 800601c:	d5fc      	bpl.n	8006018 <vs1003_cmd_write+0x8>
      SPI_set_speed(0);
 800601e:	2000      	movs	r0, #0
 8006020:	f7ff fd18 	bl	8005a54 <SPI_set_speed>
      MP3_DCS_SET(1);
 8006024:	68e3      	ldr	r3, [r4, #12]
      MP3_CCS_SET(0);
      SPI_read_write_byte(VS_WRITE_COMMAND);
 8006026:	2002      	movs	r0, #2
      MP3_DCS_SET(1);
 8006028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800602c:	60e3      	str	r3, [r4, #12]
      MP3_CCS_SET(0);
 800602e:	68e3      	ldr	r3, [r4, #12]
 8006030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006034:	60e3      	str	r3, [r4, #12]
      SPI_read_write_byte(VS_WRITE_COMMAND);
 8006036:	f7ff fd2d 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(address);
 800603a:	4630      	mov	r0, r6
 800603c:	f7ff fd2a 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(data >> 8);
 8006040:	0a28      	lsrs	r0, r5, #8
 8006042:	f7ff fd27 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(data);
 8006046:	b2e8      	uxtb	r0, r5
 8006048:	f7ff fd24 	bl	8005a94 <SPI_read_write_byte>
      MP3_CCS_SET(1);
 800604c:	68e3      	ldr	r3, [r4, #12]
      SPI_set_speed(1);
 800604e:	2001      	movs	r0, #1
      MP3_CCS_SET(1);
 8006050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006054:	60e3      	str	r3, [r4, #12]
}
 8006056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      SPI_set_speed(1);
 800605a:	f7ff bcfb 	b.w	8005a54 <SPI_set_speed>
 800605e:	bf00      	nop
 8006060:	40011000 	.word	0x40011000

08006064 <vs1003_reset_decode_time>:
{
 8006064:	b508      	push	{r3, lr}
      vs1003_cmd_write(SPI_DECODE_TIME,0x0000);
 8006066:	2100      	movs	r1, #0
 8006068:	2004      	movs	r0, #4
 800606a:	f7ff ffd1 	bl	8006010 <vs1003_cmd_write>
}
 800606e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      vs1003_cmd_write(SPI_DECODE_TIME,0x0000);
 8006072:	2100      	movs	r1, #0
 8006074:	2004      	movs	r0, #4
 8006076:	f7ff bfcb 	b.w	8006010 <vs1003_cmd_write>
	...

0800607c <vs1003_sine_test>:
{
 800607c:	b510      	push	{r4, lr}
      vs1003_cmd_write(0x0b,0x2020);
 800607e:	f242 0120 	movw	r1, #8224	; 0x2020
 8006082:	200b      	movs	r0, #11
 8006084:	f7ff ffc4 	bl	8006010 <vs1003_cmd_write>
      vs1003_cmd_write(SPI_MODE,0x0820);
 8006088:	f44f 6102 	mov.w	r1, #2080	; 0x820
 800608c:	2000      	movs	r0, #0
 800608e:	f7ff ffbf 	bl	8006010 <vs1003_cmd_write>
      while ((GPIOC->IDR & MP3_DREQ) == 0);
 8006092:	4c48      	ldr	r4, [pc, #288]	; (80061b4 <vs1003_sine_test+0x138>)
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	071b      	lsls	r3, r3, #28
 8006098:	d5fc      	bpl.n	8006094 <vs1003_sine_test+0x18>
      MP3_DCS_SET(0);
 800609a:	68e3      	ldr	r3, [r4, #12]
      SPI_read_write_byte(0x53);
 800609c:	2053      	movs	r0, #83	; 0x53
      MP3_DCS_SET(0);
 800609e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060a2:	60e3      	str	r3, [r4, #12]
      SPI_read_write_byte(0x53);
 80060a4:	f7ff fcf6 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xef);
 80060a8:	20ef      	movs	r0, #239	; 0xef
 80060aa:	f7ff fcf3 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x6e);
 80060ae:	206e      	movs	r0, #110	; 0x6e
 80060b0:	f7ff fcf0 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x24);
 80060b4:	2024      	movs	r0, #36	; 0x24
 80060b6:	f7ff fced 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 80060ba:	2000      	movs	r0, #0
 80060bc:	f7ff fcea 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 80060c0:	2000      	movs	r0, #0
 80060c2:	f7ff fce7 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 80060c6:	2000      	movs	r0, #0
 80060c8:	f7ff fce4 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 80060cc:	2000      	movs	r0, #0
 80060ce:	f7ff fce1 	bl	8005a94 <SPI_read_write_byte>
      wait_ms(nms);
 80060d2:	2064      	movs	r0, #100	; 0x64
 80060d4:	f7fc f886 	bl	80021e4 <wait_ms>
      MP3_DCS_SET(1);
 80060d8:	68e3      	ldr	r3, [r4, #12]
      SPI_read_write_byte(0x45);
 80060da:	2045      	movs	r0, #69	; 0x45
      MP3_DCS_SET(1);
 80060dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060e0:	60e3      	str	r3, [r4, #12]
      MP3_DCS_SET(0);
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e8:	60e3      	str	r3, [r4, #12]
      SPI_read_write_byte(0x45);
 80060ea:	f7ff fcd3 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x78);
 80060ee:	2078      	movs	r0, #120	; 0x78
 80060f0:	f7ff fcd0 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x69);
 80060f4:	2069      	movs	r0, #105	; 0x69
 80060f6:	f7ff fccd 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x74);
 80060fa:	2074      	movs	r0, #116	; 0x74
 80060fc:	f7ff fcca 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 8006100:	2000      	movs	r0, #0
 8006102:	f7ff fcc7 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 8006106:	2000      	movs	r0, #0
 8006108:	f7ff fcc4 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 800610c:	2000      	movs	r0, #0
 800610e:	f7ff fcc1 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 8006112:	2000      	movs	r0, #0
 8006114:	f7ff fcbe 	bl	8005a94 <SPI_read_write_byte>
      wait_ms(nms);
 8006118:	2064      	movs	r0, #100	; 0x64
 800611a:	f7fc f863 	bl	80021e4 <wait_ms>
      MP3_DCS_SET(1);
 800611e:	68e3      	ldr	r3, [r4, #12]
      SPI_read_write_byte(0x53);
 8006120:	2053      	movs	r0, #83	; 0x53
      MP3_DCS_SET(1);
 8006122:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006126:	60e3      	str	r3, [r4, #12]
      MP3_DCS_SET(0);
 8006128:	68e3      	ldr	r3, [r4, #12]
 800612a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800612e:	60e3      	str	r3, [r4, #12]
      SPI_read_write_byte(0x53);
 8006130:	f7ff fcb0 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xef);
 8006134:	20ef      	movs	r0, #239	; 0xef
 8006136:	f7ff fcad 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x6e);
 800613a:	206e      	movs	r0, #110	; 0x6e
 800613c:	f7ff fcaa 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x44);
 8006140:	2044      	movs	r0, #68	; 0x44
 8006142:	f7ff fca7 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 8006146:	2000      	movs	r0, #0
 8006148:	f7ff fca4 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 800614c:	2000      	movs	r0, #0
 800614e:	f7ff fca1 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 8006152:	2000      	movs	r0, #0
 8006154:	f7ff fc9e 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 8006158:	2000      	movs	r0, #0
 800615a:	f7ff fc9b 	bl	8005a94 <SPI_read_write_byte>
      wait_ms(nms);
 800615e:	2064      	movs	r0, #100	; 0x64
 8006160:	f7fc f840 	bl	80021e4 <wait_ms>
      MP3_DCS_SET(1);
 8006164:	68e3      	ldr	r3, [r4, #12]
      SPI_read_write_byte(0x45);
 8006166:	2045      	movs	r0, #69	; 0x45
      MP3_DCS_SET(1);
 8006168:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800616c:	60e3      	str	r3, [r4, #12]
      MP3_DCS_SET(0);
 800616e:	68e3      	ldr	r3, [r4, #12]
 8006170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006174:	60e3      	str	r3, [r4, #12]
      SPI_read_write_byte(0x45);
 8006176:	f7ff fc8d 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x78);
 800617a:	2078      	movs	r0, #120	; 0x78
 800617c:	f7ff fc8a 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x69);
 8006180:	2069      	movs	r0, #105	; 0x69
 8006182:	f7ff fc87 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x74);
 8006186:	2074      	movs	r0, #116	; 0x74
 8006188:	f7ff fc84 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 800618c:	2000      	movs	r0, #0
 800618e:	f7ff fc81 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 8006192:	2000      	movs	r0, #0
 8006194:	f7ff fc7e 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 8006198:	2000      	movs	r0, #0
 800619a:	f7ff fc7b 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0x00);
 800619e:	2000      	movs	r0, #0
 80061a0:	f7ff fc78 	bl	8005a94 <SPI_read_write_byte>
      wait_ms(nms);
 80061a4:	2064      	movs	r0, #100	; 0x64
 80061a6:	f7fc f81d 	bl	80021e4 <wait_ms>
      MP3_DCS_SET(1);
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061b0:	60e3      	str	r3, [r4, #12]
}
 80061b2:	bd10      	pop	{r4, pc}
 80061b4:	40011000 	.word	0x40011000

080061b8 <vs1003_reg_read>:


unsigned short vs1003_reg_read (unsigned char address)
{
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4604      	mov	r4, r0
      unsigned short temp = 0;
      while((GPIOC->IDR & MP3_DREQ) == 0);
 80061bc:	4d14      	ldr	r5, [pc, #80]	; (8006210 <vs1003_reg_read+0x58>)
 80061be:	68ab      	ldr	r3, [r5, #8]
 80061c0:	071b      	lsls	r3, r3, #28
 80061c2:	d5fc      	bpl.n	80061be <vs1003_reg_read+0x6>
      SPI_set_speed(0);
 80061c4:	2000      	movs	r0, #0
 80061c6:	f7ff fc45 	bl	8005a54 <SPI_set_speed>
      MP3_DCS_SET(1);
 80061ca:	68eb      	ldr	r3, [r5, #12]
      MP3_CCS_SET(0);
      SPI_read_write_byte(VS_READ_COMMAND);
 80061cc:	2003      	movs	r0, #3
      MP3_DCS_SET(1);
 80061ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061d2:	60eb      	str	r3, [r5, #12]
      MP3_CCS_SET(0);
 80061d4:	68eb      	ldr	r3, [r5, #12]
 80061d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061da:	60eb      	str	r3, [r5, #12]
      SPI_read_write_byte(VS_READ_COMMAND);
 80061dc:	f7ff fc5a 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(address);
 80061e0:	4620      	mov	r0, r4
 80061e2:	f7ff fc57 	bl	8005a94 <SPI_read_write_byte>
      temp = SPI_read_write_byte(0xff);
 80061e6:	20ff      	movs	r0, #255	; 0xff
 80061e8:	f7ff fc54 	bl	8005a94 <SPI_read_write_byte>
      temp = temp << 8;
 80061ec:	0204      	lsls	r4, r0, #8
      temp |= SPI_read_write_byte(0xff);
 80061ee:	20ff      	movs	r0, #255	; 0xff
 80061f0:	f7ff fc50 	bl	8005a94 <SPI_read_write_byte>
      MP3_CCS_SET(1);
 80061f4:	68eb      	ldr	r3, [r5, #12]
      temp = temp << 8;
 80061f6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
      MP3_CCS_SET(1);
 80061fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      temp |= SPI_read_write_byte(0xff);
 80061fe:	4304      	orrs	r4, r0
 8006200:	b2a4      	uxth	r4, r4
      SPI_set_speed(1);
 8006202:	2001      	movs	r0, #1
      MP3_CCS_SET(1);
 8006204:	60eb      	str	r3, [r5, #12]
      SPI_set_speed(1);
 8006206:	f7ff fc25 	bl	8005a54 <SPI_set_speed>
      return temp;
}
 800620a:	4620      	mov	r0, r4
 800620c:	bd38      	pop	{r3, r4, r5, pc}
 800620e:	bf00      	nop
 8006210:	40011000 	.word	0x40011000

08006214 <vs1003_soft_reset>:
      while ((GPIOC->IDR & MP3_DREQ) == 0);
 8006214:	4b30      	ldr	r3, [pc, #192]	; (80062d8 <vs1003_soft_reset+0xc4>)
{
 8006216:	b570      	push	{r4, r5, r6, lr}
 8006218:	461c      	mov	r4, r3
      while ((GPIOC->IDR & MP3_DREQ) == 0);
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	0712      	lsls	r2, r2, #28
 800621e:	d5fc      	bpl.n	800621a <vs1003_soft_reset+0x6>
      SPI_read_write_byte(0xff);
 8006220:	20ff      	movs	r0, #255	; 0xff
 8006222:	f7ff fc37 	bl	8005a94 <SPI_read_write_byte>
      while (vs1003_reg_read(0) != 0x0804) {
 8006226:	2565      	movs	r5, #101	; 0x65
 8006228:	f640 0604 	movw	r6, #2052	; 0x804
 800622c:	2000      	movs	r0, #0
 800622e:	f7ff ffc3 	bl	80061b8 <vs1003_reg_read>
 8006232:	42b0      	cmp	r0, r6
 8006234:	d00b      	beq.n	800624e <vs1003_soft_reset+0x3a>
	    vs1003_cmd_write(SPI_MODE,0x0804);
 8006236:	f640 0104 	movw	r1, #2052	; 0x804
 800623a:	2000      	movs	r0, #0
 800623c:	f7ff fee8 	bl	8006010 <vs1003_cmd_write>
      wait_ms(nms);
 8006240:	3d01      	subs	r5, #1
 8006242:	2002      	movs	r0, #2
 8006244:	f7fb ffce 	bl	80021e4 <wait_ms>
	    if(retry > 100) break;
 8006248:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800624c:	d1ee      	bne.n	800622c <vs1003_soft_reset+0x18>
      while ((GPIOC->IDR & MP3_DREQ) == 0);
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	071b      	lsls	r3, r3, #28
 8006252:	d5fc      	bpl.n	800624e <vs1003_soft_reset+0x3a>
 8006254:	2565      	movs	r5, #101	; 0x65
      while (vs1003_reg_read(SPI_CLOCKF) != 0x9800) {
 8006256:	2003      	movs	r0, #3
 8006258:	f7ff ffae 	bl	80061b8 <vs1003_reg_read>
 800625c:	f5b0 4f18 	cmp.w	r0, #38912	; 0x9800
 8006260:	d008      	beq.n	8006274 <vs1003_soft_reset+0x60>
	    vs1003_cmd_write(SPI_CLOCKF,0x9800);
 8006262:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8006266:	2003      	movs	r0, #3
 8006268:	3d01      	subs	r5, #1
 800626a:	f7ff fed1 	bl	8006010 <vs1003_cmd_write>
	    if (retry > 100) break;
 800626e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8006272:	d1f0      	bne.n	8006256 <vs1003_soft_reset+0x42>
 8006274:	2565      	movs	r5, #101	; 0x65
      while (vs1003_reg_read(SPI_AUDATA) != 0xBB81) {
 8006276:	f64b 3681 	movw	r6, #48001	; 0xbb81
 800627a:	2005      	movs	r0, #5
 800627c:	f7ff ff9c 	bl	80061b8 <vs1003_reg_read>
 8006280:	42b0      	cmp	r0, r6
 8006282:	d008      	beq.n	8006296 <vs1003_soft_reset+0x82>
	    vs1003_cmd_write(SPI_AUDATA,0xBB81);
 8006284:	f64b 3181 	movw	r1, #48001	; 0xbb81
 8006288:	2005      	movs	r0, #5
 800628a:	3d01      	subs	r5, #1
 800628c:	f7ff fec0 	bl	8006010 <vs1003_cmd_write>
	    if (retry > 100) break;
 8006290:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8006294:	d1f1      	bne.n	800627a <vs1003_soft_reset+0x66>
      vs1003_cmd_write(11,0x2020);
 8006296:	f242 0120 	movw	r1, #8224	; 0x2020
 800629a:	200b      	movs	r0, #11
 800629c:	f7ff feb8 	bl	8006010 <vs1003_cmd_write>
      vs1003_reset_decode_time();
 80062a0:	f7ff fee0 	bl	8006064 <vs1003_reset_decode_time>
      MP3_DCS_SET(0);
 80062a4:	68e3      	ldr	r3, [r4, #12]
      SPI_read_write_byte(0xFF);
 80062a6:	20ff      	movs	r0, #255	; 0xff
      MP3_DCS_SET(0);
 80062a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062ac:	60e3      	str	r3, [r4, #12]
      SPI_read_write_byte(0xFF);
 80062ae:	f7ff fbf1 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xFF);
 80062b2:	20ff      	movs	r0, #255	; 0xff
 80062b4:	f7ff fbee 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xFF);
 80062b8:	20ff      	movs	r0, #255	; 0xff
 80062ba:	f7ff fbeb 	bl	8005a94 <SPI_read_write_byte>
      SPI_read_write_byte(0xFF);
 80062be:	20ff      	movs	r0, #255	; 0xff
 80062c0:	f7ff fbe8 	bl	8005a94 <SPI_read_write_byte>
      MP3_DCS_SET(1);
 80062c4:	68e3      	ldr	r3, [r4, #12]
      wait_ms(nms);
 80062c6:	2014      	movs	r0, #20
      MP3_DCS_SET(1);
 80062c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062cc:	60e3      	str	r3, [r4, #12]
}
 80062ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      wait_ms(nms);
 80062d2:	f7fb bf87 	b.w	80021e4 <wait_ms>
 80062d6:	bf00      	nop
 80062d8:	40011000 	.word	0x40011000

080062dc <get_head_info>:


unsigned short get_head_info (void)
{
 80062dc:	b510      	push	{r4, lr}
      unsigned int HEAD0;
      unsigned int HEAD1;
      HEAD0 = vs1003_reg_read(SPI_HDAT0);
 80062de:	2008      	movs	r0, #8
 80062e0:	f7ff ff6a 	bl	80061b8 <vs1003_reg_read>
 80062e4:	4604      	mov	r4, r0
      HEAD1 = vs1003_reg_read(SPI_HDAT1);
 80062e6:	2009      	movs	r0, #9
 80062e8:	f7ff ff66 	bl	80061b8 <vs1003_reg_read>
      switch (HEAD1) {
 80062ec:	f245 734d 	movw	r3, #22349	; 0x574d
 80062f0:	4298      	cmp	r0, r3
 80062f2:	d009      	beq.n	8006308 <get_head_info+0x2c>
 80062f4:	f247 6365 	movw	r3, #30309	; 0x7665
 80062f8:	4298      	cmp	r0, r3
 80062fa:	d020      	beq.n	800633e <get_head_info+0x62>
 80062fc:	f644 5354 	movw	r3, #19796	; 0x4d54
 8006300:	4298      	cmp	r0, r3
 8006302:	d110      	bne.n	8006326 <get_head_info+0x4a>
 8006304:	2001      	movs	r0, #1
 8006306:	e00d      	b.n	8006324 <get_head_info+0x48>
           return 0;
         case 0x4D54:
           return 1;
         case 0x574D:
         {
           HEAD1 = HEAD0 * 2 / 25;
 8006308:	2019      	movs	r0, #25
 800630a:	0064      	lsls	r4, r4, #1
 800630c:	fbb4 f4f0 	udiv	r4, r4, r0
           if ((HEAD1 % 10) > 5) return HEAD1 / 10 + 1;else return HEAD1 / 10;
 8006310:	220a      	movs	r2, #10
 8006312:	fbb4 f3f2 	udiv	r3, r4, r2
 8006316:	fb02 4413 	mls	r4, r2, r3, r4
 800631a:	2c05      	cmp	r4, #5
 800631c:	b298      	uxth	r0, r3
 800631e:	d901      	bls.n	8006324 <get_head_info+0x48>
 8006320:	3001      	adds	r0, #1
 8006322:	b280      	uxth	r0, r0
           HEAD1 = HEAD1 & 0x03;
           if (HEAD1 == 3) HEAD1 = 1;else HEAD1 = 0;
           return bitrate[HEAD1][HEAD0 >> 12];
         }
      }
}
 8006324:	bd10      	pop	{r4, pc}
           HEAD1 = HEAD1 & 0x03;
 8006326:	f3c0 03c1 	ubfx	r3, r0, #3, #2
           if (HEAD1 == 3) HEAD1 = 1;else HEAD1 = 0;
 800632a:	1eda      	subs	r2, r3, #3
 800632c:	4253      	negs	r3, r2
 800632e:	4153      	adcs	r3, r2
           return bitrate[HEAD1][HEAD0 >> 12];
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	eb03 3014 	add.w	r0, r3, r4, lsr #12
 8006336:	4b03      	ldr	r3, [pc, #12]	; (8006344 <get_head_info+0x68>)
 8006338:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800633c:	e7f2      	b.n	8006324 <get_head_info+0x48>
           return 0;
 800633e:	2000      	movs	r0, #0
 8006340:	e7f0      	b.n	8006324 <get_head_info+0x48>
 8006342:	bf00      	nop
 8006344:	08011cb6 	.word	0x08011cb6

08006348 <vs1003_get_mp3info>:


void vs1003_get_mp3info (void)
{
 8006348:	b570      	push	{r4, r5, r6, lr}
      unsigned short temp = 0;
      unsigned char mp3_id,sample_rate,bit_rate;
      temp = vs1003_reg_read(SPI_HDAT1);
 800634a:	2009      	movs	r0, #9
 800634c:	f7ff ff34 	bl	80061b8 <vs1003_reg_read>
      mp3_id = (unsigned char)((temp & 0x0018) >> 3);
 8006350:	f3c0 06c7 	ubfx	r6, r0, #3, #8
      temp = vs1003_reg_read(SPI_HDAT0);
 8006354:	2008      	movs	r0, #8
 8006356:	f7ff ff2f 	bl	80061b8 <vs1003_reg_read>
 800635a:	4605      	mov	r5, r0
      sample_rate = (unsigned char)((temp & 0x0C00) >> 10);
      bit_rate = (unsigned char)((temp & 0xF000) >> 12);
      f_kbps = get_head_info();
 800635c:	f7ff ffbe 	bl	80062dc <get_head_info>
 8006360:	4c42      	ldr	r4, [pc, #264]	; (800646c <vs1003_get_mp3info+0x124>)
      if (mp3_id == 0 || mp3_id == 1) {
 8006362:	07b3      	lsls	r3, r6, #30
      f_kbps = get_head_info();
 8006364:	8020      	strh	r0, [r4, #0]
      if (mp3_id == 0 || mp3_id == 1) {
 8006366:	d516      	bpl.n	8006396 <vs1003_get_mp3info+0x4e>
      mp3_id = (unsigned char)((temp & 0x0018) >> 3);
 8006368:	f006 0603 	and.w	r6, r6, #3
              break;
            case 2:
              //lcd_printf(2,4,"Sample_Rate  8KHz  ");
              break;
         }
      } else if (mp3_id == 2) {
 800636c:	2e02      	cmp	r6, #2
 800636e:	d012      	beq.n	8006396 <vs1003_get_mp3info+0x4e>
              break;
            case 2:
              //lcd_printf(2,4,"Sample_Rate 16KHz  ");
              break;
         }
      } else if (mp3_id == 3) {
 8006370:	2e03      	cmp	r6, #3
      bit_rate = (unsigned char)((temp & 0xF000) >> 12);
 8006372:	f3c5 3307 	ubfx	r3, r5, #12, #8
      } else if (mp3_id == 3) {
 8006376:	d127      	bne.n	80063c8 <vs1003_get_mp3info+0x80>
              break;
            case 2:
              //lcd_printf(2,4,"Sample_Rate 32KHz  ");
              break;
         }
         switch (bit_rate) {
 8006378:	3b02      	subs	r3, #2
 800637a:	2b0c      	cmp	r3, #12
 800637c:	d80b      	bhi.n	8006396 <vs1003_get_mp3info+0x4e>
 800637e:	e8df f003 	tbb	[pc, r3]
 8006382:	5551      	.short	0x5551
 8006384:	65615d59 	.word	0x65615d59
 8006388:	0b710769 	.word	0x0b710769
 800638c:	1915      	.short	0x1915
 800638e:	1e          	.byte	0x1e
 800638f:	00          	.byte	0x00
              //lcd_printf(2,5,"Bit_Rate 112Kbps ");
              if (f_kbps == 0) f_kbps = 112;
              break;
            case 9:
              //lcd_printf(2,5,"Bit_Rate 128Kbps ");
              if (f_kbps == 0) f_kbps = 128;
 8006390:	b908      	cbnz	r0, 8006396 <vs1003_get_mp3info+0x4e>
 8006392:	2380      	movs	r3, #128	; 0x80
               //lcd_printf(2,5,"Bit_Rate 144Kbps ");
               if (f_kbps == 0) f_kbps = 144;
               break;
             case 14:
               //lcd_printf(2,5,"Bit_Rate 160Kbps ");
               if (f_kbps == 0) f_kbps = 160;
 8006394:	8023      	strh	r3, [r4, #0]
               break;
         }
      }
}
 8006396:	bd70      	pop	{r4, r5, r6, pc}
              lcd_printf(2,5,"Bit_Rate 192Kbps ");
 8006398:	2105      	movs	r1, #5
 800639a:	2002      	movs	r0, #2
 800639c:	4a34      	ldr	r2, [pc, #208]	; (8006470 <vs1003_get_mp3info+0x128>)
 800639e:	f7fe f943 	bl	8004628 <lcd_printf>
              if (f_kbps == 0) f_kbps = 192;
 80063a2:	8823      	ldrh	r3, [r4, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1f6      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 80063a8:	23c0      	movs	r3, #192	; 0xc0
 80063aa:	e7f3      	b.n	8006394 <vs1003_get_mp3info+0x4c>
              if (f_kbps == 0) f_kbps = 224;
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d1f2      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 80063b0:	23e0      	movs	r3, #224	; 0xe0
 80063b2:	e7ef      	b.n	8006394 <vs1003_get_mp3info+0x4c>
              if (f_kbps == 0) f_kbps = 256;
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d1ee      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 80063b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063bc:	e7ea      	b.n	8006394 <vs1003_get_mp3info+0x4c>
              if (f_kbps == 0) f_kbps = 320;
 80063be:	2800      	cmp	r0, #0
 80063c0:	d1e9      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 80063c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80063c6:	e7e5      	b.n	8006394 <vs1003_get_mp3info+0x4c>
         switch (bit_rate) {
 80063c8:	3b01      	subs	r3, #1
 80063ca:	2b0d      	cmp	r3, #13
 80063cc:	d8e3      	bhi.n	8006396 <vs1003_get_mp3info+0x4e>
 80063ce:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <vs1003_get_mp3info+0x8c>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	0800640d 	.word	0x0800640d
 80063d8:	08006415 	.word	0x08006415
 80063dc:	0800641d 	.word	0x0800641d
 80063e0:	08006397 	.word	0x08006397
 80063e4:	08006425 	.word	0x08006425
 80063e8:	0800642d 	.word	0x0800642d
 80063ec:	08006435 	.word	0x08006435
 80063f0:	0800643d 	.word	0x0800643d
 80063f4:	08006445 	.word	0x08006445
 80063f8:	0800644d 	.word	0x0800644d
 80063fc:	08006455 	.word	0x08006455
 8006400:	08006397 	.word	0x08006397
 8006404:	0800645d 	.word	0x0800645d
 8006408:	08006465 	.word	0x08006465
               if (f_kbps == 0) f_kbps = 8;
 800640c:	2800      	cmp	r0, #0
 800640e:	d1c2      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006410:	2308      	movs	r3, #8
 8006412:	e7bf      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 16;
 8006414:	2800      	cmp	r0, #0
 8006416:	d1be      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006418:	2310      	movs	r3, #16
 800641a:	e7bb      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 24;
 800641c:	2800      	cmp	r0, #0
 800641e:	d1ba      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006420:	2318      	movs	r3, #24
 8006422:	e7b7      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 40;
 8006424:	2800      	cmp	r0, #0
 8006426:	d1b6      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006428:	2328      	movs	r3, #40	; 0x28
 800642a:	e7b3      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 48;
 800642c:	2800      	cmp	r0, #0
 800642e:	d1b2      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006430:	2330      	movs	r3, #48	; 0x30
 8006432:	e7af      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 56;
 8006434:	2800      	cmp	r0, #0
 8006436:	d1ae      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006438:	2338      	movs	r3, #56	; 0x38
 800643a:	e7ab      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 64;
 800643c:	2800      	cmp	r0, #0
 800643e:	d1aa      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006440:	2340      	movs	r3, #64	; 0x40
 8006442:	e7a7      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 80;
 8006444:	2800      	cmp	r0, #0
 8006446:	d1a6      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006448:	2350      	movs	r3, #80	; 0x50
 800644a:	e7a3      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 96;
 800644c:	2800      	cmp	r0, #0
 800644e:	d1a2      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006450:	2360      	movs	r3, #96	; 0x60
 8006452:	e79f      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 112;
 8006454:	2800      	cmp	r0, #0
 8006456:	d19e      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006458:	2370      	movs	r3, #112	; 0x70
 800645a:	e79b      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 144;
 800645c:	2800      	cmp	r0, #0
 800645e:	d19a      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006460:	2390      	movs	r3, #144	; 0x90
 8006462:	e797      	b.n	8006394 <vs1003_get_mp3info+0x4c>
               if (f_kbps == 0) f_kbps = 160;
 8006464:	2800      	cmp	r0, #0
 8006466:	d196      	bne.n	8006396 <vs1003_get_mp3info+0x4e>
 8006468:	23a0      	movs	r3, #160	; 0xa0
 800646a:	e793      	b.n	8006394 <vs1003_get_mp3info+0x4c>
 800646c:	2000000a 	.word	0x2000000a
 8006470:	080118f5 	.word	0x080118f5

08006474 <get_decode_time>:


unsigned short get_decode_time (void)
{
      return vs1003_reg_read(SPI_DECODE_TIME);
 8006474:	2004      	movs	r0, #4
 8006476:	f7ff be9f 	b.w	80061b8 <vs1003_reg_read>
	...

0800647c <load_patch>:
}


void load_patch (void)
{
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	f240 34af 	movw	r4, #943	; 0x3af
 8006482:	4d08      	ldr	r5, [pc, #32]	; (80064a4 <load_patch+0x28>)
 8006484:	4e08      	ldr	r6, [pc, #32]	; (80064a8 <load_patch+0x2c>)
      unsigned short idx;
      for (idx=0;idx<943;idx++) vs1003_cmd_write(atab[idx],dtab[idx]);
 8006486:	3c01      	subs	r4, #1
 8006488:	f836 1b02 	ldrh.w	r1, [r6], #2
 800648c:	f815 0b01 	ldrb.w	r0, [r5], #1
 8006490:	b2a4      	uxth	r4, r4
 8006492:	f7ff fdbd 	bl	8006010 <vs1003_cmd_write>
 8006496:	2c00      	cmp	r4, #0
 8006498:	d1f5      	bne.n	8006486 <load_patch+0xa>
      wait_ms(nms);
 800649a:	200a      	movs	r0, #10
      delay_ms(10);
}
 800649c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      wait_ms(nms);
 80064a0:	f7fb bea0 	b.w	80021e4 <wait_ms>
 80064a4:	08011907 	.word	0x08011907
 80064a8:	08011cf6 	.word	0x08011cf6

080064ac <set_vs1003>:
      }
}


void set_vs1003 (void)
{
 80064ac:	b510      	push	{r4, lr}
      unsigned char t;
      unsigned short bass = 0;
      unsigned short volt = 0;
      unsigned char vset = 0;
      vset = 255 - vs1003_ram[4];
 80064ae:	4a0d      	ldr	r2, [pc, #52]	; (80064e4 <set_vs1003+0x38>)
      volt = vset;
      volt <<= 8;
      volt += vset;
 80064b0:	2304      	movs	r3, #4
      vset = 255 - vs1003_ram[4];
 80064b2:	7911      	ldrb	r1, [r2, #4]
 80064b4:	43c9      	mvns	r1, r1
      volt = vset;
 80064b6:	b2c9      	uxtb	r1, r1
      volt += vset;
 80064b8:	eb01 2101 	add.w	r1, r1, r1, lsl #8
 80064bc:	b28c      	uxth	r4, r1
      unsigned short bass = 0;
 80064be:	2100      	movs	r1, #0
      for (t=0;t<4;t++) {
          bass <<= 4;
          bass += vs1003_ram[t];
 80064c0:	f812 0b01 	ldrb.w	r0, [r2], #1
 80064c4:	3b01      	subs	r3, #1
 80064c6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
      for (t=0;t<4;t++) {
 80064ca:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
          bass += vs1003_ram[t];
 80064ce:	b289      	uxth	r1, r1
      for (t=0;t<4;t++) {
 80064d0:	d1f6      	bne.n	80064c0 <set_vs1003+0x14>
      }
      vs1003_cmd_write(SPI_BASS,bass);
 80064d2:	2002      	movs	r0, #2
 80064d4:	f7ff fd9c 	bl	8006010 <vs1003_cmd_write>
      vs1003_cmd_write(SPI_VOL,volt);
 80064d8:	4621      	mov	r1, r4
}
 80064da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      vs1003_cmd_write(SPI_VOL,volt);
 80064de:	200b      	movs	r0, #11
 80064e0:	f7ff bd96 	b.w	8006010 <vs1003_cmd_write>
 80064e4:	20000004 	.word	0x20000004

080064e8 <vs1003_set_volume>:
void vs1003_set_volume (unsigned short volume)
{
      unsigned short volt = 0;
      volt = volume;
      volt <<= 8;
      volt += volume;
 80064e8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
      vs1003_cmd_write(SPI_VOL,volt);
 80064ec:	b281      	uxth	r1, r0
 80064ee:	200b      	movs	r0, #11
 80064f0:	f7ff bd8e 	b.w	8006010 <vs1003_cmd_write>

080064f4 <vs1003_init>:
}


void vs1003_init (void)
{
 80064f4:	b510      	push	{r4, lr}
      GPIO_Init_Pin(GPIOC,GPIO_Pin_3,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 80064f6:	4c0f      	ldr	r4, [pc, #60]	; (8006534 <vs1003_init+0x40>)
 80064f8:	2348      	movs	r3, #72	; 0x48
 80064fa:	2203      	movs	r2, #3
 80064fc:	2108      	movs	r1, #8
 80064fe:	4620      	mov	r0, r4
 8006500:	f001 f860 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOC,GPIO_Pin_10,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8006504:	2310      	movs	r3, #16
 8006506:	2203      	movs	r2, #3
 8006508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800650c:	4620      	mov	r0, r4
 800650e:	f001 f859 	bl	80075c4 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOC,GPIO_Pin_11,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 8006512:	2310      	movs	r3, #16
 8006514:	2203      	movs	r2, #3
 8006516:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800651a:	4620      	mov	r0, r4
 800651c:	f001 f852 	bl	80075c4 <GPIO_Init_Pin>
      MP3_DCS_SET(1);
 8006520:	68e3      	ldr	r3, [r4, #12]
 8006522:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006526:	60e3      	str	r3, [r4, #12]
      MP3_CCS_SET(1);
 8006528:	68e3      	ldr	r3, [r4, #12]
 800652a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800652e:	60e3      	str	r3, [r4, #12]
}
 8006530:	bd10      	pop	{r4, pc}
 8006532:	bf00      	nop
 8006534:	40011000 	.word	0x40011000

08006538 <vs1003_data_write>:

void vs1003_data_write (unsigned char * buff)
{
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	4605      	mov	r5, r0
      unsigned char n = 32;
      MP3_DCS_SET(0);;
 800653c:	4c0b      	ldr	r4, [pc, #44]	; (800656c <vs1003_data_write+0x34>)
 800653e:	f100 0620 	add.w	r6, r0, #32
 8006542:	68e3      	ldr	r3, [r4, #12]
 8006544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006548:	60e3      	str	r3, [r4, #12]
      while (n--) {
 800654a:	42b5      	cmp	r5, r6
 800654c:	d108      	bne.n	8006560 <vs1003_data_write+0x28>
	    SPI_read_write_byte(*buff++);
      }
      MP3_DCS_SET(1);
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006554:	60e3      	str	r3, [r4, #12]
      MP3_CCS_SET(1);
 8006556:	68e3      	ldr	r3, [r4, #12]
 8006558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800655c:	60e3      	str	r3, [r4, #12]
}
 800655e:	bd70      	pop	{r4, r5, r6, pc}
	    SPI_read_write_byte(*buff++);
 8006560:	f815 0b01 	ldrb.w	r0, [r5], #1
 8006564:	f7ff fa96 	bl	8005a94 <SPI_read_write_byte>
 8006568:	e7ef      	b.n	800654a <vs1003_data_write+0x12>
 800656a:	bf00      	nop
 800656c:	40011000 	.word	0x40011000

08006570 <dec2hex>:
}


char dec2hex (const char ch)
{
      if (ch <= 9) return (ch + '0');
 8006570:	2809      	cmp	r0, #9
 8006572:	d802      	bhi.n	800657a <dec2hex+0xa>
 8006574:	3030      	adds	r0, #48	; 0x30
      if (ch >= 10 && ch <= 15) return (ch + 'A' - 10);
 8006576:	b2c0      	uxtb	r0, r0
 8006578:	4770      	bx	lr
 800657a:	f1a0 030a 	sub.w	r3, r0, #10
 800657e:	2b05      	cmp	r3, #5
 8006580:	d801      	bhi.n	8006586 <dec2hex+0x16>
 8006582:	3037      	adds	r0, #55	; 0x37
 8006584:	e7f7      	b.n	8006576 <dec2hex+0x6>
      return 0;
 8006586:	2000      	movs	r0, #0
}
 8006588:	4770      	bx	lr
	...

0800658c <mp3_prog_bar>:
{
      static unsigned short playtime = 0;
      char dig0,dig1,dig2,dig3;
      unsigned short time = 0;
      char buff[32];
      if (f_kbps == 0xffff) {
 800658c:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8006590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      if (f_kbps == 0xffff) {
 8006594:	4e77      	ldr	r6, [pc, #476]	; (8006774 <mp3_prog_bar+0x1e8>)
{
 8006596:	4605      	mov	r5, r0
      if (f_kbps == 0xffff) {
 8006598:	8832      	ldrh	r2, [r6, #0]
{
 800659a:	460c      	mov	r4, r1
      if (f_kbps == 0xffff) {
 800659c:	429a      	cmp	r2, r3
{
 800659e:	b089      	sub	sp, #36	; 0x24
      if (f_kbps == 0xffff) {
 80065a0:	d105      	bne.n	80065ae <mp3_prog_bar+0x22>
	 playtime = 0;
 80065a2:	2200      	movs	r2, #0
 80065a4:	4b74      	ldr	r3, [pc, #464]	; (8006778 <mp3_prog_bar+0x1ec>)
 80065a6:	801a      	strh	r2, [r3, #0]
	 f_kbps = get_head_info();
 80065a8:	f7ff fe98 	bl	80062dc <get_head_info>
 80065ac:	8030      	strh	r0, [r6, #0]
      }
      if (lenth) {
 80065ae:	2c00      	cmp	r4, #0
 80065b0:	f000 80d0 	beq.w	8006754 <mp3_prog_bar+0x1c8>
	 propos = (float)pos / lenth;
 80065b4:	4620      	mov	r0, r4
 80065b6:	f006 f995 	bl	800c8e4 <__aeabi_ui2f>
 80065ba:	4607      	mov	r7, r0
 80065bc:	4628      	mov	r0, r5
 80065be:	f006 f991 	bl	800c8e4 <__aeabi_ui2f>
	 if (propos > 1) propos = 1;
 80065c2:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
	 propos = (float)pos / lenth;
 80065c6:	4639      	mov	r1, r7
 80065c8:	f006 fa98 	bl	800cafc <__aeabi_fdiv>
	 if (propos > 1) propos = 1;
 80065cc:	4649      	mov	r1, r9
	 propos = (float)pos / lenth;
 80065ce:	4680      	mov	r8, r0
	 if (propos > 1) propos = 1;
 80065d0:	f006 fb9c 	bl	800cd0c <__aeabi_fcmpgt>
 80065d4:	4d69      	ldr	r5, [pc, #420]	; (800677c <mp3_prog_bar+0x1f0>)
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f040 80ac 	bne.w	8006734 <mp3_prog_bar+0x1a8>
	 propos = (float)pos / lenth;
 80065dc:	f8c5 8000 	str.w	r8, [r5]
      } else {
      	 return;
      }
      if (f_kbps) {
 80065e0:	8833      	ldrh	r3, [r6, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 80a9 	beq.w	800673a <mp3_prog_bar+0x1ae>
	 time = (lenth / f_kbps) / 125;
 80065e8:	fbb4 f3f3 	udiv	r3, r4, r3
 80065ec:	207d      	movs	r0, #125	; 0x7d
 80065ee:	fbb3 f0f0 	udiv	r0, r3, r0
	 time = propos * time;
 80065f2:	b280      	uxth	r0, r0
 80065f4:	f006 f97a 	bl	800c8ec <__aeabi_i2f>
 80065f8:	6829      	ldr	r1, [r5, #0]
 80065fa:	f006 f9cb 	bl	800c994 <__aeabi_fmul>
 80065fe:	f006 fb8f 	bl	800cd20 <__aeabi_f2uiz>
 8006602:	b280      	uxth	r0, r0
      } else {
         time = get_decode_time();
      }
      if (time != playtime) {
 8006604:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8006778 <mp3_prog_bar+0x1ec>
 8006608:	f8b8 3000 	ldrh.w	r3, [r8]
 800660c:	4283      	cmp	r3, r0
 800660e:	f000 80a1 	beq.w	8006754 <mp3_prog_bar+0x1c8>
	 time = (((float)lenth / f_kbps) / 125) * propos;
 8006612:	8830      	ldrh	r0, [r6, #0]
 8006614:	f006 f96a 	bl	800c8ec <__aeabi_i2f>
 8006618:	4601      	mov	r1, r0
 800661a:	4638      	mov	r0, r7
 800661c:	f006 fa6e 	bl	800cafc <__aeabi_fdiv>
 8006620:	4957      	ldr	r1, [pc, #348]	; (8006780 <mp3_prog_bar+0x1f4>)
 8006622:	f006 fa6b 	bl	800cafc <__aeabi_fdiv>
 8006626:	6829      	ldr	r1, [r5, #0]
 8006628:	f006 f9b4 	bl	800c994 <__aeabi_fmul>
 800662c:	f006 fb78 	bl	800cd20 <__aeabi_f2uiz>
 8006630:	f640 630f 	movw	r3, #3599	; 0xe0f
 8006634:	b280      	uxth	r0, r0
	 playtime = time;
 8006636:	4298      	cmp	r0, r3
 8006638:	f8a8 0000 	strh.w	r0, [r8]
	    //lput_char_xy(2,2,"PLAY ");
	 }
	 if (time >= 3600) time = 3599;
	 dig3 = (time / 600);
	 dig2 = ((time / 60) % 10);
	 dig1 = ((time % 60) / 10);
 800663c:	f04f 023c 	mov.w	r2, #60	; 0x3c
 8006640:	bf28      	it	cs
 8006642:	4618      	movcs	r0, r3
	 dig3 = (time / 600);
 8006644:	f44f 7316 	mov.w	r3, #600	; 0x258
	 dig1 = ((time % 60) / 10);
 8006648:	fbb0 f1f2 	udiv	r1, r0, r2
 800664c:	fb02 0211 	mls	r2, r2, r1, r0
	 dig3 = (time / 600);
 8006650:	fbb0 f0f3 	udiv	r0, r0, r3
	 dig0 = ((time % 60) % 10);	 
	 buff[0] = dec2hex(dig3);
 8006654:	b2c0      	uxtb	r0, r0
	 dig1 = ((time % 60) / 10);
 8006656:	b292      	uxth	r2, r2
	 dig2 = ((time / 60) % 10);
 8006658:	270a      	movs	r7, #10
	 buff[0] = dec2hex(dig3);
 800665a:	f7ff ff89 	bl	8006570 <dec2hex>
 800665e:	f88d 0000 	strb.w	r0, [sp]
	 dig2 = ((time / 60) % 10);
 8006662:	fbb1 f0f7 	udiv	r0, r1, r7
 8006666:	fb07 1010 	mls	r0, r7, r0, r1
	 buff[1] = dec2hex(dig2);
 800666a:	b2c0      	uxtb	r0, r0
 800666c:	f7ff ff80 	bl	8006570 <dec2hex>
	 dig1 = ((time % 60) / 10);
 8006670:	fbb2 f1f7 	udiv	r1, r2, r7
	 buff[2] = ':';
 8006674:	233a      	movs	r3, #58	; 0x3a
	 buff[1] = dec2hex(dig2);
 8006676:	f88d 0001 	strb.w	r0, [sp, #1]
	 buff[3] = dec2hex(dig1);
 800667a:	b2c8      	uxtb	r0, r1
	 buff[2] = ':';
 800667c:	f88d 3002 	strb.w	r3, [sp, #2]
	 buff[3] = dec2hex(dig1);
 8006680:	f7ff ff76 	bl	8006570 <dec2hex>
 8006684:	f88d 0003 	strb.w	r0, [sp, #3]
	 dig0 = ((time % 60) % 10);	 
 8006688:	fb07 2011 	mls	r0, r7, r1, r2
	 buff[4] = dec2hex(dig0);
 800668c:	b2c0      	uxtb	r0, r0
 800668e:	f7ff ff6f 	bl	8006570 <dec2hex>
	 buff[5] = '/';
 8006692:	232f      	movs	r3, #47	; 0x2f
	 if (new_play) {
 8006694:	4d3b      	ldr	r5, [pc, #236]	; (8006784 <mp3_prog_bar+0x1f8>)
	 buff[4] = dec2hex(dig0);
 8006696:	f88d 0004 	strb.w	r0, [sp, #4]
	 if (new_play) {
 800669a:	f895 8000 	ldrb.w	r8, [r5]
	 buff[5] = '/';
 800669e:	f88d 3005 	strb.w	r3, [sp, #5]
	 if (new_play == 0) {
 80066a2:	f1b8 0f00 	cmp.w	r8, #0
 80066a6:	d04b      	beq.n	8006740 <mp3_prog_bar+0x1b4>
	    buff[6] = 0;
	    lput_char_xy(9,8,buff);
	 }
	 if (new_play) {
	    if (f_kbps) time = (lenth / f_kbps) / 125;else time = 0;
 80066a8:	8830      	ldrh	r0, [r6, #0]
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d155      	bne.n	800675a <mp3_prog_bar+0x1ce>
	    if (time >= 3600) time = 3599;
	    dig3 = (time / 600);
	    dig2 = ((time / 60) % 10);
	    dig1 = ((time % 60) / 10);
 80066ae:	223c      	movs	r2, #60	; 0x3c
	    dig3 = (time / 600);
 80066b0:	f44f 7316 	mov.w	r3, #600	; 0x258
	    dig1 = ((time % 60) / 10);
 80066b4:	fbb0 f1f2 	udiv	r1, r0, r2
 80066b8:	fb02 0211 	mls	r2, r2, r1, r0
	    dig3 = (time / 600);
 80066bc:	fbb0 f0f3 	udiv	r0, r0, r3
	    dig0 = ((time % 60) % 10);	    	
	    buff[6] = dec2hex(dig3);
 80066c0:	b2c0      	uxtb	r0, r0
	    dig1 = ((time % 60) / 10);
 80066c2:	b292      	uxth	r2, r2
	    buff[6] = dec2hex(dig3);
 80066c4:	f7ff ff54 	bl	8006570 <dec2hex>
	    dig2 = ((time / 60) % 10);
 80066c8:	f04f 080a 	mov.w	r8, #10
 80066cc:	b289      	uxth	r1, r1
	    buff[6] = dec2hex(dig3);
 80066ce:	4606      	mov	r6, r0
 80066d0:	f88d 0006 	strb.w	r0, [sp, #6]
	    dig2 = ((time / 60) % 10);
 80066d4:	fbb1 f0f8 	udiv	r0, r1, r8
 80066d8:	fb08 1010 	mls	r0, r8, r0, r1
	    buff[7] = dec2hex(dig2);
 80066dc:	b2c0      	uxtb	r0, r0
 80066de:	f7ff ff47 	bl	8006570 <dec2hex>
	    dig1 = ((time % 60) / 10);
 80066e2:	fbb2 f7f8 	udiv	r7, r2, r8
	    buff[8] = ':';
 80066e6:	233a      	movs	r3, #58	; 0x3a
	    buff[7] = dec2hex(dig2);
 80066e8:	4604      	mov	r4, r0
 80066ea:	f88d 0007 	strb.w	r0, [sp, #7]
	    buff[9] = dec2hex(dig1);
 80066ee:	b2f8      	uxtb	r0, r7
	    buff[8] = ':';
 80066f0:	f88d 3008 	strb.w	r3, [sp, #8]
	    buff[9] = dec2hex(dig1);
 80066f4:	f7ff ff3c 	bl	8006570 <dec2hex>
 80066f8:	4601      	mov	r1, r0
 80066fa:	f88d 0009 	strb.w	r0, [sp, #9]
	    dig0 = ((time % 60) % 10);	    	
 80066fe:	fb08 2017 	mls	r0, r8, r7, r2
	    buff[10] = dec2hex(dig0);
 8006702:	b2c0      	uxtb	r0, r0
 8006704:	f7ff ff34 	bl	8006570 <dec2hex>
	    buff[11] = 0;
 8006708:	2700      	movs	r7, #0
	    mp3.mp3time[6] = dec2hex(dig3);
 800670a:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <mp3_prog_bar+0x1fc>)
	    buff[10] = dec2hex(dig0);
 800670c:	f88d 000a 	strb.w	r0, [sp, #10]
            mp3.mp3time[7] = dec2hex(dig2);
            mp3.mp3time[9] = dec2hex(dig1);
 8006710:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
            mp3.mp3time[10] = dec2hex(dig0);
 8006714:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
            lput_char_xy(15,8,buff+6);
 8006718:	2108      	movs	r1, #8
 800671a:	200f      	movs	r0, #15
 800671c:	f10d 0206 	add.w	r2, sp, #6
	    buff[11] = 0;
 8006720:	f88d 700b 	strb.w	r7, [sp, #11]
	    mp3.mp3time[6] = dec2hex(dig3);
 8006724:	f883 6047 	strb.w	r6, [r3, #71]	; 0x47
            mp3.mp3time[7] = dec2hex(dig2);
 8006728:	f883 4048 	strb.w	r4, [r3, #72]	; 0x48
            lput_char_xy(15,8,buff+6);
 800672c:	f7fd ff56 	bl	80045dc <lput_char_xy>
            new_play = 0;
 8006730:	702f      	strb	r7, [r5, #0]
 8006732:	e00f      	b.n	8006754 <mp3_prog_bar+0x1c8>
	 if (propos > 1) propos = 1;
 8006734:	f8c5 9000 	str.w	r9, [r5]
 8006738:	e752      	b.n	80065e0 <mp3_prog_bar+0x54>
         time = get_decode_time();
 800673a:	f7ff fe9b 	bl	8006474 <get_decode_time>
 800673e:	e761      	b.n	8006604 <mp3_prog_bar+0x78>
	    lput_char_xy(9,8,buff);
 8006740:	466a      	mov	r2, sp
 8006742:	2108      	movs	r1, #8
 8006744:	2009      	movs	r0, #9
	    buff[6] = 0;
 8006746:	f88d 8006 	strb.w	r8, [sp, #6]
	    lput_char_xy(9,8,buff);
 800674a:	f7fd ff47 	bl	80045dc <lput_char_xy>
	 if (new_play) {
 800674e:	782b      	ldrb	r3, [r5, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1a9      	bne.n	80066a8 <mp3_prog_bar+0x11c>
         }
      }
}
 8006754:	b009      	add	sp, #36	; 0x24
 8006756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    if (f_kbps) time = (lenth / f_kbps) / 125;else time = 0;
 800675a:	fbb4 f0f0 	udiv	r0, r4, r0
 800675e:	247d      	movs	r4, #125	; 0x7d
 8006760:	fbb0 f0f4 	udiv	r0, r0, r4
 8006764:	f640 610f 	movw	r1, #3599	; 0xe0f
 8006768:	b280      	uxth	r0, r0
 800676a:	4288      	cmp	r0, r1
 800676c:	bf28      	it	cs
 800676e:	4608      	movcs	r0, r1
 8006770:	e79d      	b.n	80066ae <mp3_prog_bar+0x122>
 8006772:	bf00      	nop
 8006774:	2000000a 	.word	0x2000000a
 8006778:	20000aa4 	.word	0x20000aa4
 800677c:	20000aa8 	.word	0x20000aa8
 8006780:	42fa0000 	.word	0x42fa0000
 8006784:	20003fd8 	.word	0x20003fd8
 8006788:	2000146c 	.word	0x2000146c

0800678c <find_music>:
      mp3.mp3name[a - 4] = 0;
}


unsigned char find_music (void)
{
 800678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if _USE_LFN
      static char lfn[_MAX_LFN * (_DF1S ? 2 : 1) + 1];
      fno.lfname = lfn;
      fno.lfsize = sizeof(lfn);
#endif
      res = f_opendir(&dirs, "0:/Music");
 8006790:	4930      	ldr	r1, [pc, #192]	; (8006854 <find_music+0xc8>)
 8006792:	4831      	ldr	r0, [pc, #196]	; (8006858 <find_music+0xcc>)
 8006794:	f7ff f8b1 	bl	80058fa <f_opendir>
 8006798:	4b30      	ldr	r3, [pc, #192]	; (800685c <find_music+0xd0>)
 800679a:	4604      	mov	r4, r0
 800679c:	7018      	strb	r0, [r3, #0]
      if (res == FR_OK) {
 800679e:	2800      	cmp	r0, #0
 80067a0:	d04f      	beq.n	8006842 <find_music+0xb6>
	       }
	       //lcd_printf(2,3+file," %s ",fn);
         }
	 return file;
      }
      return 0;
 80067a2:	2400      	movs	r4, #0
}
 80067a4:	4620      	mov	r0, r4
 80067a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	       i = strlen(fn);
 80067aa:	482d      	ldr	r0, [pc, #180]	; (8006860 <find_music+0xd4>)
 80067ac:	f001 fd1e 	bl	80081ec <strlen>
	       if (strcasecmp(&fn[i-3],music_extend[0]) == 0 || strcasecmp(&fn[i-3],music_extend[1]) == 0 || strcasecmp(&fn[i-3],music_extend[2]) == 0 || strcasecmp(&fn[i-3],music_extend[3]) == 0) {
 80067b0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800686c <find_music+0xe0>
 80067b4:	1ec6      	subs	r6, r0, #3
 80067b6:	443e      	add	r6, r7
 80067b8:	4630      	mov	r0, r6
 80067ba:	f8da 1000 	ldr.w	r1, [sl]
 80067be:	f001 fc95 	bl	80080ec <strcasecmp>
 80067c2:	b188      	cbz	r0, 80067e8 <find_music+0x5c>
 80067c4:	4630      	mov	r0, r6
 80067c6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80067ca:	f001 fc8f 	bl	80080ec <strcasecmp>
 80067ce:	b158      	cbz	r0, 80067e8 <find_music+0x5c>
 80067d0:	4630      	mov	r0, r6
 80067d2:	f8da 1008 	ldr.w	r1, [sl, #8]
 80067d6:	f001 fc89 	bl	80080ec <strcasecmp>
 80067da:	b128      	cbz	r0, 80067e8 <find_music+0x5c>
 80067dc:	4630      	mov	r0, r6
 80067de:	f8da 100c 	ldr.w	r1, [sl, #12]
 80067e2:	f001 fc83 	bl	80080ec <strcasecmp>
 80067e6:	b990      	cbnz	r0, 800680e <find_music+0x82>
	          file++;
 80067e8:	3401      	adds	r4, #1
 80067ea:	b2e4      	uxtb	r4, r4
	          if (file == 1) {
 80067ec:	2c01      	cmp	r4, #1
		     head = (dlink)malloc(sizeof(dnode));
 80067ee:	f04f 00a0 	mov.w	r0, #160	; 0xa0
	          if (file == 1) {
 80067f2:	d117      	bne.n	8006824 <find_music+0x98>
		     head = (dlink)malloc(sizeof(dnode));
 80067f4:	f001 f894 	bl	8007920 <malloc>
 80067f8:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <find_music+0xd8>)
 80067fa:	4605      	mov	r5, r0
 80067fc:	6018      	str	r0, [r3, #0]
		     if (!head) return 0;
 80067fe:	2800      	cmp	r0, #0
 8006800:	d0cf      	beq.n	80067a2 <find_music+0x16>
		     strcpy(head->filename,fn);
 8006802:	4639      	mov	r1, r7
 8006804:	f001 fc94 	bl	8008130 <strcpy>
		     head->next = NULL;
 8006808:	2300      	movs	r3, #0
		     head->back = NULL;
 800680a:	e9c5 3326 	strd	r3, r3, [r5, #152]	; 0x98
         while ((f_readdir(&dirs, &fno) == FR_OK) && fno.fname[0]) {
 800680e:	4648      	mov	r0, r9
 8006810:	4915      	ldr	r1, [pc, #84]	; (8006868 <find_music+0xdc>)
 8006812:	f7ff f8a0 	bl	8005956 <f_readdir>
 8006816:	2800      	cmp	r0, #0
 8006818:	d1c4      	bne.n	80067a4 <find_music+0x18>
 800681a:	f898 3009 	ldrb.w	r3, [r8, #9]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1c3      	bne.n	80067aa <find_music+0x1e>
 8006822:	e7bf      	b.n	80067a4 <find_music+0x18>
		     new_node = (dlink)malloc(sizeof(dnode));
 8006824:	f001 f87c 	bl	8007920 <malloc>
		     if (!new_node) return 0;
 8006828:	4606      	mov	r6, r0
 800682a:	2800      	cmp	r0, #0
 800682c:	d0b9      	beq.n	80067a2 <find_music+0x16>
                     strcpy(new_node->filename,fn);
 800682e:	4639      	mov	r1, r7
 8006830:	f001 fc7e 	bl	8008130 <strcpy>
                     new_node->next = NULL;
 8006834:	2300      	movs	r3, #0
		     new_node->back = before;
 8006836:	e9c6 3526 	strd	r3, r5, [r6, #152]	; 0x98
		     before->next = new_node;
 800683a:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
 800683e:	4635      	mov	r5, r6
 8006840:	e7e5      	b.n	800680e <find_music+0x82>
         while ((f_readdir(&dirs, &fno) == FR_OK) && fno.fname[0]) {
 8006842:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8006868 <find_music+0xdc>
      dlink before = 0;
 8006846:	4605      	mov	r5, r0
         while ((f_readdir(&dirs, &fno) == FR_OK) && fno.fname[0]) {
 8006848:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8006858 <find_music+0xcc>
	       i = strlen(fn);
 800684c:	f108 0709 	add.w	r7, r8, #9
 8006850:	e7dd      	b.n	800680e <find_music+0x82>
 8006852:	bf00      	nop
 8006854:	08012454 	.word	0x08012454
 8006858:	200014dc 	.word	0x200014dc
 800685c:	20003fd9 	.word	0x20003fd9
 8006860:	20001505 	.word	0x20001505
 8006864:	2000182c 	.word	0x2000182c
 8006868:	200014fc 	.word	0x200014fc
 800686c:	2000000c 	.word	0x2000000c

08006870 <display_id3v1_tag>:


void display_id3v1_tag (void)
{
      unsigned char i, buff[128];
	  lcd_printf(0,0,"                                     ");
 8006870:	2100      	movs	r1, #0
{
 8006872:	b510      	push	{r4, lr}
	  lcd_printf(0,0,"                                     ");
 8006874:	4608      	mov	r0, r1
{
 8006876:	b0a0      	sub	sp, #128	; 0x80
	  lcd_printf(0,0,"                                     ");
 8006878:	4a47      	ldr	r2, [pc, #284]	; (8006998 <display_id3v1_tag+0x128>)
 800687a:	f7fd fed5 	bl	8004628 <lcd_printf>
	  lcd_printf(0,1,"                                     ");
 800687e:	2101      	movs	r1, #1
 8006880:	2000      	movs	r0, #0
 8006882:	4a45      	ldr	r2, [pc, #276]	; (8006998 <display_id3v1_tag+0x128>)
 8006884:	f7fd fed0 	bl	8004628 <lcd_printf>
	  lcd_printf(0,2,"                                     ");
 8006888:	2102      	movs	r1, #2
 800688a:	2000      	movs	r0, #0
 800688c:	4a42      	ldr	r2, [pc, #264]	; (8006998 <display_id3v1_tag+0x128>)
 800688e:	f7fd fecb 	bl	8004628 <lcd_printf>
	  lcd_printf(0,3,"                              ");
 8006892:	2103      	movs	r1, #3
 8006894:	2000      	movs	r0, #0
 8006896:	4a41      	ldr	r2, [pc, #260]	; (800699c <display_id3v1_tag+0x12c>)
 8006898:	f7fd fec6 	bl	8004628 <lcd_printf>
	  lcd_printf(0,4,"                              ");
 800689c:	2104      	movs	r1, #4
 800689e:	2000      	movs	r0, #0
 80068a0:	4a3e      	ldr	r2, [pc, #248]	; (800699c <display_id3v1_tag+0x12c>)
 80068a2:	f7fd fec1 	bl	8004628 <lcd_printf>
	  lcd_printf(0,5,"                              ");
 80068a6:	2105      	movs	r1, #5
 80068a8:	2000      	movs	r0, #0
 80068aa:	4a3c      	ldr	r2, [pc, #240]	; (800699c <display_id3v1_tag+0x12c>)
 80068ac:	f7fd febc 	bl	8004628 <lcd_printf>
	  lcd_printf(0,6,"                              ");
 80068b0:	2106      	movs	r1, #6
 80068b2:	2000      	movs	r0, #0
 80068b4:	4a39      	ldr	r2, [pc, #228]	; (800699c <display_id3v1_tag+0x12c>)
 80068b6:	f7fd feb7 	bl	8004628 <lcd_printf>
	  lcd_printf(0,7,"                              ");
 80068ba:	2107      	movs	r1, #7
 80068bc:	2000      	movs	r0, #0
 80068be:	4a37      	ldr	r2, [pc, #220]	; (800699c <display_id3v1_tag+0x12c>)
 80068c0:	f7fd feb2 	bl	8004628 <lcd_printf>
	  lcd_printf(0,8,"                              ");
 80068c4:	2108      	movs	r1, #8
 80068c6:	2000      	movs	r0, #0
 80068c8:	4a34      	ldr	r2, [pc, #208]	; (800699c <display_id3v1_tag+0x12c>)
 80068ca:	f7fd fead 	bl	8004628 <lcd_printf>
	  lcd_printf(0,9,"                              ");
 80068ce:	2109      	movs	r1, #9
 80068d0:	2000      	movs	r0, #0
 80068d2:	4a32      	ldr	r2, [pc, #200]	; (800699c <display_id3v1_tag+0x12c>)
 80068d4:	f7fd fea8 	bl	8004628 <lcd_printf>
      lcd_printf(0,10,"                              ");
 80068d8:	210a      	movs	r1, #10
 80068da:	2000      	movs	r0, #0
 80068dc:	4a2f      	ldr	r2, [pc, #188]	; (800699c <display_id3v1_tag+0x12c>)
 80068de:	f7fd fea3 	bl	8004628 <lcd_printf>
      lcd_printf(0,11,"                              ");
 80068e2:	210b      	movs	r1, #11
 80068e4:	2000      	movs	r0, #0
 80068e6:	4a2d      	ldr	r2, [pc, #180]	; (800699c <display_id3v1_tag+0x12c>)
 80068e8:	f7fd fe9e 	bl	8004628 <lcd_printf>
      lcd_printf(0,12,"                              ");
 80068ec:	210c      	movs	r1, #12
 80068ee:	2000      	movs	r0, #0
 80068f0:	4a2a      	ldr	r2, [pc, #168]	; (800699c <display_id3v1_tag+0x12c>)
 80068f2:	f7fd fe99 	bl	8004628 <lcd_printf>
      lcd_printf(0,13,"                              ");
 80068f6:	210d      	movs	r1, #13
 80068f8:	2000      	movs	r0, #0
 80068fa:	4a28      	ldr	r2, [pc, #160]	; (800699c <display_id3v1_tag+0x12c>)
 80068fc:	f7fd fe94 	bl	8004628 <lcd_printf>
      lcd_printf(0,14,"                              ");
      lcd_printf(0,15,"                              ");
      f_lseek(&fsrc, fsrc.fsize - 128);
 8006900:	4c27      	ldr	r4, [pc, #156]	; (80069a0 <display_id3v1_tag+0x130>)
      lcd_printf(0,14,"                              ");
 8006902:	210e      	movs	r1, #14
 8006904:	2000      	movs	r0, #0
 8006906:	4a25      	ldr	r2, [pc, #148]	; (800699c <display_id3v1_tag+0x12c>)
 8006908:	f7fd fe8e 	bl	8004628 <lcd_printf>
      lcd_printf(0,15,"                              ");
 800690c:	4a23      	ldr	r2, [pc, #140]	; (800699c <display_id3v1_tag+0x12c>)
 800690e:	210f      	movs	r1, #15
 8006910:	2000      	movs	r0, #0
 8006912:	f7fd fe89 	bl	8004628 <lcd_printf>
      f_lseek(&fsrc, fsrc.fsize - 128);
 8006916:	68e1      	ldr	r1, [r4, #12]
 8006918:	4620      	mov	r0, r4
 800691a:	3980      	subs	r1, #128	; 0x80
 800691c:	f7fe ff45 	bl	80057aa <f_lseek>
      f_read(&fsrc,buff,128,&br);
 8006920:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <display_id3v1_tag+0x134>)
 8006922:	2280      	movs	r2, #128	; 0x80
 8006924:	4669      	mov	r1, sp
 8006926:	4620      	mov	r0, r4
 8006928:	f7fe fe54 	bl	80055d4 <f_read>
      if ((buff[0] == 'T') && (buff[1] == 'A') && (buff[2] == 'G')) {
 800692c:	f89d 3000 	ldrb.w	r3, [sp]
 8006930:	2b54      	cmp	r3, #84	; 0x54
 8006932:	d12b      	bne.n	800698c <display_id3v1_tag+0x11c>
 8006934:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8006938:	2b41      	cmp	r3, #65	; 0x41
 800693a:	d127      	bne.n	800698c <display_id3v1_tag+0x11c>
 800693c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8006940:	2b47      	cmp	r3, #71	; 0x47
 8006942:	d123      	bne.n	800698c <display_id3v1_tag+0x11c>
 8006944:	231e      	movs	r3, #30
 8006946:	4a18      	ldr	r2, [pc, #96]	; (80069a8 <display_id3v1_tag+0x138>)
 8006948:	f10d 0103 	add.w	r1, sp, #3
         for (i=0;i<30;i++) ID3V1_Buf.Title[i] = buff[3 + i];
 800694c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006950:	3b01      	subs	r3, #1
 8006952:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8006956:	f802 0b01 	strb.w	r0, [r2], #1
 800695a:	d1f7      	bne.n	800694c <display_id3v1_tag+0xdc>
 800695c:	231e      	movs	r3, #30
 800695e:	4a13      	ldr	r2, [pc, #76]	; (80069ac <display_id3v1_tag+0x13c>)
 8006960:	f10d 0121 	add.w	r1, sp, #33	; 0x21
         for (i=0;i<30;i++) ID3V1_Buf.Artist[i] = buff[33 + i];
 8006964:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006968:	3b01      	subs	r3, #1
 800696a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800696e:	f802 0b01 	strb.w	r0, [r2], #1
 8006972:	d1f7      	bne.n	8006964 <display_id3v1_tag+0xf4>
 8006974:	231e      	movs	r3, #30
 8006976:	4a0e      	ldr	r2, [pc, #56]	; (80069b0 <display_id3v1_tag+0x140>)
 8006978:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
         for (i=0;i<30;i++) ID3V1_Buf.Album[i] = buff[63 + i];
 800697c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006980:	3b01      	subs	r3, #1
 8006982:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8006986:	f802 0b01 	strb.w	r0, [r2], #1
 800698a:	d1f7      	bne.n	800697c <display_id3v1_tag+0x10c>
         //lcd_printf(1,10,"Tttle: %s ",ID3V1_Buf.Title);
         //lcd_printf(1,12,"Artist: %s ",ID3V1_Buf.Artist);
         //lcd_printf(1,14,"Album: %s ",ID3V1_Buf.Album);
      }
      f_lseek(&fsrc,0);
 800698c:	2100      	movs	r1, #0
 800698e:	4804      	ldr	r0, [pc, #16]	; (80069a0 <display_id3v1_tag+0x130>)
 8006990:	f7fe ff0b 	bl	80057aa <f_lseek>
}
 8006994:	b020      	add	sp, #128	; 0x80
 8006996:	bd10      	pop	{r4, pc}
 8006998:	0801245d 	.word	0x0801245d
 800699c:	08012464 	.word	0x08012464
 80069a0:	20001830 	.word	0x20001830
 80069a4:	2000174c 	.word	0x2000174c
 80069a8:	20001753 	.word	0x20001753
 80069ac:	20001771 	.word	0x20001771
 80069b0:	2000178f 	.word	0x2000178f

080069b4 <mp3_displayinit>:


void mp3_displayinit (void){
 80069b4:	b507      	push	{r0, r1, r2, lr}
	lcd_printf(1,1,"                              ");
 80069b6:	2101      	movs	r1, #1
 80069b8:	4a08      	ldr	r2, [pc, #32]	; (80069dc <mp3_displayinit+0x28>)
 80069ba:	4608      	mov	r0, r1
 80069bc:	f7fd fe34 	bl	8004628 <lcd_printf>
      //lcd_printf(2,3,"MP3 Open %d Size %d ",music_number,fsrc.fsize);
      lcd_printf(7,2,"%2d: %s    ",music_number,head->filename);
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <mp3_displayinit+0x2c>)
 80069c2:	2102      	movs	r1, #2
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2007      	movs	r0, #7
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <mp3_displayinit+0x30>)
 80069cc:	4a06      	ldr	r2, [pc, #24]	; (80069e8 <mp3_displayinit+0x34>)
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	f7fd fe2a 	bl	8004628 <lcd_printf>
	  
}
 80069d4:	b003      	add	sp, #12
 80069d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80069da:	bf00      	nop
 80069dc:	08012464 	.word	0x08012464
 80069e0:	2000182c 	.word	0x2000182c
 80069e4:	2000227e 	.word	0x2000227e
 80069e8:	08012483 	.word	0x08012483

080069ec <play_next>:
	  
}


void play_next (void)
{
 80069ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
      delay_ms(1000);
     if ((music_number--) && (head != NULL)) {
 80069ee:	4d22      	ldr	r5, [pc, #136]	; (8006a78 <play_next+0x8c>)
      delay_ms(1000);
 80069f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069f4:	f7ff faf0 	bl	8005fd8 <delay_ms>
     if ((music_number--) && (head != NULL)) {
 80069f8:	8829      	ldrh	r1, [r5, #0]
 80069fa:	1e4b      	subs	r3, r1, #1
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	802b      	strh	r3, [r5, #0]
 8006a00:	2900      	cmp	r1, #0
 8006a02:	d037      	beq.n	8006a74 <play_next+0x88>
 8006a04:	4c1d      	ldr	r4, [pc, #116]	; (8006a7c <play_next+0x90>)
 8006a06:	6822      	ldr	r2, [r4, #0]
 8006a08:	2a00      	cmp	r2, #0
 8006a0a:	d033      	beq.n	8006a74 <play_next+0x88>
	 if (music_number == 0) {
 8006a0c:	b95b      	cbnz	r3, 8006a26 <play_next+0x3a>
	    while (head->back != NULL) head = head->back;
 8006a0e:	4611      	mov	r1, r2
 8006a10:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8006a14:	b92a      	cbnz	r2, 8006a22 <play_next+0x36>
 8006a16:	b103      	cbz	r3, 8006a1a <play_next+0x2e>
 8006a18:	6021      	str	r1, [r4, #0]
	 }
	 if (music_number != 0) head = head->next;else music_number = ftemp;
 8006a1a:	4b19      	ldr	r3, [pc, #100]	; (8006a80 <play_next+0x94>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	802b      	strh	r3, [r5, #0]
 8006a20:	e004      	b.n	8006a2c <play_next+0x40>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e7f3      	b.n	8006a0e <play_next+0x22>
 8006a26:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006a2a:	6023      	str	r3, [r4, #0]
	 bw = f_open(&fsrc,head->filename, FA_OPEN_EXISTING | FA_READ);
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	6821      	ldr	r1, [r4, #0]
 8006a30:	4814      	ldr	r0, [pc, #80]	; (8006a84 <play_next+0x98>)
 8006a32:	f7fe fd35 	bl	80054a0 <f_open>
	 datasize = 0;
 8006a36:	2100      	movs	r1, #0
	 seek_value = 0;
	 new_play = 1;
 8006a38:	2201      	movs	r2, #1
	 bw = f_open(&fsrc,head->filename, FA_OPEN_EXISTING | FA_READ);
 8006a3a:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <play_next+0x9c>)
 8006a3c:	6018      	str	r0, [r3, #0]
	 datasize = 0;
 8006a3e:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <play_next+0xa0>)
         buffer_read = 0;
         fdx = 0;
         f_kbps = 0xffff;
         memset((char *)buffer,0,1024);
 8006a40:	4813      	ldr	r0, [pc, #76]	; (8006a90 <play_next+0xa4>)
	 datasize = 0;
 8006a42:	6019      	str	r1, [r3, #0]
	 seek_value = 0;
 8006a44:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <play_next+0xa8>)
 8006a46:	6019      	str	r1, [r3, #0]
	 new_play = 1;
 8006a48:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <play_next+0xac>)
 8006a4a:	701a      	strb	r2, [r3, #0]
         f_kbps = 0xffff;
 8006a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
         buffer_read = 0;
 8006a50:	4b12      	ldr	r3, [pc, #72]	; (8006a9c <play_next+0xb0>)
 8006a52:	7019      	strb	r1, [r3, #0]
         fdx = 0;
 8006a54:	4b12      	ldr	r3, [pc, #72]	; (8006aa0 <play_next+0xb4>)
 8006a56:	7019      	strb	r1, [r3, #0]
         f_kbps = 0xffff;
 8006a58:	4b12      	ldr	r3, [pc, #72]	; (8006aa4 <play_next+0xb8>)
 8006a5a:	801a      	strh	r2, [r3, #0]
         memset((char *)buffer,0,1024);
 8006a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a60:	f001 fa8a 	bl	8007f78 <memset>
	 //lcd_printf(2,3,"MP3 Open %d Size %d ",music_number,fsrc.fsize);
	 lcd_printf(7,2,"%2d: %s    ",music_number,head->filename);
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	2102      	movs	r1, #2
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	2007      	movs	r0, #7
 8006a6c:	882b      	ldrh	r3, [r5, #0]
 8006a6e:	4a0e      	ldr	r2, [pc, #56]	; (8006aa8 <play_next+0xbc>)
 8006a70:	f7fd fdda 	bl	8004628 <lcd_printf>
	 //display_id3v1_tag();
      }
}
 8006a74:	b003      	add	sp, #12
 8006a76:	bd30      	pop	{r4, r5, pc}
 8006a78:	2000227e 	.word	0x2000227e
 8006a7c:	2000182c 	.word	0x2000182c
 8006a80:	200014f8 	.word	0x200014f8
 8006a84:	20001830 	.word	0x20001830
 8006a88:	20002278 	.word	0x20002278
 8006a8c:	20000aa0 	.word	0x20000aa0
 8006a90:	20001a54 	.word	0x20001a54
 8006a94:	200014d8 	.word	0x200014d8
 8006a98:	20003fd8 	.word	0x20003fd8
 8006a9c:	2000227c 	.word	0x2000227c
 8006aa0:	2000182a 	.word	0x2000182a
 8006aa4:	2000000a 	.word	0x2000000a
 8006aa8:	08012483 	.word	0x08012483

08006aac <play_prev>:


void play_prev (void)
{
 8006aac:	b570      	push	{r4, r5, r6, lr}
      music_number++;
 8006aae:	4c1b      	ldr	r4, [pc, #108]	; (8006b1c <play_prev+0x70>)
      if (music_number == ftemp + 1) {
 8006ab0:	4e1b      	ldr	r6, [pc, #108]	; (8006b20 <play_prev+0x74>)
      music_number++;
 8006ab2:	8823      	ldrh	r3, [r4, #0]
      if (music_number == ftemp + 1) {
 8006ab4:	7832      	ldrb	r2, [r6, #0]
      music_number++;
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	b29b      	uxth	r3, r3
      if (music_number == ftemp + 1) {
 8006aba:	1c51      	adds	r1, r2, #1
 8006abc:	428b      	cmp	r3, r1
 8006abe:	4d19      	ldr	r5, [pc, #100]	; (8006b24 <play_prev+0x78>)
      music_number++;
 8006ac0:	8023      	strh	r3, [r4, #0]
      if (music_number == ftemp + 1) {
 8006ac2:	d111      	bne.n	8006ae8 <play_prev+0x3c>
 8006ac4:	682b      	ldr	r3, [r5, #0]
         while(head->next != NULL) head = head->next;
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1fa      	bne.n	8006ac6 <play_prev+0x1a>
         head = head->back;
 8006ad0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8006ad4:	602b      	str	r3, [r5, #0]
         music_number = 1;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	8023      	strh	r3, [r4, #0]
            ftemp = find_music();
            music_number = ftemp;
            bw = f_open(&fsrc,head->filename, FA_OPEN_EXISTING | FA_READ);
         }
      }
      music_number++;
 8006ada:	8823      	ldrh	r3, [r4, #0]
 8006adc:	3301      	adds	r3, #1
 8006ade:	8023      	strh	r3, [r4, #0]
      play_next();
}
 8006ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      play_next();
 8006ae4:	f7ff bf82 	b.w	80069ec <play_next>
         if (music_number != ftemp) {
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d006      	beq.n	8006afa <play_prev+0x4e>
            head=head->back;
 8006aec:	682b      	ldr	r3, [r5, #0]
            head=head->back;
 8006aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006af6:	602b      	str	r3, [r5, #0]
 8006af8:	e7ef      	b.n	8006ada <play_prev+0x2e>
            mp3_flag = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	4a0a      	ldr	r2, [pc, #40]	; (8006b28 <play_prev+0x7c>)
 8006afe:	7013      	strb	r3, [r2, #0]
            datasize = 0;
 8006b00:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <play_prev+0x80>)
 8006b02:	6013      	str	r3, [r2, #0]
            ftemp = find_music();
 8006b04:	f7ff fe42 	bl	800678c <find_music>
            bw = f_open(&fsrc,head->filename, FA_OPEN_EXISTING | FA_READ);
 8006b08:	2201      	movs	r2, #1
            ftemp = find_music();
 8006b0a:	7030      	strb	r0, [r6, #0]
            music_number = ftemp;
 8006b0c:	8020      	strh	r0, [r4, #0]
            bw = f_open(&fsrc,head->filename, FA_OPEN_EXISTING | FA_READ);
 8006b0e:	6829      	ldr	r1, [r5, #0]
 8006b10:	4807      	ldr	r0, [pc, #28]	; (8006b30 <play_prev+0x84>)
 8006b12:	f7fe fcc5 	bl	80054a0 <f_open>
 8006b16:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <play_prev+0x88>)
 8006b18:	6018      	str	r0, [r3, #0]
 8006b1a:	e7de      	b.n	8006ada <play_prev+0x2e>
 8006b1c:	2000227e 	.word	0x2000227e
 8006b20:	200014f8 	.word	0x200014f8
 8006b24:	2000182c 	.word	0x2000182c
 8006b28:	20001748 	.word	0x20001748
 8006b2c:	20000aa0 	.word	0x20000aa0
 8006b30:	20001830 	.word	0x20001830
 8006b34:	20002278 	.word	0x20002278

08006b38 <mp3_init>:
{
 8006b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
      SPI_configuration();
 8006b3a:	f7fe ff37 	bl	80059ac <SPI_configuration>
      SD_init();
 8006b3e:	f7ff f83b 	bl	8005bb8 <SD_init>
      vs1003_init();
 8006b42:	f7ff fcd7 	bl	80064f4 <vs1003_init>
      mp3_reset();
 8006b46:	f7ff fa49 	bl	8005fdc <mp3_reset>
      vs1003_soft_reset();
 8006b4a:	f7ff fb63 	bl	8006214 <vs1003_soft_reset>
      load_patch();
 8006b4e:	f7ff fc95 	bl	800647c <load_patch>
      f_mount(0,&fs);
 8006b52:	4914      	ldr	r1, [pc, #80]	; (8006ba4 <mp3_init+0x6c>)
 8006b54:	2000      	movs	r0, #0
 8006b56:	f7fe fc95 	bl	8005484 <f_mount>
      ftemp = find_music();
 8006b5a:	f7ff fe17 	bl	800678c <find_music>
      music_number = ftemp;
 8006b5e:	4c12      	ldr	r4, [pc, #72]	; (8006ba8 <mp3_init+0x70>)
      ftemp = find_music();
 8006b60:	4b12      	ldr	r3, [pc, #72]	; (8006bac <mp3_init+0x74>)
      bw = f_open(&fsrc,head->filename, FA_OPEN_EXISTING | FA_READ);
 8006b62:	4d13      	ldr	r5, [pc, #76]	; (8006bb0 <mp3_init+0x78>)
      ftemp = find_music();
 8006b64:	7018      	strb	r0, [r3, #0]
      music_number = ftemp;
 8006b66:	8020      	strh	r0, [r4, #0]
      f_chdir("0:/Music");
 8006b68:	4812      	ldr	r0, [pc, #72]	; (8006bb4 <mp3_init+0x7c>)
 8006b6a:	f7fe fdf1 	bl	8005750 <f_chdir>
      bw = f_open(&fsrc,head->filename, FA_OPEN_EXISTING | FA_READ);
 8006b6e:	6829      	ldr	r1, [r5, #0]
 8006b70:	2201      	movs	r2, #1
 8006b72:	4811      	ldr	r0, [pc, #68]	; (8006bb8 <mp3_init+0x80>)
 8006b74:	f7fe fc94 	bl	80054a0 <f_open>
 8006b78:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <mp3_init+0x84>)
 8006b7a:	6018      	str	r0, [r3, #0]
      set_vs1003();
 8006b7c:	f7ff fc96 	bl	80064ac <set_vs1003>
      vs1003_sine_test();
 8006b80:	f7ff fa7c 	bl	800607c <vs1003_sine_test>
      play_prev();
 8006b84:	f7ff ff92 	bl	8006aac <play_prev>
      lcd_printf(7,2,"%2d: %s    ",music_number,head->filename);
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	2102      	movs	r1, #2
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	2007      	movs	r0, #7
 8006b90:	8823      	ldrh	r3, [r4, #0]
 8006b92:	4a0b      	ldr	r2, [pc, #44]	; (8006bc0 <mp3_init+0x88>)
 8006b94:	f7fd fd48 	bl	8004628 <lcd_printf>
      new_play = 1;
 8006b98:	2201      	movs	r2, #1
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <mp3_init+0x8c>)
 8006b9c:	701a      	strb	r2, [r3, #0]
}
 8006b9e:	b003      	add	sp, #12
 8006ba0:	bd30      	pop	{r4, r5, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20001514 	.word	0x20001514
 8006ba8:	2000227e 	.word	0x2000227e
 8006bac:	200014f8 	.word	0x200014f8
 8006bb0:	2000182c 	.word	0x2000182c
 8006bb4:	08012454 	.word	0x08012454
 8006bb8:	20001830 	.word	0x20001830
 8006bbc:	20002278 	.word	0x20002278
 8006bc0:	08012483 	.word	0x08012483
 8006bc4:	20003fd8 	.word	0x20003fd8

08006bc8 <show_playlist>:

void show_playlist(){
 8006bc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int i=2;
	int nMusic=1;
	
	mp3_init();
 8006bca:	f7ff ffb5 	bl	8006b38 <mp3_init>
	lcd_printf(0,2,"                         ");
 8006bce:	2102      	movs	r1, #2
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	4a12      	ldr	r2, [pc, #72]	; (8006c1c <show_playlist+0x54>)
 8006bd4:	f7fd fd28 	bl	8004628 <lcd_printf>
	lcd_printf(5,0,"Number of Music : %d",ftemp);
 8006bd8:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <show_playlist+0x58>)
 8006bda:	2100      	movs	r1, #0
 8006bdc:	2005      	movs	r0, #5
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	4a10      	ldr	r2, [pc, #64]	; (8006c24 <show_playlist+0x5c>)
 8006be2:	f7fd fd21 	bl	8004628 <lcd_printf>
	int nMusic=1;
 8006be6:	2401      	movs	r4, #1
	
	while(head->back!=NULL){
 8006be8:	4d0f      	ldr	r5, [pc, #60]	; (8006c28 <show_playlist+0x60>)
		lcd_printf(4,i,"%d : %s ",nMusic,head->filename);
 8006bea:	4e10      	ldr	r6, [pc, #64]	; (8006c2c <show_playlist+0x64>)
	while(head->back!=NULL){
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	0061      	lsls	r1, r4, #1
 8006bf0:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 8006bf4:	b289      	uxth	r1, r1
		lcd_printf(4,i,"%d : %s ",nMusic,head->filename);
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	4623      	mov	r3, r4
	while(head->back!=NULL){
 8006bfa:	b928      	cbnz	r0, 8006c08 <show_playlist+0x40>
		head=head->back;
		i+=2;
		nMusic++;
	}
	lcd_printf(4,i,"%d : %s ",nMusic,head->filename);
 8006bfc:	2004      	movs	r0, #4
 8006bfe:	4a0b      	ldr	r2, [pc, #44]	; (8006c2c <show_playlist+0x64>)
 8006c00:	f7fd fd12 	bl	8004628 <lcd_printf>
}
 8006c04:	b002      	add	sp, #8
 8006c06:	bd70      	pop	{r4, r5, r6, pc}
		lcd_printf(4,i,"%d : %s ",nMusic,head->filename);
 8006c08:	4632      	mov	r2, r6
 8006c0a:	2004      	movs	r0, #4
 8006c0c:	f7fd fd0c 	bl	8004628 <lcd_printf>
		head=head->back;
 8006c10:	682b      	ldr	r3, [r5, #0]
		nMusic++;
 8006c12:	3401      	adds	r4, #1
		head=head->back;
 8006c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c18:	602b      	str	r3, [r5, #0]
		nMusic++;
 8006c1a:	e7e7      	b.n	8006bec <show_playlist+0x24>
 8006c1c:	08012469 	.word	0x08012469
 8006c20:	200014f8 	.word	0x200014f8
 8006c24:	0801248f 	.word	0x0801248f
 8006c28:	2000182c 	.word	0x2000182c
 8006c2c:	080124a4 	.word	0x080124a4

08006c30 <mp3_display>:


void mp3_display (void)
{
      mp3_prog_bar(datasize,fsrc.fsize);
 8006c30:	4b02      	ldr	r3, [pc, #8]	; (8006c3c <mp3_display+0xc>)
 8006c32:	68d9      	ldr	r1, [r3, #12]
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <mp3_display+0x10>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	f7ff bca8 	b.w	800658c <mp3_prog_bar>
 8006c3c:	20001830 	.word	0x20001830
 8006c40:	20000aa0 	.word	0x20000aa0

08006c44 <mp3_seek>:
}


void mp3_seek (unsigned char sw)
{
       if (sw) {
 8006c44:	4a0a      	ldr	r2, [pc, #40]	; (8006c70 <mp3_seek+0x2c>)
 8006c46:	6813      	ldr	r3, [r2, #0]
 8006c48:	b158      	cbz	r0, 8006c62 <mp3_seek+0x1e>
       	  seek_value += 8192;
       	  if (seek_value >= (int)fsrc.fsize) seek_value = (int)fsrc.fsize;
 8006c4a:	490a      	ldr	r1, [pc, #40]	; (8006c74 <mp3_seek+0x30>)
       	  seek_value += 8192;
 8006c4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
       	  if (seek_value >= (int)fsrc.fsize) seek_value = (int)fsrc.fsize;
 8006c50:	68c9      	ldr	r1, [r1, #12]
 8006c52:	4299      	cmp	r1, r3
 8006c54:	bfd4      	ite	le
 8006c56:	6011      	strle	r1, [r2, #0]
 8006c58:	6013      	strgt	r3, [r2, #0]
       } else {
       	  seek_value -= 8192;
       	  if (seek_value < 0) seek_value = 0;
       }
       f_lseek(&fsrc,seek_value);
 8006c5a:	6811      	ldr	r1, [r2, #0]
 8006c5c:	4805      	ldr	r0, [pc, #20]	; (8006c74 <mp3_seek+0x30>)
 8006c5e:	f7fe bda4 	b.w	80057aa <f_lseek>
       	  seek_value -= 8192;
 8006c62:	f5b3 5300 	subs.w	r3, r3, #8192	; 0x2000
 8006c66:	bf48      	it	mi
 8006c68:	4603      	movmi	r3, r0
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	e7f5      	b.n	8006c5a <mp3_seek+0x16>
 8006c6e:	bf00      	nop
 8006c70:	200014d8 	.word	0x200014d8
 8006c74:	20001830 	.word	0x20001830

08006c78 <mp3_play>:
}


void mp3_play (void)
{
      mp3_flag = 0;
 8006c78:	2200      	movs	r2, #0
{
 8006c7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      mp3_flag = 0;
 8006c7e:	4b63      	ldr	r3, [pc, #396]	; (8006e0c <mp3_play+0x194>)
      if ((datasize >= fsrc.fsize) || (fsrc.fsize == 0)) mp3_flag = 1;
 8006c80:	4e63      	ldr	r6, [pc, #396]	; (8006e10 <mp3_play+0x198>)
 8006c82:	4c64      	ldr	r4, [pc, #400]	; (8006e14 <mp3_play+0x19c>)
      mp3_flag = 0;
 8006c84:	701a      	strb	r2, [r3, #0]
      if ((datasize >= fsrc.fsize) || (fsrc.fsize == 0)) mp3_flag = 1;
 8006c86:	6821      	ldr	r1, [r4, #0]
 8006c88:	68f2      	ldr	r2, [r6, #12]
 8006c8a:	428a      	cmp	r2, r1
 8006c8c:	d901      	bls.n	8006c92 <mp3_play+0x1a>
 8006c8e:	2a00      	cmp	r2, #0
 8006c90:	d13f      	bne.n	8006d12 <mp3_play+0x9a>
 8006c92:	2201      	movs	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
      if ((mp3_flag == 1) && (play_mp3)) {
 8006c96:	4a60      	ldr	r2, [pc, #384]	; (8006e18 <mp3_play+0x1a0>)
 8006c98:	7812      	ldrb	r2, [r2, #0]
 8006c9a:	2a00      	cmp	r2, #0
 8006c9c:	d039      	beq.n	8006d12 <mp3_play+0x9a>
	 mp3_flag = 0;
 8006c9e:	2200      	movs	r2, #0
	 if ((music_number--) && (head != NULL)) {
 8006ca0:	4f5e      	ldr	r7, [pc, #376]	; (8006e1c <mp3_play+0x1a4>)
	 mp3_flag = 0;
 8006ca2:	701a      	strb	r2, [r3, #0]
	 if ((music_number--) && (head != NULL)) {
 8006ca4:	8839      	ldrh	r1, [r7, #0]
 8006ca6:	1e4b      	subs	r3, r1, #1
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	803b      	strh	r3, [r7, #0]
 8006cac:	2900      	cmp	r1, #0
 8006cae:	d030      	beq.n	8006d12 <mp3_play+0x9a>
 8006cb0:	4d5b      	ldr	r5, [pc, #364]	; (8006e20 <mp3_play+0x1a8>)
 8006cb2:	682a      	ldr	r2, [r5, #0]
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	d02c      	beq.n	8006d12 <mp3_play+0x9a>
	    if (music_number == 0) {
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f040 80a2 	bne.w	8006e02 <mp3_play+0x18a>
	       while (head->back != NULL) head = head->back;
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	f040 809a 	bne.w	8006dfe <mp3_play+0x186>
 8006cca:	b103      	cbz	r3, 8006cce <mp3_play+0x56>
 8006ccc:	6029      	str	r1, [r5, #0]
	    }
	    if (music_number != 0) head = head->next;else music_number = ftemp;
 8006cce:	4b55      	ldr	r3, [pc, #340]	; (8006e24 <mp3_play+0x1ac>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	803b      	strh	r3, [r7, #0]
	    bw = f_open(&fsrc,head->filename, FA_OPEN_EXISTING | FA_READ);
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	6829      	ldr	r1, [r5, #0]
 8006cd8:	484d      	ldr	r0, [pc, #308]	; (8006e10 <mp3_play+0x198>)
 8006cda:	f7fe fbe1 	bl	80054a0 <f_open>
	    datasize = 0;
 8006cde:	2100      	movs	r1, #0
	    seek_value = 0;
	    f_kbps = 0xffff;
 8006ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    bw = f_open(&fsrc,head->filename, FA_OPEN_EXISTING | FA_READ);
 8006ce4:	4b50      	ldr	r3, [pc, #320]	; (8006e28 <mp3_play+0x1b0>)
	    datasize = 0;
 8006ce6:	6021      	str	r1, [r4, #0]
	    bw = f_open(&fsrc,head->filename, FA_OPEN_EXISTING | FA_READ);
 8006ce8:	6018      	str	r0, [r3, #0]
	    seek_value = 0;
 8006cea:	4b50      	ldr	r3, [pc, #320]	; (8006e2c <mp3_play+0x1b4>)
	    new_play = 1;
            memset((char *)buffer,0,1024);
 8006cec:	4850      	ldr	r0, [pc, #320]	; (8006e30 <mp3_play+0x1b8>)
	    seek_value = 0;
 8006cee:	6019      	str	r1, [r3, #0]
	    f_kbps = 0xffff;
 8006cf0:	4b50      	ldr	r3, [pc, #320]	; (8006e34 <mp3_play+0x1bc>)
 8006cf2:	801a      	strh	r2, [r3, #0]
	    new_play = 1;
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	4b50      	ldr	r3, [pc, #320]	; (8006e38 <mp3_play+0x1c0>)
 8006cf8:	701a      	strb	r2, [r3, #0]
            memset((char *)buffer,0,1024);
 8006cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cfe:	f001 f93b 	bl	8007f78 <memset>
	    //lcd_printf(2,3,"MP3 Open %d Size %d ",music_number,fsrc.fsize);
	    lcd_printf(7,2,"%2d: %s    ",music_number,head->filename);
 8006d02:	682b      	ldr	r3, [r5, #0]
 8006d04:	2102      	movs	r1, #2
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	2007      	movs	r0, #7
 8006d0a:	883b      	ldrh	r3, [r7, #0]
 8006d0c:	4a4b      	ldr	r2, [pc, #300]	; (8006e3c <mp3_play+0x1c4>)
 8006d0e:	f7fd fc8b 	bl	8004628 <lcd_printf>
	    //display_id3v1_tag();
	 }
      }
      if ((datasize < fsrc.fsize) && (fsrc.fsize) && (buffer_read == 0) && (play_mp3)) {
 8006d12:	68f3      	ldr	r3, [r6, #12]
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	4d4a      	ldr	r5, [pc, #296]	; (8006e40 <mp3_play+0x1c8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d952      	bls.n	8006dc2 <mp3_play+0x14a>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d050      	beq.n	8006dc2 <mp3_play+0x14a>
 8006d20:	4e48      	ldr	r6, [pc, #288]	; (8006e44 <mp3_play+0x1cc>)
 8006d22:	7833      	ldrb	r3, [r6, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d14c      	bne.n	8006dc2 <mp3_play+0x14a>
 8006d28:	4b3b      	ldr	r3, [pc, #236]	; (8006e18 <mp3_play+0x1a0>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d048      	beq.n	8006dc2 <mp3_play+0x14a>
         if ((f_kbps == 0xffff) && (datasize > 1024)) {
 8006d30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d34:	4f3f      	ldr	r7, [pc, #252]	; (8006e34 <mp3_play+0x1bc>)
 8006d36:	8838      	ldrh	r0, [r7, #0]
 8006d38:	4288      	cmp	r0, r1
 8006d3a:	d104      	bne.n	8006d46 <mp3_play+0xce>
 8006d3c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006d40:	d901      	bls.n	8006d46 <mp3_play+0xce>
            vs1003_get_mp3info();
 8006d42:	f7ff fb01 	bl	8006348 <vs1003_get_mp3info>
         }
         if (second >= 1) {
 8006d46:	4a40      	ldr	r2, [pc, #256]	; (8006e48 <mp3_play+0x1d0>)
 8006d48:	8813      	ldrh	r3, [r2, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	b143      	cbz	r3, 8006d60 <mp3_play+0xe8>
      	    second = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	8013      	strh	r3, [r2, #0]
      	    if (f_kbps != 0xffff) mp3_display();
 8006d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d56:	883a      	ldrh	r2, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d001      	beq.n	8006d60 <mp3_play+0xe8>
 8006d5c:	f7ff ff68 	bl	8006c30 <mp3_display>
         }
         if (volume_flag) {
 8006d60:	4b3a      	ldr	r3, [pc, #232]	; (8006e4c <mp3_play+0x1d4>)
 8006d62:	781a      	ldrb	r2, [r3, #0]
 8006d64:	b132      	cbz	r2, 8006d74 <mp3_play+0xfc>
            volume_flag = 0;
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]
            vs1003_set_volume(volume);
 8006d6a:	4b39      	ldr	r3, [pc, #228]	; (8006e50 <mp3_play+0x1d8>)
 8006d6c:	8818      	ldrh	r0, [r3, #0]
 8006d6e:	b280      	uxth	r0, r0
 8006d70:	f7ff fbba 	bl	80064e8 <vs1003_set_volume>
         }
         datasize += 512;
         seek_value += datasize;
 8006d74:	4f2d      	ldr	r7, [pc, #180]	; (8006e2c <mp3_play+0x1b4>)
         datasize += 512;
 8006d76:	6823      	ldr	r3, [r4, #0]
         seek_value += datasize;
 8006d78:	683a      	ldr	r2, [r7, #0]
         datasize += 512;
 8006d7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006d7e:	6023      	str	r3, [r4, #0]
         seek_value += datasize;
 8006d80:	4413      	add	r3, r2
         bw = f_read(&fsrc,buffer,512,&br);
 8006d82:	492b      	ldr	r1, [pc, #172]	; (8006e30 <mp3_play+0x1b8>)
 8006d84:	f44f 7200 	mov.w	r2, #512	; 0x200
         seek_value += datasize;
 8006d88:	603b      	str	r3, [r7, #0]
         bw = f_read(&fsrc,buffer,512,&br);
 8006d8a:	4821      	ldr	r0, [pc, #132]	; (8006e10 <mp3_play+0x198>)
 8006d8c:	4b31      	ldr	r3, [pc, #196]	; (8006e54 <mp3_play+0x1dc>)
 8006d8e:	f7fe fc21 	bl	80055d4 <f_read>
         datasize += 512;
 8006d92:	6823      	ldr	r3, [r4, #0]
         seek_value += datasize;
 8006d94:	683a      	ldr	r2, [r7, #0]
         bw = f_read(&fsrc,buffer,512,&br);
 8006d96:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8006e28 <mp3_play+0x1b0>
         datasize += 512;
 8006d9a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006d9e:	6023      	str	r3, [r4, #0]
         seek_value += datasize;
 8006da0:	4413      	add	r3, r2
         bw = f_read(&fsrc,buffer,512,&br);
 8006da2:	f8c8 0000 	str.w	r0, [r8]
         seek_value += datasize;
 8006da6:	603b      	str	r3, [r7, #0]
         bw = f_read(&fsrc,buffer+512,512,&br);
 8006da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dac:	4b29      	ldr	r3, [pc, #164]	; (8006e54 <mp3_play+0x1dc>)
 8006dae:	492a      	ldr	r1, [pc, #168]	; (8006e58 <mp3_play+0x1e0>)
 8006db0:	4817      	ldr	r0, [pc, #92]	; (8006e10 <mp3_play+0x198>)
 8006db2:	f7fe fc0f 	bl	80055d4 <f_read>
         buffer_read = 1;
 8006db6:	2301      	movs	r3, #1
 8006db8:	7033      	strb	r3, [r6, #0]
         fdx = 0;
 8006dba:	2300      	movs	r3, #0
         bw = f_read(&fsrc,buffer+512,512,&br);
 8006dbc:	f8c8 0000 	str.w	r0, [r8]
         fdx = 0;
 8006dc0:	702b      	strb	r3, [r5, #0]
      }
      if ((fdx < 32) && (buffer_read) && (play_mp3)) {
 8006dc2:	782b      	ldrb	r3, [r5, #0]
 8006dc4:	2b1f      	cmp	r3, #31
 8006dc6:	d817      	bhi.n	8006df8 <mp3_play+0x180>
 8006dc8:	4c1e      	ldr	r4, [pc, #120]	; (8006e44 <mp3_play+0x1cc>)
 8006dca:	7822      	ldrb	r2, [r4, #0]
 8006dcc:	b1a2      	cbz	r2, 8006df8 <mp3_play+0x180>
 8006dce:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <mp3_play+0x1a0>)
 8006dd0:	7812      	ldrb	r2, [r2, #0]
 8006dd2:	b18a      	cbz	r2, 8006df8 <mp3_play+0x180>
      	 if (GPIOC->IDR & MP3_DREQ) {
 8006dd4:	4a21      	ldr	r2, [pc, #132]	; (8006e5c <mp3_play+0x1e4>)
 8006dd6:	6892      	ldr	r2, [r2, #8]
 8006dd8:	0712      	lsls	r2, r2, #28
 8006dda:	d50d      	bpl.n	8006df8 <mp3_play+0x180>
	    vs1003_data_write(buffer + fdx * 32);
 8006ddc:	4814      	ldr	r0, [pc, #80]	; (8006e30 <mp3_play+0x1b8>)
 8006dde:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006de2:	f7ff fba9 	bl	8006538 <vs1003_data_write>
	    fdx++;
 8006de6:	782b      	ldrb	r3, [r5, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	b2db      	uxtb	r3, r3
	    if (fdx >= 32) {
 8006dec:	2b1f      	cmp	r3, #31
	    fdx++;
 8006dee:	702b      	strb	r3, [r5, #0]
	    if (fdx >= 32) {
 8006df0:	d902      	bls.n	8006df8 <mp3_play+0x180>
	       buffer_read = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	7023      	strb	r3, [r4, #0]
	       fdx = 0;
 8006df6:	702b      	strb	r3, [r5, #0]
	    }
         }
      }
 8006df8:	b002      	add	sp, #8
 8006dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e75d      	b.n	8006cbe <mp3_play+0x46>
	    if (music_number != 0) head = head->next;else music_number = ftemp;
 8006e02:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006e06:	602b      	str	r3, [r5, #0]
 8006e08:	e764      	b.n	8006cd4 <mp3_play+0x5c>
 8006e0a:	bf00      	nop
 8006e0c:	20001748 	.word	0x20001748
 8006e10:	20001830 	.word	0x20001830
 8006e14:	20000aa0 	.word	0x20000aa0
 8006e18:	20000aee 	.word	0x20000aee
 8006e1c:	2000227e 	.word	0x2000227e
 8006e20:	2000182c 	.word	0x2000182c
 8006e24:	200014f8 	.word	0x200014f8
 8006e28:	20002278 	.word	0x20002278
 8006e2c:	200014d8 	.word	0x200014d8
 8006e30:	20001a54 	.word	0x20001a54
 8006e34:	2000000a 	.word	0x2000000a
 8006e38:	20003fd8 	.word	0x20003fd8
 8006e3c:	08012483 	.word	0x08012483
 8006e40:	2000182a 	.word	0x2000182a
 8006e44:	2000227c 	.word	0x2000227c
 8006e48:	20000ae8 	.word	0x20000ae8
 8006e4c:	20000aea 	.word	0x20000aea
 8006e50:	20000002 	.word	0x20000002
 8006e54:	2000174c 	.word	0x2000174c
 8006e58:	20001c54 	.word	0x20001c54
 8006e5c:	40011000 	.word	0x40011000

08006e60 <__get_MSP>:

unsigned int __get_MSP (void) __attribute__( ( naked ) );
unsigned int __get_MSP (void)
{
      unsigned int result=0;
      __asm volatile ("MRS %0, msp\n\t" "MOV r0, %0 \n\t" "BX  lr     \n\t"  : "=r" (result) );
 8006e60:	f3ef 8008 	mrs	r0, MSP
 8006e64:	4600      	mov	r0, r0
 8006e66:	4770      	bx	lr

08006e68 <_kill>:
      return(result);
}


int _kill (int pid, int sig)
{
 8006e68:	b508      	push	{r3, lr}
      pid = pid; sig = sig;		/* avoid warnings */
      errno = EINVAL;
 8006e6a:	f000 fd53 	bl	8007914 <__errno>
 8006e6e:	2316      	movs	r3, #22
 8006e70:	6003      	str	r3, [r0, #0]
      return -1;
}
 8006e72:	f04f 30ff 	mov.w	r0, #4294967295
 8006e76:	bd08      	pop	{r3, pc}

08006e78 <_exit>:


void _exit (int status)
{
 8006e78:	4601      	mov	r1, r0
 8006e7a:	b508      	push	{r3, lr}
      s_printf("_exit called with parameter %d \r\n", status);
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <_exit+0xc>)
 8006e7e:	f7fb ff53 	bl	8002d28 <s_printf>
      while(1) {;}
 8006e82:	e7fe      	b.n	8006e82 <_exit+0xa>
 8006e84:	080124bd 	.word	0x080124bd

08006e88 <_getpid>:


int _getpid (void)
{
      return 1;
}
 8006e88:	2001      	movs	r0, #1
 8006e8a:	4770      	bx	lr

08006e8c <_sbrk>:
      return (char*) __get_MSP();
}


caddr_t _sbrk (int incr)
{
 8006e8c:	b570      	push	{r4, r5, r6, lr}
      char *prev_heap_end;
#if SBRK_VERBOSE
      s_printf("_sbrk called with incr %d \r\n", incr);
#endif
      if (heap_end == 0) {
 8006e8e:	4d0c      	ldr	r5, [pc, #48]	; (8006ec0 <_sbrk+0x34>)
      s_printf("_sbrk called with incr %d \r\n", incr);
 8006e90:	4601      	mov	r1, r0
{
 8006e92:	4604      	mov	r4, r0
      s_printf("_sbrk called with incr %d \r\n", incr);
 8006e94:	480b      	ldr	r0, [pc, #44]	; (8006ec4 <_sbrk+0x38>)
 8006e96:	f7fb ff47 	bl	8002d28 <s_printf>
      if (heap_end == 0) {
 8006e9a:	682b      	ldr	r3, [r5, #0]
 8006e9c:	b90b      	cbnz	r3, 8006ea2 <_sbrk+0x16>
	 heap_end = &_end;
 8006e9e:	4b0a      	ldr	r3, [pc, #40]	; (8006ec8 <_sbrk+0x3c>)
 8006ea0:	602b      	str	r3, [r5, #0]
      }
      prev_heap_end = heap_end;
 8006ea2:	682e      	ldr	r6, [r5, #0]
      return (char*) __get_MSP();
 8006ea4:	f7ff ffdc 	bl	8006e60 <__get_MSP>
#if 1
      if (heap_end + incr > get_stack_top()) {
 8006ea8:	4434      	add	r4, r6
 8006eaa:	4284      	cmp	r4, r0
 8006eac:	d904      	bls.n	8006eb8 <_sbrk+0x2c>
	  s_printf("Heap and stack collision \r\n");
 8006eae:	4807      	ldr	r0, [pc, #28]	; (8006ecc <_sbrk+0x40>)
 8006eb0:	f7fb ff3a 	bl	8002d28 <s_printf>
         abort();
 8006eb4:	f000 fd26 	bl	8007904 <abort>
      }
#endif
      heap_end += incr;
      return (caddr_t) prev_heap_end;
}
 8006eb8:	4630      	mov	r0, r6
      heap_end += incr;
 8006eba:	602c      	str	r4, [r5, #0]
}
 8006ebc:	bd70      	pop	{r4, r5, r6, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000aac 	.word	0x20000aac
 8006ec4:	080124df 	.word	0x080124df
 8006ec8:	20004248 	.word	0x20004248
 8006ecc:	080124fc 	.word	0x080124fc

08006ed0 <RTC_IRQHandler>:
	  Cyear=ptime->year;
}


void RTC_IRQHandler (void)
{
 8006ed0:	b508      	push	{r3, lr}
      if (RTC_GetITStatus(RTC_IT_SEC) != RESET) {
 8006ed2:	2001      	movs	r0, #1
 8006ed4:	f000 fc18 	bl	8007708 <RTC_GetITStatus>
 8006ed8:	b148      	cbz	r0, 8006eee <RTC_IRQHandler+0x1e>
      	 RTC_ClearITPendingBit(RTC_IT_SEC);
 8006eda:	2001      	movs	r0, #1
 8006edc:	f000 fc24 	bl	8007728 <RTC_ClearITPendingBit>
      	 time_rtc_flag = 1;
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	4b03      	ldr	r3, [pc, #12]	; (8006ef0 <RTC_IRQHandler+0x20>)
 8006ee4:	701a      	strb	r2, [r3, #0]
      	 RTC_WaitForLastTask();
      }
}
 8006ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      	 RTC_WaitForLastTask();
 8006eea:	f000 bc05 	b.w	80076f8 <RTC_WaitForLastTask>
}
 8006eee:	bd08      	pop	{r3, pc}
 8006ef0:	2000420c 	.word	0x2000420c

08006ef4 <Default_Handler>:
#endif


static inline void NVIC_SystemReset (void)
{
      SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | SCB_AIRCR_SYSRESETREQ_Msk);	/* Keep priority group unchanged */
 8006ef4:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <Default_Handler+0x14>)
 8006ef6:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <Default_Handler+0x18>)
 8006ef8:	68d1      	ldr	r1, [r2, #12]
 8006efa:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
 8006efe:	430b      	orrs	r3, r1
 8006f00:	60d3      	str	r3, [r2, #12]
static inline void __DSB()                      { __asm volatile ("dsb"); }
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	e7fe      	b.n	8006f06 <Default_Handler+0x12>
 8006f08:	e000ed00 	.word	0xe000ed00
 8006f0c:	05fa0004 	.word	0x05fa0004

08006f10 <__Init_Data_and_BSS>:
{
      unsigned long *pulSrc,*pulDest;
      /* Copy the data segment initializers from flash to SRAM */
      pulSrc  = &_sidata;
      pulDest = &_sdata;
      if (pulSrc != pulDest) {
 8006f10:	4b0c      	ldr	r3, [pc, #48]	; (8006f44 <__Init_Data_and_BSS+0x34>)
 8006f12:	4a0d      	ldr	r2, [pc, #52]	; (8006f48 <__Init_Data_and_BSS+0x38>)
{
 8006f14:	b510      	push	{r4, lr}
      if (pulSrc != pulDest) {
 8006f16:	4293      	cmp	r3, r2
 8006f18:	461c      	mov	r4, r3
 8006f1a:	d002      	beq.n	8006f22 <__Init_Data_and_BSS+0x12>
 8006f1c:	2300      	movs	r3, #0
         for (;pulDest<&_edata;) {
 8006f1e:	480b      	ldr	r0, [pc, #44]	; (8006f4c <__Init_Data_and_BSS+0x3c>)
 8006f20:	e003      	b.n	8006f2a <__Init_Data_and_BSS+0x1a>
      if (pulSrc != pulDest) {
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <__Init_Data_and_BSS+0x40>)
             *(pulDest++) = *(pulSrc++);
         }
      }
      /* Zero fill the bss segment. */
      for (pulDest=&_sbss;pulDest<&_ebss;) {
 8006f24:	4a0b      	ldr	r2, [pc, #44]	; (8006f54 <__Init_Data_and_BSS+0x44>)
          *(pulDest++) = 0;
 8006f26:	2100      	movs	r1, #0
 8006f28:	e006      	b.n	8006f38 <__Init_Data_and_BSS+0x28>
 8006f2a:	18d1      	adds	r1, r2, r3
         for (;pulDest<&_edata;) {
 8006f2c:	4281      	cmp	r1, r0
 8006f2e:	d2f8      	bcs.n	8006f22 <__Init_Data_and_BSS+0x12>
             *(pulDest++) = *(pulSrc++);
 8006f30:	58e1      	ldr	r1, [r4, r3]
 8006f32:	50d1      	str	r1, [r2, r3]
 8006f34:	3304      	adds	r3, #4
 8006f36:	e7f8      	b.n	8006f2a <__Init_Data_and_BSS+0x1a>
      for (pulDest=&_sbss;pulDest<&_ebss;) {
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d202      	bcs.n	8006f42 <__Init_Data_and_BSS+0x32>
          *(pulDest++) = 0;
 8006f3c:	f843 1b04 	str.w	r1, [r3], #4
 8006f40:	e7fa      	b.n	8006f38 <__Init_Data_and_BSS+0x28>
      }
}
 8006f42:	bd10      	pop	{r4, pc}
 8006f44:	080127a0 	.word	0x080127a0
 8006f48:	20000000 	.word	0x20000000
 8006f4c:	20000a90 	.word	0x20000a90
 8006f50:	20000a90 	.word	0x20000a90
 8006f54:	20004248 	.word	0x20004248

08006f58 <Reset_Handler>:


void Reset_Handler (void)
{
 8006f58:	4668      	mov	r0, sp
 8006f5a:	f020 0107 	bic.w	r1, r0, #7
 8006f5e:	468d      	mov	sp, r1
 8006f60:	b508      	push	{r3, lr}
      volatile unsigned long i;
      for (i=0;i<500000;i++) {
      }
#endif
      /* Initialize data and bss */
      __Init_Data_and_BSS();
 8006f62:	f7ff ffd5 	bl	8006f10 <__Init_Data_and_BSS>
      /* Setup the microcontroller system. */
      SystemInit();
 8006f66:	f000 f803 	bl	8006f70 <SystemInit>
      /* Call the application's entry point.*/
      main();
 8006f6a:	f7fb fc6d 	bl	8002848 <main>
 8006f6e:	e7fe      	b.n	8006f6e <Reset_Handler+0x16>

08006f70 <SystemInit>:

void SystemInit (void)
{
      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
      /* Set HSION bit */
      RCC->CR |= (unsigned int)0x00000001;
 8006f70:	4b3a      	ldr	r3, [pc, #232]	; (800705c <SystemInit+0xec>)
{
 8006f72:	b082      	sub	sp, #8
      RCC->CR |= (unsigned int)0x00000001;
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]
      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
      RCC->CFGR &= (unsigned int)0xF8FF0000;
 8006f7c:	6859      	ldr	r1, [r3, #4]
 8006f7e:	4a38      	ldr	r2, [pc, #224]	; (8007060 <SystemInit+0xf0>)
 8006f80:	400a      	ands	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
#else
      RCC->CFGR &= (unsigned int)0xF0FF0000;
#endif /* STM32F10X_CL */
      /* Reset HSEON, CSSON and PLLON bits */
      RCC->CR &= (unsigned int)0xFEF6FFFF;
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006f8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f8e:	601a      	str	r2, [r3, #0]
      /* Reset HSEBYP bit */
      RCC->CR &= (unsigned int)0xFFFBFFFF;
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f96:	601a      	str	r2, [r3, #0]
      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
      RCC->CFGR &= (unsigned int)0xFF80FFFF;
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8006f9e:	605a      	str	r2, [r3, #4]
      RCC->CIR = 0x009F0000;
      /* Reset CFGR2 register */
      RCC->CFGR2 = 0x00000000;
#else
      /* Disable all interrupts and clear pending bits  */
      RCC->CIR = 0x009F0000;
 8006fa0:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006fa4:	609a      	str	r2, [r3, #8]
      }
}
#elif defined SYSCLK_FREQ_72MHz
static void SetSysClockTo72 (void)
{
      volatile unsigned int StartUpCounter = 0,HSEStatus = 0;
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	9200      	str	r2, [sp, #0]
 8006faa:	9201      	str	r2, [sp, #4]
      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration */
      /* Enable HSE */
      RCC->CR |= ((unsigned int)RCC_CR_HSEON);
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006fb2:	601a      	str	r2, [r3, #0]
      /* Wait till HSE is ready and if Time out is reached exit */
      do {
          HSEStatus = RCC->CR & RCC_CR_HSERDY;
          StartUpCounter++;
      } while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8006fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
          HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8006fbe:	9101      	str	r1, [sp, #4]
          StartUpCounter++;
 8006fc0:	9900      	ldr	r1, [sp, #0]
 8006fc2:	3101      	adds	r1, #1
 8006fc4:	9100      	str	r1, [sp, #0]
      } while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8006fc6:	9901      	ldr	r1, [sp, #4]
 8006fc8:	b911      	cbnz	r1, 8006fd0 <SystemInit+0x60>
 8006fca:	9900      	ldr	r1, [sp, #0]
 8006fcc:	4291      	cmp	r1, r2
 8006fce:	d1f3      	bne.n	8006fb8 <SystemInit+0x48>
      if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
 8006fd0:	4b22      	ldr	r3, [pc, #136]	; (800705c <SystemInit+0xec>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
         HSEStatus = (unsigned int)0x01;
 8006fd8:	bf18      	it	ne
 8006fda:	2301      	movne	r3, #1
      } else {
         HSEStatus = (unsigned int)0x00;
 8006fdc:	9301      	str	r3, [sp, #4]
      }
      if (HSEStatus == (unsigned int)0x01) {
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d005      	beq.n	8006ff0 <SystemInit+0x80>
      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;		/* Vector Table Relocation in Internal FLASH. */
 8006fe4:	4b1f      	ldr	r3, [pc, #124]	; (8007064 <SystemInit+0xf4>)
 8006fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006fea:	609a      	str	r2, [r3, #8]
}
 8006fec:	b002      	add	sp, #8
 8006fee:	4770      	bx	lr
         /* Enable Prefetch Buffer */
         FLASH->ACR |= FLASH_ACR_PRFTBE;
 8006ff0:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <SystemInit+0xf8>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	f042 0210 	orr.w	r2, r2, #16
 8006ff8:	601a      	str	r2, [r3, #0]
         /* Flash 2 wait state */
         FLASH->ACR &= (unsigned int)((unsigned int)~FLASH_ACR_LATENCY);
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f022 0203 	bic.w	r2, r2, #3
 8007000:	601a      	str	r2, [r3, #0]
         FLASH->ACR |= (unsigned int)FLASH_ACR_LATENCY_2;
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	f042 0202 	orr.w	r2, r2, #2
 8007008:	601a      	str	r2, [r3, #0]
         /* HCLK = SYSCLK */
         RCC->CFGR |= (unsigned int)RCC_CFGR_HPRE_DIV1;
 800700a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	605a      	str	r2, [r3, #4]
         /* PCLK2 = HCLK */
         RCC->CFGR |= (unsigned int)RCC_CFGR_PPRE2_DIV1;
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	605a      	str	r2, [r3, #4]
         /* PCLK1 = HCLK */
         RCC->CFGR |= (unsigned int)RCC_CFGR_PPRE1_DIV2;
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800701c:	605a      	str	r2, [r3, #4]
         /* PLL configuration: PLLCLK = PREDIV1 * 6 = 72 MHz */
         RCC->CFGR &= (unsigned int)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
         RCC->CFGR |= (unsigned int)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL6);
#else
         /* PLL configuration: PLLCLK = HSE * 6 = 72 MHz */
         RCC->CFGR &= (unsigned int)((unsigned int)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8007024:	605a      	str	r2, [r3, #4]
#if (HSE_VALUE == 12000000UL)
         RCC->CFGR |= (unsigned int)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
#else
         RCC->CFGR |= (unsigned int)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800702c:	605a      	str	r2, [r3, #4]
#endif
#endif		/* STM32F10X_CL */
         /* Enable PLL */
         RCC->CR |= RCC_CR_PLLON;
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007034:	601a      	str	r2, [r3, #0]
         /* Wait till PLL is ready */
         while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 8007036:	6819      	ldr	r1, [r3, #0]
 8007038:	4a08      	ldr	r2, [pc, #32]	; (800705c <SystemInit+0xec>)
 800703a:	0189      	lsls	r1, r1, #6
 800703c:	d5fb      	bpl.n	8007036 <SystemInit+0xc6>
         }
         /* Select PLL as system clock source */
         RCC->CFGR &= (unsigned int)((unsigned int)~(RCC_CFGR_SW));
 800703e:	6853      	ldr	r3, [r2, #4]
 8007040:	f023 0303 	bic.w	r3, r3, #3
 8007044:	6053      	str	r3, [r2, #4]
         RCC->CFGR |= (unsigned int)RCC_CFGR_SW_PLL;
 8007046:	6853      	ldr	r3, [r2, #4]
 8007048:	f043 0302 	orr.w	r3, r3, #2
 800704c:	6053      	str	r3, [r2, #4]
         /* Wait till PLL is used as system clock source */
         while ((RCC->CFGR & (unsigned int)RCC_CFGR_SWS) != (unsigned int)0x08) {
 800704e:	6853      	ldr	r3, [r2, #4]
 8007050:	f003 030c 	and.w	r3, r3, #12
 8007054:	2b08      	cmp	r3, #8
 8007056:	d1fa      	bne.n	800704e <SystemInit+0xde>
 8007058:	e7c4      	b.n	8006fe4 <SystemInit+0x74>
 800705a:	bf00      	nop
 800705c:	40021000 	.word	0x40021000
 8007060:	f8ff0000 	.word	0xf8ff0000
 8007064:	e000ed00 	.word	0xe000ed00
 8007068:	40022000 	.word	0x40022000

0800706c <NVIC_PriorityGroupConfig>:


void NVIC_PriorityGroupConfig (unsigned int NVIC_PriorityGroup)
{
      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800706c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8007070:	4b02      	ldr	r3, [pc, #8]	; (800707c <NVIC_PriorityGroupConfig+0x10>)
 8007072:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8007076:	60d8      	str	r0, [r3, #12]
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	e000ed00 	.word	0xe000ed00

08007080 <NVIC_Init>:


void NVIC_Init (NVIC_InitTypeDef *NVIC_InitStruct)
{
      unsigned int tmppriority = 0x00,tmppre = 0x00,tmpsub = 0x0F;
      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE) {
 8007080:	6842      	ldr	r2, [r0, #4]
{
 8007082:	b510      	push	{r4, lr}
 8007084:	7803      	ldrb	r3, [r0, #0]
      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE) {
 8007086:	b1fa      	cbz	r2, 80070c8 <NVIC_Init+0x48>
         /* Compute the Corresponding IRQ Priority */
         tmppriority = (0x700 - ((SCB->AIRCR) & (unsigned int)0x700))>> 0x08;
 8007088:	4a15      	ldr	r2, [pc, #84]	; (80070e0 <NVIC_Init+0x60>)
         tmppre = (0x4 - tmppriority);
         tmpsub = tmpsub >> tmppriority;
         tmppriority = (unsigned int)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800708a:	7844      	ldrb	r4, [r0, #1]
         tmppriority = (0x700 - ((SCB->AIRCR) & (unsigned int)0x700))>> 0x08;
 800708c:	68d2      	ldr	r2, [r2, #12]
         tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
         tmppriority = tmppriority << 0x04;
         NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800708e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
         tmppriority = (0x700 - ((SCB->AIRCR) & (unsigned int)0x700))>> 0x08;
 8007092:	43d2      	mvns	r2, r2
 8007094:	f3c2 2202 	ubfx	r2, r2, #8, #3
         tmppre = (0x4 - tmppriority);
 8007098:	f1c2 0104 	rsb	r1, r2, #4
         tmppriority = (unsigned int)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800709c:	fa04 f101 	lsl.w	r1, r4, r1
         tmpsub = tmpsub >> tmppriority;
 80070a0:	240f      	movs	r4, #15
 80070a2:	fa24 f202 	lsr.w	r2, r4, r2
         tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80070a6:	7884      	ldrb	r4, [r0, #2]
         NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80070a8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
         tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80070ac:	4022      	ands	r2, r4
 80070ae:	430a      	orrs	r2, r1
         tmppriority = tmppriority << 0x04;
 80070b0:	0112      	lsls	r2, r2, #4
         NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
         /* Enable the Selected IRQ Channels */
         NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80070b8:	7803      	ldrb	r3, [r0, #0]
         (unsigned int)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (unsigned char)0x1F);
 80070ba:	2201      	movs	r2, #1
         NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80070bc:	0959      	lsrs	r1, r3, #5
         (unsigned int)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (unsigned char)0x1F);
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	e006      	b.n	80070d6 <NVIC_Init+0x56>
      } else {
         /* Disable the Selected IRQ Channels */
         NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80070c8:	0959      	lsrs	r1, r3, #5
         (unsigned int)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (unsigned char)0x1F);
 80070ca:	2201      	movs	r2, #1
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	fa02 f303 	lsl.w	r3, r2, r3
         NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80070d4:	3120      	adds	r1, #32
 80070d6:	4a03      	ldr	r2, [pc, #12]	; (80070e4 <NVIC_Init+0x64>)
 80070d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80070dc:	bd10      	pop	{r4, pc}
 80070de:	bf00      	nop
 80070e0:	e000ed00 	.word	0xe000ed00
 80070e4:	e000e100 	.word	0xe000e100

080070e8 <NVIC_SetVectorTable>:
}


void NVIC_SetVectorTable (unsigned int NVIC_VectTab, unsigned int Offset)
{
      SCB->VTOR = NVIC_VectTab | (Offset & (unsigned int)0x1FFFFF80);
 80070e8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80070ec:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80070f0:	4b01      	ldr	r3, [pc, #4]	; (80070f8 <NVIC_SetVectorTable+0x10>)
 80070f2:	4308      	orrs	r0, r1
 80070f4:	6098      	str	r0, [r3, #8]
 80070f6:	4770      	bx	lr
 80070f8:	e000ed00 	.word	0xe000ed00

080070fc <RCC_ADCCLKConfig>:


void RCC_ADCCLKConfig (unsigned int RCC_PCLK2)
{
      unsigned int tmpreg = 0;
      tmpreg = RCC->CFGR;
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <RCC_ADCCLKConfig+0x10>)
 80070fe:	685a      	ldr	r2, [r3, #4]
      /* Clear ADCPRE[1:0] bits */
      tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8007100:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
      /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
      tmpreg |= RCC_PCLK2;
 8007104:	4310      	orrs	r0, r2
      /* Store the new value */
      RCC->CFGR = tmpreg;
 8007106:	6058      	str	r0, [r3, #4]
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40021000 	.word	0x40021000

08007110 <RCC_GetClocksFreq>:
#endif /* STM32F10X_CL */
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
      unsigned int prediv1factor = 0;
#endif
      /* Get SYSCLK source */
      tmp = RCC->CFGR & CFGR_SWS_Mask;
 8007110:	4b1e      	ldr	r3, [pc, #120]	; (800718c <RCC_GetClocksFreq+0x7c>)
{
 8007112:	b510      	push	{r4, lr}
      tmp = RCC->CFGR & CFGR_SWS_Mask;
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	f002 020c 	and.w	r2, r2, #12
      switch (tmp) {
 800711a:	2a04      	cmp	r2, #4
 800711c:	d003      	beq.n	8007126 <RCC_GetClocksFreq+0x16>
 800711e:	2a08      	cmp	r2, #8
 8007120:	d004      	beq.n	800712c <RCC_GetClocksFreq+0x1c>
 8007122:	4b1b      	ldr	r3, [pc, #108]	; (8007190 <RCC_GetClocksFreq+0x80>)
 8007124:	e000      	b.n	8007128 <RCC_GetClocksFreq+0x18>
         case 0x00:  /* HSI used as system clock */
           RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
           break;
         case 0x04:  /* HSE used as system clock */
           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8007126:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <RCC_GetClocksFreq+0x84>)
 8007128:	6003      	str	r3, [r0, #0]
           break;
 800712a:	e010      	b.n	800714e <RCC_GetClocksFreq+0x3e>
         case 0x08:  /* PLL used as system clock */
           /* Get PLL clock source and multiplication factor -------------------*/
           pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800712c:	685a      	ldr	r2, [r3, #4]
           pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800712e:	6859      	ldr	r1, [r3, #4]
#ifndef STM32F10X_CL
           pllmull = ( pllmull >> 18) + 2;
 8007130:	f3c2 4283 	ubfx	r2, r2, #18, #4
           if (pllsource == 0x00) {		/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 8007134:	03c9      	lsls	r1, r1, #15
           pllmull = ( pllmull >> 18) + 2;
 8007136:	f102 0202 	add.w	r2, r2, #2
           if (pllsource == 0x00) {		/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 800713a:	d401      	bmi.n	8007140 <RCC_GetClocksFreq+0x30>
              RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800713c:	4b16      	ldr	r3, [pc, #88]	; (8007198 <RCC_GetClocksFreq+0x88>)
 800713e:	e004      	b.n	800714a <RCC_GetClocksFreq+0x3a>
              prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
              /* HSE oscillator clock selected as PREDIV1 clock entry */
              RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
              /* HSE selected as PLL clock entry */
              if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (unsigned int)RESET) {	/* HSE oscillator clock divided by 2 */
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	039b      	lsls	r3, r3, #14
                 RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8007144:	bf4c      	ite	mi
 8007146:	4b15      	ldrmi	r3, [pc, #84]	; (800719c <RCC_GetClocksFreq+0x8c>)
              } else {
                 RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8007148:	4b12      	ldrpl	r3, [pc, #72]	; (8007194 <RCC_GetClocksFreq+0x84>)
 800714a:	435a      	muls	r2, r3
 800714c:	6002      	str	r2, [r0, #0]
           RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
           break;
      }
      /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies */
      /* Get HCLK prescaler */
      tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800714e:	4b0f      	ldr	r3, [pc, #60]	; (800718c <RCC_GetClocksFreq+0x7c>)
      tmp = tmp >> 4;
      presc = APBAHBPrescTable[tmp];
 8007150:	4913      	ldr	r1, [pc, #76]	; (80071a0 <RCC_GetClocksFreq+0x90>)
      tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8007152:	685a      	ldr	r2, [r3, #4]
      tmp = tmp >> 4;
 8007154:	f3c2 1203 	ubfx	r2, r2, #4, #4
      presc = APBAHBPrescTable[tmp];
 8007158:	5c8c      	ldrb	r4, [r1, r2]
      /* HCLK clock frequency */
      RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800715a:	6802      	ldr	r2, [r0, #0]
 800715c:	40e2      	lsrs	r2, r4
 800715e:	6042      	str	r2, [r0, #4]
      /* Get PCLK1 prescaler */
      tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8007160:	685c      	ldr	r4, [r3, #4]
      tmp = tmp >> 8;
 8007162:	f3c4 2402 	ubfx	r4, r4, #8, #3
      presc = APBAHBPrescTable[tmp];
 8007166:	5d0c      	ldrb	r4, [r1, r4]
      /* PCLK1 clock frequency */
      RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8007168:	fa22 f404 	lsr.w	r4, r2, r4
 800716c:	6084      	str	r4, [r0, #8]
      /* Get PCLK2 prescaler */
      tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800716e:	685c      	ldr	r4, [r3, #4]
      tmp = tmp >> 11;
 8007170:	f3c4 24c2 	ubfx	r4, r4, #11, #3
      presc = APBAHBPrescTable[tmp];
 8007174:	5d09      	ldrb	r1, [r1, r4]
      /* PCLK2 clock frequency */
      RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8007176:	40ca      	lsrs	r2, r1
 8007178:	60c2      	str	r2, [r0, #12]
      /* Get ADCCLK prescaler */
      tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800717a:	685b      	ldr	r3, [r3, #4]
      tmp = tmp >> 14;
      presc = ADCPrescTable[tmp];
 800717c:	4909      	ldr	r1, [pc, #36]	; (80071a4 <RCC_GetClocksFreq+0x94>)
      tmp = tmp >> 14;
 800717e:	f3c3 3381 	ubfx	r3, r3, #14, #2
      presc = ADCPrescTable[tmp];
 8007182:	5ccb      	ldrb	r3, [r1, r3]
      /* ADCCLK clock frequency */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8007184:	fbb2 f2f3 	udiv	r2, r2, r3
 8007188:	6102      	str	r2, [r0, #16]
 800718a:	bd10      	pop	{r4, pc}
 800718c:	40021000 	.word	0x40021000
 8007190:	00b71b00 	.word	0x00b71b00
 8007194:	007a1200 	.word	0x007a1200
 8007198:	005b8d80 	.word	0x005b8d80
 800719c:	003d0900 	.word	0x003d0900
 80071a0:	20000024 	.word	0x20000024
 80071a4:	20000020 	.word	0x20000020

080071a8 <RCC_APB2PeriphClockCmd>:
      }
}


void RCC_APB2PeriphClockCmd (unsigned int RCC_APB2Periph, int NewState)
{
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <RCC_APB2PeriphClockCmd+0x14>)
      if (NewState != DISABLE) {
         RCC->APB2ENR |= RCC_APB2Periph;
 80071aa:	699a      	ldr	r2, [r3, #24]
      if (NewState != DISABLE) {
 80071ac:	b109      	cbz	r1, 80071b2 <RCC_APB2PeriphClockCmd+0xa>
         RCC->APB2ENR |= RCC_APB2Periph;
 80071ae:	4310      	orrs	r0, r2
 80071b0:	e001      	b.n	80071b6 <RCC_APB2PeriphClockCmd+0xe>
      } else {
         RCC->APB2ENR &= ~RCC_APB2Periph;
 80071b2:	ea22 0000 	bic.w	r0, r2, r0
 80071b6:	6198      	str	r0, [r3, #24]
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40021000 	.word	0x40021000

080071c0 <RCC_APB1PeriphClockCmd>:
      }
}


void RCC_APB1PeriphClockCmd (unsigned int RCC_APB1Periph, int NewState)
{
 80071c0:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <RCC_APB1PeriphClockCmd+0x14>)
      if (NewState != DISABLE) {
         RCC->APB1ENR |= RCC_APB1Periph;
 80071c2:	69da      	ldr	r2, [r3, #28]
      if (NewState != DISABLE) {
 80071c4:	b109      	cbz	r1, 80071ca <RCC_APB1PeriphClockCmd+0xa>
         RCC->APB1ENR |= RCC_APB1Periph;
 80071c6:	4310      	orrs	r0, r2
 80071c8:	e001      	b.n	80071ce <RCC_APB1PeriphClockCmd+0xe>
      } else {
         RCC->APB1ENR &= ~RCC_APB1Periph;
 80071ca:	ea22 0000 	bic.w	r0, r2, r0
 80071ce:	61d8      	str	r0, [r3, #28]
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40021000 	.word	0x40021000

080071d8 <RCC_APB2PeriphResetCmd>:
}
#endif /* STM32F10X_CL */


void RCC_APB2PeriphResetCmd (unsigned int RCC_APB2Periph, int NewState)
{
 80071d8:	4b04      	ldr	r3, [pc, #16]	; (80071ec <RCC_APB2PeriphResetCmd+0x14>)
      if (NewState != DISABLE) {
         RCC->APB2RSTR |= RCC_APB2Periph;
 80071da:	68da      	ldr	r2, [r3, #12]
      if (NewState != DISABLE) {
 80071dc:	b109      	cbz	r1, 80071e2 <RCC_APB2PeriphResetCmd+0xa>
         RCC->APB2RSTR |= RCC_APB2Periph;
 80071de:	4310      	orrs	r0, r2
 80071e0:	e001      	b.n	80071e6 <RCC_APB2PeriphResetCmd+0xe>
      } else {
         RCC->APB2RSTR &= ~RCC_APB2Periph;
 80071e2:	ea22 0000 	bic.w	r0, r2, r0
 80071e6:	60d8      	str	r0, [r3, #12]
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40021000 	.word	0x40021000

080071f0 <ADC_DeInit>:
/* ADC1 DR register base address */
#define DR_ADDRESS                  ((unsigned int)0x4001244C)


void ADC_DeInit (ADC_TypeDef *ADCx)
{
 80071f0:	b508      	push	{r3, lr}
      if (ADCx == ADC1) {
 80071f2:	4b13      	ldr	r3, [pc, #76]	; (8007240 <ADC_DeInit+0x50>)
 80071f4:	4298      	cmp	r0, r3
 80071f6:	d107      	bne.n	8007208 <ADC_DeInit+0x18>
         /* Enable ADC1 reset state */
         RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 80071f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80071fc:	2101      	movs	r1, #1
 80071fe:	f7ff ffeb 	bl	80071d8 <RCC_APB2PeriphResetCmd>
         /* Release ADC1 from reset state */
         RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 8007202:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007206:	e014      	b.n	8007232 <ADC_DeInit+0x42>
      } else if (ADCx == ADC2) {
 8007208:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <ADC_DeInit+0x54>)
 800720a:	4298      	cmp	r0, r3
 800720c:	d107      	bne.n	800721e <ADC_DeInit+0x2e>
         /* Enable ADC2 reset state */
         RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 800720e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007212:	2101      	movs	r1, #1
 8007214:	f7ff ffe0 	bl	80071d8 <RCC_APB2PeriphResetCmd>
         /* Release ADC2 from reset state */
         RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 8007218:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800721c:	e009      	b.n	8007232 <ADC_DeInit+0x42>
      } else {
         if (ADCx == ADC3) {
 800721e:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <ADC_DeInit+0x58>)
 8007220:	4298      	cmp	r0, r3
 8007222:	d10b      	bne.n	800723c <ADC_DeInit+0x4c>
            /* Enable ADC3 reset state */
            RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 8007224:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007228:	2101      	movs	r1, #1
 800722a:	f7ff ffd5 	bl	80071d8 <RCC_APB2PeriphResetCmd>
            /* Release ADC3 from reset state */
            RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 800722e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007232:	2100      	movs	r1, #0
         }
      }
}
 8007234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 8007238:	f7ff bfce 	b.w	80071d8 <RCC_APB2PeriphResetCmd>
 800723c:	bd08      	pop	{r3, pc}
 800723e:	bf00      	nop
 8007240:	40012400 	.word	0x40012400
 8007244:	40012800 	.word	0x40012800
 8007248:	40013c00 	.word	0x40013c00

0800724c <ADC_Init>:
{
      unsigned int tmpreg1 = 0;
      unsigned char tmpreg2 = 0;
      /* ADCx CR1 Configuration */
      /* Get the ADCx CR1 value */
      tmpreg1 = ADCx->CR1;
 800724c:	6842      	ldr	r2, [r0, #4]
      /* Clear DUALMOD and SCAN bits */
      tmpreg1 &= CR1_CLEAR_Mask;
      /* Configure ADCx: Dual mode and scan conversion mode */
      /* Set DUALMOD bits according to ADC_Mode value */
      /* Set SCAN bit according to ADC_ScanConvMode value */
      tmpreg1 |= (unsigned int)(ADC_InitStruct->ADC_Mode | ((unsigned int)ADC_InitStruct->ADC_ScanConvMode << 8));
 800724e:	680b      	ldr	r3, [r1, #0]
      tmpreg1 &= CR1_CLEAR_Mask;
 8007250:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8007254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
      tmpreg1 |= (unsigned int)(ADC_InitStruct->ADC_Mode | ((unsigned int)ADC_InitStruct->ADC_ScanConvMode << 8));
 8007258:	431a      	orrs	r2, r3
 800725a:	684b      	ldr	r3, [r1, #4]
{
 800725c:	b510      	push	{r4, lr}
      tmpreg1 |= (unsigned int)(ADC_InitStruct->ADC_Mode | ((unsigned int)ADC_InitStruct->ADC_ScanConvMode << 8));
 800725e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
      /* Write to ADCx CR1 */
      ADCx->CR1 = tmpreg1;
 8007262:	6043      	str	r3, [r0, #4]
      tmpreg1 &= CR2_CLEAR_Mask;
      /* Configure ADCx: external trigger event and continuous conversion mode */
      /* Set ALIGN bit according to ADC_DataAlign value */
      /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
      /* Set CONT bit according to ADC_ContinuousConvMode value */
      tmpreg1 |= (unsigned int)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | ((unsigned int)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8007264:	68ca      	ldr	r2, [r1, #12]
 8007266:	690b      	ldr	r3, [r1, #16]
      tmpreg1 = ADCx->CR2;
 8007268:	6884      	ldr	r4, [r0, #8]
      tmpreg1 |= (unsigned int)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | ((unsigned int)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800726a:	431a      	orrs	r2, r3
      tmpreg1 &= CR2_CLEAR_Mask;
 800726c:	4b08      	ldr	r3, [pc, #32]	; (8007290 <ADC_Init+0x44>)
 800726e:	4023      	ands	r3, r4
      tmpreg1 |= (unsigned int)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | ((unsigned int)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8007270:	4313      	orrs	r3, r2
 8007272:	688a      	ldr	r2, [r1, #8]
 8007274:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
      /* Write to ADCx CR2 */
      ADCx->CR2 = tmpreg1;
 8007278:	6082      	str	r2, [r0, #8]
      tmpreg1 = ADCx->SQR1;
      /* Clear L bits */
      tmpreg1 &= SQR1_CLEAR_Mask;
      /* Configure ADCx: regular channel sequence length */
      /* Set L bits according to ADC_NbrOfChannel value */
      tmpreg2 |= (unsigned char) (ADC_InitStruct->ADC_NbrOfChannel - (unsigned char)1);
 800727a:	7d0b      	ldrb	r3, [r1, #20]
      tmpreg1 = ADCx->SQR1;
 800727c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
      tmpreg2 |= (unsigned char) (ADC_InitStruct->ADC_NbrOfChannel - (unsigned char)1);
 800727e:	3b01      	subs	r3, #1
      tmpreg1 &= SQR1_CLEAR_Mask;
 8007280:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
      tmpreg1 |= (unsigned int)tmpreg2 << 20;
 8007284:	b2db      	uxtb	r3, r3
 8007286:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
      /* Write to ADCx SQR1 */
      ADCx->SQR1 = tmpreg1;
 800728a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800728c:	bd10      	pop	{r4, pc}
 800728e:	bf00      	nop
 8007290:	fff1f7fd 	.word	0xfff1f7fd

08007294 <ADC_StructInit>:

void ADC_StructInit (ADC_InitTypeDef *ADC_InitStruct)
{
      /* Reset ADC init structure parameters values */
      /* Initialize the ADC_Mode member */
      ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8007294:	2300      	movs	r3, #0
 8007296:	6003      	str	r3, [r0, #0]
      /* initialize the ADC_ScanConvMode member */
      ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8007298:	6043      	str	r3, [r0, #4]
      /* Initialize the ADC_ContinuousConvMode member */
      ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800729a:	6083      	str	r3, [r0, #8]
      /* Initialize the ADC_ExternalTrigConv member */
      ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 800729c:	60c3      	str	r3, [r0, #12]
      /* Initialize the ADC_DataAlign member */
      ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800729e:	6103      	str	r3, [r0, #16]
      /* Initialize the ADC_NbrOfChannel member */
      ADC_InitStruct->ADC_NbrOfChannel = 1;
 80072a0:	2301      	movs	r3, #1
 80072a2:	7503      	strb	r3, [r0, #20]
 80072a4:	4770      	bx	lr

080072a6 <ADC_Cmd>:

void ADC_Cmd (ADC_TypeDef *ADCx, int NewState)
{
      if (NewState != DISABLE) {
         /* Set the ADON bit to wake up the ADC from power down mode */
         ADCx->CR2 |= CR2_ADON_Set;
 80072a6:	6883      	ldr	r3, [r0, #8]
      if (NewState != DISABLE) {
 80072a8:	b111      	cbz	r1, 80072b0 <ADC_Cmd+0xa>
         ADCx->CR2 |= CR2_ADON_Set;
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	e001      	b.n	80072b4 <ADC_Cmd+0xe>
      } else {
         /* Disable the selected ADC peripheral */
         ADCx->CR2 &= CR2_ADON_Reset;
 80072b0:	f023 0301 	bic.w	r3, r3, #1
 80072b4:	6083      	str	r3, [r0, #8]
 80072b6:	4770      	bx	lr

080072b8 <ADC_StartCalibration>:


void ADC_StartCalibration (ADC_TypeDef *ADCx)
{
      /* Enable the selected ADC calibration process */
      ADCx->CR2 |= CR2_CAL_Set;
 80072b8:	6883      	ldr	r3, [r0, #8]
 80072ba:	f043 0304 	orr.w	r3, r3, #4
 80072be:	6083      	str	r3, [r0, #8]
 80072c0:	4770      	bx	lr

080072c2 <ADC_GetCalibrationStatus>:

int ADC_GetCalibrationStatus (ADC_TypeDef *ADCx)
{
      int bint = RESET;
      /* Check the status of CAL bit */
      if ((ADCx->CR2 & CR2_CAL_Set) != (unsigned int)RESET) {
 80072c2:	6880      	ldr	r0, [r0, #8]
         /* CAL bit is reset: end of calibration */
         bint = RESET;
      }
      /* Return the CAL bit status */
      return  bint;
}
 80072c4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80072c8:	4770      	bx	lr

080072ca <ADC_ExternalTrigInjectedConvConfig>:

void ADC_ExternalTrigInjectedConvConfig (ADC_TypeDef *ADCx, unsigned int ADC_ExternalTrigInjecConv)
{
      unsigned int tmpreg = 0;
      /* Get the old register value */
      tmpreg = ADCx->CR2;
 80072ca:	6883      	ldr	r3, [r0, #8]
      /* Clear the old external event selection for injected group */
      tmpreg &= CR2_JEXTSEL_Reset;
 80072cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
      /* Set the external event selection for injected group */
      tmpreg |= ADC_ExternalTrigInjecConv;
 80072d0:	4319      	orrs	r1, r3
      /* Store the new register value */
      ADCx->CR2 = tmpreg;
 80072d2:	6081      	str	r1, [r0, #8]
 80072d4:	4770      	bx	lr

080072d6 <ADC_ExternalTrigInjectedConvCmd>:

void ADC_ExternalTrigInjectedConvCmd (ADC_TypeDef *ADCx, int NewState)
{
      if (NewState != DISABLE) {
         /* Enable the selected ADC external event selection for injected group */
         ADCx->CR2 |= CR2_JEXTTRIG_Set;
 80072d6:	6883      	ldr	r3, [r0, #8]
      if (NewState != DISABLE) {
 80072d8:	b111      	cbz	r1, 80072e0 <ADC_ExternalTrigInjectedConvCmd+0xa>
         ADCx->CR2 |= CR2_JEXTTRIG_Set;
 80072da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072de:	e001      	b.n	80072e4 <ADC_ExternalTrigInjectedConvCmd+0xe>
      } else {
         /* Disable the selected ADC external event selection for injected group */
         ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 80072e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072e4:	6083      	str	r3, [r0, #8]
 80072e6:	4770      	bx	lr

080072e8 <ADC_SoftwareStartInjectedConvCmd>:

void ADC_SoftwareStartInjectedConvCmd (ADC_TypeDef *ADCx, int NewState)
{
      if (NewState != DISABLE) {
         /* Enable the selected ADC conversion for injected group on external event and start the selected ADC injected conversion */
         ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 80072e8:	6883      	ldr	r3, [r0, #8]
      if (NewState != DISABLE) {
 80072ea:	b111      	cbz	r1, 80072f2 <ADC_SoftwareStartInjectedConvCmd+0xa>
         ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 80072ec:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
 80072f0:	e001      	b.n	80072f6 <ADC_SoftwareStartInjectedConvCmd+0xe>
      } else {
         /* Disable the selected ADC conversion on external event for injected group and stop the selected ADC injected conversion */
         ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 80072f2:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
 80072f6:	6083      	str	r3, [r0, #8]
 80072f8:	4770      	bx	lr

080072fa <ADC_InjectedChannelConfig>:

void ADC_InjectedChannelConfig (ADC_TypeDef *ADCx, unsigned char ADC_Channel, unsigned char Rank, unsigned char ADC_SampleTime)
{
      unsigned int tmpreg1 = 0,tmpreg2 = 0,tmpreg3 = 0;
      /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
      if (ADC_Channel > ADC_Channel_9) {
 80072fa:	2909      	cmp	r1, #9
{
 80072fc:	b570      	push	{r4, r5, r6, lr}
 80072fe:	f04f 0403 	mov.w	r4, #3
      if (ADC_Channel > ADC_Channel_9) {
 8007302:	d90c      	bls.n	800731e <ADC_InjectedChannelConfig+0x24>
         /* Get the old register value */
         tmpreg1 = ADCx->SMPR1;
         /* Calculate the mask to clear */
         tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 8007304:	f1a1 050a 	sub.w	r5, r1, #10
 8007308:	436c      	muls	r4, r5
 800730a:	2507      	movs	r5, #7
 800730c:	40a5      	lsls	r5, r4
         /* Clear the old channel sample time */
         tmpreg1 &= ~tmpreg2;
         /* Calculate the mask to set */
         tmpreg2 = (unsigned int)ADC_SampleTime << (3*(ADC_Channel - 10));
 800730e:	fa03 f404 	lsl.w	r4, r3, r4
         tmpreg1 = ADCx->SMPR1;
 8007312:	68c6      	ldr	r6, [r0, #12]
         tmpreg1 &= ~tmpreg2;
 8007314:	ea26 0505 	bic.w	r5, r6, r5
         /* Set the new channel sample time */
         tmpreg1 |= tmpreg2;
 8007318:	432c      	orrs	r4, r5
         /* Store the new register value */
         ADCx->SMPR1 = tmpreg1;
 800731a:	60c4      	str	r4, [r0, #12]
 800731c:	e00a      	b.n	8007334 <ADC_InjectedChannelConfig+0x3a>
      } else {		/* ADC_Channel include in ADC_Channel_[0..9] */
         /* Get the old register value */
         tmpreg1 = ADCx->SMPR2;
         /* Calculate the mask to clear */
         tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 800731e:	434c      	muls	r4, r1
 8007320:	2507      	movs	r5, #7
 8007322:	40a5      	lsls	r5, r4
         /* Clear the old channel sample time */
         tmpreg1 &= ~tmpreg2;
         /* Calculate the mask to set */
         tmpreg2 = (unsigned int)ADC_SampleTime << (3 * ADC_Channel);
 8007324:	fa03 f404 	lsl.w	r4, r3, r4
         tmpreg1 = ADCx->SMPR2;
 8007328:	6906      	ldr	r6, [r0, #16]
         tmpreg1 &= ~tmpreg2;
 800732a:	ea26 0505 	bic.w	r5, r6, r5
         /* Set the new channel sample time */
         tmpreg1 |= tmpreg2;
 800732e:	ea45 0304 	orr.w	r3, r5, r4
         /* Store the new register value */
         ADCx->SMPR2 = tmpreg1;
 8007332:	6103      	str	r3, [r0, #16]
      }
      /* Rank configuration */
      /* Get the old register value */
      tmpreg1 = ADCx->JSQR;
 8007334:	6b84      	ldr	r4, [r0, #56]	; 0x38
      /* Get JL value: Number = JL+1 */
      tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
      /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
      tmpreg2 = JSQR_JSQ_Set << (5 * (unsigned char)((Rank + 3) - (tmpreg3 + 1)));
 8007336:	3202      	adds	r2, #2
      tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
 8007338:	f3c4 5301 	ubfx	r3, r4, #20, #2
      tmpreg2 = JSQR_JSQ_Set << (5 * (unsigned char)((Rank + 3) - (tmpreg3 + 1)));
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2205      	movs	r2, #5
 8007342:	4353      	muls	r3, r2
 8007344:	221f      	movs	r2, #31
 8007346:	409a      	lsls	r2, r3
      /* Clear the old JSQx bits for the selected rank */
      tmpreg1 &= ~tmpreg2;
      /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
      tmpreg2 = (unsigned int)ADC_Channel << (5 * (unsigned char)((Rank + 3) - (tmpreg3 + 1)));
 8007348:	4099      	lsls	r1, r3
      tmpreg1 &= ~tmpreg2;
 800734a:	ea24 0402 	bic.w	r4, r4, r2
      /* Set the JSQx bits for the selected rank */
      tmpreg1 |= tmpreg2;
 800734e:	ea44 0301 	orr.w	r3, r4, r1
      /* Store the new register value */
      ADCx->JSQR = tmpreg1;
 8007352:	6383      	str	r3, [r0, #56]	; 0x38
 8007354:	bd70      	pop	{r4, r5, r6, pc}

08007356 <ADC_InjectedSequencerLengthConfig>:
void ADC_InjectedSequencerLengthConfig (ADC_TypeDef *ADCx, unsigned char Length)
{
      unsigned int tmpreg1 = 0;
      unsigned int tmpreg2 = 0;
      /* Get the old register value */
      tmpreg1 = ADCx->JSQR;
 8007356:	6b83      	ldr	r3, [r0, #56]	; 0x38
      /* Clear the old injected sequnence lenght JL bits */
      tmpreg1 &= JSQR_JL_Reset;
      /* Set the injected sequnence lenght JL bits */
      tmpreg2 = Length - 1;
 8007358:	3901      	subs	r1, #1
      tmpreg1 &= JSQR_JL_Reset;
 800735a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      tmpreg1 |= tmpreg2 << 20;
 800735e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
      /* Store the new register value */
      ADCx->JSQR = tmpreg1;
 8007362:	6383      	str	r3, [r0, #56]	; 0x38
 8007364:	4770      	bx	lr

08007366 <ADC_GetInjectedConversionValue>:
      *(volatile unsigned int *)tmp = (unsigned int)Offset;
}


unsigned short ADC_GetInjectedConversionValue (ADC_TypeDef *ADCx, unsigned char ADC_InjectedChannel)
{
 8007366:	b082      	sub	sp, #8
      volatile unsigned int tmp = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	9301      	str	r3, [sp, #4]
      tmp = (unsigned int)ADCx;
 800736c:	9001      	str	r0, [sp, #4]
      tmp += ADC_InjectedChannel + JDR_Offset;
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	3328      	adds	r3, #40	; 0x28
 8007372:	4419      	add	r1, r3
 8007374:	9101      	str	r1, [sp, #4]
      /* Returns the selected injected channel conversion data value */
      return (unsigned short)(*(volatile unsigned int*)tmp);
 8007376:	9b01      	ldr	r3, [sp, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
}
 800737a:	b280      	uxth	r0, r0
 800737c:	b002      	add	sp, #8
 800737e:	4770      	bx	lr

08007380 <ADC_GetFlagStatus>:

int ADC_GetFlagStatus (ADC_TypeDef *ADCx, unsigned char ADC_FLAG)
{
      int bint = RESET;
      /* Check the status of the specified ADC flag */
      if ((ADCx->SR & ADC_FLAG) != (unsigned char)RESET) {
 8007380:	6803      	ldr	r3, [r0, #0]
 8007382:	4219      	tst	r1, r3
         /* ADC_FLAG is reset */
         bint = RESET;
      }
      /* Return the ADC_FLAG status */
      return  bint;
}
 8007384:	bf0c      	ite	eq
 8007386:	2000      	moveq	r0, #0
 8007388:	2001      	movne	r0, #1
 800738a:	4770      	bx	lr

0800738c <ADC_ClearFlag>:


void ADC_ClearFlag (ADC_TypeDef *ADCx, unsigned char ADC_FLAG)
{
      /* Clear the selected ADC flags */
      ADCx->SR = ~(unsigned int)ADC_FLAG;
 800738c:	43c9      	mvns	r1, r1
 800738e:	6001      	str	r1, [r0, #0]
 8007390:	4770      	bx	lr
	...

08007394 <EXTI_Init>:

void EXTI_Init (EXTI_InitTypeDef *EXTI_InitStruct)
{
      unsigned int tmp = 0;
      tmp = (unsigned int)EXTI_BASE;
      if (EXTI_InitStruct->EXTI_LineCmd != DISABLE) {
 8007394:	6883      	ldr	r3, [r0, #8]
{
 8007396:	b530      	push	{r4, r5, lr}
 8007398:	6802      	ldr	r2, [r0, #0]
 800739a:	7901      	ldrb	r1, [r0, #4]
      if (EXTI_InitStruct->EXTI_LineCmd != DISABLE) {
 800739c:	b33b      	cbz	r3, 80073ee <EXTI_Init+0x5a>
         /* Clear EXTI line configuration */
         EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800739e:	4b18      	ldr	r3, [pc, #96]	; (8007400 <EXTI_Init+0x6c>)
 80073a0:	43d4      	mvns	r4, r2
 80073a2:	681d      	ldr	r5, [r3, #0]
         EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
         tmp += EXTI_InitStruct->EXTI_Mode;
 80073a4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
         EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80073a8:	4025      	ands	r5, r4
 80073aa:	601d      	str	r5, [r3, #0]
         EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80073ac:	685d      	ldr	r5, [r3, #4]
         tmp += EXTI_InitStruct->EXTI_Mode;
 80073ae:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
         EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80073b2:	402c      	ands	r4, r5
 80073b4:	605c      	str	r4, [r3, #4]
         *(volatile unsigned int *)tmp |= EXTI_InitStruct->EXTI_Line;
 80073b6:	680c      	ldr	r4, [r1, #0]
 80073b8:	4322      	orrs	r2, r4
 80073ba:	600a      	str	r2, [r1, #0]
         /* Clear Rising Falling edge configuration */
         EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80073bc:	6802      	ldr	r2, [r0, #0]
 80073be:	689c      	ldr	r4, [r3, #8]
 80073c0:	43d1      	mvns	r1, r2
 80073c2:	400c      	ands	r4, r1
 80073c4:	609c      	str	r4, [r3, #8]
         EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80073c6:	68dc      	ldr	r4, [r3, #12]
 80073c8:	4021      	ands	r1, r4
 80073ca:	60d9      	str	r1, [r3, #12]
         /* Select the trigger for the selected external interrupts */
         if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling) {
 80073cc:	7941      	ldrb	r1, [r0, #5]
 80073ce:	2910      	cmp	r1, #16
 80073d0:	d106      	bne.n	80073e0 <EXTI_Init+0x4c>
            /* Rising Falling edge */
            EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80073d2:	6899      	ldr	r1, [r3, #8]
 80073d4:	4311      	orrs	r1, r2
 80073d6:	6099      	str	r1, [r3, #8]
            EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80073d8:	68d9      	ldr	r1, [r3, #12]
 80073da:	430a      	orrs	r2, r1
 80073dc:	60da      	str	r2, [r3, #12]
 80073de:	bd30      	pop	{r4, r5, pc}
         } else {
            tmp = (unsigned int)EXTI_BASE;
            tmp += EXTI_InitStruct->EXTI_Trigger;
 80073e0:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80073e4:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
            *(volatile unsigned int *)tmp |= EXTI_InitStruct->EXTI_Line;
 80073e8:	6819      	ldr	r1, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	e006      	b.n	80073fc <EXTI_Init+0x68>
         }
      } else {
         tmp += EXTI_InitStruct->EXTI_Mode;
 80073ee:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80073f2:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
         /* Disable the selected external lines */
         *(volatile unsigned int *)tmp &= ~EXTI_InitStruct->EXTI_Line;
 80073f6:	6819      	ldr	r1, [r3, #0]
 80073f8:	ea21 0202 	bic.w	r2, r1, r2
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	bd30      	pop	{r4, r5, pc}
 8007400:	40010400 	.word	0x40010400

08007404 <EXTI_ClearFlag>:
}


void EXTI_ClearFlag (unsigned int EXTI_Line)
{
      EXTI->PR = EXTI_Line;
 8007404:	4b01      	ldr	r3, [pc, #4]	; (800740c <EXTI_ClearFlag+0x8>)
 8007406:	6158      	str	r0, [r3, #20]
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40010400 	.word	0x40010400

08007410 <EXTI_GetITStatus>:

int EXTI_GetITStatus (unsigned int EXTI_Line)
{
      int bint = RESET;
      unsigned int enablestatus = 0;
      enablestatus =  EXTI->IMR & EXTI_Line;
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <EXTI_GetITStatus+0x18>)
 8007412:	681a      	ldr	r2, [r3, #0]
      if (((EXTI->PR & EXTI_Line) != (unsigned int)RESET) && (enablestatus != (unsigned int)RESET)) {
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	4003      	ands	r3, r0
 8007418:	d004      	beq.n	8007424 <EXTI_GetITStatus+0x14>
 800741a:	4210      	tst	r0, r2
 800741c:	bf0c      	ite	eq
 800741e:	2000      	moveq	r0, #0
 8007420:	2001      	movne	r0, #1
 8007422:	4770      	bx	lr
         bint = SET;
      } else {
         bint = RESET;
 8007424:	4618      	mov	r0, r3
      }
      return bint;
}
 8007426:	4770      	bx	lr
 8007428:	40010400 	.word	0x40010400

0800742c <EXTI_ClearITPendingBit>:


void EXTI_ClearITPendingBit (unsigned int EXTI_Line)
{
      EXTI->PR = EXTI_Line;
 800742c:	4b01      	ldr	r3, [pc, #4]	; (8007434 <EXTI_ClearITPendingBit+0x8>)
 800742e:	6158      	str	r0, [r3, #20]
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40010400 	.word	0x40010400

08007438 <FLASH_Unlock>:


void FLASH_Unlock (void)
{
      /* Authorize the FPEC of Bank1 Access */
      FLASH->KEYR = FLASH_KEY1;
 8007438:	4b03      	ldr	r3, [pc, #12]	; (8007448 <FLASH_Unlock+0x10>)
 800743a:	4a04      	ldr	r2, [pc, #16]	; (800744c <FLASH_Unlock+0x14>)
 800743c:	605a      	str	r2, [r3, #4]
      FLASH->KEYR = FLASH_KEY2;
 800743e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8007442:	605a      	str	r2, [r3, #4]
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40022000 	.word	0x40022000
 800744c:	45670123 	.word	0x45670123

08007450 <FLASH_Lock>:


void FLASH_Lock (void)
{
      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
      FLASH->CR |= CR_LOCK_Set;
 8007450:	4b02      	ldr	r3, [pc, #8]	; (800745c <FLASH_Lock+0xc>)
 8007452:	691a      	ldr	r2, [r3, #16]
 8007454:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007458:	611a      	str	r2, [r3, #16]
 800745a:	4770      	bx	lr
 800745c:	40022000 	.word	0x40022000

08007460 <FLASH_GetReadOutProtectionStatus>:


int FLASH_GetReadOutProtectionStatus (void)
{
      int readoutstatus = RESET;
      if ((FLASH->OBR & RDPRT_Mask) != (unsigned int)RESET) {
 8007460:	4b02      	ldr	r3, [pc, #8]	; (800746c <FLASH_GetReadOutProtectionStatus+0xc>)
 8007462:	69d8      	ldr	r0, [r3, #28]
         readoutstatus = SET;
      } else {
         readoutstatus = RESET;
      }
      return readoutstatus;
}
 8007464:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	40022000 	.word	0x40022000

08007470 <FLASH_GetBank1Status>:


FLASH_Status FLASH_GetBank1Status (void)
{
      FLASH_Status flashstatus = FLASH_COMPLETE;
      if ((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) {
 8007470:	4b08      	ldr	r3, [pc, #32]	; (8007494 <FLASH_GetBank1Status+0x24>)
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	07d2      	lsls	r2, r2, #31
 8007476:	d409      	bmi.n	800748c <FLASH_GetBank1Status+0x1c>
         flashstatus = FLASH_BUSY;
      } else {
         if ((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0) {
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	0750      	lsls	r0, r2, #29
 800747c:	d408      	bmi.n	8007490 <FLASH_GetBank1Status+0x20>
            flashstatus = FLASH_ERROR_PG;
         } else {
            if ((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 ) {
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f013 0f10 	tst.w	r3, #16
               flashstatus = FLASH_ERROR_WRP;
 8007484:	bf0c      	ite	eq
 8007486:	2004      	moveq	r0, #4
 8007488:	2003      	movne	r0, #3
 800748a:	4770      	bx	lr
         flashstatus = FLASH_BUSY;
 800748c:	2001      	movs	r0, #1
 800748e:	4770      	bx	lr
            flashstatus = FLASH_ERROR_PG;
 8007490:	2002      	movs	r0, #2
            }
         }
      }
      /* Return the Flash Status */
      return flashstatus;
}
 8007492:	4770      	bx	lr
 8007494:	40022000 	.word	0x40022000

08007498 <FLASH_WaitForLastOperation>:
}
#endif /* STM32F10X_XL */


FLASH_Status FLASH_WaitForLastOperation (unsigned int Timeout)
{
 8007498:	b508      	push	{r3, lr}
 800749a:	4601      	mov	r1, r0
      FLASH_Status status = FLASH_COMPLETE;
      /* Check for the Flash Status */
      status = FLASH_GetBank1Status();
 800749c:	f7ff ffe8 	bl	8007470 <FLASH_GetBank1Status>
      /* Wait for a Flash operation to complete or a TIMEOUT to occur */
      while ((status == FLASH_BUSY) && (Timeout != 0x00)) {
 80074a0:	2801      	cmp	r0, #1
 80074a2:	d106      	bne.n	80074b2 <FLASH_WaitForLastOperation+0x1a>
 80074a4:	b119      	cbz	r1, 80074ae <FLASH_WaitForLastOperation+0x16>
            status = FLASH_GetBank1Status();
 80074a6:	f7ff ffe3 	bl	8007470 <FLASH_GetBank1Status>
            Timeout--;
 80074aa:	3901      	subs	r1, #1
 80074ac:	e7f8      	b.n	80074a0 <FLASH_WaitForLastOperation+0x8>
      }
      if (Timeout == 0x00) {
         status = FLASH_TIMEOUT;
 80074ae:	2005      	movs	r0, #5
 80074b0:	bd08      	pop	{r3, pc}
 80074b2:	2900      	cmp	r1, #0
 80074b4:	bf08      	it	eq
 80074b6:	2005      	moveq	r0, #5
      }
      /* Return the operation status */
      return status;
}
 80074b8:	bd08      	pop	{r3, pc}
	...

080074bc <FLASH_EraseOptionBytes>:
{
 80074bc:	b538      	push	{r3, r4, r5, lr}
      if (FLASH_GetReadOutProtectionStatus() != RESET) {
 80074be:	f7ff ffcf 	bl	8007460 <FLASH_GetReadOutProtectionStatus>
      unsigned short rdptmp = RDP_Key;
 80074c2:	2800      	cmp	r0, #0
 80074c4:	bf0c      	ite	eq
 80074c6:	25a5      	moveq	r5, #165	; 0xa5
 80074c8:	2500      	movne	r5, #0
      status = FLASH_WaitForLastOperation(EraseTimeout);
 80074ca:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80074ce:	f7ff ffe3 	bl	8007498 <FLASH_WaitForLastOperation>
      if (status == FLASH_COMPLETE) {
 80074d2:	2804      	cmp	r0, #4
 80074d4:	d129      	bne.n	800752a <FLASH_EraseOptionBytes+0x6e>
         FLASH->OPTKEYR = FLASH_KEY1;
 80074d6:	4c15      	ldr	r4, [pc, #84]	; (800752c <FLASH_EraseOptionBytes+0x70>)
 80074d8:	4b15      	ldr	r3, [pc, #84]	; (8007530 <FLASH_EraseOptionBytes+0x74>)
         status = FLASH_WaitForLastOperation(EraseTimeout);
 80074da:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
         FLASH->OPTKEYR = FLASH_KEY1;
 80074de:	60a3      	str	r3, [r4, #8]
         FLASH->OPTKEYR = FLASH_KEY2;
 80074e0:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80074e4:	60a3      	str	r3, [r4, #8]
         FLASH->CR |= CR_OPTER_Set;
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	f043 0320 	orr.w	r3, r3, #32
 80074ec:	6123      	str	r3, [r4, #16]
         FLASH->CR |= CR_STRT_Set;
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f4:	6123      	str	r3, [r4, #16]
         status = FLASH_WaitForLastOperation(EraseTimeout);
 80074f6:	f7ff ffcf 	bl	8007498 <FLASH_WaitForLastOperation>
         if (status == FLASH_COMPLETE) {
 80074fa:	2804      	cmp	r0, #4
 80074fc:	d10e      	bne.n	800751c <FLASH_EraseOptionBytes+0x60>
            FLASH->CR &= CR_OPTER_Reset;
 80074fe:	6922      	ldr	r2, [r4, #16]
 8007500:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8007504:	4013      	ands	r3, r2
 8007506:	6123      	str	r3, [r4, #16]
            FLASH->CR |= CR_OPTPG_Set;
 8007508:	6923      	ldr	r3, [r4, #16]
            status = FLASH_WaitForLastOperation(ProgramTimeout);
 800750a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
            FLASH->CR |= CR_OPTPG_Set;
 800750e:	f043 0310 	orr.w	r3, r3, #16
 8007512:	6123      	str	r3, [r4, #16]
            OB->RDP = (unsigned short)rdptmp;
 8007514:	4b07      	ldr	r3, [pc, #28]	; (8007534 <FLASH_EraseOptionBytes+0x78>)
 8007516:	801d      	strh	r5, [r3, #0]
            status = FLASH_WaitForLastOperation(ProgramTimeout);
 8007518:	f7ff ffbe 	bl	8007498 <FLASH_WaitForLastOperation>
            if (status != FLASH_TIMEOUT) {
 800751c:	2805      	cmp	r0, #5
 800751e:	d004      	beq.n	800752a <FLASH_EraseOptionBytes+0x6e>
               FLASH->CR &= CR_OPTPG_Reset;
 8007520:	6922      	ldr	r2, [r4, #16]
 8007522:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8007526:	4013      	ands	r3, r2
 8007528:	6123      	str	r3, [r4, #16]
}
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	40022000 	.word	0x40022000
 8007530:	45670123 	.word	0x45670123
 8007534:	1ffff800 	.word	0x1ffff800

08007538 <FLASH_ReadOutProtection>:
{
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4605      	mov	r5, r0
      status = FLASH_WaitForLastOperation(EraseTimeout);
 800753c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8007540:	f7ff ffaa 	bl	8007498 <FLASH_WaitForLastOperation>
      if (status == FLASH_COMPLETE) {
 8007544:	2804      	cmp	r0, #4
 8007546:	d136      	bne.n	80075b6 <FLASH_ReadOutProtection+0x7e>
         FLASH->OPTKEYR = FLASH_KEY1;
 8007548:	4c1b      	ldr	r4, [pc, #108]	; (80075b8 <FLASH_ReadOutProtection+0x80>)
 800754a:	4b1c      	ldr	r3, [pc, #112]	; (80075bc <FLASH_ReadOutProtection+0x84>)
         status = FLASH_WaitForLastOperation(EraseTimeout);
 800754c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
         FLASH->OPTKEYR = FLASH_KEY1;
 8007550:	60a3      	str	r3, [r4, #8]
         FLASH->OPTKEYR = FLASH_KEY2;
 8007552:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8007556:	60a3      	str	r3, [r4, #8]
         FLASH->CR |= CR_OPTER_Set;
 8007558:	6923      	ldr	r3, [r4, #16]
 800755a:	f043 0320 	orr.w	r3, r3, #32
 800755e:	6123      	str	r3, [r4, #16]
         FLASH->CR |= CR_STRT_Set;
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007566:	6123      	str	r3, [r4, #16]
         status = FLASH_WaitForLastOperation(EraseTimeout);
 8007568:	f7ff ff96 	bl	8007498 <FLASH_WaitForLastOperation>
         if (status == FLASH_COMPLETE) {
 800756c:	2804      	cmp	r0, #4
 800756e:	d11b      	bne.n	80075a8 <FLASH_ReadOutProtection+0x70>
            FLASH->CR &= CR_OPTER_Reset;
 8007570:	6922      	ldr	r2, [r4, #16]
 8007572:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8007576:	4013      	ands	r3, r2
 8007578:	6123      	str	r3, [r4, #16]
            FLASH->CR |= CR_OPTPG_Set;
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	f043 0310 	orr.w	r3, r3, #16
 8007580:	6123      	str	r3, [r4, #16]
 8007582:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <FLASH_ReadOutProtection+0x88>)
            if (NewState != DISABLE) {
 8007584:	b10d      	cbz	r5, 800758a <FLASH_ReadOutProtection+0x52>
               OB->RDP = 0x00;
 8007586:	2200      	movs	r2, #0
 8007588:	e000      	b.n	800758c <FLASH_ReadOutProtection+0x54>
               OB->RDP = RDP_Key;
 800758a:	22a5      	movs	r2, #165	; 0xa5
 800758c:	801a      	strh	r2, [r3, #0]
            status = FLASH_WaitForLastOperation(EraseTimeout);
 800758e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8007592:	f7ff ff81 	bl	8007498 <FLASH_WaitForLastOperation>
            if (status != FLASH_TIMEOUT) {
 8007596:	2805      	cmp	r0, #5
 8007598:	d00d      	beq.n	80075b6 <FLASH_ReadOutProtection+0x7e>
               FLASH->CR &= CR_OPTPG_Reset;
 800759a:	4a07      	ldr	r2, [pc, #28]	; (80075b8 <FLASH_ReadOutProtection+0x80>)
 800759c:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80075a0:	6911      	ldr	r1, [r2, #16]
 80075a2:	400b      	ands	r3, r1
 80075a4:	6113      	str	r3, [r2, #16]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
            if (status != FLASH_TIMEOUT) {
 80075a8:	2805      	cmp	r0, #5
 80075aa:	d004      	beq.n	80075b6 <FLASH_ReadOutProtection+0x7e>
               FLASH->CR &= CR_OPTER_Reset;
 80075ac:	6922      	ldr	r2, [r4, #16]
 80075ae:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80075b2:	4013      	ands	r3, r2
 80075b4:	6123      	str	r3, [r4, #16]
}
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	40022000 	.word	0x40022000
 80075bc:	45670123 	.word	0x45670123
 80075c0:	1ffff800 	.word	0x1ffff800

080075c4 <GPIO_Init_Pin>:
      }
}


void GPIO_Init_Pin (GPIO_TypeDef *GPIOx, unsigned short GPIO_Pin,int GPIO_Speed,int GPIO_Mode)
{
 80075c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      unsigned int currentmode = 0x00,currentpin = 0x00,pinpos = 0x00,pos = 0x00;
      unsigned int tmpreg = 0x00,pinmask = 0x00;
      /* GPIO Mode Configuration */
      currentmode = ((unsigned int)GPIO_Mode) & ((unsigned int)0x0F);
      if ((((unsigned int)GPIO_Mode) & ((unsigned int)0x10)) != 0x00) {
 80075c8:	06dd      	lsls	r5, r3, #27
      currentmode = ((unsigned int)GPIO_Mode) & ((unsigned int)0x0F);
 80075ca:	f003 040f 	and.w	r4, r3, #15
         /* Output mode */
         currentmode |= (unsigned int)GPIO_Speed;
 80075ce:	bf48      	it	mi
 80075d0:	4314      	orrmi	r4, r2
      }
      /* GPIO CRL Configuration */
      /* Configure the eight low port pins */
      if (((unsigned int)GPIO_Pin & ((unsigned int)0x00FF)) != 0x00) {
 80075d2:	f011 0fff 	tst.w	r1, #255	; 0xff
 80075d6:	d01f      	beq.n	8007618 <GPIO_Init_Pin+0x54>
         tmpreg = GPIOx->CRL;
 80075d8:	6805      	ldr	r5, [r0, #0]
         for (pinpos=0x00;pinpos<0x08;pinpos++) {
 80075da:	2200      	movs	r2, #0
             pos = ((unsigned int)0x01) << pinpos;
 80075dc:	f04f 0c01 	mov.w	ip, #1
             /* Get the port pins position */
             currentpin = (GPIO_Pin) & pos;
             if (currentpin == pos) {
                pos = pinpos << 2;
                /* Clear the corresponding low control register bits */
                pinmask = ((unsigned int)0x0F) << pos;
 80075e0:	f04f 080f 	mov.w	r8, #15
             pos = ((unsigned int)0x01) << pinpos;
 80075e4:	fa0c f702 	lsl.w	r7, ip, r2
             currentpin = (GPIO_Pin) & pos;
 80075e8:	ea07 0601 	and.w	r6, r7, r1
             if (currentpin == pos) {
 80075ec:	42be      	cmp	r6, r7
 80075ee:	d10f      	bne.n	8007610 <GPIO_Init_Pin+0x4c>
                pos = pinpos << 2;
 80075f0:	0097      	lsls	r7, r2, #2
                pinmask = ((unsigned int)0x0F) << pos;
 80075f2:	fa08 f907 	lsl.w	r9, r8, r7
                tmpreg &= ~pinmask;
                /* Write the mode configuration in the corresponding bits */
                tmpreg |= (currentmode << pos);
 80075f6:	fa04 f707 	lsl.w	r7, r4, r7
                tmpreg &= ~pinmask;
 80075fa:	ea25 0509 	bic.w	r5, r5, r9
                /* Reset the corresponding ODR bit */
                if (GPIO_Mode == GPIO_Mode_IPD) {
 80075fe:	2b28      	cmp	r3, #40	; 0x28
                tmpreg |= (currentmode << pos);
 8007600:	ea45 0507 	orr.w	r5, r5, r7
                if (GPIO_Mode == GPIO_Mode_IPD) {
 8007604:	d101      	bne.n	800760a <GPIO_Init_Pin+0x46>
                   GPIOx->BRR = (((unsigned int)0x01) << pinpos);
 8007606:	6146      	str	r6, [r0, #20]
 8007608:	e002      	b.n	8007610 <GPIO_Init_Pin+0x4c>
                } else {
                   /* Set the corresponding ODR bit */
                   if (GPIO_Mode == GPIO_Mode_IPU) {
 800760a:	2b48      	cmp	r3, #72	; 0x48
                      GPIOx->BSRR = (((unsigned int)0x01) << pinpos);
 800760c:	bf08      	it	eq
 800760e:	6106      	streq	r6, [r0, #16]
         for (pinpos=0x00;pinpos<0x08;pinpos++) {
 8007610:	3201      	adds	r2, #1
 8007612:	2a08      	cmp	r2, #8
 8007614:	d1e6      	bne.n	80075e4 <GPIO_Init_Pin+0x20>
                   }
                }
             }
         }
         GPIOx->CRL = tmpreg;
 8007616:	6005      	str	r5, [r0, #0]
      }
      /* GPIO CRH Configuration */
      /* Configure the eight high port pins */
      if (GPIO_Pin > 0x00FF) {
 8007618:	29ff      	cmp	r1, #255	; 0xff
 800761a:	d921      	bls.n	8007660 <GPIO_Init_Pin+0x9c>
         tmpreg = GPIOx->CRH;
 800761c:	6845      	ldr	r5, [r0, #4]
         for (pinpos=0x00;pinpos<0x08;pinpos++) {
 800761e:	2200      	movs	r2, #0
             pos = (((unsigned int)0x01) << (pinpos + 0x08));
 8007620:	f04f 0c01 	mov.w	ip, #1
             /* Get the port pins position */
             currentpin = ((GPIO_Pin) & pos);
             if (currentpin == pos) {
                pos = pinpos << 2;
                /* Clear the corresponding high control register bits */
                pinmask = ((unsigned int)0x0F) << pos;
 8007624:	f04f 080f 	mov.w	r8, #15
 8007628:	f102 0708 	add.w	r7, r2, #8
             pos = (((unsigned int)0x01) << (pinpos + 0x08));
 800762c:	fa0c f707 	lsl.w	r7, ip, r7
             currentpin = ((GPIO_Pin) & pos);
 8007630:	ea07 0601 	and.w	r6, r7, r1
             if (currentpin == pos) {
 8007634:	42be      	cmp	r6, r7
 8007636:	d10f      	bne.n	8007658 <GPIO_Init_Pin+0x94>
                pos = pinpos << 2;
 8007638:	0097      	lsls	r7, r2, #2
                pinmask = ((unsigned int)0x0F) << pos;
 800763a:	fa08 f907 	lsl.w	r9, r8, r7
                tmpreg &= ~pinmask;
                /* Write the mode configuration in the corresponding bits */
                tmpreg |= (currentmode << pos);
 800763e:	fa04 f707 	lsl.w	r7, r4, r7
                tmpreg &= ~pinmask;
 8007642:	ea25 0509 	bic.w	r5, r5, r9
                /* Reset the corresponding ODR bit */
                if (GPIO_Mode == GPIO_Mode_IPD) {
 8007646:	2b28      	cmp	r3, #40	; 0x28
                tmpreg |= (currentmode << pos);
 8007648:	ea45 0507 	orr.w	r5, r5, r7
                if (GPIO_Mode == GPIO_Mode_IPD) {
 800764c:	d101      	bne.n	8007652 <GPIO_Init_Pin+0x8e>
                   GPIOx->BRR = (((unsigned int)0x01) << (pinpos + 0x08));
 800764e:	6146      	str	r6, [r0, #20]
 8007650:	e002      	b.n	8007658 <GPIO_Init_Pin+0x94>
                }
                /* Set the corresponding ODR bit */
                if (GPIO_Mode == GPIO_Mode_IPU) {
 8007652:	2b48      	cmp	r3, #72	; 0x48
                   GPIOx->BSRR = (((unsigned int)0x01) << (pinpos + 0x08));
 8007654:	bf08      	it	eq
 8007656:	6106      	streq	r6, [r0, #16]
         for (pinpos=0x00;pinpos<0x08;pinpos++) {
 8007658:	3201      	adds	r2, #1
 800765a:	2a08      	cmp	r2, #8
 800765c:	d1e4      	bne.n	8007628 <GPIO_Init_Pin+0x64>
                }
             }
         }
         GPIOx->CRH = tmpreg;
 800765e:	6045      	str	r5, [r0, #4]
 8007660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007664 <GPIO_SetBits>:
}


void GPIO_SetBits (GPIO_TypeDef *GPIOx, unsigned short GPIO_Pin)
{
      GPIOx->BSRR = GPIO_Pin;
 8007664:	6101      	str	r1, [r0, #16]
 8007666:	4770      	bx	lr

08007668 <GPIO_ResetBits>:
}


void GPIO_ResetBits (GPIO_TypeDef *GPIOx, unsigned short GPIO_Pin)
{
      GPIOx->BRR = GPIO_Pin;
 8007668:	6141      	str	r1, [r0, #20]
 800766a:	4770      	bx	lr

0800766c <GPIO_PinRemapConfig>:


void GPIO_PinRemapConfig (unsigned int GPIO_Remap, int NewState)
{
      unsigned int tmp = 0x00,tmp1 = 0x00,tmpreg = 0x00,tmpmask = 0x00;
      if ((GPIO_Remap & 0x80000000) == 0x80000000) {
 800766c:	2800      	cmp	r0, #0
 800766e:	4a16      	ldr	r2, [pc, #88]	; (80076c8 <GPIO_PinRemapConfig+0x5c>)
{
 8007670:	b530      	push	{r4, r5, lr}
      } else {
         tmpreg = AFIO->MAPR;
      }
      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
      tmp = GPIO_Remap & LSB_MASK;
      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) {
 8007672:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
         tmpreg = AFIO->MAPR2;
 8007676:	bfb4      	ite	lt
 8007678:	69d3      	ldrlt	r3, [r2, #28]
         tmpreg = AFIO->MAPR;
 800767a:	6853      	ldrge	r3, [r2, #4]
      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) {
 800767c:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
      tmp = GPIO_Remap & LSB_MASK;
 8007680:	b284      	uxth	r4, r0
      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) {
 8007682:	d106      	bne.n	8007692 <GPIO_PinRemapConfig+0x26>
         tmpreg &= DBGAFR_SWJCFG_MASK;
         AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8007684:	6855      	ldr	r5, [r2, #4]
         tmpreg &= DBGAFR_SWJCFG_MASK;
 8007686:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
         AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800768a:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 800768e:	6055      	str	r5, [r2, #4]
 8007690:	e00f      	b.n	80076b2 <GPIO_PinRemapConfig+0x46>
      } else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK) {
 8007692:	02c2      	lsls	r2, r0, #11
 8007694:	d505      	bpl.n	80076a2 <GPIO_PinRemapConfig+0x36>
      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8007696:	f3c0 4203 	ubfx	r2, r0, #16, #4
         tmp1 = ((unsigned int)0x03) << tmpmask;
 800769a:	2503      	movs	r5, #3
 800769c:	fa05 f202 	lsl.w	r2, r5, r2
 80076a0:	e003      	b.n	80076aa <GPIO_PinRemapConfig+0x3e>
         tmpreg &= ~tmp1;
         tmpreg |= ~DBGAFR_SWJCFG_MASK;
      } else {
         tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15) * 0x10));
 80076a2:	0d42      	lsrs	r2, r0, #21
 80076a4:	0112      	lsls	r2, r2, #4
 80076a6:	fa04 f202 	lsl.w	r2, r4, r2
 80076aa:	ea23 0302 	bic.w	r3, r3, r2
         tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80076ae:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
      }
      if (NewState != DISABLE) {
 80076b2:	b119      	cbz	r1, 80076bc <GPIO_PinRemapConfig+0x50>
         tmpreg |= (tmp << ((GPIO_Remap >> 0x15) * 0x10));
 80076b4:	0d42      	lsrs	r2, r0, #21
 80076b6:	0112      	lsls	r2, r2, #4
 80076b8:	4094      	lsls	r4, r2
 80076ba:	4323      	orrs	r3, r4
 80076bc:	4a02      	ldr	r2, [pc, #8]	; (80076c8 <GPIO_PinRemapConfig+0x5c>)
      }
      if ((GPIO_Remap & 0x80000000) == 0x80000000) {
 80076be:	2800      	cmp	r0, #0
         AFIO->MAPR2 = tmpreg;
 80076c0:	bfb4      	ite	lt
 80076c2:	61d3      	strlt	r3, [r2, #28]
      } else {
         AFIO->MAPR = tmpreg;
 80076c4:	6053      	strge	r3, [r2, #4]
 80076c6:	bd30      	pop	{r4, r5, pc}
 80076c8:	40010000 	.word	0x40010000

080076cc <GPIO_EXTILineConfig>:


void GPIO_EXTILineConfig (unsigned char GPIO_PortSource, unsigned char GPIO_PinSource)
{
      unsigned int tmp = 0x00;
      tmp = ((unsigned int)0x0F) << (0x04 * (GPIO_PinSource & (unsigned char)0x03));
 80076cc:	f001 0303 	and.w	r3, r1, #3
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	220f      	movs	r2, #15
 80076d4:	409a      	lsls	r2, r3
      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((unsigned int)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (unsigned char)0x03)));
 80076d6:	4098      	lsls	r0, r3
 80076d8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80076dc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80076e0:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
{
 80076e4:	b510      	push	{r4, lr}
      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80076e6:	688c      	ldr	r4, [r1, #8]
 80076e8:	ea24 0202 	bic.w	r2, r4, r2
 80076ec:	608a      	str	r2, [r1, #8]
      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((unsigned int)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (unsigned char)0x03)));
 80076ee:	688a      	ldr	r2, [r1, #8]
 80076f0:	4302      	orrs	r2, r0
 80076f2:	608a      	str	r2, [r1, #8]
 80076f4:	bd10      	pop	{r4, pc}
	...

080076f8 <RTC_WaitForLastTask>:


void RTC_WaitForLastTask (void)
{
      /* Loop until RTOFF flag is set */
      while ((RTC->CRL & RTC_FLAG_RTOFF) == (unsigned short)RESET) {
 80076f8:	4a02      	ldr	r2, [pc, #8]	; (8007704 <RTC_WaitForLastTask+0xc>)
 80076fa:	8893      	ldrh	r3, [r2, #4]
 80076fc:	069b      	lsls	r3, r3, #26
 80076fe:	d5fc      	bpl.n	80076fa <RTC_WaitForLastTask+0x2>
      }
}
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40002800 	.word	0x40002800

08007708 <RTC_GetITStatus>:


int RTC_GetITStatus (unsigned short RTC_IT)
{
      int bint = RESET;
      bint = (int)(RTC->CRL & RTC_IT);
 8007708:	4b06      	ldr	r3, [pc, #24]	; (8007724 <RTC_GetITStatus+0x1c>)
 800770a:	889a      	ldrh	r2, [r3, #4]
      if (((RTC->CRH & RTC_IT) != (unsigned short)RESET) && (bint != (unsigned short)RESET)) {
 800770c:	881b      	ldrh	r3, [r3, #0]
      bint = (int)(RTC->CRL & RTC_IT);
 800770e:	b292      	uxth	r2, r2
      if (((RTC->CRH & RTC_IT) != (unsigned short)RESET) && (bint != (unsigned short)RESET)) {
 8007710:	4003      	ands	r3, r0
 8007712:	d004      	beq.n	800771e <RTC_GetITStatus+0x16>
 8007714:	4210      	tst	r0, r2
 8007716:	bf0c      	ite	eq
 8007718:	2000      	moveq	r0, #0
 800771a:	2001      	movne	r0, #1
 800771c:	4770      	bx	lr
         bint = SET;
      } else {
         bint = RESET;
 800771e:	4618      	mov	r0, r3
      }
      return bint;
}
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40002800 	.word	0x40002800

08007728 <RTC_ClearITPendingBit>:


void RTC_ClearITPendingBit (unsigned short RTC_IT)
{
      /* Clear the corresponding RTC pending bit */
      RTC->CRL &= (unsigned short)~RTC_IT;
 8007728:	4b03      	ldr	r3, [pc, #12]	; (8007738 <RTC_ClearITPendingBit+0x10>)
 800772a:	889a      	ldrh	r2, [r3, #4]
 800772c:	b292      	uxth	r2, r2
 800772e:	ea22 0000 	bic.w	r0, r2, r0
 8007732:	8098      	strh	r0, [r3, #4]
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40002800 	.word	0x40002800

0800773c <SPI_Init>:
      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
      /* Set LSBFirst bit according to SPI_FirstBit value */
      /* Set BR bits according to SPI_BaudRatePrescaler value */
      /* Set CPOL bit according to SPI_CPOL value */
      /* Set CPHA bit according to SPI_CPHA value */
      tmpreg |= (unsigned short)((unsigned int)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode | SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800773c:	880b      	ldrh	r3, [r1, #0]
{
 800773e:	b510      	push	{r4, lr}
      tmpreg |= (unsigned short)((unsigned int)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode | SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8007740:	884c      	ldrh	r4, [r1, #2]
      tmpreg = SPIx->CR1;
 8007742:	8802      	ldrh	r2, [r0, #0]
      tmpreg |= (unsigned short)((unsigned int)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode | SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8007744:	4323      	orrs	r3, r4
 8007746:	888c      	ldrh	r4, [r1, #4]
      tmpreg &= CR1_CLEAR_Mask;
 8007748:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
      tmpreg |= (unsigned short)((unsigned int)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode | SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800774c:	4323      	orrs	r3, r4
 800774e:	88cc      	ldrh	r4, [r1, #6]
 8007750:	4323      	orrs	r3, r4
 8007752:	890c      	ldrh	r4, [r1, #8]
 8007754:	4323      	orrs	r3, r4
 8007756:	894c      	ldrh	r4, [r1, #10]
 8007758:	4323      	orrs	r3, r4
 800775a:	898c      	ldrh	r4, [r1, #12]
 800775c:	4323      	orrs	r3, r4
 800775e:	89cc      	ldrh	r4, [r1, #14]
 8007760:	4323      	orrs	r3, r4
 8007762:	4313      	orrs	r3, r2
 8007764:	b29b      	uxth	r3, r3
      /* Write to SPIx CR1 */
      SPIx->CR1 = tmpreg;
 8007766:	8003      	strh	r3, [r0, #0]
      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
      SPIx->I2SCFGR &= SPI_Mode_Select;
 8007768:	8b83      	ldrh	r3, [r0, #28]
 800776a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800776e:	041b      	lsls	r3, r3, #16
 8007770:	0c1b      	lsrs	r3, r3, #16
 8007772:	8383      	strh	r3, [r0, #28]
      /* SPIx CRCPOLY Configuration */
      /* Write to SPIx CRCPOLY */
      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8007774:	8a0b      	ldrh	r3, [r1, #16]
 8007776:	8203      	strh	r3, [r0, #16]
 8007778:	bd10      	pop	{r4, pc}

0800777a <SPI_Cmd>:

void SPI_Cmd (SPI_TypeDef *SPIx, int NewState)
{
      if (NewState != DISABLE) {
         /* Enable the selected SPI peripheral */
         SPIx->CR1 |= CR1_SPE_Set;
 800777a:	8803      	ldrh	r3, [r0, #0]
      if (NewState != DISABLE) {
 800777c:	b119      	cbz	r1, 8007786 <SPI_Cmd+0xc>
         SPIx->CR1 |= CR1_SPE_Set;
 800777e:	b29b      	uxth	r3, r3
 8007780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007784:	e003      	b.n	800778e <SPI_Cmd+0x14>
      } else {
         /* Disable the selected SPI peripheral */
         SPIx->CR1 &= CR1_SPE_Reset;
 8007786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800778a:	041b      	lsls	r3, r3, #16
 800778c:	0c1b      	lsrs	r3, r3, #16
 800778e:	8003      	strh	r3, [r0, #0]
 8007790:	4770      	bx	lr

08007792 <SPI_I2S_SendData>:


void SPI_I2S_SendData (SPI_TypeDef *SPIx, unsigned short Data)
{
      /* Write in the DR register the data to be sent */
      SPIx->DR = Data;
 8007792:	8181      	strh	r1, [r0, #12]
 8007794:	4770      	bx	lr

08007796 <SPI_I2S_ReceiveData>:


unsigned short SPI_I2S_ReceiveData (SPI_TypeDef *SPIx)
{
      /* Return the data in the DR register */
      return SPIx->DR;
 8007796:	8980      	ldrh	r0, [r0, #12]
}
 8007798:	b280      	uxth	r0, r0
 800779a:	4770      	bx	lr

0800779c <SPI_I2S_GetFlagStatus>:

int SPI_I2S_GetFlagStatus (SPI_TypeDef *SPIx, unsigned short SPI_I2S_FLAG)
{
      int bint = RESET;
      /* Check the status of the specified SPI/I2S flag */
      if ((SPIx->SR & SPI_I2S_FLAG) != (unsigned short)RESET) {
 800779c:	8903      	ldrh	r3, [r0, #8]
 800779e:	4219      	tst	r1, r3
         /* SPI_I2S_FLAG is reset */
         bint = RESET;
      }
      /* Return the SPI_I2S_FLAG status */
      return  bint;
}
 80077a0:	bf0c      	ite	eq
 80077a2:	2000      	moveq	r0, #0
 80077a4:	2001      	movne	r0, #1
 80077a6:	4770      	bx	lr

080077a8 <TIM_ClearITPendingBit>:


void TIM_ClearITPendingBit (TIM_TypeDef *TIMx, unsigned short TIM_IT)
{
      /* Clear the IT pending Bit */
      TIMx->SR = (unsigned short)~TIM_IT;
 80077a8:	43c9      	mvns	r1, r1
 80077aa:	b289      	uxth	r1, r1
 80077ac:	8201      	strh	r1, [r0, #16]
 80077ae:	4770      	bx	lr

080077b0 <USART_Init>:
      unsigned int usartxbase = 0;
      RCC_ClocksTypeDef RCC_ClocksStatus;
      /* The hardware flow control is available only for USART1, USART2 and USART3 */
      usartxbase = (unsigned int)USARTx;
      /* USART CR2 Configuration */
      tmpreg = USARTx->CR2;
 80077b0:	8a03      	ldrh	r3, [r0, #16]
      /* Clear STOP[13:12] bits */
      tmpreg &= CR2_STOP_CLEAR_Mask;
      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit */
      /* Set STOP[13:12] bits according to USART_StopBits value */
      tmpreg |= (unsigned int)USART_InitStruct->USART_StopBits;
 80077b2:	88ca      	ldrh	r2, [r1, #6]
      tmpreg = USARTx->CR2;
 80077b4:	b29b      	uxth	r3, r3
      tmpreg &= CR2_STOP_CLEAR_Mask;
 80077b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
      tmpreg |= (unsigned int)USART_InitStruct->USART_StopBits;
 80077ba:	4313      	orrs	r3, r2
{
 80077bc:	b530      	push	{r4, r5, lr}
      /* Write to USART CR2 */
      USARTx->CR2 = (unsigned short)tmpreg;
 80077be:	8203      	strh	r3, [r0, #16]
      /* USART CR1 Configuration */
      tmpreg = USARTx->CR1;
 80077c0:	8983      	ldrh	r3, [r0, #12]
{
 80077c2:	460d      	mov	r5, r1
      tmpreg &= CR1_CLEAR_Mask;
      /* Configure the USART Word Length, Parity and mode */
      /* Set the M bits according to USART_WordLength value */
      /* Set PCE and PS bits according to USART_Parity value */
      /* Set TE and RE bits according to USART_Mode value */
      tmpreg |= (unsigned int)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
 80077c4:	88aa      	ldrh	r2, [r5, #4]
 80077c6:	8909      	ldrh	r1, [r1, #8]
      tmpreg &= CR1_CLEAR_Mask;
 80077c8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
      tmpreg |= (unsigned int)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
 80077cc:	430a      	orrs	r2, r1
      tmpreg &= CR1_CLEAR_Mask;
 80077ce:	f023 030c 	bic.w	r3, r3, #12
      tmpreg |= (unsigned int)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
 80077d2:	8969      	ldrh	r1, [r5, #10]
      tmpreg &= CR1_CLEAR_Mask;
 80077d4:	041b      	lsls	r3, r3, #16
      tmpreg |= (unsigned int)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
 80077d6:	430a      	orrs	r2, r1
      tmpreg &= CR1_CLEAR_Mask;
 80077d8:	0c1b      	lsrs	r3, r3, #16
      tmpreg |= (unsigned int)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity | USART_InitStruct->USART_Mode;
 80077da:	4313      	orrs	r3, r2
 80077dc:	b29b      	uxth	r3, r3
      /* Write to USART CR1 */
      USARTx->CR1 = (unsigned short)tmpreg;
 80077de:	8183      	strh	r3, [r0, #12]
      /* USART CR3 Configuration */
      tmpreg = USARTx->CR3;
 80077e0:	8a83      	ldrh	r3, [r0, #20]
      /* Clear CTSE and RTSE bits */
      tmpreg &= CR3_CLEAR_Mask;
      /* Configure the USART HFC */
      /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80077e2:	89aa      	ldrh	r2, [r5, #12]
      tmpreg = USARTx->CR3;
 80077e4:	b29b      	uxth	r3, r3
      tmpreg &= CR3_CLEAR_Mask;
 80077e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
{
 80077ea:	b087      	sub	sp, #28
      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80077ec:	4313      	orrs	r3, r2
{
 80077ee:	4604      	mov	r4, r0
      /* Write to USART CR3 */
      USARTx->CR3 = (unsigned short)tmpreg;
 80077f0:	8283      	strh	r3, [r0, #20]
      /* USART BRR Configuration */
      /* Configure the USART Baud Rate */
      RCC_GetClocksFreq(&RCC_ClocksStatus);
 80077f2:	a801      	add	r0, sp, #4
 80077f4:	f7ff fc8c 	bl	8007110 <RCC_GetClocksFreq>
      if (usartxbase == USART1_BASE) {
         apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80077f8:	4917      	ldr	r1, [pc, #92]	; (8007858 <USART_Init+0xa8>)
 80077fa:	9a04      	ldr	r2, [sp, #16]
      } else {
         apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80077fc:	9b03      	ldr	r3, [sp, #12]
         apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80077fe:	428c      	cmp	r4, r1
 8007800:	bf08      	it	eq
 8007802:	4613      	moveq	r3, r2
      }
      /* Determine the integer part */
      if ((USARTx->CR1 & CR1_OVER8_Set) != 0) {
 8007804:	89a2      	ldrh	r2, [r4, #12]
 8007806:	2119      	movs	r1, #25
 8007808:	b212      	sxth	r2, r2
         /* Integer part computing in case Oversampling mode is 8 Samples */
         integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
 800780a:	4359      	muls	r1, r3
      if ((USARTx->CR1 & CR1_OVER8_Set) != 0) {
 800780c:	2a00      	cmp	r2, #0
 800780e:	682a      	ldr	r2, [r5, #0]
      } else {	/* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
         /* Integer part computing in case Oversampling mode is 16 Samples */
         integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
      }
      tmpreg = (integerdivider / 100) << 4;
 8007810:	f04f 0364 	mov.w	r3, #100	; 0x64
         integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
 8007814:	bfb4      	ite	lt
 8007816:	0052      	lsllt	r2, r2, #1
         integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
 8007818:	0092      	lslge	r2, r2, #2
 800781a:	fbb1 f1f2 	udiv	r1, r1, r2
      tmpreg = (integerdivider / 100) << 4;
 800781e:	fbb1 f2f3 	udiv	r2, r1, r3
 8007822:	0112      	lsls	r2, r2, #4
      /* Determine the fractional part */
      fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8007824:	0910      	lsrs	r0, r2, #4
 8007826:	fb03 1110 	mls	r1, r3, r0, r1
      /* Implement the fractional part in the register */
      if ((USARTx->CR1 & CR1_OVER8_Set) != 0) {
 800782a:	89a0      	ldrh	r0, [r4, #12]
 800782c:	b200      	sxth	r0, r0
 800782e:	2800      	cmp	r0, #0
 8007830:	da06      	bge.n	8007840 <USART_Init+0x90>
         tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((unsigned char)0x07);
 8007832:	00c9      	lsls	r1, r1, #3
 8007834:	3132      	adds	r1, #50	; 0x32
 8007836:	fbb1 f3f3 	udiv	r3, r1, r3
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	e005      	b.n	800784c <USART_Init+0x9c>
      } else {	/* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
         tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((unsigned char)0x0F);
 8007840:	0109      	lsls	r1, r1, #4
 8007842:	3132      	adds	r1, #50	; 0x32
 8007844:	fbb1 f3f3 	udiv	r3, r1, r3
 8007848:	f003 030f 	and.w	r3, r3, #15
 800784c:	431a      	orrs	r2, r3
      }
      /* Write to USART BRR */
      USARTx->BRR = (unsigned short)tmpreg;
 800784e:	b292      	uxth	r2, r2
 8007850:	8122      	strh	r2, [r4, #8]
}
 8007852:	b007      	add	sp, #28
 8007854:	bd30      	pop	{r4, r5, pc}
 8007856:	bf00      	nop
 8007858:	40013800 	.word	0x40013800

0800785c <USART_Cmd>:

void USART_Cmd (USART_TypeDef *USARTx, int NewState)
{
      if (NewState != DISABLE) {
         /* Enable the selected USART by setting the UE bit in the CR1 register */
         USARTx->CR1 |= CR1_UE_Set;
 800785c:	8983      	ldrh	r3, [r0, #12]
      if (NewState != DISABLE) {
 800785e:	b119      	cbz	r1, 8007868 <USART_Cmd+0xc>
         USARTx->CR1 |= CR1_UE_Set;
 8007860:	b29b      	uxth	r3, r3
 8007862:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007866:	e003      	b.n	8007870 <USART_Cmd+0x14>
      } else {
         /* Disable the selected USART by clearing the UE bit in the CR1 register */
         USARTx->CR1 &= CR1_UE_Reset;
 8007868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800786c:	041b      	lsls	r3, r3, #16
 800786e:	0c1b      	lsrs	r3, r3, #16
 8007870:	8183      	strh	r3, [r0, #12]
 8007872:	4770      	bx	lr

08007874 <USART_ITConfig>:
      unsigned int usartreg = 0x00,itpos = 0x00,itmask = 0x00;
      unsigned int usartxbase = 0x00;
      /* The CTS interrupt is not available for UART4 and UART5 */
      usartxbase = (unsigned int)USARTx;
      /* Get the USART register index */
      usartreg = (((unsigned char)USART_IT) >> 0x05);
 8007874:	f3c1 1342 	ubfx	r3, r1, #5, #3
{
 8007878:	b510      	push	{r4, lr}
      /* Get the interrupt position */
      itpos = USART_IT & IT_Mask;
      itmask = (((unsigned int)0x01) << itpos);
 800787a:	2401      	movs	r4, #1
 800787c:	f001 011f 	and.w	r1, r1, #31
      if (usartreg == 0x01) {	/* The IT is in CR1 register */
 8007880:	42a3      	cmp	r3, r4
      itmask = (((unsigned int)0x01) << itpos);
 8007882:	fa04 f101 	lsl.w	r1, r4, r1
      if (usartreg == 0x01) {	/* The IT is in CR1 register */
 8007886:	d101      	bne.n	800788c <USART_ITConfig+0x18>
         usartxbase += 0x0C;
 8007888:	300c      	adds	r0, #12
 800788a:	e003      	b.n	8007894 <USART_ITConfig+0x20>
      } else if (usartreg == 0x02) {	/* The IT is in CR2 register */
 800788c:	2b02      	cmp	r3, #2
         usartxbase += 0x10;
 800788e:	bf0c      	ite	eq
 8007890:	3010      	addeq	r0, #16
      } else {	/* The IT is in CR3 register */
         usartxbase += 0x14;
 8007892:	3014      	addne	r0, #20
      }
      if (NewState != DISABLE) {
         *(volatile unsigned int*)usartxbase |= itmask;
 8007894:	6803      	ldr	r3, [r0, #0]
      if (NewState != DISABLE) {
 8007896:	b10a      	cbz	r2, 800789c <USART_ITConfig+0x28>
         *(volatile unsigned int*)usartxbase |= itmask;
 8007898:	4319      	orrs	r1, r3
 800789a:	e001      	b.n	80078a0 <USART_ITConfig+0x2c>
      } else {
         *(volatile unsigned int*)usartxbase &= ~itmask;
 800789c:	ea23 0101 	bic.w	r1, r3, r1
 80078a0:	6001      	str	r1, [r0, #0]
 80078a2:	bd10      	pop	{r4, pc}

080078a4 <USART_SendData>:


void USART_SendData (USART_TypeDef *USARTx, unsigned short Data)
{
      /* Transmit Data */
      USARTx->DR = (Data & (unsigned short)0x01FF);
 80078a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80078a8:	8081      	strh	r1, [r0, #4]
 80078aa:	4770      	bx	lr

080078ac <USART_ReceiveData>:


unsigned short USART_ReceiveData (USART_TypeDef *USARTx)
{
      /* Receive Data */
      return (unsigned short)(USARTx->DR & (unsigned short)0x01FF);
 80078ac:	8880      	ldrh	r0, [r0, #4]
}
 80078ae:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80078b2:	4770      	bx	lr

080078b4 <USART_GetITStatus>:
      USARTx->SR = (unsigned short)~USART_FLAG;
}


int USART_GetITStatus (USART_TypeDef *USARTx, unsigned short USART_IT)
{
 80078b4:	b510      	push	{r4, lr}
      unsigned int bitpos = 0x00,itmask = 0x00,usartreg = 0x00;
      int bint = RESET;
      /* The CTS interrupt is not available for UART4 and UART5 */
      /* Get the USART register index */
      usartreg = (((unsigned char)USART_IT) >> 0x05);
 80078b6:	f3c1 1442 	ubfx	r4, r1, #5, #3
      /* Get the interrupt position */
      itmask = USART_IT & IT_Mask;
      itmask = (unsigned int)0x01 << itmask;
 80078ba:	f001 031f 	and.w	r3, r1, #31
 80078be:	2201      	movs	r2, #1
      if (usartreg == 0x01) {		/* The IT  is in CR1 register */
 80078c0:	2c01      	cmp	r4, #1
      itmask = (unsigned int)0x01 << itmask;
 80078c2:	fa02 f203 	lsl.w	r2, r2, r3
      if (usartreg == 0x01) {		/* The IT  is in CR1 register */
 80078c6:	d101      	bne.n	80078cc <USART_GetITStatus+0x18>
         itmask &= USARTx->CR1;
 80078c8:	8983      	ldrh	r3, [r0, #12]
 80078ca:	e003      	b.n	80078d4 <USART_GetITStatus+0x20>
      } else if (usartreg == 0x02) {	/* The IT  is in CR2 register */
 80078cc:	2c02      	cmp	r4, #2
         itmask &= USARTx->CR2;
 80078ce:	bf0c      	ite	eq
 80078d0:	8a03      	ldrheq	r3, [r0, #16]
      } else {	/* The IT  is in CR3 register */
         itmask &= USARTx->CR3;
 80078d2:	8a83      	ldrhne	r3, [r0, #20]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	4013      	ands	r3, r2
      }
      bitpos = USART_IT >> 0x08;
      bitpos = (unsigned int)0x01 << bitpos;
      bitpos &= USARTx->SR;
 80078d8:	8802      	ldrh	r2, [r0, #0]
 80078da:	b292      	uxth	r2, r2
      if ((itmask != (unsigned short)RESET) && (bitpos != (unsigned short)RESET)) {
 80078dc:	b143      	cbz	r3, 80078f0 <USART_GetITStatus+0x3c>
      bitpos = (unsigned int)0x01 << bitpos;
 80078de:	2301      	movs	r3, #1
 80078e0:	0a09      	lsrs	r1, r1, #8
 80078e2:	fa03 f101 	lsl.w	r1, r3, r1
      if ((itmask != (unsigned short)RESET) && (bitpos != (unsigned short)RESET)) {
 80078e6:	4211      	tst	r1, r2
 80078e8:	bf0c      	ite	eq
 80078ea:	2000      	moveq	r0, #0
 80078ec:	2001      	movne	r0, #1
 80078ee:	bd10      	pop	{r4, pc}
         bint = SET;
      } else {
         bint = RESET;
 80078f0:	4618      	mov	r0, r3
      }
      return bint;
}
 80078f2:	bd10      	pop	{r4, pc}

080078f4 <USART_ClearITPendingBit>:
void USART_ClearITPendingBit (USART_TypeDef *USARTx, unsigned short USART_IT)
{
      unsigned short bitpos = 0x00,itmask = 0x00;
      /* The CTS interrupt is not available for UART4 and UART5 */
      bitpos = USART_IT >> 0x08;
      itmask = ((unsigned short)0x01 << (unsigned short)bitpos);
 80078f4:	0a09      	lsrs	r1, r1, #8
 80078f6:	2301      	movs	r3, #1
 80078f8:	408b      	lsls	r3, r1
      USARTx->SR = (unsigned short)~itmask;
 80078fa:	43db      	mvns	r3, r3
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	8003      	strh	r3, [r0, #0]
 8007900:	4770      	bx	lr
	...

08007904 <abort>:
 8007904:	2006      	movs	r0, #6
 8007906:	b508      	push	{r3, lr}
 8007908:	f000 fbd0 	bl	80080ac <raise>
 800790c:	2001      	movs	r0, #1
 800790e:	f7ff fab3 	bl	8006e78 <_exit>
 8007912:	bf00      	nop

08007914 <__errno>:
 8007914:	4b01      	ldr	r3, [pc, #4]	; (800791c <__errno+0x8>)
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20000034 	.word	0x20000034

08007920 <malloc>:
 8007920:	4b02      	ldr	r3, [pc, #8]	; (800792c <malloc+0xc>)
 8007922:	4601      	mov	r1, r0
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	f000 b803 	b.w	8007930 <_malloc_r>
 800792a:	bf00      	nop
 800792c:	20000034 	.word	0x20000034

08007930 <_malloc_r>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	f101 050b 	add.w	r5, r1, #11
 8007938:	2d16      	cmp	r5, #22
 800793a:	4606      	mov	r6, r0
 800793c:	b083      	sub	sp, #12
 800793e:	d824      	bhi.n	800798a <_malloc_r+0x5a>
 8007940:	2910      	cmp	r1, #16
 8007942:	f200 80b6 	bhi.w	8007ab2 <_malloc_r+0x182>
 8007946:	f000 fb67 	bl	8008018 <__malloc_lock>
 800794a:	2510      	movs	r5, #16
 800794c:	2002      	movs	r0, #2
 800794e:	2318      	movs	r3, #24
 8007950:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8007e3c <_malloc_r+0x50c>
 8007954:	4443      	add	r3, r8
 8007956:	685c      	ldr	r4, [r3, #4]
 8007958:	f1a3 0208 	sub.w	r2, r3, #8
 800795c:	4294      	cmp	r4, r2
 800795e:	f000 80b4 	beq.w	8007aca <_malloc_r+0x19a>
 8007962:	6863      	ldr	r3, [r4, #4]
 8007964:	68e1      	ldr	r1, [r4, #12]
 8007966:	f023 0303 	bic.w	r3, r3, #3
 800796a:	4423      	add	r3, r4
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	68a5      	ldr	r5, [r4, #8]
 8007970:	f042 0201 	orr.w	r2, r2, #1
 8007974:	60e9      	str	r1, [r5, #12]
 8007976:	4630      	mov	r0, r6
 8007978:	608d      	str	r5, [r1, #8]
 800797a:	3408      	adds	r4, #8
 800797c:	605a      	str	r2, [r3, #4]
 800797e:	f000 fb51 	bl	8008024 <__malloc_unlock>
 8007982:	4620      	mov	r0, r4
 8007984:	b003      	add	sp, #12
 8007986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798a:	f035 0507 	bics.w	r5, r5, #7
 800798e:	f100 8090 	bmi.w	8007ab2 <_malloc_r+0x182>
 8007992:	42a9      	cmp	r1, r5
 8007994:	f200 808d 	bhi.w	8007ab2 <_malloc_r+0x182>
 8007998:	f000 fb3e 	bl	8008018 <__malloc_lock>
 800799c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80079a0:	f0c0 8185 	bcc.w	8007cae <_malloc_r+0x37e>
 80079a4:	0a6b      	lsrs	r3, r5, #9
 80079a6:	f000 808b 	beq.w	8007ac0 <_malloc_r+0x190>
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	f200 815b 	bhi.w	8007c66 <_malloc_r+0x336>
 80079b0:	09ab      	lsrs	r3, r5, #6
 80079b2:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80079b6:	f103 0738 	add.w	r7, r3, #56	; 0x38
 80079ba:	00c1      	lsls	r1, r0, #3
 80079bc:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8007e3c <_malloc_r+0x50c>
 80079c0:	4441      	add	r1, r8
 80079c2:	684c      	ldr	r4, [r1, #4]
 80079c4:	3908      	subs	r1, #8
 80079c6:	42a1      	cmp	r1, r4
 80079c8:	d106      	bne.n	80079d8 <_malloc_r+0xa8>
 80079ca:	e00c      	b.n	80079e6 <_malloc_r+0xb6>
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	f280 8122 	bge.w	8007c16 <_malloc_r+0x2e6>
 80079d2:	68e4      	ldr	r4, [r4, #12]
 80079d4:	42a1      	cmp	r1, r4
 80079d6:	d006      	beq.n	80079e6 <_malloc_r+0xb6>
 80079d8:	6863      	ldr	r3, [r4, #4]
 80079da:	f023 0303 	bic.w	r3, r3, #3
 80079de:	1b5a      	subs	r2, r3, r5
 80079e0:	2a0f      	cmp	r2, #15
 80079e2:	ddf3      	ble.n	80079cc <_malloc_r+0x9c>
 80079e4:	4638      	mov	r0, r7
 80079e6:	f8d8 4010 	ldr.w	r4, [r8, #16]
 80079ea:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8007e40 <_malloc_r+0x510>
 80079ee:	4564      	cmp	r4, ip
 80079f0:	d077      	beq.n	8007ae2 <_malloc_r+0x1b2>
 80079f2:	6862      	ldr	r2, [r4, #4]
 80079f4:	f022 0203 	bic.w	r2, r2, #3
 80079f8:	1b53      	subs	r3, r2, r5
 80079fa:	2b0f      	cmp	r3, #15
 80079fc:	f300 8165 	bgt.w	8007cca <_malloc_r+0x39a>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	e9c8 cc04 	strd	ip, ip, [r8, #16]
 8007a06:	f280 8156 	bge.w	8007cb6 <_malloc_r+0x386>
 8007a0a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007a0e:	f080 8106 	bcs.w	8007c1e <_malloc_r+0x2ee>
 8007a12:	2101      	movs	r1, #1
 8007a14:	08d3      	lsrs	r3, r2, #3
 8007a16:	0952      	lsrs	r2, r2, #5
 8007a18:	440b      	add	r3, r1
 8007a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8007a1e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a22:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
 8007a26:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	f1ae 0108 	sub.w	r1, lr, #8
 8007a30:	e9c4 7102 	strd	r7, r1, [r4, #8]
 8007a34:	f8c8 2004 	str.w	r2, [r8, #4]
 8007a38:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
 8007a3c:	60fc      	str	r4, [r7, #12]
 8007a3e:	2101      	movs	r1, #1
 8007a40:	1083      	asrs	r3, r0, #2
 8007a42:	4099      	lsls	r1, r3
 8007a44:	4291      	cmp	r1, r2
 8007a46:	d853      	bhi.n	8007af0 <_malloc_r+0x1c0>
 8007a48:	4211      	tst	r1, r2
 8007a4a:	d106      	bne.n	8007a5a <_malloc_r+0x12a>
 8007a4c:	f020 0003 	bic.w	r0, r0, #3
 8007a50:	0049      	lsls	r1, r1, #1
 8007a52:	4211      	tst	r1, r2
 8007a54:	f100 0004 	add.w	r0, r0, #4
 8007a58:	d0fa      	beq.n	8007a50 <_malloc_r+0x120>
 8007a5a:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
 8007a5e:	464c      	mov	r4, r9
 8007a60:	4686      	mov	lr, r0
 8007a62:	68e7      	ldr	r7, [r4, #12]
 8007a64:	42bc      	cmp	r4, r7
 8007a66:	d107      	bne.n	8007a78 <_malloc_r+0x148>
 8007a68:	e109      	b.n	8007c7e <_malloc_r+0x34e>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f280 8110 	bge.w	8007c90 <_malloc_r+0x360>
 8007a70:	68ff      	ldr	r7, [r7, #12]
 8007a72:	42bc      	cmp	r4, r7
 8007a74:	f000 8103 	beq.w	8007c7e <_malloc_r+0x34e>
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	f022 0203 	bic.w	r2, r2, #3
 8007a7e:	1b53      	subs	r3, r2, r5
 8007a80:	2b0f      	cmp	r3, #15
 8007a82:	ddf2      	ble.n	8007a6a <_malloc_r+0x13a>
 8007a84:	f045 0e01 	orr.w	lr, r5, #1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
 8007a8e:	443d      	add	r5, r7
 8007a90:	f043 0601 	orr.w	r6, r3, #1
 8007a94:	f8c7 e004 	str.w	lr, [r7, #4]
 8007a98:	60e1      	str	r1, [r4, #12]
 8007a9a:	608c      	str	r4, [r1, #8]
 8007a9c:	e9c8 5504 	strd	r5, r5, [r8, #16]
 8007aa0:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 8007aa4:	606e      	str	r6, [r5, #4]
 8007aa6:	50bb      	str	r3, [r7, r2]
 8007aa8:	f000 fabc 	bl	8008024 <__malloc_unlock>
 8007aac:	f107 0408 	add.w	r4, r7, #8
 8007ab0:	e002      	b.n	8007ab8 <_malloc_r+0x188>
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	2400      	movs	r4, #0
 8007ab6:	6033      	str	r3, [r6, #0]
 8007ab8:	4620      	mov	r0, r4
 8007aba:	b003      	add	sp, #12
 8007abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ac4:	2040      	movs	r0, #64	; 0x40
 8007ac6:	273f      	movs	r7, #63	; 0x3f
 8007ac8:	e778      	b.n	80079bc <_malloc_r+0x8c>
 8007aca:	68dc      	ldr	r4, [r3, #12]
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	bf08      	it	eq
 8007ad0:	3002      	addeq	r0, #2
 8007ad2:	f47f af46 	bne.w	8007962 <_malloc_r+0x32>
 8007ad6:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8007ada:	f8df c364 	ldr.w	ip, [pc, #868]	; 8007e40 <_malloc_r+0x510>
 8007ade:	4564      	cmp	r4, ip
 8007ae0:	d187      	bne.n	80079f2 <_malloc_r+0xc2>
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007ae8:	1083      	asrs	r3, r0, #2
 8007aea:	4099      	lsls	r1, r3
 8007aec:	4291      	cmp	r1, r2
 8007aee:	d9ab      	bls.n	8007a48 <_malloc_r+0x118>
 8007af0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007af4:	6867      	ldr	r7, [r4, #4]
 8007af6:	f027 0703 	bic.w	r7, r7, #3
 8007afa:	42bd      	cmp	r5, r7
 8007afc:	d802      	bhi.n	8007b04 <_malloc_r+0x1d4>
 8007afe:	1b7b      	subs	r3, r7, r5
 8007b00:	2b0f      	cmp	r3, #15
 8007b02:	dc77      	bgt.n	8007bf4 <_malloc_r+0x2c4>
 8007b04:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8007e44 <_malloc_r+0x514>
 8007b08:	4bc8      	ldr	r3, [pc, #800]	; (8007e2c <_malloc_r+0x4fc>)
 8007b0a:	f8d9 2000 	ldr.w	r2, [r9]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3201      	adds	r2, #1
 8007b12:	442b      	add	r3, r5
 8007b14:	eb04 0a07 	add.w	sl, r4, r7
 8007b18:	f000 8124 	beq.w	8007d64 <_malloc_r+0x434>
 8007b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b20:	330f      	adds	r3, #15
 8007b22:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 8007b26:	f02b 0b0f 	bic.w	fp, fp, #15
 8007b2a:	4659      	mov	r1, fp
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f000 fa7f 	bl	8008030 <_sbrk_r>
 8007b32:	1c41      	adds	r1, r0, #1
 8007b34:	4602      	mov	r2, r0
 8007b36:	f000 80e1 	beq.w	8007cfc <_malloc_r+0x3cc>
 8007b3a:	4582      	cmp	sl, r0
 8007b3c:	f200 80dc 	bhi.w	8007cf8 <_malloc_r+0x3c8>
 8007b40:	4bbb      	ldr	r3, [pc, #748]	; (8007e30 <_malloc_r+0x500>)
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	4459      	add	r1, fp
 8007b46:	4608      	mov	r0, r1
 8007b48:	6019      	str	r1, [r3, #0]
 8007b4a:	f000 8141 	beq.w	8007dd0 <_malloc_r+0x4a0>
 8007b4e:	f8d9 1000 	ldr.w	r1, [r9]
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	3101      	adds	r1, #1
 8007b56:	bf1b      	ittet	ne
 8007b58:	eba2 0a0a 	subne.w	sl, r2, sl
 8007b5c:	4450      	addne	r0, sl
 8007b5e:	f8c9 2000 	streq.w	r2, [r9]
 8007b62:	6018      	strne	r0, [r3, #0]
 8007b64:	f012 0a07 	ands.w	sl, r2, #7
 8007b68:	f000 810a 	beq.w	8007d80 <_malloc_r+0x450>
 8007b6c:	f1ca 0108 	rsb	r1, sl, #8
 8007b70:	440a      	add	r2, r1
 8007b72:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
 8007b76:	4493      	add	fp, r2
 8007b78:	3108      	adds	r1, #8
 8007b7a:	eba1 010b 	sub.w	r1, r1, fp
 8007b7e:	f3c1 090b 	ubfx	r9, r1, #0, #12
 8007b82:	4649      	mov	r1, r9
 8007b84:	4630      	mov	r0, r6
 8007b86:	9200      	str	r2, [sp, #0]
 8007b88:	f000 fa52 	bl	8008030 <_sbrk_r>
 8007b8c:	1c42      	adds	r2, r0, #1
 8007b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b92:	f000 8143 	beq.w	8007e1c <_malloc_r+0x4ec>
 8007b96:	1a80      	subs	r0, r0, r2
 8007b98:	eb00 0b09 	add.w	fp, r0, r9
 8007b9c:	6819      	ldr	r1, [r3, #0]
 8007b9e:	f04b 0001 	orr.w	r0, fp, #1
 8007ba2:	4449      	add	r1, r9
 8007ba4:	4544      	cmp	r4, r8
 8007ba6:	f8c8 2008 	str.w	r2, [r8, #8]
 8007baa:	6019      	str	r1, [r3, #0]
 8007bac:	6050      	str	r0, [r2, #4]
 8007bae:	f000 811c 	beq.w	8007dea <_malloc_r+0x4ba>
 8007bb2:	2f0f      	cmp	r7, #15
 8007bb4:	f240 811b 	bls.w	8007dee <_malloc_r+0x4be>
 8007bb8:	f04f 0c05 	mov.w	ip, #5
 8007bbc:	6860      	ldr	r0, [r4, #4]
 8007bbe:	3f0c      	subs	r7, #12
 8007bc0:	f027 0707 	bic.w	r7, r7, #7
 8007bc4:	f000 0001 	and.w	r0, r0, #1
 8007bc8:	4338      	orrs	r0, r7
 8007bca:	eb04 0e07 	add.w	lr, r4, r7
 8007bce:	2f0f      	cmp	r7, #15
 8007bd0:	6060      	str	r0, [r4, #4]
 8007bd2:	e9ce cc01 	strd	ip, ip, [lr, #4]
 8007bd6:	f200 8137 	bhi.w	8007e48 <_malloc_r+0x518>
 8007bda:	4614      	mov	r4, r2
 8007bdc:	6850      	ldr	r0, [r2, #4]
 8007bde:	4b95      	ldr	r3, [pc, #596]	; (8007e34 <_malloc_r+0x504>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	428a      	cmp	r2, r1
 8007be4:	bf38      	it	cc
 8007be6:	6019      	strcc	r1, [r3, #0]
 8007be8:	4b93      	ldr	r3, [pc, #588]	; (8007e38 <_malloc_r+0x508>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	428a      	cmp	r2, r1
 8007bee:	bf38      	it	cc
 8007bf0:	6019      	strcc	r1, [r3, #0]
 8007bf2:	e086      	b.n	8007d02 <_malloc_r+0x3d2>
 8007bf4:	f045 0201 	orr.w	r2, r5, #1
 8007bf8:	f043 0301 	orr.w	r3, r3, #1
 8007bfc:	4425      	add	r5, r4
 8007bfe:	6062      	str	r2, [r4, #4]
 8007c00:	4630      	mov	r0, r6
 8007c02:	f8c8 5008 	str.w	r5, [r8, #8]
 8007c06:	3408      	adds	r4, #8
 8007c08:	606b      	str	r3, [r5, #4]
 8007c0a:	f000 fa0b 	bl	8008024 <__malloc_unlock>
 8007c0e:	4620      	mov	r0, r4
 8007c10:	b003      	add	sp, #12
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c16:	4423      	add	r3, r4
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	68e1      	ldr	r1, [r4, #12]
 8007c1c:	e6a7      	b.n	800796e <_malloc_r+0x3e>
 8007c1e:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8007c22:	ea4f 2352 	mov.w	r3, r2, lsr #9
 8007c26:	d361      	bcc.n	8007cec <_malloc_r+0x3bc>
 8007c28:	2b14      	cmp	r3, #20
 8007c2a:	f200 80ba 	bhi.w	8007da2 <_malloc_r+0x472>
 8007c2e:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8007c32:	00c9      	lsls	r1, r1, #3
 8007c34:	335b      	adds	r3, #91	; 0x5b
 8007c36:	eb08 0701 	add.w	r7, r8, r1
 8007c3a:	f858 1001 	ldr.w	r1, [r8, r1]
 8007c3e:	3f08      	subs	r7, #8
 8007c40:	428f      	cmp	r7, r1
 8007c42:	f000 8092 	beq.w	8007d6a <_malloc_r+0x43a>
 8007c46:	684b      	ldr	r3, [r1, #4]
 8007c48:	f023 0303 	bic.w	r3, r3, #3
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d902      	bls.n	8007c56 <_malloc_r+0x326>
 8007c50:	6889      	ldr	r1, [r1, #8]
 8007c52:	428f      	cmp	r7, r1
 8007c54:	d1f7      	bne.n	8007c46 <_malloc_r+0x316>
 8007c56:	68cf      	ldr	r7, [r1, #12]
 8007c58:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007c5c:	e9c4 1702 	strd	r1, r7, [r4, #8]
 8007c60:	60bc      	str	r4, [r7, #8]
 8007c62:	60cc      	str	r4, [r1, #12]
 8007c64:	e6eb      	b.n	8007a3e <_malloc_r+0x10e>
 8007c66:	2b14      	cmp	r3, #20
 8007c68:	d959      	bls.n	8007d1e <_malloc_r+0x3ee>
 8007c6a:	2b54      	cmp	r3, #84	; 0x54
 8007c6c:	f200 80a1 	bhi.w	8007db2 <_malloc_r+0x482>
 8007c70:	0b2b      	lsrs	r3, r5, #12
 8007c72:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8007c76:	f103 076e 	add.w	r7, r3, #110	; 0x6e
 8007c7a:	00c1      	lsls	r1, r0, #3
 8007c7c:	e69e      	b.n	80079bc <_malloc_r+0x8c>
 8007c7e:	f10e 0e01 	add.w	lr, lr, #1
 8007c82:	f01e 0f03 	tst.w	lr, #3
 8007c86:	f104 0408 	add.w	r4, r4, #8
 8007c8a:	f47f aeea 	bne.w	8007a62 <_malloc_r+0x132>
 8007c8e:	e051      	b.n	8007d34 <_malloc_r+0x404>
 8007c90:	463c      	mov	r4, r7
 8007c92:	443a      	add	r2, r7
 8007c94:	6853      	ldr	r3, [r2, #4]
 8007c96:	68f9      	ldr	r1, [r7, #12]
 8007c98:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	6053      	str	r3, [r2, #4]
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	60e9      	str	r1, [r5, #12]
 8007ca6:	608d      	str	r5, [r1, #8]
 8007ca8:	f000 f9bc 	bl	8008024 <__malloc_unlock>
 8007cac:	e704      	b.n	8007ab8 <_malloc_r+0x188>
 8007cae:	08e8      	lsrs	r0, r5, #3
 8007cb0:	f105 0308 	add.w	r3, r5, #8
 8007cb4:	e64c      	b.n	8007950 <_malloc_r+0x20>
 8007cb6:	4422      	add	r2, r4
 8007cb8:	6853      	ldr	r3, [r2, #4]
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	6053      	str	r3, [r2, #4]
 8007cc2:	3408      	adds	r4, #8
 8007cc4:	f000 f9ae 	bl	8008024 <__malloc_unlock>
 8007cc8:	e6f6      	b.n	8007ab8 <_malloc_r+0x188>
 8007cca:	f045 0701 	orr.w	r7, r5, #1
 8007cce:	f043 0101 	orr.w	r1, r3, #1
 8007cd2:	4425      	add	r5, r4
 8007cd4:	6067      	str	r7, [r4, #4]
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	e9c8 5504 	strd	r5, r5, [r8, #16]
 8007cdc:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 8007ce0:	6069      	str	r1, [r5, #4]
 8007ce2:	50a3      	str	r3, [r4, r2]
 8007ce4:	f000 f99e 	bl	8008024 <__malloc_unlock>
 8007ce8:	3408      	adds	r4, #8
 8007cea:	e6e5      	b.n	8007ab8 <_malloc_r+0x188>
 8007cec:	0993      	lsrs	r3, r2, #6
 8007cee:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8007cf2:	00c9      	lsls	r1, r1, #3
 8007cf4:	3338      	adds	r3, #56	; 0x38
 8007cf6:	e79e      	b.n	8007c36 <_malloc_r+0x306>
 8007cf8:	4544      	cmp	r4, r8
 8007cfa:	d064      	beq.n	8007dc6 <_malloc_r+0x496>
 8007cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d00:	6860      	ldr	r0, [r4, #4]
 8007d02:	f020 0b03 	bic.w	fp, r0, #3
 8007d06:	455d      	cmp	r5, fp
 8007d08:	ebab 0305 	sub.w	r3, fp, r5
 8007d0c:	d802      	bhi.n	8007d14 <_malloc_r+0x3e4>
 8007d0e:	2b0f      	cmp	r3, #15
 8007d10:	f73f af70 	bgt.w	8007bf4 <_malloc_r+0x2c4>
 8007d14:	4630      	mov	r0, r6
 8007d16:	f000 f985 	bl	8008024 <__malloc_unlock>
 8007d1a:	2400      	movs	r4, #0
 8007d1c:	e6cc      	b.n	8007ab8 <_malloc_r+0x188>
 8007d1e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8007d22:	f103 075b 	add.w	r7, r3, #91	; 0x5b
 8007d26:	00c1      	lsls	r1, r0, #3
 8007d28:	e648      	b.n	80079bc <_malloc_r+0x8c>
 8007d2a:	f859 3908 	ldr.w	r3, [r9], #-8
 8007d2e:	454b      	cmp	r3, r9
 8007d30:	f040 80a9 	bne.w	8007e86 <_malloc_r+0x556>
 8007d34:	f010 0f03 	tst.w	r0, #3
 8007d38:	f100 30ff 	add.w	r0, r0, #4294967295
 8007d3c:	d1f5      	bne.n	8007d2a <_malloc_r+0x3fa>
 8007d3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d42:	ea23 0301 	bic.w	r3, r3, r1
 8007d46:	f8c8 3004 	str.w	r3, [r8, #4]
 8007d4a:	0049      	lsls	r1, r1, #1
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	f63f aecf 	bhi.w	8007af0 <_malloc_r+0x1c0>
 8007d52:	b919      	cbnz	r1, 8007d5c <_malloc_r+0x42c>
 8007d54:	e6cc      	b.n	8007af0 <_malloc_r+0x1c0>
 8007d56:	0049      	lsls	r1, r1, #1
 8007d58:	f10e 0e04 	add.w	lr, lr, #4
 8007d5c:	4219      	tst	r1, r3
 8007d5e:	d0fa      	beq.n	8007d56 <_malloc_r+0x426>
 8007d60:	4670      	mov	r0, lr
 8007d62:	e67a      	b.n	8007a5a <_malloc_r+0x12a>
 8007d64:	f103 0b10 	add.w	fp, r3, #16
 8007d68:	e6df      	b.n	8007b2a <_malloc_r+0x1fa>
 8007d6a:	f04f 0e01 	mov.w	lr, #1
 8007d6e:	109a      	asrs	r2, r3, #2
 8007d70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d74:	fa0e f202 	lsl.w	r2, lr, r2
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	f8c8 2004 	str.w	r2, [r8, #4]
 8007d7e:	e76d      	b.n	8007c5c <_malloc_r+0x32c>
 8007d80:	eb02 010b 	add.w	r1, r2, fp
 8007d84:	4249      	negs	r1, r1
 8007d86:	f3c1 090b 	ubfx	r9, r1, #0, #12
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	9200      	str	r2, [sp, #0]
 8007d90:	f000 f94e 	bl	8008030 <_sbrk_r>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d9a:	f47f aefc 	bne.w	8007b96 <_malloc_r+0x266>
 8007d9e:	46d1      	mov	r9, sl
 8007da0:	e6fc      	b.n	8007b9c <_malloc_r+0x26c>
 8007da2:	2b54      	cmp	r3, #84	; 0x54
 8007da4:	d826      	bhi.n	8007df4 <_malloc_r+0x4c4>
 8007da6:	0b13      	lsrs	r3, r2, #12
 8007da8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8007dac:	00c9      	lsls	r1, r1, #3
 8007dae:	336e      	adds	r3, #110	; 0x6e
 8007db0:	e741      	b.n	8007c36 <_malloc_r+0x306>
 8007db2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007db6:	d826      	bhi.n	8007e06 <_malloc_r+0x4d6>
 8007db8:	0beb      	lsrs	r3, r5, #15
 8007dba:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8007dbe:	f103 0777 	add.w	r7, r3, #119	; 0x77
 8007dc2:	00c1      	lsls	r1, r0, #3
 8007dc4:	e5fa      	b.n	80079bc <_malloc_r+0x8c>
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <_malloc_r+0x500>)
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	4458      	add	r0, fp
 8007dcc:	6018      	str	r0, [r3, #0]
 8007dce:	e6be      	b.n	8007b4e <_malloc_r+0x21e>
 8007dd0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 8007dd4:	f1bc 0f00 	cmp.w	ip, #0
 8007dd8:	f47f aeb9 	bne.w	8007b4e <_malloc_r+0x21e>
 8007ddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007de0:	44bb      	add	fp, r7
 8007de2:	f04b 0001 	orr.w	r0, fp, #1
 8007de6:	6060      	str	r0, [r4, #4]
 8007de8:	e6f9      	b.n	8007bde <_malloc_r+0x2ae>
 8007dea:	4614      	mov	r4, r2
 8007dec:	e6f7      	b.n	8007bde <_malloc_r+0x2ae>
 8007dee:	2301      	movs	r3, #1
 8007df0:	6053      	str	r3, [r2, #4]
 8007df2:	e78f      	b.n	8007d14 <_malloc_r+0x3e4>
 8007df4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007df8:	d832      	bhi.n	8007e60 <_malloc_r+0x530>
 8007dfa:	0bd3      	lsrs	r3, r2, #15
 8007dfc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8007e00:	00c9      	lsls	r1, r1, #3
 8007e02:	3377      	adds	r3, #119	; 0x77
 8007e04:	e717      	b.n	8007c36 <_malloc_r+0x306>
 8007e06:	f240 5254 	movw	r2, #1364	; 0x554
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d832      	bhi.n	8007e74 <_malloc_r+0x544>
 8007e0e:	0cab      	lsrs	r3, r5, #18
 8007e10:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8007e14:	f103 077c 	add.w	r7, r3, #124	; 0x7c
 8007e18:	00c1      	lsls	r1, r0, #3
 8007e1a:	e5cf      	b.n	80079bc <_malloc_r+0x8c>
 8007e1c:	f1aa 0a08 	sub.w	sl, sl, #8
 8007e20:	44d3      	add	fp, sl
 8007e22:	f04f 0900 	mov.w	r9, #0
 8007e26:	ebab 0b02 	sub.w	fp, fp, r2
 8007e2a:	e6b7      	b.n	8007b9c <_malloc_r+0x26c>
 8007e2c:	20000ae0 	.word	0x20000ae0
 8007e30:	20000ab0 	.word	0x20000ab0
 8007e34:	20000ad8 	.word	0x20000ad8
 8007e38:	20000adc 	.word	0x20000adc
 8007e3c:	20000460 	.word	0x20000460
 8007e40:	20000468 	.word	0x20000468
 8007e44:	20000868 	.word	0x20000868
 8007e48:	f104 0108 	add.w	r1, r4, #8
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	f000 fa6a 	bl	8008328 <_free_r>
 8007e54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e58:	9b00      	ldr	r3, [sp, #0]
 8007e5a:	6860      	ldr	r0, [r4, #4]
 8007e5c:	6819      	ldr	r1, [r3, #0]
 8007e5e:	e6be      	b.n	8007bde <_malloc_r+0x2ae>
 8007e60:	f240 5154 	movw	r1, #1364	; 0x554
 8007e64:	428b      	cmp	r3, r1
 8007e66:	d80a      	bhi.n	8007e7e <_malloc_r+0x54e>
 8007e68:	0c93      	lsrs	r3, r2, #18
 8007e6a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 8007e6e:	00c9      	lsls	r1, r1, #3
 8007e70:	337c      	adds	r3, #124	; 0x7c
 8007e72:	e6e0      	b.n	8007c36 <_malloc_r+0x306>
 8007e74:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8007e78:	207f      	movs	r0, #127	; 0x7f
 8007e7a:	277e      	movs	r7, #126	; 0x7e
 8007e7c:	e59e      	b.n	80079bc <_malloc_r+0x8c>
 8007e7e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8007e82:	237e      	movs	r3, #126	; 0x7e
 8007e84:	e6d7      	b.n	8007c36 <_malloc_r+0x306>
 8007e86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e8a:	e75e      	b.n	8007d4a <_malloc_r+0x41a>

08007e8c <memcpy>:
 8007e8c:	4684      	mov	ip, r0
 8007e8e:	ea41 0300 	orr.w	r3, r1, r0
 8007e92:	f013 0303 	ands.w	r3, r3, #3
 8007e96:	d149      	bne.n	8007f2c <memcpy+0xa0>
 8007e98:	3a40      	subs	r2, #64	; 0x40
 8007e9a:	d323      	bcc.n	8007ee4 <memcpy+0x58>
 8007e9c:	680b      	ldr	r3, [r1, #0]
 8007e9e:	6003      	str	r3, [r0, #0]
 8007ea0:	684b      	ldr	r3, [r1, #4]
 8007ea2:	6043      	str	r3, [r0, #4]
 8007ea4:	688b      	ldr	r3, [r1, #8]
 8007ea6:	6083      	str	r3, [r0, #8]
 8007ea8:	68cb      	ldr	r3, [r1, #12]
 8007eaa:	60c3      	str	r3, [r0, #12]
 8007eac:	690b      	ldr	r3, [r1, #16]
 8007eae:	6103      	str	r3, [r0, #16]
 8007eb0:	694b      	ldr	r3, [r1, #20]
 8007eb2:	6143      	str	r3, [r0, #20]
 8007eb4:	698b      	ldr	r3, [r1, #24]
 8007eb6:	6183      	str	r3, [r0, #24]
 8007eb8:	69cb      	ldr	r3, [r1, #28]
 8007eba:	61c3      	str	r3, [r0, #28]
 8007ebc:	6a0b      	ldr	r3, [r1, #32]
 8007ebe:	6203      	str	r3, [r0, #32]
 8007ec0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8007ec2:	6243      	str	r3, [r0, #36]	; 0x24
 8007ec4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007ec6:	6283      	str	r3, [r0, #40]	; 0x28
 8007ec8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007eca:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007ecc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007ece:	6303      	str	r3, [r0, #48]	; 0x30
 8007ed0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007ed2:	6343      	str	r3, [r0, #52]	; 0x34
 8007ed4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8007ed6:	6383      	str	r3, [r0, #56]	; 0x38
 8007ed8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007eda:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007edc:	3040      	adds	r0, #64	; 0x40
 8007ede:	3140      	adds	r1, #64	; 0x40
 8007ee0:	3a40      	subs	r2, #64	; 0x40
 8007ee2:	d2db      	bcs.n	8007e9c <memcpy+0x10>
 8007ee4:	3230      	adds	r2, #48	; 0x30
 8007ee6:	d30b      	bcc.n	8007f00 <memcpy+0x74>
 8007ee8:	680b      	ldr	r3, [r1, #0]
 8007eea:	6003      	str	r3, [r0, #0]
 8007eec:	684b      	ldr	r3, [r1, #4]
 8007eee:	6043      	str	r3, [r0, #4]
 8007ef0:	688b      	ldr	r3, [r1, #8]
 8007ef2:	6083      	str	r3, [r0, #8]
 8007ef4:	68cb      	ldr	r3, [r1, #12]
 8007ef6:	60c3      	str	r3, [r0, #12]
 8007ef8:	3010      	adds	r0, #16
 8007efa:	3110      	adds	r1, #16
 8007efc:	3a10      	subs	r2, #16
 8007efe:	d2f3      	bcs.n	8007ee8 <memcpy+0x5c>
 8007f00:	320c      	adds	r2, #12
 8007f02:	d305      	bcc.n	8007f10 <memcpy+0x84>
 8007f04:	f851 3b04 	ldr.w	r3, [r1], #4
 8007f08:	f840 3b04 	str.w	r3, [r0], #4
 8007f0c:	3a04      	subs	r2, #4
 8007f0e:	d2f9      	bcs.n	8007f04 <memcpy+0x78>
 8007f10:	3204      	adds	r2, #4
 8007f12:	d008      	beq.n	8007f26 <memcpy+0x9a>
 8007f14:	07d2      	lsls	r2, r2, #31
 8007f16:	bf1c      	itt	ne
 8007f18:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8007f1c:	f800 3b01 	strbne.w	r3, [r0], #1
 8007f20:	d301      	bcc.n	8007f26 <memcpy+0x9a>
 8007f22:	880b      	ldrh	r3, [r1, #0]
 8007f24:	8003      	strh	r3, [r0, #0]
 8007f26:	4660      	mov	r0, ip
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	2a08      	cmp	r2, #8
 8007f2e:	d313      	bcc.n	8007f58 <memcpy+0xcc>
 8007f30:	078b      	lsls	r3, r1, #30
 8007f32:	d0b1      	beq.n	8007e98 <memcpy+0xc>
 8007f34:	f010 0303 	ands.w	r3, r0, #3
 8007f38:	d0ae      	beq.n	8007e98 <memcpy+0xc>
 8007f3a:	f1c3 0304 	rsb	r3, r3, #4
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	07db      	lsls	r3, r3, #31
 8007f42:	bf1c      	itt	ne
 8007f44:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8007f48:	f800 3b01 	strbne.w	r3, [r0], #1
 8007f4c:	d3a4      	bcc.n	8007e98 <memcpy+0xc>
 8007f4e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007f52:	f820 3b02 	strh.w	r3, [r0], #2
 8007f56:	e79f      	b.n	8007e98 <memcpy+0xc>
 8007f58:	3a04      	subs	r2, #4
 8007f5a:	d3d9      	bcc.n	8007f10 <memcpy+0x84>
 8007f5c:	3a01      	subs	r2, #1
 8007f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f62:	f800 3b01 	strb.w	r3, [r0], #1
 8007f66:	d2f9      	bcs.n	8007f5c <memcpy+0xd0>
 8007f68:	780b      	ldrb	r3, [r1, #0]
 8007f6a:	7003      	strb	r3, [r0, #0]
 8007f6c:	784b      	ldrb	r3, [r1, #1]
 8007f6e:	7043      	strb	r3, [r0, #1]
 8007f70:	788b      	ldrb	r3, [r1, #2]
 8007f72:	7083      	strb	r3, [r0, #2]
 8007f74:	4660      	mov	r0, ip
 8007f76:	4770      	bx	lr

08007f78 <memset>:
 8007f78:	b4f0      	push	{r4, r5, r6, r7}
 8007f7a:	0786      	lsls	r6, r0, #30
 8007f7c:	d046      	beq.n	800800c <memset+0x94>
 8007f7e:	1e54      	subs	r4, r2, #1
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	d03c      	beq.n	8007ffe <memset+0x86>
 8007f84:	4603      	mov	r3, r0
 8007f86:	b2ca      	uxtb	r2, r1
 8007f88:	e001      	b.n	8007f8e <memset+0x16>
 8007f8a:	3c01      	subs	r4, #1
 8007f8c:	d337      	bcc.n	8007ffe <memset+0x86>
 8007f8e:	f803 2b01 	strb.w	r2, [r3], #1
 8007f92:	079d      	lsls	r5, r3, #30
 8007f94:	d1f9      	bne.n	8007f8a <memset+0x12>
 8007f96:	2c03      	cmp	r4, #3
 8007f98:	d92a      	bls.n	8007ff0 <memset+0x78>
 8007f9a:	b2cd      	uxtb	r5, r1
 8007f9c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007fa0:	2c0f      	cmp	r4, #15
 8007fa2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007fa6:	d934      	bls.n	8008012 <memset+0x9a>
 8007fa8:	f1a4 0210 	sub.w	r2, r4, #16
 8007fac:	f022 0c0f 	bic.w	ip, r2, #15
 8007fb0:	f103 0720 	add.w	r7, r3, #32
 8007fb4:	0916      	lsrs	r6, r2, #4
 8007fb6:	4467      	add	r7, ip
 8007fb8:	f103 0210 	add.w	r2, r3, #16
 8007fbc:	e942 5504 	strd	r5, r5, [r2, #-16]
 8007fc0:	e942 5502 	strd	r5, r5, [r2, #-8]
 8007fc4:	3210      	adds	r2, #16
 8007fc6:	42ba      	cmp	r2, r7
 8007fc8:	d1f8      	bne.n	8007fbc <memset+0x44>
 8007fca:	1c72      	adds	r2, r6, #1
 8007fcc:	f014 0f0c 	tst.w	r4, #12
 8007fd0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007fd4:	f004 060f 	and.w	r6, r4, #15
 8007fd8:	d013      	beq.n	8008002 <memset+0x8a>
 8007fda:	1f33      	subs	r3, r6, #4
 8007fdc:	f023 0303 	bic.w	r3, r3, #3
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f842 5b04 	str.w	r5, [r2], #4
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d1fb      	bne.n	8007fe4 <memset+0x6c>
 8007fec:	f006 0403 	and.w	r4, r6, #3
 8007ff0:	b12c      	cbz	r4, 8007ffe <memset+0x86>
 8007ff2:	b2ca      	uxtb	r2, r1
 8007ff4:	441c      	add	r4, r3
 8007ff6:	f803 2b01 	strb.w	r2, [r3], #1
 8007ffa:	429c      	cmp	r4, r3
 8007ffc:	d1fb      	bne.n	8007ff6 <memset+0x7e>
 8007ffe:	bcf0      	pop	{r4, r5, r6, r7}
 8008000:	4770      	bx	lr
 8008002:	4634      	mov	r4, r6
 8008004:	4613      	mov	r3, r2
 8008006:	2c00      	cmp	r4, #0
 8008008:	d1f3      	bne.n	8007ff2 <memset+0x7a>
 800800a:	e7f8      	b.n	8007ffe <memset+0x86>
 800800c:	4614      	mov	r4, r2
 800800e:	4603      	mov	r3, r0
 8008010:	e7c1      	b.n	8007f96 <memset+0x1e>
 8008012:	461a      	mov	r2, r3
 8008014:	4626      	mov	r6, r4
 8008016:	e7e0      	b.n	8007fda <memset+0x62>

08008018 <__malloc_lock>:
 8008018:	4801      	ldr	r0, [pc, #4]	; (8008020 <__malloc_lock+0x8>)
 800801a:	f000 ba8b 	b.w	8008534 <__retarget_lock_acquire_recursive>
 800801e:	bf00      	nop
 8008020:	20004230 	.word	0x20004230

08008024 <__malloc_unlock>:
 8008024:	4801      	ldr	r0, [pc, #4]	; (800802c <__malloc_unlock+0x8>)
 8008026:	f000 ba87 	b.w	8008538 <__retarget_lock_release_recursive>
 800802a:	bf00      	nop
 800802c:	20004230 	.word	0x20004230

08008030 <_sbrk_r>:
 8008030:	2200      	movs	r2, #0
 8008032:	b538      	push	{r3, r4, r5, lr}
 8008034:	4d06      	ldr	r5, [pc, #24]	; (8008050 <_sbrk_r+0x20>)
 8008036:	4604      	mov	r4, r0
 8008038:	4608      	mov	r0, r1
 800803a:	602a      	str	r2, [r5, #0]
 800803c:	f7fe ff26 	bl	8006e8c <_sbrk>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d000      	beq.n	8008046 <_sbrk_r+0x16>
 8008044:	bd38      	pop	{r3, r4, r5, pc}
 8008046:	682b      	ldr	r3, [r5, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0fb      	beq.n	8008044 <_sbrk_r+0x14>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20004244 	.word	0x20004244

08008054 <_raise_r>:
 8008054:	291f      	cmp	r1, #31
 8008056:	b538      	push	{r3, r4, r5, lr}
 8008058:	4605      	mov	r5, r0
 800805a:	d821      	bhi.n	80080a0 <_raise_r+0x4c>
 800805c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8008060:	460c      	mov	r4, r1
 8008062:	b16a      	cbz	r2, 8008080 <_raise_r+0x2c>
 8008064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008068:	b153      	cbz	r3, 8008080 <_raise_r+0x2c>
 800806a:	2b01      	cmp	r3, #1
 800806c:	d016      	beq.n	800809c <_raise_r+0x48>
 800806e:	1c59      	adds	r1, r3, #1
 8008070:	d010      	beq.n	8008094 <_raise_r+0x40>
 8008072:	2500      	movs	r5, #0
 8008074:	4620      	mov	r0, r4
 8008076:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800807a:	4798      	blx	r3
 800807c:	4628      	mov	r0, r5
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	4628      	mov	r0, r5
 8008082:	f000 f831 	bl	80080e8 <_getpid_r>
 8008086:	4622      	mov	r2, r4
 8008088:	4601      	mov	r1, r0
 800808a:	4628      	mov	r0, r5
 800808c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008090:	f000 b814 	b.w	80080bc <_kill_r>
 8008094:	2316      	movs	r3, #22
 8008096:	2001      	movs	r0, #1
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	2000      	movs	r0, #0
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	2316      	movs	r3, #22
 80080a2:	f04f 30ff 	mov.w	r0, #4294967295
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	bd38      	pop	{r3, r4, r5, pc}
 80080aa:	bf00      	nop

080080ac <raise>:
 80080ac:	4b02      	ldr	r3, [pc, #8]	; (80080b8 <raise+0xc>)
 80080ae:	4601      	mov	r1, r0
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	f7ff bfcf 	b.w	8008054 <_raise_r>
 80080b6:	bf00      	nop
 80080b8:	20000034 	.word	0x20000034

080080bc <_kill_r>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	460c      	mov	r4, r1
 80080c0:	4603      	mov	r3, r0
 80080c2:	2600      	movs	r6, #0
 80080c4:	4d07      	ldr	r5, [pc, #28]	; (80080e4 <_kill_r+0x28>)
 80080c6:	4620      	mov	r0, r4
 80080c8:	4611      	mov	r1, r2
 80080ca:	461c      	mov	r4, r3
 80080cc:	602e      	str	r6, [r5, #0]
 80080ce:	f7fe fecb 	bl	8006e68 <_kill>
 80080d2:	1c43      	adds	r3, r0, #1
 80080d4:	d000      	beq.n	80080d8 <_kill_r+0x1c>
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0fb      	beq.n	80080d6 <_kill_r+0x1a>
 80080de:	6023      	str	r3, [r4, #0]
 80080e0:	bd70      	pop	{r4, r5, r6, pc}
 80080e2:	bf00      	nop
 80080e4:	20004244 	.word	0x20004244

080080e8 <_getpid_r>:
 80080e8:	f7fe bece 	b.w	8006e88 <_getpid>

080080ec <strcasecmp>:
 80080ec:	b430      	push	{r4, r5}
 80080ee:	4604      	mov	r4, r0
 80080f0:	4d0e      	ldr	r5, [pc, #56]	; (800812c <strcasecmp+0x40>)
 80080f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080f6:	f811 0b01 	ldrb.w	r0, [r1], #1
 80080fa:	5cea      	ldrb	r2, [r5, r3]
 80080fc:	f002 0203 	and.w	r2, r2, #3
 8008100:	2a01      	cmp	r2, #1
 8008102:	5c2a      	ldrb	r2, [r5, r0]
 8008104:	bf08      	it	eq
 8008106:	3320      	addeq	r3, #32
 8008108:	f002 0203 	and.w	r2, r2, #3
 800810c:	2a01      	cmp	r2, #1
 800810e:	d005      	beq.n	800811c <strcasecmp+0x30>
 8008110:	1a1b      	subs	r3, r3, r0
 8008112:	d108      	bne.n	8008126 <strcasecmp+0x3a>
 8008114:	2800      	cmp	r0, #0
 8008116:	d1ec      	bne.n	80080f2 <strcasecmp+0x6>
 8008118:	bc30      	pop	{r4, r5}
 800811a:	4770      	bx	lr
 800811c:	3020      	adds	r0, #32
 800811e:	1a18      	subs	r0, r3, r0
 8008120:	d0e7      	beq.n	80080f2 <strcasecmp+0x6>
 8008122:	bc30      	pop	{r4, r5}
 8008124:	4770      	bx	lr
 8008126:	4618      	mov	r0, r3
 8008128:	bc30      	pop	{r4, r5}
 800812a:	4770      	bx	lr
 800812c:	08012519 	.word	0x08012519

08008130 <strcpy>:
 8008130:	ea80 0201 	eor.w	r2, r0, r1
 8008134:	4684      	mov	ip, r0
 8008136:	f012 0f03 	tst.w	r2, #3
 800813a:	d14f      	bne.n	80081dc <strcpy+0xac>
 800813c:	f011 0f03 	tst.w	r1, #3
 8008140:	d132      	bne.n	80081a8 <strcpy+0x78>
 8008142:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8008146:	f011 0f04 	tst.w	r1, #4
 800814a:	f851 3b04 	ldr.w	r3, [r1], #4
 800814e:	d00b      	beq.n	8008168 <strcpy+0x38>
 8008150:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8008154:	439a      	bics	r2, r3
 8008156:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800815a:	bf04      	itt	eq
 800815c:	f84c 3b04 	streq.w	r3, [ip], #4
 8008160:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008164:	d116      	bne.n	8008194 <strcpy+0x64>
 8008166:	bf00      	nop
 8008168:	f851 4b04 	ldr.w	r4, [r1], #4
 800816c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8008170:	439a      	bics	r2, r3
 8008172:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8008176:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800817a:	d10b      	bne.n	8008194 <strcpy+0x64>
 800817c:	f84c 3b04 	str.w	r3, [ip], #4
 8008180:	43a2      	bics	r2, r4
 8008182:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8008186:	bf04      	itt	eq
 8008188:	f851 3b04 	ldreq.w	r3, [r1], #4
 800818c:	f84c 4b04 	streq.w	r4, [ip], #4
 8008190:	d0ea      	beq.n	8008168 <strcpy+0x38>
 8008192:	4623      	mov	r3, r4
 8008194:	f80c 3b01 	strb.w	r3, [ip], #1
 8008198:	f013 0fff 	tst.w	r3, #255	; 0xff
 800819c:	ea4f 2333 	mov.w	r3, r3, ror #8
 80081a0:	d1f8      	bne.n	8008194 <strcpy+0x64>
 80081a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	f011 0f01 	tst.w	r1, #1
 80081ac:	d006      	beq.n	80081bc <strcpy+0x8c>
 80081ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081b2:	f80c 2b01 	strb.w	r2, [ip], #1
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	bf08      	it	eq
 80081ba:	4770      	bxeq	lr
 80081bc:	f011 0f02 	tst.w	r1, #2
 80081c0:	d0bf      	beq.n	8008142 <strcpy+0x12>
 80081c2:	f831 2b02 	ldrh.w	r2, [r1], #2
 80081c6:	f012 0fff 	tst.w	r2, #255	; 0xff
 80081ca:	bf16      	itet	ne
 80081cc:	f82c 2b02 	strhne.w	r2, [ip], #2
 80081d0:	f88c 2000 	strbeq.w	r2, [ip]
 80081d4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80081d8:	d1b3      	bne.n	8008142 <strcpy+0x12>
 80081da:	4770      	bx	lr
 80081dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e0:	f80c 2b01 	strb.w	r2, [ip], #1
 80081e4:	2a00      	cmp	r2, #0
 80081e6:	d1f9      	bne.n	80081dc <strcpy+0xac>
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop

080081ec <strlen>:
 80081ec:	f020 0103 	bic.w	r1, r0, #3
 80081f0:	f010 0003 	ands.w	r0, r0, #3
 80081f4:	f1c0 0000 	rsb	r0, r0, #0
 80081f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80081fc:	f100 0c04 	add.w	ip, r0, #4
 8008200:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008204:	f06f 0200 	mvn.w	r2, #0
 8008208:	bf1c      	itt	ne
 800820a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800820e:	4313      	orrne	r3, r2
 8008210:	f04f 0c01 	mov.w	ip, #1
 8008214:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8008218:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800821c:	eba3 020c 	sub.w	r2, r3, ip
 8008220:	ea22 0203 	bic.w	r2, r2, r3
 8008224:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8008228:	bf04      	itt	eq
 800822a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800822e:	3004      	addeq	r0, #4
 8008230:	d0f4      	beq.n	800821c <strlen+0x30>
 8008232:	f1c2 0100 	rsb	r1, r2, #0
 8008236:	ea02 0201 	and.w	r2, r2, r1
 800823a:	fab2 f282 	clz	r2, r2
 800823e:	f1c2 021f 	rsb	r2, r2, #31
 8008242:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8008246:	4770      	bx	lr

08008248 <_vsprintf_r>:
 8008248:	b530      	push	{r4, r5, lr}
 800824a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800824e:	b09b      	sub	sp, #108	; 0x6c
 8008250:	4d06      	ldr	r5, [pc, #24]	; (800826c <_vsprintf_r+0x24>)
 8008252:	9100      	str	r1, [sp, #0]
 8008254:	9104      	str	r1, [sp, #16]
 8008256:	4669      	mov	r1, sp
 8008258:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800825c:	9405      	str	r4, [sp, #20]
 800825e:	f000 f96d 	bl	800853c <_svfprintf_r>
 8008262:	2200      	movs	r2, #0
 8008264:	9b00      	ldr	r3, [sp, #0]
 8008266:	701a      	strb	r2, [r3, #0]
 8008268:	b01b      	add	sp, #108	; 0x6c
 800826a:	bd30      	pop	{r4, r5, pc}
 800826c:	ffff0208 	.word	0xffff0208

08008270 <vsprintf>:
 8008270:	b430      	push	{r4, r5}
 8008272:	460d      	mov	r5, r1
 8008274:	4c03      	ldr	r4, [pc, #12]	; (8008284 <vsprintf+0x14>)
 8008276:	4613      	mov	r3, r2
 8008278:	4601      	mov	r1, r0
 800827a:	462a      	mov	r2, r5
 800827c:	6820      	ldr	r0, [r4, #0]
 800827e:	bc30      	pop	{r4, r5}
 8008280:	f7ff bfe2 	b.w	8008248 <_vsprintf_r>
 8008284:	20000034 	.word	0x20000034

08008288 <_malloc_trim_r>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	460c      	mov	r4, r1
 800828c:	4f23      	ldr	r7, [pc, #140]	; (800831c <_malloc_trim_r+0x94>)
 800828e:	4606      	mov	r6, r0
 8008290:	f7ff fec2 	bl	8008018 <__malloc_lock>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800829a:	685d      	ldr	r5, [r3, #4]
 800829c:	310f      	adds	r1, #15
 800829e:	f025 0503 	bic.w	r5, r5, #3
 80082a2:	194b      	adds	r3, r1, r5
 80082a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80082a8:	f023 030f 	bic.w	r3, r3, #15
 80082ac:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 80082b0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80082b4:	db07      	blt.n	80082c6 <_malloc_trim_r+0x3e>
 80082b6:	2100      	movs	r1, #0
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7ff feb9 	bl	8008030 <_sbrk_r>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	442b      	add	r3, r5
 80082c2:	4298      	cmp	r0, r3
 80082c4:	d004      	beq.n	80082d0 <_malloc_trim_r+0x48>
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7ff feac 	bl	8008024 <__malloc_unlock>
 80082cc:	2000      	movs	r0, #0
 80082ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d0:	4630      	mov	r0, r6
 80082d2:	4261      	negs	r1, r4
 80082d4:	f7ff feac 	bl	8008030 <_sbrk_r>
 80082d8:	3001      	adds	r0, #1
 80082da:	d00d      	beq.n	80082f8 <_malloc_trim_r+0x70>
 80082dc:	4a10      	ldr	r2, [pc, #64]	; (8008320 <_malloc_trim_r+0x98>)
 80082de:	68b9      	ldr	r1, [r7, #8]
 80082e0:	6813      	ldr	r3, [r2, #0]
 80082e2:	1b2d      	subs	r5, r5, r4
 80082e4:	f045 0501 	orr.w	r5, r5, #1
 80082e8:	4630      	mov	r0, r6
 80082ea:	1b1b      	subs	r3, r3, r4
 80082ec:	604d      	str	r5, [r1, #4]
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	f7ff fe98 	bl	8008024 <__malloc_unlock>
 80082f4:	2001      	movs	r0, #1
 80082f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f8:	2100      	movs	r1, #0
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7ff fe98 	bl	8008030 <_sbrk_r>
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	1a83      	subs	r3, r0, r2
 8008304:	2b0f      	cmp	r3, #15
 8008306:	ddde      	ble.n	80082c6 <_malloc_trim_r+0x3e>
 8008308:	4906      	ldr	r1, [pc, #24]	; (8008324 <_malloc_trim_r+0x9c>)
 800830a:	f043 0301 	orr.w	r3, r3, #1
 800830e:	680c      	ldr	r4, [r1, #0]
 8008310:	4903      	ldr	r1, [pc, #12]	; (8008320 <_malloc_trim_r+0x98>)
 8008312:	1b00      	subs	r0, r0, r4
 8008314:	6053      	str	r3, [r2, #4]
 8008316:	6008      	str	r0, [r1, #0]
 8008318:	e7d5      	b.n	80082c6 <_malloc_trim_r+0x3e>
 800831a:	bf00      	nop
 800831c:	20000460 	.word	0x20000460
 8008320:	20000ab0 	.word	0x20000ab0
 8008324:	20000868 	.word	0x20000868

08008328 <_free_r>:
 8008328:	2900      	cmp	r1, #0
 800832a:	d05f      	beq.n	80083ec <_free_r+0xc4>
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	460c      	mov	r4, r1
 8008330:	4606      	mov	r6, r0
 8008332:	f7ff fe71 	bl	8008018 <__malloc_lock>
 8008336:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800833a:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8008530 <_free_r+0x208>
 800833e:	f1a4 0008 	sub.w	r0, r4, #8
 8008342:	f023 0101 	bic.w	r1, r3, #1
 8008346:	1842      	adds	r2, r0, r1
 8008348:	f8dc 7008 	ldr.w	r7, [ip, #8]
 800834c:	6855      	ldr	r5, [r2, #4]
 800834e:	4297      	cmp	r7, r2
 8008350:	f025 0503 	bic.w	r5, r5, #3
 8008354:	f000 8089 	beq.w	800846a <_free_r+0x142>
 8008358:	07df      	lsls	r7, r3, #31
 800835a:	6055      	str	r5, [r2, #4]
 800835c:	d434      	bmi.n	80083c8 <_free_r+0xa0>
 800835e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8008362:	f10c 0408 	add.w	r4, ip, #8
 8008366:	1bc0      	subs	r0, r0, r7
 8008368:	6883      	ldr	r3, [r0, #8]
 800836a:	4439      	add	r1, r7
 800836c:	42a3      	cmp	r3, r4
 800836e:	d06a      	beq.n	8008446 <_free_r+0x11e>
 8008370:	1957      	adds	r7, r2, r5
 8008372:	687f      	ldr	r7, [r7, #4]
 8008374:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8008378:	f8c3 e00c 	str.w	lr, [r3, #12]
 800837c:	f8ce 3008 	str.w	r3, [lr, #8]
 8008380:	07fb      	lsls	r3, r7, #31
 8008382:	f140 8097 	bpl.w	80084b4 <_free_r+0x18c>
 8008386:	f041 0301 	orr.w	r3, r1, #1
 800838a:	6043      	str	r3, [r0, #4]
 800838c:	6011      	str	r1, [r2, #0]
 800838e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008392:	d234      	bcs.n	80083fe <_free_r+0xd6>
 8008394:	2201      	movs	r2, #1
 8008396:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800839a:	08cb      	lsrs	r3, r1, #3
 800839c:	0949      	lsrs	r1, r1, #5
 800839e:	4413      	add	r3, r2
 80083a0:	fa02 f101 	lsl.w	r1, r2, r1
 80083a4:	4321      	orrs	r1, r4
 80083a6:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 80083aa:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
 80083ae:	3a08      	subs	r2, #8
 80083b0:	e9c0 4202 	strd	r4, r2, [r0, #8]
 80083b4:	f8cc 1004 	str.w	r1, [ip, #4]
 80083b8:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
 80083bc:	60e0      	str	r0, [r4, #12]
 80083be:	4630      	mov	r0, r6
 80083c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083c4:	f7ff be2e 	b.w	8008024 <__malloc_unlock>
 80083c8:	1953      	adds	r3, r2, r5
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	07df      	lsls	r7, r3, #31
 80083ce:	d40e      	bmi.n	80083ee <_free_r+0xc6>
 80083d0:	4429      	add	r1, r5
 80083d2:	f10c 0408 	add.w	r4, ip, #8
 80083d6:	6893      	ldr	r3, [r2, #8]
 80083d8:	42a3      	cmp	r3, r4
 80083da:	d073      	beq.n	80084c4 <_free_r+0x19c>
 80083dc:	68d4      	ldr	r4, [r2, #12]
 80083de:	f041 0201 	orr.w	r2, r1, #1
 80083e2:	60dc      	str	r4, [r3, #12]
 80083e4:	60a3      	str	r3, [r4, #8]
 80083e6:	6042      	str	r2, [r0, #4]
 80083e8:	5041      	str	r1, [r0, r1]
 80083ea:	e7d0      	b.n	800838e <_free_r+0x66>
 80083ec:	4770      	bx	lr
 80083ee:	f041 0301 	orr.w	r3, r1, #1
 80083f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80083f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80083fa:	6011      	str	r1, [r2, #0]
 80083fc:	d3ca      	bcc.n	8008394 <_free_r+0x6c>
 80083fe:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8008402:	ea4f 2351 	mov.w	r3, r1, lsr #9
 8008406:	d24a      	bcs.n	800849e <_free_r+0x176>
 8008408:	098b      	lsrs	r3, r1, #6
 800840a:	f103 0539 	add.w	r5, r3, #57	; 0x39
 800840e:	00ed      	lsls	r5, r5, #3
 8008410:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008414:	f85c 3005 	ldr.w	r3, [ip, r5]
 8008418:	eb0c 0405 	add.w	r4, ip, r5
 800841c:	3c08      	subs	r4, #8
 800841e:	429c      	cmp	r4, r3
 8008420:	d059      	beq.n	80084d6 <_free_r+0x1ae>
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	f022 0203 	bic.w	r2, r2, #3
 8008428:	428a      	cmp	r2, r1
 800842a:	d902      	bls.n	8008432 <_free_r+0x10a>
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	429c      	cmp	r4, r3
 8008430:	d1f7      	bne.n	8008422 <_free_r+0xfa>
 8008432:	68dc      	ldr	r4, [r3, #12]
 8008434:	e9c0 3402 	strd	r3, r4, [r0, #8]
 8008438:	60a0      	str	r0, [r4, #8]
 800843a:	60d8      	str	r0, [r3, #12]
 800843c:	4630      	mov	r0, r6
 800843e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008442:	f7ff bdef 	b.w	8008024 <__malloc_unlock>
 8008446:	1953      	adds	r3, r2, r5
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	07db      	lsls	r3, r3, #31
 800844c:	d466      	bmi.n	800851c <_free_r+0x1f4>
 800844e:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 8008452:	4429      	add	r1, r5
 8008454:	f041 0401 	orr.w	r4, r1, #1
 8008458:	60d3      	str	r3, [r2, #12]
 800845a:	609a      	str	r2, [r3, #8]
 800845c:	6044      	str	r4, [r0, #4]
 800845e:	5041      	str	r1, [r0, r1]
 8008460:	4630      	mov	r0, r6
 8008462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008466:	f7ff bddd 	b.w	8008024 <__malloc_unlock>
 800846a:	07db      	lsls	r3, r3, #31
 800846c:	4429      	add	r1, r5
 800846e:	d407      	bmi.n	8008480 <_free_r+0x158>
 8008470:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8008474:	1b00      	subs	r0, r0, r4
 8008476:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800847a:	4421      	add	r1, r4
 800847c:	60d3      	str	r3, [r2, #12]
 800847e:	609a      	str	r2, [r3, #8]
 8008480:	4b29      	ldr	r3, [pc, #164]	; (8008528 <_free_r+0x200>)
 8008482:	f041 0201 	orr.w	r2, r1, #1
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6042      	str	r2, [r0, #4]
 800848a:	428b      	cmp	r3, r1
 800848c:	f8cc 0008 	str.w	r0, [ip, #8]
 8008490:	d895      	bhi.n	80083be <_free_r+0x96>
 8008492:	4b26      	ldr	r3, [pc, #152]	; (800852c <_free_r+0x204>)
 8008494:	4630      	mov	r0, r6
 8008496:	6819      	ldr	r1, [r3, #0]
 8008498:	f7ff fef6 	bl	8008288 <_malloc_trim_r>
 800849c:	e78f      	b.n	80083be <_free_r+0x96>
 800849e:	2b14      	cmp	r3, #20
 80084a0:	d90a      	bls.n	80084b8 <_free_r+0x190>
 80084a2:	2b54      	cmp	r3, #84	; 0x54
 80084a4:	d821      	bhi.n	80084ea <_free_r+0x1c2>
 80084a6:	0b0b      	lsrs	r3, r1, #12
 80084a8:	f103 056f 	add.w	r5, r3, #111	; 0x6f
 80084ac:	00ed      	lsls	r5, r5, #3
 80084ae:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 80084b2:	e7af      	b.n	8008414 <_free_r+0xec>
 80084b4:	4429      	add	r1, r5
 80084b6:	e78e      	b.n	80083d6 <_free_r+0xae>
 80084b8:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80084bc:	00ed      	lsls	r5, r5, #3
 80084be:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 80084c2:	e7a7      	b.n	8008414 <_free_r+0xec>
 80084c4:	f041 0301 	orr.w	r3, r1, #1
 80084c8:	e9cc 0004 	strd	r0, r0, [ip, #16]
 80084cc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80084d0:	6043      	str	r3, [r0, #4]
 80084d2:	5041      	str	r1, [r0, r1]
 80084d4:	e773      	b.n	80083be <_free_r+0x96>
 80084d6:	2501      	movs	r5, #1
 80084d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80084dc:	1092      	asrs	r2, r2, #2
 80084de:	fa05 f202 	lsl.w	r2, r5, r2
 80084e2:	430a      	orrs	r2, r1
 80084e4:	f8cc 2004 	str.w	r2, [ip, #4]
 80084e8:	e7a4      	b.n	8008434 <_free_r+0x10c>
 80084ea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80084ee:	d806      	bhi.n	80084fe <_free_r+0x1d6>
 80084f0:	0bcb      	lsrs	r3, r1, #15
 80084f2:	f103 0578 	add.w	r5, r3, #120	; 0x78
 80084f6:	00ed      	lsls	r5, r5, #3
 80084f8:	f103 0277 	add.w	r2, r3, #119	; 0x77
 80084fc:	e78a      	b.n	8008414 <_free_r+0xec>
 80084fe:	f240 5254 	movw	r2, #1364	; 0x554
 8008502:	4293      	cmp	r3, r2
 8008504:	d806      	bhi.n	8008514 <_free_r+0x1ec>
 8008506:	0c8b      	lsrs	r3, r1, #18
 8008508:	f103 057d 	add.w	r5, r3, #125	; 0x7d
 800850c:	00ed      	lsls	r5, r5, #3
 800850e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8008512:	e77f      	b.n	8008414 <_free_r+0xec>
 8008514:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
 8008518:	227e      	movs	r2, #126	; 0x7e
 800851a:	e77b      	b.n	8008414 <_free_r+0xec>
 800851c:	f041 0301 	orr.w	r3, r1, #1
 8008520:	6043      	str	r3, [r0, #4]
 8008522:	6011      	str	r1, [r2, #0]
 8008524:	e74b      	b.n	80083be <_free_r+0x96>
 8008526:	bf00      	nop
 8008528:	2000086c 	.word	0x2000086c
 800852c:	20000ae0 	.word	0x20000ae0
 8008530:	20000460 	.word	0x20000460

08008534 <__retarget_lock_acquire_recursive>:
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop

08008538 <__retarget_lock_release_recursive>:
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop

0800853c <_svfprintf_r>:
 800853c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	b0d7      	sub	sp, #348	; 0x15c
 8008542:	468b      	mov	fp, r1
 8008544:	4617      	mov	r7, r2
 8008546:	930e      	str	r3, [sp, #56]	; 0x38
 8008548:	4681      	mov	r9, r0
 800854a:	f002 fd77 	bl	800b03c <_localeconv_r>
 800854e:	6803      	ldr	r3, [r0, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	9318      	str	r3, [sp, #96]	; 0x60
 8008554:	f7ff fe4a 	bl	80081ec <strlen>
 8008558:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800855c:	9017      	str	r0, [sp, #92]	; 0x5c
 800855e:	061d      	lsls	r5, r3, #24
 8008560:	d504      	bpl.n	800856c <_svfprintf_r+0x30>
 8008562:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 87df 	beq.w	800952a <_svfprintf_r+0xfee>
 800856c:	2300      	movs	r3, #0
 800856e:	2100      	movs	r1, #0
 8008570:	2200      	movs	r2, #0
 8008572:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
 8008576:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 800857a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 800857e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008580:	9319      	str	r3, [sp, #100]	; 0x64
 8008582:	930a      	str	r3, [sp, #40]	; 0x28
 8008584:	ab2d      	add	r3, sp, #180	; 0xb4
 8008586:	4698      	mov	r8, r3
 8008588:	932a      	str	r3, [sp, #168]	; 0xa8
 800858a:	783b      	ldrb	r3, [r7, #0]
 800858c:	46da      	mov	sl, fp
 800858e:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 81a4 	beq.w	80088e0 <_svfprintf_r+0x3a4>
 8008598:	463c      	mov	r4, r7
 800859a:	e004      	b.n	80085a6 <_svfprintf_r+0x6a>
 800859c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 80fd 	beq.w	80087a0 <_svfprintf_r+0x264>
 80085a6:	2b25      	cmp	r3, #37	; 0x25
 80085a8:	d1f8      	bne.n	800859c <_svfprintf_r+0x60>
 80085aa:	1be5      	subs	r5, r4, r7
 80085ac:	f040 80fb 	bne.w	80087a6 <_svfprintf_r+0x26a>
 80085b0:	7823      	ldrb	r3, [r4, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 8194 	beq.w	80088e0 <_svfprintf_r+0x3a4>
 80085b8:	2300      	movs	r3, #0
 80085ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80085bc:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 80085c0:	9307      	str	r3, [sp, #28]
 80085c2:	f04f 33ff 	mov.w	r3, #4294967295
 80085c6:	7866      	ldrb	r6, [r4, #1]
 80085c8:	f104 0b01 	add.w	fp, r4, #1
 80085cc:	2120      	movs	r1, #32
 80085ce:	242b      	movs	r4, #43	; 0x2b
 80085d0:	9309      	str	r3, [sp, #36]	; 0x24
 80085d2:	f10b 0b01 	add.w	fp, fp, #1
 80085d6:	f1a6 0320 	sub.w	r3, r6, #32
 80085da:	2b5a      	cmp	r3, #90	; 0x5a
 80085dc:	f200 80ff 	bhi.w	80087de <_svfprintf_r+0x2a2>
 80085e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80085e4:	00fd02bc 	.word	0x00fd02bc
 80085e8:	02b500fd 	.word	0x02b500fd
 80085ec:	00fd00fd 	.word	0x00fd00fd
 80085f0:	029100fd 	.word	0x029100fd
 80085f4:	00fd00fd 	.word	0x00fd00fd
 80085f8:	02e7006a 	.word	0x02e7006a
 80085fc:	023400fd 	.word	0x023400fd
 8008600:	00fd02cd 	.word	0x00fd02cd
 8008604:	005b02c6 	.word	0x005b02c6
 8008608:	005b005b 	.word	0x005b005b
 800860c:	005b005b 	.word	0x005b005b
 8008610:	005b005b 	.word	0x005b005b
 8008614:	005b005b 	.word	0x005b005b
 8008618:	00fd00fd 	.word	0x00fd00fd
 800861c:	00fd00fd 	.word	0x00fd00fd
 8008620:	00fd00fd 	.word	0x00fd00fd
 8008624:	019000fd 	.word	0x019000fd
 8008628:	01f700fd 	.word	0x01f700fd
 800862c:	0190007c 	.word	0x0190007c
 8008630:	01900190 	.word	0x01900190
 8008634:	00fd00fd 	.word	0x00fd00fd
 8008638:	00fd00fd 	.word	0x00fd00fd
 800863c:	00fd028a 	.word	0x00fd028a
 8008640:	00a900fd 	.word	0x00a900fd
 8008644:	00fd00fd 	.word	0x00fd00fd
 8008648:	020b00fd 	.word	0x020b00fd
 800864c:	023b00fd 	.word	0x023b00fd
 8008650:	00fd00fd 	.word	0x00fd00fd
 8008654:	00fd0781 	.word	0x00fd0781
 8008658:	00fd00fd 	.word	0x00fd00fd
 800865c:	00fd00fd 	.word	0x00fd00fd
 8008660:	00fd00fd 	.word	0x00fd00fd
 8008664:	019000fd 	.word	0x019000fd
 8008668:	01f700fd 	.word	0x01f700fd
 800866c:	01900080 	.word	0x01900080
 8008670:	01900190 	.word	0x01900190
 8008674:	00800280 	.word	0x00800280
 8008678:	00fd0075 	.word	0x00fd0075
 800867c:	00fd0276 	.word	0x00fd0276
 8008680:	00ad025e 	.word	0x00ad025e
 8008684:	0075024c 	.word	0x0075024c
 8008688:	020b00fd 	.word	0x020b00fd
 800868c:	075b0072 	.word	0x075b0072
 8008690:	00fd00fd 	.word	0x00fd00fd
 8008694:	00fd075f 	.word	0x00fd075f
 8008698:	0072      	.short	0x0072
 800869a:	2200      	movs	r2, #0
 800869c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80086a0:	f81b 6b01 	ldrb.w	r6, [fp], #1
 80086a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80086a8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80086ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80086b0:	2b09      	cmp	r3, #9
 80086b2:	d9f5      	bls.n	80086a0 <_svfprintf_r+0x164>
 80086b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80086b6:	e78e      	b.n	80085d6 <_svfprintf_r+0x9a>
 80086b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80086be:	2a00      	cmp	r2, #0
 80086c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80086c2:	930e      	str	r3, [sp, #56]	; 0x38
 80086c4:	f2c0 81bf 	blt.w	8008a46 <_svfprintf_r+0x50a>
 80086c8:	f89b 6000 	ldrb.w	r6, [fp]
 80086cc:	e781      	b.n	80085d2 <_svfprintf_r+0x96>
 80086ce:	9b07      	ldr	r3, [sp, #28]
 80086d0:	f89b 6000 	ldrb.w	r6, [fp]
 80086d4:	f043 0320 	orr.w	r3, r3, #32
 80086d8:	9307      	str	r3, [sp, #28]
 80086da:	e77a      	b.n	80085d2 <_svfprintf_r+0x96>
 80086dc:	9b07      	ldr	r3, [sp, #28]
 80086de:	f043 0310 	orr.w	r3, r3, #16
 80086e2:	9307      	str	r3, [sp, #28]
 80086e4:	9b07      	ldr	r3, [sp, #28]
 80086e6:	069c      	lsls	r4, r3, #26
 80086e8:	f140 8162 	bpl.w	80089b0 <_svfprintf_r+0x474>
 80086ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ee:	3307      	adds	r3, #7
 80086f0:	f023 0307 	bic.w	r3, r3, #7
 80086f4:	4619      	mov	r1, r3
 80086f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80086fa:	4614      	mov	r4, r2
 80086fc:	461d      	mov	r5, r3
 80086fe:	910e      	str	r1, [sp, #56]	; 0x38
 8008700:	2a00      	cmp	r2, #0
 8008702:	f173 0300 	sbcs.w	r3, r3, #0
 8008706:	f2c0 85ab 	blt.w	8009260 <_svfprintf_r+0xd24>
 800870a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870c:	3301      	adds	r3, #1
 800870e:	9b07      	ldr	r3, [sp, #28]
 8008710:	f000 8414 	beq.w	8008f3c <_svfprintf_r+0xa00>
 8008714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008718:	ea54 0205 	orrs.w	r2, r4, r5
 800871c:	9308      	str	r3, [sp, #32]
 800871e:	f040 840e 	bne.w	8008f3e <_svfprintf_r+0xa02>
 8008722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008724:	2a00      	cmp	r2, #0
 8008726:	f040 840f 	bne.w	8008f48 <_svfprintf_r+0xa0c>
 800872a:	9307      	str	r3, [sp, #28]
 800872c:	2300      	movs	r3, #0
 800872e:	af56      	add	r7, sp, #344	; 0x158
 8008730:	9309      	str	r3, [sp, #36]	; 0x24
 8008732:	930c      	str	r3, [sp, #48]	; 0x30
 8008734:	e26b      	b.n	8008c0e <_svfprintf_r+0x6d2>
 8008736:	9b07      	ldr	r3, [sp, #28]
 8008738:	f043 0310 	orr.w	r3, r3, #16
 800873c:	9307      	str	r3, [sp, #28]
 800873e:	9b07      	ldr	r3, [sp, #28]
 8008740:	069a      	lsls	r2, r3, #26
 8008742:	f140 8126 	bpl.w	8008992 <_svfprintf_r+0x456>
 8008746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008748:	3307      	adds	r3, #7
 800874a:	f023 0307 	bic.w	r3, r3, #7
 800874e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 8008752:	930e      	str	r3, [sp, #56]	; 0x38
 8008754:	9b07      	ldr	r3, [sp, #28]
 8008756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800875a:	9308      	str	r3, [sp, #32]
 800875c:	2300      	movs	r3, #0
 800875e:	2200      	movs	r2, #0
 8008760:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 8008764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008766:	4611      	mov	r1, r2
 8008768:	3101      	adds	r1, #1
 800876a:	f000 8231 	beq.w	8008bd0 <_svfprintf_r+0x694>
 800876e:	9908      	ldr	r1, [sp, #32]
 8008770:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008774:	9107      	str	r1, [sp, #28]
 8008776:	ea54 0105 	orrs.w	r1, r4, r5
 800877a:	f040 8227 	bne.w	8008bcc <_svfprintf_r+0x690>
 800877e:	2a00      	cmp	r2, #0
 8008780:	f040 837d 	bne.w	8008e7e <_svfprintf_r+0x942>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1d1      	bne.n	800872c <_svfprintf_r+0x1f0>
 8008788:	9b08      	ldr	r3, [sp, #32]
 800878a:	f013 0301 	ands.w	r3, r3, #1
 800878e:	930c      	str	r3, [sp, #48]	; 0x30
 8008790:	f000 8590 	beq.w	80092b4 <_svfprintf_r+0xd78>
 8008794:	2330      	movs	r3, #48	; 0x30
 8008796:	f20d 1757 	addw	r7, sp, #343	; 0x157
 800879a:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
 800879e:	e236      	b.n	8008c0e <_svfprintf_r+0x6d2>
 80087a0:	1be5      	subs	r5, r4, r7
 80087a2:	f000 809d 	beq.w	80088e0 <_svfprintf_r+0x3a4>
 80087a6:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
 80087aa:	3301      	adds	r3, #1
 80087ac:	442a      	add	r2, r5
 80087ae:	2b07      	cmp	r3, #7
 80087b0:	e9c8 7500 	strd	r7, r5, [r8]
 80087b4:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
 80087b8:	dc06      	bgt.n	80087c8 <_svfprintf_r+0x28c>
 80087ba:	f108 0808 	add.w	r8, r8, #8
 80087be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c0:	7823      	ldrb	r3, [r4, #0]
 80087c2:	442a      	add	r2, r5
 80087c4:	920a      	str	r2, [sp, #40]	; 0x28
 80087c6:	e6f4      	b.n	80085b2 <_svfprintf_r+0x76>
 80087c8:	4651      	mov	r1, sl
 80087ca:	4648      	mov	r0, r9
 80087cc:	aa2a      	add	r2, sp, #168	; 0xa8
 80087ce:	f003 f815 	bl	800b7fc <__ssprint_r>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	f041 83ce 	bne.w	8009f74 <_svfprintf_r+0x1a38>
 80087d8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80087dc:	e7ef      	b.n	80087be <_svfprintf_r+0x282>
 80087de:	2e00      	cmp	r6, #0
 80087e0:	d07e      	beq.n	80088e0 <_svfprintf_r+0x3a4>
 80087e2:	2300      	movs	r3, #0
 80087e4:	2101      	movs	r1, #1
 80087e6:	461a      	mov	r2, r3
 80087e8:	9108      	str	r1, [sp, #32]
 80087ea:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
 80087ee:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 80087f2:	930d      	str	r3, [sp, #52]	; 0x34
 80087f4:	9309      	str	r3, [sp, #36]	; 0x24
 80087f6:	9312      	str	r3, [sp, #72]	; 0x48
 80087f8:	9316      	str	r3, [sp, #88]	; 0x58
 80087fa:	9310      	str	r3, [sp, #64]	; 0x40
 80087fc:	910c      	str	r1, [sp, #48]	; 0x30
 80087fe:	af3d      	add	r7, sp, #244	; 0xf4
 8008800:	9b07      	ldr	r3, [sp, #28]
 8008802:	f013 0302 	ands.w	r3, r3, #2
 8008806:	d002      	beq.n	800880e <_svfprintf_r+0x2d2>
 8008808:	9908      	ldr	r1, [sp, #32]
 800880a:	3102      	adds	r1, #2
 800880c:	9108      	str	r1, [sp, #32]
 800880e:	9907      	ldr	r1, [sp, #28]
 8008810:	f011 0184 	ands.w	r1, r1, #132	; 0x84
 8008814:	910f      	str	r1, [sp, #60]	; 0x3c
 8008816:	d105      	bne.n	8008824 <_svfprintf_r+0x2e8>
 8008818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800881a:	9808      	ldr	r0, [sp, #32]
 800881c:	1a0d      	subs	r5, r1, r0
 800881e:	2d00      	cmp	r5, #0
 8008820:	f300 834b 	bgt.w	8008eba <_svfprintf_r+0x97e>
 8008824:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008826:	b172      	cbz	r2, 8008846 <_svfprintf_r+0x30a>
 8008828:	2001      	movs	r0, #1
 800882a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800882c:	4404      	add	r4, r0
 800882e:	4402      	add	r2, r0
 8008830:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
 8008834:	2a07      	cmp	r2, #7
 8008836:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 800883a:	e9c8 1000 	strd	r1, r0, [r8]
 800883e:	f300 83cd 	bgt.w	8008fdc <_svfprintf_r+0xaa0>
 8008842:	f108 0808 	add.w	r8, r8, #8
 8008846:	b16b      	cbz	r3, 8008864 <_svfprintf_r+0x328>
 8008848:	2102      	movs	r1, #2
 800884a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800884c:	440c      	add	r4, r1
 800884e:	3301      	adds	r3, #1
 8008850:	aa23      	add	r2, sp, #140	; 0x8c
 8008852:	2b07      	cmp	r3, #7
 8008854:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8008858:	e9c8 2100 	strd	r2, r1, [r8]
 800885c:	f300 83cc 	bgt.w	8008ff8 <_svfprintf_r+0xabc>
 8008860:	f108 0808 	add.w	r8, r8, #8
 8008864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008866:	2b80      	cmp	r3, #128	; 0x80
 8008868:	f000 8234 	beq.w	8008cd4 <_svfprintf_r+0x798>
 800886c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008870:	1a9d      	subs	r5, r3, r2
 8008872:	2d00      	cmp	r5, #0
 8008874:	f300 826e 	bgt.w	8008d54 <_svfprintf_r+0x818>
 8008878:	9b07      	ldr	r3, [sp, #28]
 800887a:	05d9      	lsls	r1, r3, #23
 800887c:	f100 81d5 	bmi.w	8008c2a <_svfprintf_r+0x6ee>
 8008880:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008884:	3301      	adds	r3, #1
 8008886:	4414      	add	r4, r2
 8008888:	2b07      	cmp	r3, #7
 800888a:	e9c8 7200 	strd	r7, r2, [r8]
 800888e:	942c      	str	r4, [sp, #176]	; 0xb0
 8008890:	932b      	str	r3, [sp, #172]	; 0xac
 8008892:	f300 8397 	bgt.w	8008fc4 <_svfprintf_r+0xa88>
 8008896:	f108 0808 	add.w	r8, r8, #8
 800889a:	9b07      	ldr	r3, [sp, #28]
 800889c:	0759      	lsls	r1, r3, #29
 800889e:	d505      	bpl.n	80088ac <_svfprintf_r+0x370>
 80088a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a2:	9a08      	ldr	r2, [sp, #32]
 80088a4:	1a9d      	subs	r5, r3, r2
 80088a6:	2d00      	cmp	r5, #0
 80088a8:	f300 83b2 	bgt.w	8009010 <_svfprintf_r+0xad4>
 80088ac:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 80088b0:	9908      	ldr	r1, [sp, #32]
 80088b2:	428a      	cmp	r2, r1
 80088b4:	bfac      	ite	ge
 80088b6:	189b      	addge	r3, r3, r2
 80088b8:	185b      	addlt	r3, r3, r1
 80088ba:	930a      	str	r3, [sp, #40]	; 0x28
 80088bc:	2c00      	cmp	r4, #0
 80088be:	f040 827d 	bne.w	8008dbc <_svfprintf_r+0x880>
 80088c2:	2300      	movs	r3, #0
 80088c4:	932b      	str	r3, [sp, #172]	; 0xac
 80088c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088c8:	b11b      	cbz	r3, 80088d2 <_svfprintf_r+0x396>
 80088ca:	4648      	mov	r0, r9
 80088cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088ce:	f7ff fd2b 	bl	8008328 <_free_r>
 80088d2:	465f      	mov	r7, fp
 80088d4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80088d8:	783b      	ldrb	r3, [r7, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f47f ae5c 	bne.w	8008598 <_svfprintf_r+0x5c>
 80088e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80088e2:	46d3      	mov	fp, sl
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f041 824b 	bne.w	8009d80 <_svfprintf_r+0x1844>
 80088ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80088ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80088f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f4:	bf18      	it	ne
 80088f6:	f04f 33ff 	movne.w	r3, #4294967295
 80088fa:	930a      	str	r3, [sp, #40]	; 0x28
 80088fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088fe:	b057      	add	sp, #348	; 0x15c
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008906:	3307      	adds	r3, #7
 8008908:	f023 0307 	bic.w	r3, r3, #7
 800890c:	4619      	mov	r1, r3
 800890e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008912:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008916:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 800891a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800891e:	461d      	mov	r5, r3
 8008920:	4618      	mov	r0, r3
 8008922:	910e      	str	r1, [sp, #56]	; 0x38
 8008924:	f04f 32ff 	mov.w	r2, #4294967295
 8008928:	4621      	mov	r1, r4
 800892a:	4ba4      	ldr	r3, [pc, #656]	; (8008bbc <_svfprintf_r+0x680>)
 800892c:	f003 fee6 	bl	800c6fc <__aeabi_dcmpun>
 8008930:	2800      	cmp	r0, #0
 8008932:	f040 84d9 	bne.w	80092e8 <_svfprintf_r+0xdac>
 8008936:	4628      	mov	r0, r5
 8008938:	4621      	mov	r1, r4
 800893a:	f04f 32ff 	mov.w	r2, #4294967295
 800893e:	4b9f      	ldr	r3, [pc, #636]	; (8008bbc <_svfprintf_r+0x680>)
 8008940:	f003 febe 	bl	800c6c0 <__aeabi_dcmple>
 8008944:	2800      	cmp	r0, #0
 8008946:	f040 84cf 	bne.w	80092e8 <_svfprintf_r+0xdac>
 800894a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800894e:	2200      	movs	r2, #0
 8008950:	2300      	movs	r3, #0
 8008952:	f003 feab 	bl	800c6ac <__aeabi_dcmplt>
 8008956:	2800      	cmp	r0, #0
 8008958:	f041 800e 	bne.w	8009978 <_svfprintf_r+0x143c>
 800895c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8008960:	2003      	movs	r0, #3
 8008962:	2100      	movs	r1, #0
 8008964:	4f96      	ldr	r7, [pc, #600]	; (8008bc0 <_svfprintf_r+0x684>)
 8008966:	4b97      	ldr	r3, [pc, #604]	; (8008bc4 <_svfprintf_r+0x688>)
 8008968:	9008      	str	r0, [sp, #32]
 800896a:	910d      	str	r1, [sp, #52]	; 0x34
 800896c:	2e47      	cmp	r6, #71	; 0x47
 800896e:	bfc8      	it	gt
 8008970:	461f      	movgt	r7, r3
 8008972:	9c07      	ldr	r4, [sp, #28]
 8008974:	900c      	str	r0, [sp, #48]	; 0x30
 8008976:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800897a:	9407      	str	r4, [sp, #28]
 800897c:	9109      	str	r1, [sp, #36]	; 0x24
 800897e:	9112      	str	r1, [sp, #72]	; 0x48
 8008980:	9116      	str	r1, [sp, #88]	; 0x58
 8008982:	9110      	str	r1, [sp, #64]	; 0x40
 8008984:	2a00      	cmp	r2, #0
 8008986:	f43f af3b 	beq.w	8008800 <_svfprintf_r+0x2c4>
 800898a:	9b08      	ldr	r3, [sp, #32]
 800898c:	3301      	adds	r3, #1
 800898e:	9308      	str	r3, [sp, #32]
 8008990:	e736      	b.n	8008800 <_svfprintf_r+0x2c4>
 8008992:	9b07      	ldr	r3, [sp, #28]
 8008994:	06db      	lsls	r3, r3, #27
 8008996:	f100 849c 	bmi.w	80092d2 <_svfprintf_r+0xd96>
 800899a:	9b07      	ldr	r3, [sp, #28]
 800899c:	065f      	lsls	r7, r3, #25
 800899e:	f140 87b2 	bpl.w	8009906 <_svfprintf_r+0x13ca>
 80089a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a4:	2500      	movs	r5, #0
 80089a6:	f853 4b04 	ldr.w	r4, [r3], #4
 80089aa:	930e      	str	r3, [sp, #56]	; 0x38
 80089ac:	b2a4      	uxth	r4, r4
 80089ae:	e6d1      	b.n	8008754 <_svfprintf_r+0x218>
 80089b0:	9b07      	ldr	r3, [sp, #28]
 80089b2:	06d8      	lsls	r0, r3, #27
 80089b4:	f100 8568 	bmi.w	8009488 <_svfprintf_r+0xf4c>
 80089b8:	9b07      	ldr	r3, [sp, #28]
 80089ba:	0659      	lsls	r1, r3, #25
 80089bc:	f140 87be 	bpl.w	800993c <_svfprintf_r+0x1400>
 80089c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089c2:	f853 4b04 	ldr.w	r4, [r3], #4
 80089c6:	b224      	sxth	r4, r4
 80089c8:	17e5      	asrs	r5, r4, #31
 80089ca:	930e      	str	r3, [sp, #56]	; 0x38
 80089cc:	4622      	mov	r2, r4
 80089ce:	462b      	mov	r3, r5
 80089d0:	e696      	b.n	8008700 <_svfprintf_r+0x1c4>
 80089d2:	2100      	movs	r1, #0
 80089d4:	2401      	movs	r4, #1
 80089d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089d8:	460a      	mov	r2, r1
 80089da:	f853 0b04 	ldr.w	r0, [r3], #4
 80089de:	9408      	str	r4, [sp, #32]
 80089e0:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80089e4:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
 80089e8:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
 80089ec:	9109      	str	r1, [sp, #36]	; 0x24
 80089ee:	9112      	str	r1, [sp, #72]	; 0x48
 80089f0:	9116      	str	r1, [sp, #88]	; 0x58
 80089f2:	9110      	str	r1, [sp, #64]	; 0x40
 80089f4:	940c      	str	r4, [sp, #48]	; 0x30
 80089f6:	af3d      	add	r7, sp, #244	; 0xf4
 80089f8:	e702      	b.n	8008800 <_svfprintf_r+0x2c4>
 80089fa:	2500      	movs	r5, #0
 80089fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80089fe:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
 8008a02:	f854 7b04 	ldr.w	r7, [r4], #4
 8008a06:	2f00      	cmp	r7, #0
 8008a08:	f000 859f 	beq.w	800954a <_svfprintf_r+0x100e>
 8008a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a0e:	4613      	mov	r3, r2
 8008a10:	3301      	adds	r3, #1
 8008a12:	f000 8770 	beq.w	80098f6 <_svfprintf_r+0x13ba>
 8008a16:	4629      	mov	r1, r5
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f002 fb13 	bl	800b044 <memchr>
 8008a1e:	900d      	str	r0, [sp, #52]	; 0x34
 8008a20:	2800      	cmp	r0, #0
 8008a22:	f001 80b9 	beq.w	8009b98 <_svfprintf_r+0x165c>
 8008a26:	462b      	mov	r3, r5
 8008a28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a2a:	9509      	str	r5, [sp, #36]	; 0x24
 8008a2c:	1bd2      	subs	r2, r2, r7
 8008a2e:	920c      	str	r2, [sp, #48]	; 0x30
 8008a30:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8008a34:	9208      	str	r2, [sp, #32]
 8008a36:	940e      	str	r4, [sp, #56]	; 0x38
 8008a38:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8008a3c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a3e:	9312      	str	r3, [sp, #72]	; 0x48
 8008a40:	9316      	str	r3, [sp, #88]	; 0x58
 8008a42:	9310      	str	r3, [sp, #64]	; 0x40
 8008a44:	e79e      	b.n	8008984 <_svfprintf_r+0x448>
 8008a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a48:	425b      	negs	r3, r3
 8008a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a4c:	9b07      	ldr	r3, [sp, #28]
 8008a4e:	f89b 6000 	ldrb.w	r6, [fp]
 8008a52:	f043 0304 	orr.w	r3, r3, #4
 8008a56:	9307      	str	r3, [sp, #28]
 8008a58:	e5bb      	b.n	80085d2 <_svfprintf_r+0x96>
 8008a5a:	9b07      	ldr	r3, [sp, #28]
 8008a5c:	f043 0310 	orr.w	r3, r3, #16
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	9b08      	ldr	r3, [sp, #32]
 8008a64:	069d      	lsls	r5, r3, #26
 8008a66:	f140 83ea 	bpl.w	800923e <_svfprintf_r+0xd02>
 8008a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a6c:	3307      	adds	r3, #7
 8008a6e:	f023 0307 	bic.w	r3, r3, #7
 8008a72:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 8008a76:	930e      	str	r3, [sp, #56]	; 0x38
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e670      	b.n	800875e <_svfprintf_r+0x222>
 8008a7c:	f647 0230 	movw	r2, #30768	; 0x7830
 8008a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a82:	9907      	ldr	r1, [sp, #28]
 8008a84:	f853 4b04 	ldr.w	r4, [r3], #4
 8008a88:	f041 0102 	orr.w	r1, r1, #2
 8008a8c:	930e      	str	r3, [sp, #56]	; 0x38
 8008a8e:	4b4e      	ldr	r3, [pc, #312]	; (8008bc8 <_svfprintf_r+0x68c>)
 8008a90:	2500      	movs	r5, #0
 8008a92:	9319      	str	r3, [sp, #100]	; 0x64
 8008a94:	2678      	movs	r6, #120	; 0x78
 8008a96:	2302      	movs	r3, #2
 8008a98:	9108      	str	r1, [sp, #32]
 8008a9a:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8008a9e:	e65e      	b.n	800875e <_svfprintf_r+0x222>
 8008aa0:	9b07      	ldr	r3, [sp, #28]
 8008aa2:	069d      	lsls	r5, r3, #26
 8008aa4:	f100 8408 	bmi.w	80092b8 <_svfprintf_r+0xd7c>
 8008aa8:	9b07      	ldr	r3, [sp, #28]
 8008aaa:	06dc      	lsls	r4, r3, #27
 8008aac:	f100 86e1 	bmi.w	8009872 <_svfprintf_r+0x1336>
 8008ab0:	9b07      	ldr	r3, [sp, #28]
 8008ab2:	0658      	lsls	r0, r3, #25
 8008ab4:	f100 8795 	bmi.w	80099e2 <_svfprintf_r+0x14a6>
 8008ab8:	9b07      	ldr	r3, [sp, #28]
 8008aba:	0599      	lsls	r1, r3, #22
 8008abc:	f140 86d9 	bpl.w	8009872 <_svfprintf_r+0x1336>
 8008ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ac8:	465f      	mov	r7, fp
 8008aca:	7011      	strb	r1, [r2, #0]
 8008acc:	930e      	str	r3, [sp, #56]	; 0x38
 8008ace:	e703      	b.n	80088d8 <_svfprintf_r+0x39c>
 8008ad0:	f89b 6000 	ldrb.w	r6, [fp]
 8008ad4:	9b07      	ldr	r3, [sp, #28]
 8008ad6:	2e6c      	cmp	r6, #108	; 0x6c
 8008ad8:	f000 8508 	beq.w	80094ec <_svfprintf_r+0xfb0>
 8008adc:	f043 0310 	orr.w	r3, r3, #16
 8008ae0:	9307      	str	r3, [sp, #28]
 8008ae2:	e576      	b.n	80085d2 <_svfprintf_r+0x96>
 8008ae4:	f89b 6000 	ldrb.w	r6, [fp]
 8008ae8:	9b07      	ldr	r3, [sp, #28]
 8008aea:	2e68      	cmp	r6, #104	; 0x68
 8008aec:	f000 8507 	beq.w	80094fe <_svfprintf_r+0xfc2>
 8008af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af4:	9307      	str	r3, [sp, #28]
 8008af6:	e56c      	b.n	80085d2 <_svfprintf_r+0x96>
 8008af8:	9b07      	ldr	r3, [sp, #28]
 8008afa:	f89b 6000 	ldrb.w	r6, [fp]
 8008afe:	f043 0308 	orr.w	r3, r3, #8
 8008b02:	9307      	str	r3, [sp, #28]
 8008b04:	e565      	b.n	80085d2 <_svfprintf_r+0x96>
 8008b06:	4648      	mov	r0, r9
 8008b08:	f002 fa98 	bl	800b03c <_localeconv_r>
 8008b0c:	6843      	ldr	r3, [r0, #4]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	931c      	str	r3, [sp, #112]	; 0x70
 8008b12:	f7ff fb6b 	bl	80081ec <strlen>
 8008b16:	4603      	mov	r3, r0
 8008b18:	4648      	mov	r0, r9
 8008b1a:	461d      	mov	r5, r3
 8008b1c:	931d      	str	r3, [sp, #116]	; 0x74
 8008b1e:	f002 fa8d 	bl	800b03c <_localeconv_r>
 8008b22:	6882      	ldr	r2, [r0, #8]
 8008b24:	2120      	movs	r1, #32
 8008b26:	921a      	str	r2, [sp, #104]	; 0x68
 8008b28:	2d00      	cmp	r5, #0
 8008b2a:	f43f adcd 	beq.w	80086c8 <_svfprintf_r+0x18c>
 8008b2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f43f adc9 	beq.w	80086c8 <_svfprintf_r+0x18c>
 8008b36:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f43f adc4 	beq.w	80086c8 <_svfprintf_r+0x18c>
 8008b40:	9b07      	ldr	r3, [sp, #28]
 8008b42:	f89b 6000 	ldrb.w	r6, [fp]
 8008b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b4a:	9307      	str	r3, [sp, #28]
 8008b4c:	e541      	b.n	80085d2 <_svfprintf_r+0x96>
 8008b4e:	9b07      	ldr	r3, [sp, #28]
 8008b50:	f89b 6000 	ldrb.w	r6, [fp]
 8008b54:	f043 0301 	orr.w	r3, r3, #1
 8008b58:	9307      	str	r3, [sp, #28]
 8008b5a:	e53a      	b.n	80085d2 <_svfprintf_r+0x96>
 8008b5c:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f47f adb1 	bne.w	80086c8 <_svfprintf_r+0x18c>
 8008b66:	f89b 6000 	ldrb.w	r6, [fp]
 8008b6a:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
 8008b6e:	e530      	b.n	80085d2 <_svfprintf_r+0x96>
 8008b70:	9b07      	ldr	r3, [sp, #28]
 8008b72:	f89b 6000 	ldrb.w	r6, [fp]
 8008b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7a:	9307      	str	r3, [sp, #28]
 8008b7c:	e529      	b.n	80085d2 <_svfprintf_r+0x96>
 8008b7e:	465a      	mov	r2, fp
 8008b80:	f812 6b01 	ldrb.w	r6, [r2], #1
 8008b84:	2e2a      	cmp	r6, #42	; 0x2a
 8008b86:	f001 8251 	beq.w	800a02c <_svfprintf_r+0x1af0>
 8008b8a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b8e:	2b09      	cmp	r3, #9
 8008b90:	4693      	mov	fp, r2
 8008b92:	bf98      	it	ls
 8008b94:	2200      	movls	r2, #0
 8008b96:	f201 80ef 	bhi.w	8009d78 <_svfprintf_r+0x183c>
 8008b9a:	f81b 6b01 	ldrb.w	r6, [fp], #1
 8008b9e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008ba2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008ba6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008baa:	2b09      	cmp	r3, #9
 8008bac:	d9f5      	bls.n	8008b9a <_svfprintf_r+0x65e>
 8008bae:	9209      	str	r2, [sp, #36]	; 0x24
 8008bb0:	e511      	b.n	80085d6 <_svfprintf_r+0x9a>
 8008bb2:	f89b 6000 	ldrb.w	r6, [fp]
 8008bb6:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
 8008bba:	e50a      	b.n	80085d2 <_svfprintf_r+0x96>
 8008bbc:	7fefffff 	.word	0x7fefffff
 8008bc0:	0801261c 	.word	0x0801261c
 8008bc4:	08012620 	.word	0x08012620
 8008bc8:	0801262c 	.word	0x0801262c
 8008bcc:	9a07      	ldr	r2, [sp, #28]
 8008bce:	9208      	str	r2, [sp, #32]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	f000 81b4 	beq.w	8008f3e <_svfprintf_r+0xa02>
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	f000 8159 	beq.w	8008e8e <_svfprintf_r+0x952>
 8008bdc:	af56      	add	r7, sp, #344	; 0x158
 8008bde:	08e2      	lsrs	r2, r4, #3
 8008be0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8008be4:	08e9      	lsrs	r1, r5, #3
 8008be6:	f004 0307 	and.w	r3, r4, #7
 8008bea:	460d      	mov	r5, r1
 8008bec:	4614      	mov	r4, r2
 8008bee:	3330      	adds	r3, #48	; 0x30
 8008bf0:	ea54 0105 	orrs.w	r1, r4, r5
 8008bf4:	463a      	mov	r2, r7
 8008bf6:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8008bfa:	d1f0      	bne.n	8008bde <_svfprintf_r+0x6a2>
 8008bfc:	9908      	ldr	r1, [sp, #32]
 8008bfe:	4608      	mov	r0, r1
 8008c00:	07c0      	lsls	r0, r0, #31
 8008c02:	f100 82b8 	bmi.w	8009176 <_svfprintf_r+0xc3a>
 8008c06:	ab56      	add	r3, sp, #344	; 0x158
 8008c08:	1bdb      	subs	r3, r3, r7
 8008c0a:	9107      	str	r1, [sp, #28]
 8008c0c:	930c      	str	r3, [sp, #48]	; 0x30
 8008c0e:	2300      	movs	r3, #0
 8008c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c12:	930d      	str	r3, [sp, #52]	; 0x34
 8008c14:	9312      	str	r3, [sp, #72]	; 0x48
 8008c16:	9316      	str	r3, [sp, #88]	; 0x58
 8008c18:	9310      	str	r3, [sp, #64]	; 0x40
 8008c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c1c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8008c20:	428b      	cmp	r3, r1
 8008c22:	bfb8      	it	lt
 8008c24:	460b      	movlt	r3, r1
 8008c26:	9308      	str	r3, [sp, #32]
 8008c28:	e6ac      	b.n	8008984 <_svfprintf_r+0x448>
 8008c2a:	2e65      	cmp	r6, #101	; 0x65
 8008c2c:	f340 80d8 	ble.w	8008de0 <_svfprintf_r+0x8a4>
 8008c30:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8008c34:	2200      	movs	r2, #0
 8008c36:	2300      	movs	r3, #0
 8008c38:	f003 fd2e 	bl	800c698 <__aeabi_dcmpeq>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	f000 821e 	beq.w	800907e <_svfprintf_r+0xb42>
 8008c42:	2101      	movs	r1, #1
 8008c44:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008c46:	4ac5      	ldr	r2, [pc, #788]	; (8008f5c <_svfprintf_r+0xa20>)
 8008c48:	440b      	add	r3, r1
 8008c4a:	440c      	add	r4, r1
 8008c4c:	2b07      	cmp	r3, #7
 8008c4e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8008c52:	e9c8 2100 	strd	r2, r1, [r8]
 8008c56:	f300 85bb 	bgt.w	80097d0 <_svfprintf_r+0x1294>
 8008c5a:	f108 0808 	add.w	r8, r8, #8
 8008c5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c62:	4293      	cmp	r3, r2
 8008c64:	f280 8321 	bge.w	80092aa <_svfprintf_r+0xd6e>
 8008c68:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008c6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c70:	4414      	add	r4, r2
 8008c72:	2b07      	cmp	r3, #7
 8008c74:	e9c8 1200 	strd	r1, r2, [r8]
 8008c78:	942c      	str	r4, [sp, #176]	; 0xb0
 8008c7a:	932b      	str	r3, [sp, #172]	; 0xac
 8008c7c:	f300 8448 	bgt.w	8009510 <_svfprintf_r+0xfd4>
 8008c80:	f108 0808 	add.w	r8, r8, #8
 8008c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c86:	1e5d      	subs	r5, r3, #1
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	f77f ae06 	ble.w	800889a <_svfprintf_r+0x35e>
 8008c8e:	2d10      	cmp	r5, #16
 8008c90:	f340 85c7 	ble.w	8009822 <_svfprintf_r+0x12e6>
 8008c94:	4fb2      	ldr	r7, [pc, #712]	; (8008f60 <_svfprintf_r+0xa24>)
 8008c96:	2610      	movs	r6, #16
 8008c98:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008c9a:	970f      	str	r7, [sp, #60]	; 0x3c
 8008c9c:	e005      	b.n	8008caa <_svfprintf_r+0x76e>
 8008c9e:	f108 0808 	add.w	r8, r8, #8
 8008ca2:	3d10      	subs	r5, #16
 8008ca4:	2d10      	cmp	r5, #16
 8008ca6:	f340 85bf 	ble.w	8009828 <_svfprintf_r+0x12ec>
 8008caa:	3301      	adds	r3, #1
 8008cac:	3410      	adds	r4, #16
 8008cae:	2b07      	cmp	r3, #7
 8008cb0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8008cb4:	e9c8 7600 	strd	r7, r6, [r8]
 8008cb8:	ddf1      	ble.n	8008c9e <_svfprintf_r+0x762>
 8008cba:	4651      	mov	r1, sl
 8008cbc:	4648      	mov	r0, r9
 8008cbe:	aa2a      	add	r2, sp, #168	; 0xa8
 8008cc0:	f002 fd9c 	bl	800b7fc <__ssprint_r>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f040 8081 	bne.w	8008dcc <_svfprintf_r+0x890>
 8008cca:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8008cce:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008cd2:	e7e6      	b.n	8008ca2 <_svfprintf_r+0x766>
 8008cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd6:	9a08      	ldr	r2, [sp, #32]
 8008cd8:	1a9d      	subs	r5, r3, r2
 8008cda:	2d00      	cmp	r5, #0
 8008cdc:	f77f adc6 	ble.w	800886c <_svfprintf_r+0x330>
 8008ce0:	2d10      	cmp	r5, #16
 8008ce2:	f341 8069 	ble.w	8009db8 <_svfprintf_r+0x187c>
 8008ce6:	489e      	ldr	r0, [pc, #632]	; (8008f60 <_svfprintf_r+0xa24>)
 8008ce8:	4621      	mov	r1, r4
 8008cea:	2310      	movs	r3, #16
 8008cec:	4604      	mov	r4, r0
 8008cee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008cf0:	900f      	str	r0, [sp, #60]	; 0x3c
 8008cf2:	e004      	b.n	8008cfe <_svfprintf_r+0x7c2>
 8008cf4:	3d10      	subs	r5, #16
 8008cf6:	2d10      	cmp	r5, #16
 8008cf8:	f108 0808 	add.w	r8, r8, #8
 8008cfc:	dd17      	ble.n	8008d2e <_svfprintf_r+0x7f2>
 8008cfe:	3201      	adds	r2, #1
 8008d00:	3110      	adds	r1, #16
 8008d02:	2a07      	cmp	r2, #7
 8008d04:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
 8008d08:	e9c8 4300 	strd	r4, r3, [r8]
 8008d0c:	ddf2      	ble.n	8008cf4 <_svfprintf_r+0x7b8>
 8008d0e:	4651      	mov	r1, sl
 8008d10:	4648      	mov	r0, r9
 8008d12:	aa2a      	add	r2, sp, #168	; 0xa8
 8008d14:	f002 fd72 	bl	800b7fc <__ssprint_r>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d157      	bne.n	8008dcc <_svfprintf_r+0x890>
 8008d1c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
 8008d20:	3d10      	subs	r5, #16
 8008d22:	2d10      	cmp	r5, #16
 8008d24:	f04f 0310 	mov.w	r3, #16
 8008d28:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008d2c:	dce7      	bgt.n	8008cfe <_svfprintf_r+0x7c2>
 8008d2e:	460c      	mov	r4, r1
 8008d30:	3201      	adds	r2, #1
 8008d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d34:	442c      	add	r4, r5
 8008d36:	2a07      	cmp	r2, #7
 8008d38:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8008d3c:	e9c8 3500 	strd	r3, r5, [r8]
 8008d40:	f300 858a 	bgt.w	8009858 <_svfprintf_r+0x131c>
 8008d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d48:	f108 0808 	add.w	r8, r8, #8
 8008d4c:	1a9d      	subs	r5, r3, r2
 8008d4e:	2d00      	cmp	r5, #0
 8008d50:	f77f ad92 	ble.w	8008878 <_svfprintf_r+0x33c>
 8008d54:	2d10      	cmp	r5, #16
 8008d56:	f340 860a 	ble.w	800996e <_svfprintf_r+0x1432>
 8008d5a:	4881      	ldr	r0, [pc, #516]	; (8008f60 <_svfprintf_r+0xa24>)
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	2310      	movs	r3, #16
 8008d60:	4604      	mov	r4, r0
 8008d62:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008d64:	900f      	str	r0, [sp, #60]	; 0x3c
 8008d66:	e004      	b.n	8008d72 <_svfprintf_r+0x836>
 8008d68:	3d10      	subs	r5, #16
 8008d6a:	2d10      	cmp	r5, #16
 8008d6c:	f108 0808 	add.w	r8, r8, #8
 8008d70:	dd16      	ble.n	8008da0 <_svfprintf_r+0x864>
 8008d72:	3201      	adds	r2, #1
 8008d74:	3110      	adds	r1, #16
 8008d76:	2a07      	cmp	r2, #7
 8008d78:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
 8008d7c:	e9c8 4300 	strd	r4, r3, [r8]
 8008d80:	ddf2      	ble.n	8008d68 <_svfprintf_r+0x82c>
 8008d82:	4651      	mov	r1, sl
 8008d84:	4648      	mov	r0, r9
 8008d86:	aa2a      	add	r2, sp, #168	; 0xa8
 8008d88:	f002 fd38 	bl	800b7fc <__ssprint_r>
 8008d8c:	b9f0      	cbnz	r0, 8008dcc <_svfprintf_r+0x890>
 8008d8e:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
 8008d92:	3d10      	subs	r5, #16
 8008d94:	2d10      	cmp	r5, #16
 8008d96:	f04f 0310 	mov.w	r3, #16
 8008d9a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008d9e:	dce8      	bgt.n	8008d72 <_svfprintf_r+0x836>
 8008da0:	460c      	mov	r4, r1
 8008da2:	3201      	adds	r2, #1
 8008da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008da6:	442c      	add	r4, r5
 8008da8:	2a07      	cmp	r2, #7
 8008daa:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8008dae:	e9c8 3500 	strd	r3, r5, [r8]
 8008db2:	f300 8237 	bgt.w	8009224 <_svfprintf_r+0xce8>
 8008db6:	f108 0808 	add.w	r8, r8, #8
 8008dba:	e55d      	b.n	8008878 <_svfprintf_r+0x33c>
 8008dbc:	4651      	mov	r1, sl
 8008dbe:	4648      	mov	r0, r9
 8008dc0:	aa2a      	add	r2, sp, #168	; 0xa8
 8008dc2:	f002 fd1b 	bl	800b7fc <__ssprint_r>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f43f ad7b 	beq.w	80088c2 <_svfprintf_r+0x386>
 8008dcc:	46d3      	mov	fp, sl
 8008dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f43f ad8a 	beq.w	80088ea <_svfprintf_r+0x3ae>
 8008dd6:	4648      	mov	r0, r9
 8008dd8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008dda:	f7ff faa5 	bl	8008328 <_free_r>
 8008dde:	e584      	b.n	80088ea <_svfprintf_r+0x3ae>
 8008de0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	f340 81d5 	ble.w	8009192 <_svfprintf_r+0xc56>
 8008de8:	2301      	movs	r3, #1
 8008dea:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8008dec:	441c      	add	r4, r3
 8008dee:	441d      	add	r5, r3
 8008df0:	2d07      	cmp	r5, #7
 8008df2:	942c      	str	r4, [sp, #176]	; 0xb0
 8008df4:	f8c8 7000 	str.w	r7, [r8]
 8008df8:	952b      	str	r5, [sp, #172]	; 0xac
 8008dfa:	f8c8 3004 	str.w	r3, [r8, #4]
 8008dfe:	f300 823a 	bgt.w	8009276 <_svfprintf_r+0xd3a>
 8008e02:	f108 0808 	add.w	r8, r8, #8
 8008e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e08:	3501      	adds	r5, #1
 8008e0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008e0c:	441c      	add	r4, r3
 8008e0e:	2d07      	cmp	r5, #7
 8008e10:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
 8008e14:	e9c8 2300 	strd	r2, r3, [r8]
 8008e18:	f300 823a 	bgt.w	8009290 <_svfprintf_r+0xd54>
 8008e1c:	f108 0808 	add.w	r8, r8, #8
 8008e20:	2300      	movs	r3, #0
 8008e22:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8008e26:	2200      	movs	r2, #0
 8008e28:	f003 fc36 	bl	800c698 <__aeabi_dcmpeq>
 8008e2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f040 81cd 	bne.w	80091ce <_svfprintf_r+0xc92>
 8008e34:	3b01      	subs	r3, #1
 8008e36:	3501      	adds	r5, #1
 8008e38:	3701      	adds	r7, #1
 8008e3a:	441c      	add	r4, r3
 8008e3c:	2d07      	cmp	r5, #7
 8008e3e:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
 8008e42:	f8c8 7000 	str.w	r7, [r8]
 8008e46:	f8c8 3004 	str.w	r3, [r8, #4]
 8008e4a:	f300 84dc 	bgt.w	8009806 <_svfprintf_r+0x12ca>
 8008e4e:	f108 0808 	add.w	r8, r8, #8
 8008e52:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008e54:	3501      	adds	r5, #1
 8008e56:	4414      	add	r4, r2
 8008e58:	ab26      	add	r3, sp, #152	; 0x98
 8008e5a:	2d07      	cmp	r5, #7
 8008e5c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
 8008e60:	e9c8 3200 	strd	r3, r2, [r8]
 8008e64:	f77f ad17 	ble.w	8008896 <_svfprintf_r+0x35a>
 8008e68:	4651      	mov	r1, sl
 8008e6a:	4648      	mov	r0, r9
 8008e6c:	aa2a      	add	r2, sp, #168	; 0xa8
 8008e6e:	f002 fcc5 	bl	800b7fc <__ssprint_r>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d1aa      	bne.n	8008dcc <_svfprintf_r+0x890>
 8008e76:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008e78:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008e7c:	e50d      	b.n	800889a <_svfprintf_r+0x35e>
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	f000 87ca 	beq.w	8009e18 <_svfprintf_r+0x18dc>
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	9b07      	ldr	r3, [sp, #28]
 8008e88:	9308      	str	r3, [sp, #32]
 8008e8a:	f47f aea7 	bne.w	8008bdc <_svfprintf_r+0x6a0>
 8008e8e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008e90:	af56      	add	r7, sp, #344	; 0x158
 8008e92:	0923      	lsrs	r3, r4, #4
 8008e94:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8008e98:	0929      	lsrs	r1, r5, #4
 8008e9a:	f004 020f 	and.w	r2, r4, #15
 8008e9e:	460d      	mov	r5, r1
 8008ea0:	461c      	mov	r4, r3
 8008ea2:	5c83      	ldrb	r3, [r0, r2]
 8008ea4:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8008ea8:	ea54 0305 	orrs.w	r3, r4, r5
 8008eac:	d1f1      	bne.n	8008e92 <_svfprintf_r+0x956>
 8008eae:	9b08      	ldr	r3, [sp, #32]
 8008eb0:	9307      	str	r3, [sp, #28]
 8008eb2:	ab56      	add	r3, sp, #344	; 0x158
 8008eb4:	1bdb      	subs	r3, r3, r7
 8008eb6:	930c      	str	r3, [sp, #48]	; 0x30
 8008eb8:	e6a9      	b.n	8008c0e <_svfprintf_r+0x6d2>
 8008eba:	2d10      	cmp	r5, #16
 8008ebc:	f340 8668 	ble.w	8009b90 <_svfprintf_r+0x1654>
 8008ec0:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
 8008ec4:	931e      	str	r3, [sp, #120]	; 0x78
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4639      	mov	r1, r7
 8008eca:	2410      	movs	r4, #16
 8008ecc:	4637      	mov	r7, r6
 8008ece:	4656      	mov	r6, sl
 8008ed0:	46ca      	mov	sl, r9
 8008ed2:	4689      	mov	r9, r1
 8008ed4:	e004      	b.n	8008ee0 <_svfprintf_r+0x9a4>
 8008ed6:	3d10      	subs	r5, #16
 8008ed8:	2d10      	cmp	r5, #16
 8008eda:	f108 0808 	add.w	r8, r8, #8
 8008ede:	dd17      	ble.n	8008f10 <_svfprintf_r+0x9d4>
 8008ee0:	3201      	adds	r2, #1
 8008ee2:	4920      	ldr	r1, [pc, #128]	; (8008f64 <_svfprintf_r+0xa28>)
 8008ee4:	3310      	adds	r3, #16
 8008ee6:	2a07      	cmp	r2, #7
 8008ee8:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
 8008eec:	e9c8 1400 	strd	r1, r4, [r8]
 8008ef0:	ddf1      	ble.n	8008ed6 <_svfprintf_r+0x99a>
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4650      	mov	r0, sl
 8008ef6:	aa2a      	add	r2, sp, #168	; 0xa8
 8008ef8:	f002 fc80 	bl	800b7fc <__ssprint_r>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f040 8458 	bne.w	80097b2 <_svfprintf_r+0x1276>
 8008f02:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
 8008f06:	3d10      	subs	r5, #16
 8008f08:	2d10      	cmp	r5, #16
 8008f0a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008f0e:	dce7      	bgt.n	8008ee0 <_svfprintf_r+0x9a4>
 8008f10:	4648      	mov	r0, r9
 8008f12:	46d1      	mov	r9, sl
 8008f14:	46b2      	mov	sl, r6
 8008f16:	463e      	mov	r6, r7
 8008f18:	4607      	mov	r7, r0
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f1e:	194c      	adds	r4, r1, r5
 8008f20:	3201      	adds	r2, #1
 8008f22:	4910      	ldr	r1, [pc, #64]	; (8008f64 <_svfprintf_r+0xa28>)
 8008f24:	2a07      	cmp	r2, #7
 8008f26:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8008f2a:	e9c8 1500 	strd	r1, r5, [r8]
 8008f2e:	f300 841f 	bgt.w	8009770 <_svfprintf_r+0x1234>
 8008f32:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8008f36:	f108 0808 	add.w	r8, r8, #8
 8008f3a:	e474      	b.n	8008826 <_svfprintf_r+0x2ea>
 8008f3c:	9308      	str	r3, [sp, #32]
 8008f3e:	2d00      	cmp	r5, #0
 8008f40:	bf08      	it	eq
 8008f42:	2c0a      	cmpeq	r4, #10
 8008f44:	f080 83d0 	bcs.w	80096e8 <_svfprintf_r+0x11ac>
 8008f48:	9b08      	ldr	r3, [sp, #32]
 8008f4a:	3430      	adds	r4, #48	; 0x30
 8008f4c:	9307      	str	r3, [sp, #28]
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
 8008f54:	930c      	str	r3, [sp, #48]	; 0x30
 8008f56:	f20d 1757 	addw	r7, sp, #343	; 0x157
 8008f5a:	e658      	b.n	8008c0e <_svfprintf_r+0x6d2>
 8008f5c:	0801265c 	.word	0x0801265c
 8008f60:	08012670 	.word	0x08012670
 8008f64:	08012660 	.word	0x08012660
 8008f68:	4651      	mov	r1, sl
 8008f6a:	4648      	mov	r0, r9
 8008f6c:	aa2a      	add	r2, sp, #168	; 0xa8
 8008f6e:	f002 fc45 	bl	800b7fc <__ssprint_r>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f47f af2a 	bne.w	8008dcc <_svfprintf_r+0x890>
 8008f78:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f7a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008f7c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008f80:	2a00      	cmp	r2, #0
 8008f82:	f040 847f 	bne.w	8009884 <_svfprintf_r+0x1348>
 8008f86:	9b07      	ldr	r3, [sp, #28]
 8008f88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	f43f ac83 	beq.w	800889a <_svfprintf_r+0x35e>
 8008f94:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008f96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f98:	3301      	adds	r3, #1
 8008f9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f9c:	4414      	add	r4, r2
 8008f9e:	2b07      	cmp	r3, #7
 8008fa0:	e9c8 1200 	strd	r1, r2, [r8]
 8008fa4:	942c      	str	r4, [sp, #176]	; 0xb0
 8008fa6:	932b      	str	r3, [sp, #172]	; 0xac
 8008fa8:	f300 8524 	bgt.w	80099f4 <_svfprintf_r+0x14b8>
 8008fac:	f108 0808 	add.w	r8, r8, #8
 8008fb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	4414      	add	r4, r2
 8008fb6:	2b07      	cmp	r3, #7
 8008fb8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8008fbc:	e9c8 7200 	strd	r7, r2, [r8]
 8008fc0:	f77f ac69 	ble.w	8008896 <_svfprintf_r+0x35a>
 8008fc4:	4651      	mov	r1, sl
 8008fc6:	4648      	mov	r0, r9
 8008fc8:	aa2a      	add	r2, sp, #168	; 0xa8
 8008fca:	f002 fc17 	bl	800b7fc <__ssprint_r>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f47f aefc 	bne.w	8008dcc <_svfprintf_r+0x890>
 8008fd4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008fd6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008fda:	e45e      	b.n	800889a <_svfprintf_r+0x35e>
 8008fdc:	4651      	mov	r1, sl
 8008fde:	4648      	mov	r0, r9
 8008fe0:	aa2a      	add	r2, sp, #168	; 0xa8
 8008fe2:	931e      	str	r3, [sp, #120]	; 0x78
 8008fe4:	f002 fc0a 	bl	800b7fc <__ssprint_r>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	f47f aeef 	bne.w	8008dcc <_svfprintf_r+0x890>
 8008fee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008ff0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ff2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8008ff6:	e426      	b.n	8008846 <_svfprintf_r+0x30a>
 8008ff8:	4651      	mov	r1, sl
 8008ffa:	4648      	mov	r0, r9
 8008ffc:	aa2a      	add	r2, sp, #168	; 0xa8
 8008ffe:	f002 fbfd 	bl	800b7fc <__ssprint_r>
 8009002:	2800      	cmp	r0, #0
 8009004:	f47f aee2 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009008:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800900a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800900e:	e429      	b.n	8008864 <_svfprintf_r+0x328>
 8009010:	2d10      	cmp	r5, #16
 8009012:	f340 86be 	ble.w	8009d92 <_svfprintf_r+0x1856>
 8009016:	2610      	movs	r6, #16
 8009018:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800901a:	e004      	b.n	8009026 <_svfprintf_r+0xaea>
 800901c:	3d10      	subs	r5, #16
 800901e:	2d10      	cmp	r5, #16
 8009020:	f108 0808 	add.w	r8, r8, #8
 8009024:	dd17      	ble.n	8009056 <_svfprintf_r+0xb1a>
 8009026:	3301      	adds	r3, #1
 8009028:	4aad      	ldr	r2, [pc, #692]	; (80092e0 <_svfprintf_r+0xda4>)
 800902a:	3410      	adds	r4, #16
 800902c:	2b07      	cmp	r3, #7
 800902e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8009032:	e9c8 2600 	strd	r2, r6, [r8]
 8009036:	ddf1      	ble.n	800901c <_svfprintf_r+0xae0>
 8009038:	4651      	mov	r1, sl
 800903a:	4648      	mov	r0, r9
 800903c:	aa2a      	add	r2, sp, #168	; 0xa8
 800903e:	f002 fbdd 	bl	800b7fc <__ssprint_r>
 8009042:	2800      	cmp	r0, #0
 8009044:	f47f aec2 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009048:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 800904c:	3d10      	subs	r5, #16
 800904e:	2d10      	cmp	r5, #16
 8009050:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8009054:	dce7      	bgt.n	8009026 <_svfprintf_r+0xaea>
 8009056:	3301      	adds	r3, #1
 8009058:	4aa1      	ldr	r2, [pc, #644]	; (80092e0 <_svfprintf_r+0xda4>)
 800905a:	442c      	add	r4, r5
 800905c:	2b07      	cmp	r3, #7
 800905e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8009062:	e9c8 2500 	strd	r2, r5, [r8]
 8009066:	f77f ac21 	ble.w	80088ac <_svfprintf_r+0x370>
 800906a:	4651      	mov	r1, sl
 800906c:	4648      	mov	r0, r9
 800906e:	aa2a      	add	r2, sp, #168	; 0xa8
 8009070:	f002 fbc4 	bl	800b7fc <__ssprint_r>
 8009074:	2800      	cmp	r0, #0
 8009076:	f47f aea9 	bne.w	8008dcc <_svfprintf_r+0x890>
 800907a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800907c:	e416      	b.n	80088ac <_svfprintf_r+0x370>
 800907e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009080:	2a00      	cmp	r2, #0
 8009082:	f340 8386 	ble.w	8009792 <_svfprintf_r+0x1256>
 8009086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009088:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800908a:	4293      	cmp	r3, r2
 800908c:	bfa8      	it	ge
 800908e:	4613      	movge	r3, r2
 8009090:	2b00      	cmp	r3, #0
 8009092:	461d      	mov	r5, r3
 8009094:	dd0b      	ble.n	80090ae <_svfprintf_r+0xb72>
 8009096:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009098:	442c      	add	r4, r5
 800909a:	3301      	adds	r3, #1
 800909c:	2b07      	cmp	r3, #7
 800909e:	e9c8 7500 	strd	r7, r5, [r8]
 80090a2:	942c      	str	r4, [sp, #176]	; 0xb0
 80090a4:	932b      	str	r3, [sp, #172]	; 0xac
 80090a6:	f300 851e 	bgt.w	8009ae6 <_svfprintf_r+0x15aa>
 80090aa:	f108 0808 	add.w	r8, r8, #8
 80090ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090b0:	2d00      	cmp	r5, #0
 80090b2:	bfa8      	it	ge
 80090b4:	1b5b      	subge	r3, r3, r5
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	461d      	mov	r5, r3
 80090ba:	f300 8256 	bgt.w	800956a <_svfprintf_r+0x102e>
 80090be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090c0:	443b      	add	r3, r7
 80090c2:	461e      	mov	r6, r3
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	055b      	lsls	r3, r3, #21
 80090c8:	f100 8277 	bmi.w	80095ba <_svfprintf_r+0x107e>
 80090cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80090ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090d0:	4293      	cmp	r3, r2
 80090d2:	db03      	blt.n	80090dc <_svfprintf_r+0xba0>
 80090d4:	9a07      	ldr	r2, [sp, #28]
 80090d6:	07d5      	lsls	r5, r2, #31
 80090d8:	f140 847a 	bpl.w	80099d0 <_svfprintf_r+0x1494>
 80090dc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80090de:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80090e0:	3201      	adds	r2, #1
 80090e2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80090e4:	440c      	add	r4, r1
 80090e6:	2a07      	cmp	r2, #7
 80090e8:	e9c8 0100 	strd	r0, r1, [r8]
 80090ec:	942c      	str	r4, [sp, #176]	; 0xb0
 80090ee:	922b      	str	r2, [sp, #172]	; 0xac
 80090f0:	f300 8506 	bgt.w	8009b00 <_svfprintf_r+0x15c4>
 80090f4:	f108 0808 	add.w	r8, r8, #8
 80090f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090fa:	18bd      	adds	r5, r7, r2
 80090fc:	1bad      	subs	r5, r5, r6
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	429d      	cmp	r5, r3
 8009102:	bfa8      	it	ge
 8009104:	461d      	movge	r5, r3
 8009106:	2d00      	cmp	r5, #0
 8009108:	dd0b      	ble.n	8009122 <_svfprintf_r+0xbe6>
 800910a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800910c:	442c      	add	r4, r5
 800910e:	3201      	adds	r2, #1
 8009110:	2a07      	cmp	r2, #7
 8009112:	e9c8 6500 	strd	r6, r5, [r8]
 8009116:	942c      	str	r4, [sp, #176]	; 0xb0
 8009118:	922b      	str	r2, [sp, #172]	; 0xac
 800911a:	f300 855f 	bgt.w	8009bdc <_svfprintf_r+0x16a0>
 800911e:	f108 0808 	add.w	r8, r8, #8
 8009122:	2d00      	cmp	r5, #0
 8009124:	bfb4      	ite	lt
 8009126:	461d      	movlt	r5, r3
 8009128:	1b5d      	subge	r5, r3, r5
 800912a:	2d00      	cmp	r5, #0
 800912c:	f77f abb5 	ble.w	800889a <_svfprintf_r+0x35e>
 8009130:	2d10      	cmp	r5, #16
 8009132:	f340 8376 	ble.w	8009822 <_svfprintf_r+0x12e6>
 8009136:	4f6b      	ldr	r7, [pc, #428]	; (80092e4 <_svfprintf_r+0xda8>)
 8009138:	2610      	movs	r6, #16
 800913a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800913c:	970f      	str	r7, [sp, #60]	; 0x3c
 800913e:	e005      	b.n	800914c <_svfprintf_r+0xc10>
 8009140:	f108 0808 	add.w	r8, r8, #8
 8009144:	3d10      	subs	r5, #16
 8009146:	2d10      	cmp	r5, #16
 8009148:	f340 836e 	ble.w	8009828 <_svfprintf_r+0x12ec>
 800914c:	3301      	adds	r3, #1
 800914e:	3410      	adds	r4, #16
 8009150:	2b07      	cmp	r3, #7
 8009152:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8009156:	e9c8 7600 	strd	r7, r6, [r8]
 800915a:	ddf1      	ble.n	8009140 <_svfprintf_r+0xc04>
 800915c:	4651      	mov	r1, sl
 800915e:	4648      	mov	r0, r9
 8009160:	aa2a      	add	r2, sp, #168	; 0xa8
 8009162:	f002 fb4b 	bl	800b7fc <__ssprint_r>
 8009166:	2800      	cmp	r0, #0
 8009168:	f47f ae30 	bne.w	8008dcc <_svfprintf_r+0x890>
 800916c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8009170:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8009174:	e7e6      	b.n	8009144 <_svfprintf_r+0xc08>
 8009176:	2b30      	cmp	r3, #48	; 0x30
 8009178:	f43f ae99 	beq.w	8008eae <_svfprintf_r+0x972>
 800917c:	2330      	movs	r3, #48	; 0x30
 800917e:	3a02      	subs	r2, #2
 8009180:	f807 3c01 	strb.w	r3, [r7, #-1]
 8009184:	9908      	ldr	r1, [sp, #32]
 8009186:	ab56      	add	r3, sp, #344	; 0x158
 8009188:	1a9b      	subs	r3, r3, r2
 800918a:	4617      	mov	r7, r2
 800918c:	9107      	str	r1, [sp, #28]
 800918e:	930c      	str	r3, [sp, #48]	; 0x30
 8009190:	e53d      	b.n	8008c0e <_svfprintf_r+0x6d2>
 8009192:	9b07      	ldr	r3, [sp, #28]
 8009194:	07d8      	lsls	r0, r3, #31
 8009196:	f53f ae27 	bmi.w	8008de8 <_svfprintf_r+0x8ac>
 800919a:	2301      	movs	r3, #1
 800919c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800919e:	441c      	add	r4, r3
 80091a0:	441d      	add	r5, r3
 80091a2:	2d07      	cmp	r5, #7
 80091a4:	942c      	str	r4, [sp, #176]	; 0xb0
 80091a6:	f8c8 7000 	str.w	r7, [r8]
 80091aa:	952b      	str	r5, [sp, #172]	; 0xac
 80091ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80091b0:	f77f ae4d 	ble.w	8008e4e <_svfprintf_r+0x912>
 80091b4:	4651      	mov	r1, sl
 80091b6:	4648      	mov	r0, r9
 80091b8:	aa2a      	add	r2, sp, #168	; 0xa8
 80091ba:	f002 fb1f 	bl	800b7fc <__ssprint_r>
 80091be:	2800      	cmp	r0, #0
 80091c0:	f47f ae04 	bne.w	8008dcc <_svfprintf_r+0x890>
 80091c4:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
 80091c8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80091cc:	e641      	b.n	8008e52 <_svfprintf_r+0x916>
 80091ce:	1e5e      	subs	r6, r3, #1
 80091d0:	2e00      	cmp	r6, #0
 80091d2:	f77f ae3e 	ble.w	8008e52 <_svfprintf_r+0x916>
 80091d6:	2e10      	cmp	r6, #16
 80091d8:	f340 871e 	ble.w	800a018 <_svfprintf_r+0x1adc>
 80091dc:	4b41      	ldr	r3, [pc, #260]	; (80092e4 <_svfprintf_r+0xda8>)
 80091de:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80091e2:	2710      	movs	r7, #16
 80091e4:	46d3      	mov	fp, sl
 80091e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091e8:	46ca      	mov	sl, r9
 80091ea:	4699      	mov	r9, r3
 80091ec:	e005      	b.n	80091fa <_svfprintf_r+0xcbe>
 80091ee:	f108 0808 	add.w	r8, r8, #8
 80091f2:	3e10      	subs	r6, #16
 80091f4:	2e10      	cmp	r6, #16
 80091f6:	f340 82f8 	ble.w	80097ea <_svfprintf_r+0x12ae>
 80091fa:	3501      	adds	r5, #1
 80091fc:	3410      	adds	r4, #16
 80091fe:	2d07      	cmp	r5, #7
 8009200:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
 8009204:	e9c8 9700 	strd	r9, r7, [r8]
 8009208:	ddf1      	ble.n	80091ee <_svfprintf_r+0xcb2>
 800920a:	4659      	mov	r1, fp
 800920c:	4650      	mov	r0, sl
 800920e:	aa2a      	add	r2, sp, #168	; 0xa8
 8009210:	f002 faf4 	bl	800b7fc <__ssprint_r>
 8009214:	2800      	cmp	r0, #0
 8009216:	f040 85cc 	bne.w	8009db2 <_svfprintf_r+0x1876>
 800921a:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
 800921e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8009222:	e7e6      	b.n	80091f2 <_svfprintf_r+0xcb6>
 8009224:	4651      	mov	r1, sl
 8009226:	4648      	mov	r0, r9
 8009228:	aa2a      	add	r2, sp, #168	; 0xa8
 800922a:	f002 fae7 	bl	800b7fc <__ssprint_r>
 800922e:	2800      	cmp	r0, #0
 8009230:	f47f adcc 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009234:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009236:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800923a:	f7ff bb1d 	b.w	8008878 <_svfprintf_r+0x33c>
 800923e:	9b08      	ldr	r3, [sp, #32]
 8009240:	06dc      	lsls	r4, r3, #27
 8009242:	f100 8119 	bmi.w	8009478 <_svfprintf_r+0xf3c>
 8009246:	9b08      	ldr	r3, [sp, #32]
 8009248:	0658      	lsls	r0, r3, #25
 800924a:	f140 8368 	bpl.w	800991e <_svfprintf_r+0x13e2>
 800924e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009250:	2301      	movs	r3, #1
 8009252:	f852 4b04 	ldr.w	r4, [r2], #4
 8009256:	2500      	movs	r5, #0
 8009258:	920e      	str	r2, [sp, #56]	; 0x38
 800925a:	b2a4      	uxth	r4, r4
 800925c:	f7ff ba7f 	b.w	800875e <_svfprintf_r+0x222>
 8009260:	232d      	movs	r3, #45	; 0x2d
 8009262:	9a07      	ldr	r2, [sp, #28]
 8009264:	4264      	negs	r4, r4
 8009266:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 800926a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800926e:	2301      	movs	r3, #1
 8009270:	9208      	str	r2, [sp, #32]
 8009272:	f7ff ba77 	b.w	8008764 <_svfprintf_r+0x228>
 8009276:	4651      	mov	r1, sl
 8009278:	4648      	mov	r0, r9
 800927a:	aa2a      	add	r2, sp, #168	; 0xa8
 800927c:	f002 fabe 	bl	800b7fc <__ssprint_r>
 8009280:	2800      	cmp	r0, #0
 8009282:	f47f ada3 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009286:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
 800928a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800928e:	e5ba      	b.n	8008e06 <_svfprintf_r+0x8ca>
 8009290:	4651      	mov	r1, sl
 8009292:	4648      	mov	r0, r9
 8009294:	aa2a      	add	r2, sp, #168	; 0xa8
 8009296:	f002 fab1 	bl	800b7fc <__ssprint_r>
 800929a:	2800      	cmp	r0, #0
 800929c:	f47f ad96 	bne.w	8008dcc <_svfprintf_r+0x890>
 80092a0:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
 80092a4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80092a8:	e5ba      	b.n	8008e20 <_svfprintf_r+0x8e4>
 80092aa:	9b07      	ldr	r3, [sp, #28]
 80092ac:	07da      	lsls	r2, r3, #31
 80092ae:	f57f aaf4 	bpl.w	800889a <_svfprintf_r+0x35e>
 80092b2:	e4d9      	b.n	8008c68 <_svfprintf_r+0x72c>
 80092b4:	af56      	add	r7, sp, #344	; 0x158
 80092b6:	e4aa      	b.n	8008c0e <_svfprintf_r+0x6d2>
 80092b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ba:	465f      	mov	r7, fp
 80092bc:	f853 1b04 	ldr.w	r1, [r3], #4
 80092c0:	930e      	str	r3, [sp, #56]	; 0x38
 80092c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c4:	17dd      	asrs	r5, r3, #31
 80092c6:	461a      	mov	r2, r3
 80092c8:	462b      	mov	r3, r5
 80092ca:	e9c1 2300 	strd	r2, r3, [r1]
 80092ce:	f7ff bb03 	b.w	80088d8 <_svfprintf_r+0x39c>
 80092d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092d4:	2500      	movs	r5, #0
 80092d6:	f853 4b04 	ldr.w	r4, [r3], #4
 80092da:	930e      	str	r3, [sp, #56]	; 0x38
 80092dc:	f7ff ba3a 	b.w	8008754 <_svfprintf_r+0x218>
 80092e0:	08012660 	.word	0x08012660
 80092e4:	08012670 	.word	0x08012670
 80092e8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80092ec:	460b      	mov	r3, r1
 80092ee:	4602      	mov	r2, r0
 80092f0:	f003 fa04 	bl	800c6fc <__aeabi_dcmpun>
 80092f4:	4601      	mov	r1, r0
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f040 8643 	bne.w	8009f82 <_svfprintf_r+0x1a46>
 80092fc:	2e61      	cmp	r6, #97	; 0x61
 80092fe:	f000 8586 	beq.w	8009e0e <_svfprintf_r+0x18d2>
 8009302:	2e41      	cmp	r6, #65	; 0x41
 8009304:	f000 847a 	beq.w	8009bfc <_svfprintf_r+0x16c0>
 8009308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800930a:	f026 0520 	bic.w	r5, r6, #32
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	9508      	str	r5, [sp, #32]
 8009312:	f000 837d 	beq.w	8009a10 <_svfprintf_r+0x14d4>
 8009316:	2d47      	cmp	r5, #71	; 0x47
 8009318:	f000 859e 	beq.w	8009e58 <_svfprintf_r+0x191c>
 800931c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8009320:	9b07      	ldr	r3, [sp, #28]
 8009322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009326:	9312      	str	r3, [sp, #72]	; 0x48
 8009328:	460b      	mov	r3, r1
 800932a:	2b00      	cmp	r3, #0
 800932c:	f2c0 85ba 	blt.w	8009ea4 <_svfprintf_r+0x1968>
 8009330:	2200      	movs	r2, #0
 8009332:	930f      	str	r3, [sp, #60]	; 0x3c
 8009334:	921e      	str	r2, [sp, #120]	; 0x78
 8009336:	920d      	str	r2, [sp, #52]	; 0x34
 8009338:	900c      	str	r0, [sp, #48]	; 0x30
 800933a:	2d46      	cmp	r5, #70	; 0x46
 800933c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800933e:	f000 8407 	beq.w	8009b50 <_svfprintf_r+0x1614>
 8009342:	2d45      	cmp	r5, #69	; 0x45
 8009344:	f04f 0002 	mov.w	r0, #2
 8009348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800934a:	f040 83e7 	bne.w	8009b1c <_svfprintf_r+0x15e0>
 800934e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009350:	9000      	str	r0, [sp, #0]
 8009352:	1c4c      	adds	r4, r1, #1
 8009354:	a928      	add	r1, sp, #160	; 0xa0
 8009356:	a825      	add	r0, sp, #148	; 0x94
 8009358:	9104      	str	r1, [sp, #16]
 800935a:	a924      	add	r1, sp, #144	; 0x90
 800935c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8009360:	9401      	str	r4, [sp, #4]
 8009362:	4648      	mov	r0, r9
 8009364:	f000 ff24 	bl	800a1b0 <_dtoa_r>
 8009368:	4607      	mov	r7, r0
 800936a:	4404      	add	r4, r0
 800936c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800936e:	9d07      	ldr	r5, [sp, #28]
 8009370:	9307      	str	r3, [sp, #28]
 8009372:	2200      	movs	r2, #0
 8009374:	2300      	movs	r3, #0
 8009376:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009378:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800937a:	f003 f98d 	bl	800c698 <__aeabi_dcmpeq>
 800937e:	2800      	cmp	r0, #0
 8009380:	f000 8398 	beq.w	8009ab4 <_svfprintf_r+0x1578>
 8009384:	4623      	mov	r3, r4
 8009386:	1bdb      	subs	r3, r3, r7
 8009388:	9313      	str	r3, [sp, #76]	; 0x4c
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	2b47      	cmp	r3, #71	; 0x47
 800938e:	f000 835e 	beq.w	8009a4e <_svfprintf_r+0x1512>
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	2b46      	cmp	r3, #70	; 0x46
 8009396:	f000 840b 	beq.w	8009bb0 <_svfprintf_r+0x1674>
 800939a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800939c:	9310      	str	r3, [sp, #64]	; 0x40
 800939e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093a0:	9a08      	ldr	r2, [sp, #32]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	2a41      	cmp	r2, #65	; 0x41
 80093a6:	9324      	str	r3, [sp, #144]	; 0x90
 80093a8:	f000 85ad 	beq.w	8009f06 <_svfprintf_r+0x19ca>
 80093ac:	2100      	movs	r1, #0
 80093ae:	b2f2      	uxtb	r2, r6
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 80093b6:	bfb6      	itet	lt
 80093b8:	222d      	movlt	r2, #45	; 0x2d
 80093ba:	222b      	movge	r2, #43	; 0x2b
 80093bc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 80093be:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
 80093c2:	bfb8      	it	lt
 80093c4:	f1c3 0301 	rsblt	r3, r3, #1
 80093c8:	2b09      	cmp	r3, #9
 80093ca:	f340 85a2 	ble.w	8009f12 <_svfprintf_r+0x19d6>
 80093ce:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
 80093d2:	4672      	mov	r2, lr
 80093d4:	469c      	mov	ip, r3
 80093d6:	4cbf      	ldr	r4, [pc, #764]	; (80096d4 <_svfprintf_r+0x1198>)
 80093d8:	4660      	mov	r0, ip
 80093da:	4611      	mov	r1, r2
 80093dc:	fb84 230c 	smull	r2, r3, r4, ip
 80093e0:	ea4f 72ec 	mov.w	r2, ip, asr #31
 80093e4:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 80093e8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80093ec:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
 80093f0:	3330      	adds	r3, #48	; 0x30
 80093f2:	2863      	cmp	r0, #99	; 0x63
 80093f4:	4694      	mov	ip, r2
 80093f6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80093fa:	f101 32ff 	add.w	r2, r1, #4294967295
 80093fe:	dceb      	bgt.n	80093d8 <_svfprintf_r+0xe9c>
 8009400:	4663      	mov	r3, ip
 8009402:	3330      	adds	r3, #48	; 0x30
 8009404:	b2d8      	uxtb	r0, r3
 8009406:	1e8b      	subs	r3, r1, #2
 8009408:	459e      	cmp	lr, r3
 800940a:	f802 0c01 	strb.w	r0, [r2, #-1]
 800940e:	f240 862c 	bls.w	800a06a <_svfprintf_r+0x1b2e>
 8009412:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
 8009416:	e001      	b.n	800941c <_svfprintf_r+0xee0>
 8009418:	f812 0b01 	ldrb.w	r0, [r2], #1
 800941c:	4596      	cmp	lr, r2
 800941e:	f803 0b01 	strb.w	r0, [r3], #1
 8009422:	d1f9      	bne.n	8009418 <_svfprintf_r+0xedc>
 8009424:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
 8009428:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 800942c:	1a5b      	subs	r3, r3, r1
 800942e:	4413      	add	r3, r2
 8009430:	aa26      	add	r2, sp, #152	; 0x98
 8009432:	1a9b      	subs	r3, r3, r2
 8009434:	931b      	str	r3, [sp, #108]	; 0x6c
 8009436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009438:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800943a:	2b01      	cmp	r3, #1
 800943c:	441a      	add	r2, r3
 800943e:	920c      	str	r2, [sp, #48]	; 0x30
 8009440:	f340 85cc 	ble.w	8009fdc <_svfprintf_r+0x1aa0>
 8009444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009446:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009448:	4413      	add	r3, r2
 800944a:	930c      	str	r3, [sp, #48]	; 0x30
 800944c:	2300      	movs	r3, #0
 800944e:	9312      	str	r3, [sp, #72]	; 0x48
 8009450:	9316      	str	r3, [sp, #88]	; 0x58
 8009452:	9310      	str	r3, [sp, #64]	; 0x40
 8009454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009456:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800945a:	f445 7280 	orr.w	r2, r5, #256	; 0x100
 800945e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009462:	9207      	str	r2, [sp, #28]
 8009464:	9308      	str	r3, [sp, #32]
 8009466:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009468:	2b00      	cmp	r3, #0
 800946a:	f040 8317 	bne.w	8009a9c <_svfprintf_r+0x1560>
 800946e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8009472:	9309      	str	r3, [sp, #36]	; 0x24
 8009474:	f7ff ba86 	b.w	8008984 <_svfprintf_r+0x448>
 8009478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800947a:	2301      	movs	r3, #1
 800947c:	f852 4b04 	ldr.w	r4, [r2], #4
 8009480:	2500      	movs	r5, #0
 8009482:	920e      	str	r2, [sp, #56]	; 0x38
 8009484:	f7ff b96b 	b.w	800875e <_svfprintf_r+0x222>
 8009488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800948a:	f853 4b04 	ldr.w	r4, [r3], #4
 800948e:	17e5      	asrs	r5, r4, #31
 8009490:	930e      	str	r3, [sp, #56]	; 0x38
 8009492:	4622      	mov	r2, r4
 8009494:	462b      	mov	r3, r5
 8009496:	f7ff b933 	b.w	8008700 <_svfprintf_r+0x1c4>
 800949a:	9b07      	ldr	r3, [sp, #28]
 800949c:	9308      	str	r3, [sp, #32]
 800949e:	f7ff bae0 	b.w	8008a62 <_svfprintf_r+0x526>
 80094a2:	4b8d      	ldr	r3, [pc, #564]	; (80096d8 <_svfprintf_r+0x119c>)
 80094a4:	9319      	str	r3, [sp, #100]	; 0x64
 80094a6:	9b07      	ldr	r3, [sp, #28]
 80094a8:	0699      	lsls	r1, r3, #26
 80094aa:	f140 80fe 	bpl.w	80096aa <_svfprintf_r+0x116e>
 80094ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094b0:	3307      	adds	r3, #7
 80094b2:	f023 0307 	bic.w	r3, r3, #7
 80094b6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 80094ba:	930e      	str	r3, [sp, #56]	; 0x38
 80094bc:	9a07      	ldr	r2, [sp, #28]
 80094be:	07d7      	lsls	r7, r2, #31
 80094c0:	d50a      	bpl.n	80094d8 <_svfprintf_r+0xf9c>
 80094c2:	ea54 0305 	orrs.w	r3, r4, r5
 80094c6:	d007      	beq.n	80094d8 <_svfprintf_r+0xf9c>
 80094c8:	2330      	movs	r3, #48	; 0x30
 80094ca:	f042 0202 	orr.w	r2, r2, #2
 80094ce:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
 80094d2:	9207      	str	r2, [sp, #28]
 80094d4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 80094d8:	9a07      	ldr	r2, [sp, #28]
 80094da:	2302      	movs	r3, #2
 80094dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094e0:	9208      	str	r2, [sp, #32]
 80094e2:	f7ff b93c 	b.w	800875e <_svfprintf_r+0x222>
 80094e6:	4b7d      	ldr	r3, [pc, #500]	; (80096dc <_svfprintf_r+0x11a0>)
 80094e8:	9319      	str	r3, [sp, #100]	; 0x64
 80094ea:	e7dc      	b.n	80094a6 <_svfprintf_r+0xf6a>
 80094ec:	f043 0320 	orr.w	r3, r3, #32
 80094f0:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80094f4:	9307      	str	r3, [sp, #28]
 80094f6:	f10b 0b01 	add.w	fp, fp, #1
 80094fa:	f7ff b86a 	b.w	80085d2 <_svfprintf_r+0x96>
 80094fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009502:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8009506:	9307      	str	r3, [sp, #28]
 8009508:	f10b 0b01 	add.w	fp, fp, #1
 800950c:	f7ff b861 	b.w	80085d2 <_svfprintf_r+0x96>
 8009510:	4651      	mov	r1, sl
 8009512:	4648      	mov	r0, r9
 8009514:	aa2a      	add	r2, sp, #168	; 0xa8
 8009516:	f002 f971 	bl	800b7fc <__ssprint_r>
 800951a:	2800      	cmp	r0, #0
 800951c:	f47f ac56 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009520:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009522:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8009526:	f7ff bbad 	b.w	8008c84 <_svfprintf_r+0x748>
 800952a:	2140      	movs	r1, #64	; 0x40
 800952c:	4648      	mov	r0, r9
 800952e:	f7fe f9ff 	bl	8007930 <_malloc_r>
 8009532:	f8cb 0000 	str.w	r0, [fp]
 8009536:	f8cb 0010 	str.w	r0, [fp, #16]
 800953a:	2800      	cmp	r0, #0
 800953c:	f000 858d 	beq.w	800a05a <_svfprintf_r+0x1b1e>
 8009540:	2340      	movs	r3, #64	; 0x40
 8009542:	f8cb 3014 	str.w	r3, [fp, #20]
 8009546:	f7ff b811 	b.w	800856c <_svfprintf_r+0x30>
 800954a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954c:	463a      	mov	r2, r7
 800954e:	2b06      	cmp	r3, #6
 8009550:	bf28      	it	cs
 8009552:	2306      	movcs	r3, #6
 8009554:	9709      	str	r7, [sp, #36]	; 0x24
 8009556:	9712      	str	r7, [sp, #72]	; 0x48
 8009558:	9716      	str	r7, [sp, #88]	; 0x58
 800955a:	9710      	str	r7, [sp, #64]	; 0x40
 800955c:	970d      	str	r7, [sp, #52]	; 0x34
 800955e:	9308      	str	r3, [sp, #32]
 8009560:	4f5f      	ldr	r7, [pc, #380]	; (80096e0 <_svfprintf_r+0x11a4>)
 8009562:	940e      	str	r4, [sp, #56]	; 0x38
 8009564:	930c      	str	r3, [sp, #48]	; 0x30
 8009566:	f7ff ba0d 	b.w	8008984 <_svfprintf_r+0x448>
 800956a:	2b10      	cmp	r3, #16
 800956c:	f340 8558 	ble.w	800a020 <_svfprintf_r+0x1ae4>
 8009570:	4651      	mov	r1, sl
 8009572:	4a5c      	ldr	r2, [pc, #368]	; (80096e4 <_svfprintf_r+0x11a8>)
 8009574:	46ca      	mov	sl, r9
 8009576:	9709      	str	r7, [sp, #36]	; 0x24
 8009578:	2610      	movs	r6, #16
 800957a:	4617      	mov	r7, r2
 800957c:	4689      	mov	r9, r1
 800957e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009580:	920f      	str	r2, [sp, #60]	; 0x3c
 8009582:	e005      	b.n	8009590 <_svfprintf_r+0x1054>
 8009584:	f108 0808 	add.w	r8, r8, #8
 8009588:	3d10      	subs	r5, #16
 800958a:	2d10      	cmp	r5, #16
 800958c:	f340 81fa 	ble.w	8009984 <_svfprintf_r+0x1448>
 8009590:	3301      	adds	r3, #1
 8009592:	3410      	adds	r4, #16
 8009594:	2b07      	cmp	r3, #7
 8009596:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 800959a:	e9c8 7600 	strd	r7, r6, [r8]
 800959e:	ddf1      	ble.n	8009584 <_svfprintf_r+0x1048>
 80095a0:	4649      	mov	r1, r9
 80095a2:	4650      	mov	r0, sl
 80095a4:	aa2a      	add	r2, sp, #168	; 0xa8
 80095a6:	f002 f929 	bl	800b7fc <__ssprint_r>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	f040 83fd 	bne.w	8009daa <_svfprintf_r+0x186e>
 80095b0:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 80095b4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80095b8:	e7e6      	b.n	8009588 <_svfprintf_r+0x104c>
 80095ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80095bc:	4642      	mov	r2, r8
 80095be:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80095c2:	18fb      	adds	r3, r7, r3
 80095c4:	9309      	str	r3, [sp, #36]	; 0x24
 80095c6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80095ca:	970f      	str	r7, [sp, #60]	; 0x3c
 80095cc:	4620      	mov	r0, r4
 80095ce:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80095d2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80095d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095d6:	f1b8 0f00 	cmp.w	r8, #0
 80095da:	d02d      	beq.n	8009638 <_svfprintf_r+0x10fc>
 80095dc:	bb7b      	cbnz	r3, 800963e <_svfprintf_r+0x1102>
 80095de:	3f01      	subs	r7, #1
 80095e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80095e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80095e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80095e8:	3301      	adds	r3, #1
 80095ea:	4458      	add	r0, fp
 80095ec:	2b07      	cmp	r3, #7
 80095ee:	e9c2 1b00 	strd	r1, fp, [r2]
 80095f2:	902c      	str	r0, [sp, #176]	; 0xb0
 80095f4:	932b      	str	r3, [sp, #172]	; 0xac
 80095f6:	dc62      	bgt.n	80096be <_svfprintf_r+0x1182>
 80095f8:	3208      	adds	r2, #8
 80095fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095fc:	783b      	ldrb	r3, [r7, #0]
 80095fe:	1b8d      	subs	r5, r1, r6
 8009600:	429d      	cmp	r5, r3
 8009602:	bfa8      	it	ge
 8009604:	461d      	movge	r5, r3
 8009606:	2d00      	cmp	r5, #0
 8009608:	dd0b      	ble.n	8009622 <_svfprintf_r+0x10e6>
 800960a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800960c:	4428      	add	r0, r5
 800960e:	3301      	adds	r3, #1
 8009610:	2b07      	cmp	r3, #7
 8009612:	e9c2 6500 	strd	r6, r5, [r2]
 8009616:	902c      	str	r0, [sp, #176]	; 0xb0
 8009618:	932b      	str	r3, [sp, #172]	; 0xac
 800961a:	f300 8111 	bgt.w	8009840 <_svfprintf_r+0x1304>
 800961e:	783b      	ldrb	r3, [r7, #0]
 8009620:	3208      	adds	r2, #8
 8009622:	2d00      	cmp	r5, #0
 8009624:	bfb4      	ite	lt
 8009626:	461d      	movlt	r5, r3
 8009628:	1b5d      	subge	r5, r3, r5
 800962a:	2d00      	cmp	r5, #0
 800962c:	dc0b      	bgt.n	8009646 <_svfprintf_r+0x110a>
 800962e:	441e      	add	r6, r3
 8009630:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009632:	f1b8 0f00 	cmp.w	r8, #0
 8009636:	d1d1      	bne.n	80095dc <_svfprintf_r+0x10a0>
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 81f9 	beq.w	8009a30 <_svfprintf_r+0x14f4>
 800963e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009640:	3b01      	subs	r3, #1
 8009642:	9312      	str	r3, [sp, #72]	; 0x48
 8009644:	e7ce      	b.n	80095e4 <_svfprintf_r+0x10a8>
 8009646:	2d10      	cmp	r5, #16
 8009648:	f340 84c5 	ble.w	8009fd6 <_svfprintf_r+0x1a9a>
 800964c:	992b      	ldr	r1, [sp, #172]	; 0xac
 800964e:	2410      	movs	r4, #16
 8009650:	460b      	mov	r3, r1
 8009652:	e004      	b.n	800965e <_svfprintf_r+0x1122>
 8009654:	3d10      	subs	r5, #16
 8009656:	2d10      	cmp	r5, #16
 8009658:	f102 0208 	add.w	r2, r2, #8
 800965c:	dd16      	ble.n	800968c <_svfprintf_r+0x1150>
 800965e:	3301      	adds	r3, #1
 8009660:	4920      	ldr	r1, [pc, #128]	; (80096e4 <_svfprintf_r+0x11a8>)
 8009662:	3010      	adds	r0, #16
 8009664:	2b07      	cmp	r3, #7
 8009666:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
 800966a:	e9c2 1400 	strd	r1, r4, [r2]
 800966e:	ddf1      	ble.n	8009654 <_svfprintf_r+0x1118>
 8009670:	4651      	mov	r1, sl
 8009672:	4648      	mov	r0, r9
 8009674:	aa2a      	add	r2, sp, #168	; 0xa8
 8009676:	f002 f8c1 	bl	800b7fc <__ssprint_r>
 800967a:	2800      	cmp	r0, #0
 800967c:	f47f aba6 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009680:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
 8009684:	3d10      	subs	r5, #16
 8009686:	2d10      	cmp	r5, #16
 8009688:	aa2d      	add	r2, sp, #180	; 0xb4
 800968a:	dce8      	bgt.n	800965e <_svfprintf_r+0x1122>
 800968c:	4619      	mov	r1, r3
 800968e:	1c4b      	adds	r3, r1, #1
 8009690:	4914      	ldr	r1, [pc, #80]	; (80096e4 <_svfprintf_r+0x11a8>)
 8009692:	4428      	add	r0, r5
 8009694:	2b07      	cmp	r3, #7
 8009696:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
 800969a:	e9c2 1500 	strd	r1, r5, [r2]
 800969e:	f300 8215 	bgt.w	8009acc <_svfprintf_r+0x1590>
 80096a2:	783b      	ldrb	r3, [r7, #0]
 80096a4:	3208      	adds	r2, #8
 80096a6:	441e      	add	r6, r3
 80096a8:	e7c2      	b.n	8009630 <_svfprintf_r+0x10f4>
 80096aa:	9b07      	ldr	r3, [sp, #28]
 80096ac:	06da      	lsls	r2, r3, #27
 80096ae:	f140 8084 	bpl.w	80097ba <_svfprintf_r+0x127e>
 80096b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096b4:	2500      	movs	r5, #0
 80096b6:	f853 4b04 	ldr.w	r4, [r3], #4
 80096ba:	930e      	str	r3, [sp, #56]	; 0x38
 80096bc:	e6fe      	b.n	80094bc <_svfprintf_r+0xf80>
 80096be:	4651      	mov	r1, sl
 80096c0:	4648      	mov	r0, r9
 80096c2:	aa2a      	add	r2, sp, #168	; 0xa8
 80096c4:	f002 f89a 	bl	800b7fc <__ssprint_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	f47f ab7f 	bne.w	8008dcc <_svfprintf_r+0x890>
 80096ce:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80096d0:	aa2d      	add	r2, sp, #180	; 0xb4
 80096d2:	e792      	b.n	80095fa <_svfprintf_r+0x10be>
 80096d4:	66666667 	.word	0x66666667
 80096d8:	0801262c 	.word	0x0801262c
 80096dc:	08012640 	.word	0x08012640
 80096e0:	08012654 	.word	0x08012654
 80096e4:	08012670 	.word	0x08012670
 80096e8:	2200      	movs	r2, #0
 80096ea:	9b08      	ldr	r3, [sp, #32]
 80096ec:	f8cd b01c 	str.w	fp, [sp, #28]
 80096f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096f4:	960c      	str	r6, [sp, #48]	; 0x30
 80096f6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80096fa:	4693      	mov	fp, r2
 80096fc:	46ca      	mov	sl, r9
 80096fe:	461e      	mov	r6, r3
 8009700:	46c1      	mov	r9, r8
 8009702:	af56      	add	r7, sp, #344	; 0x158
 8009704:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009708:	e00b      	b.n	8009722 <_svfprintf_r+0x11e6>
 800970a:	220a      	movs	r2, #10
 800970c:	2300      	movs	r3, #0
 800970e:	4620      	mov	r0, r4
 8009710:	4629      	mov	r1, r5
 8009712:	f003 fb25 	bl	800cd60 <__aeabi_uldivmod>
 8009716:	2d00      	cmp	r5, #0
 8009718:	bf08      	it	eq
 800971a:	2c0a      	cmpeq	r4, #10
 800971c:	d31b      	bcc.n	8009756 <_svfprintf_r+0x121a>
 800971e:	4604      	mov	r4, r0
 8009720:	460d      	mov	r5, r1
 8009722:	220a      	movs	r2, #10
 8009724:	2300      	movs	r3, #0
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f003 fb19 	bl	800cd60 <__aeabi_uldivmod>
 800972e:	3230      	adds	r2, #48	; 0x30
 8009730:	f807 2c01 	strb.w	r2, [r7, #-1]
 8009734:	f10b 0b01 	add.w	fp, fp, #1
 8009738:	3f01      	subs	r7, #1
 800973a:	2e00      	cmp	r6, #0
 800973c:	d0e5      	beq.n	800970a <_svfprintf_r+0x11ce>
 800973e:	f898 3000 	ldrb.w	r3, [r8]
 8009742:	459b      	cmp	fp, r3
 8009744:	d1e1      	bne.n	800970a <_svfprintf_r+0x11ce>
 8009746:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800974a:	d0de      	beq.n	800970a <_svfprintf_r+0x11ce>
 800974c:	2d00      	cmp	r5, #0
 800974e:	bf08      	it	eq
 8009750:	2c0a      	cmpeq	r4, #10
 8009752:	f080 8128 	bcs.w	80099a6 <_svfprintf_r+0x146a>
 8009756:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800975a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800975e:	46c8      	mov	r8, r9
 8009760:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009762:	46d1      	mov	r9, sl
 8009764:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8009768:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800976c:	f7ff bb9f 	b.w	8008eae <_svfprintf_r+0x972>
 8009770:	4651      	mov	r1, sl
 8009772:	4648      	mov	r0, r9
 8009774:	aa2a      	add	r2, sp, #168	; 0xa8
 8009776:	931e      	str	r3, [sp, #120]	; 0x78
 8009778:	f002 f840 	bl	800b7fc <__ssprint_r>
 800977c:	2800      	cmp	r0, #0
 800977e:	f47f ab25 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009782:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8009786:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009788:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800978a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800978e:	f7ff b84a 	b.w	8008826 <_svfprintf_r+0x2ea>
 8009792:	2001      	movs	r0, #1
 8009794:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009796:	49c5      	ldr	r1, [pc, #788]	; (8009aac <_svfprintf_r+0x1570>)
 8009798:	4403      	add	r3, r0
 800979a:	4404      	add	r4, r0
 800979c:	2b07      	cmp	r3, #7
 800979e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 80097a2:	e9c8 1000 	strd	r1, r0, [r8]
 80097a6:	f73f abdf 	bgt.w	8008f68 <_svfprintf_r+0xa2c>
 80097aa:	f108 0808 	add.w	r8, r8, #8
 80097ae:	f7ff bbe7 	b.w	8008f80 <_svfprintf_r+0xa44>
 80097b2:	46d1      	mov	r9, sl
 80097b4:	46b3      	mov	fp, r6
 80097b6:	f7ff bb0a 	b.w	8008dce <_svfprintf_r+0x892>
 80097ba:	9b07      	ldr	r3, [sp, #28]
 80097bc:	065b      	lsls	r3, r3, #25
 80097be:	f140 80cb 	bpl.w	8009958 <_svfprintf_r+0x141c>
 80097c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097c4:	2500      	movs	r5, #0
 80097c6:	f853 4b04 	ldr.w	r4, [r3], #4
 80097ca:	930e      	str	r3, [sp, #56]	; 0x38
 80097cc:	b2a4      	uxth	r4, r4
 80097ce:	e675      	b.n	80094bc <_svfprintf_r+0xf80>
 80097d0:	4651      	mov	r1, sl
 80097d2:	4648      	mov	r0, r9
 80097d4:	aa2a      	add	r2, sp, #168	; 0xa8
 80097d6:	f002 f811 	bl	800b7fc <__ssprint_r>
 80097da:	2800      	cmp	r0, #0
 80097dc:	f47f aaf6 	bne.w	8008dcc <_svfprintf_r+0x890>
 80097e0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80097e2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80097e6:	f7ff ba3a 	b.w	8008c5e <_svfprintf_r+0x722>
 80097ea:	46d1      	mov	r9, sl
 80097ec:	46da      	mov	sl, fp
 80097ee:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80097f2:	3501      	adds	r5, #1
 80097f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097f6:	4434      	add	r4, r6
 80097f8:	2d07      	cmp	r5, #7
 80097fa:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
 80097fe:	e9c8 3600 	strd	r3, r6, [r8]
 8009802:	f77f ab24 	ble.w	8008e4e <_svfprintf_r+0x912>
 8009806:	4651      	mov	r1, sl
 8009808:	4648      	mov	r0, r9
 800980a:	aa2a      	add	r2, sp, #168	; 0xa8
 800980c:	f001 fff6 	bl	800b7fc <__ssprint_r>
 8009810:	2800      	cmp	r0, #0
 8009812:	f47f aadb 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009816:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
 800981a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800981e:	f7ff bb18 	b.w	8008e52 <_svfprintf_r+0x916>
 8009822:	4aa3      	ldr	r2, [pc, #652]	; (8009ab0 <_svfprintf_r+0x1574>)
 8009824:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009826:	920f      	str	r2, [sp, #60]	; 0x3c
 8009828:	3301      	adds	r3, #1
 800982a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800982c:	442c      	add	r4, r5
 800982e:	2b07      	cmp	r3, #7
 8009830:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8009834:	e9c8 2500 	strd	r2, r5, [r8]
 8009838:	f77f a82d 	ble.w	8008896 <_svfprintf_r+0x35a>
 800983c:	f7ff bbc2 	b.w	8008fc4 <_svfprintf_r+0xa88>
 8009840:	4651      	mov	r1, sl
 8009842:	4648      	mov	r0, r9
 8009844:	aa2a      	add	r2, sp, #168	; 0xa8
 8009846:	f001 ffd9 	bl	800b7fc <__ssprint_r>
 800984a:	2800      	cmp	r0, #0
 800984c:	f47f aabe 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009850:	783b      	ldrb	r3, [r7, #0]
 8009852:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8009854:	aa2d      	add	r2, sp, #180	; 0xb4
 8009856:	e6e4      	b.n	8009622 <_svfprintf_r+0x10e6>
 8009858:	4651      	mov	r1, sl
 800985a:	4648      	mov	r0, r9
 800985c:	aa2a      	add	r2, sp, #168	; 0xa8
 800985e:	f001 ffcd 	bl	800b7fc <__ssprint_r>
 8009862:	2800      	cmp	r0, #0
 8009864:	f47f aab2 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009868:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800986a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 800986e:	f7fe bffd 	b.w	800886c <_svfprintf_r+0x330>
 8009872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009874:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009876:	f853 2b04 	ldr.w	r2, [r3], #4
 800987a:	465f      	mov	r7, fp
 800987c:	6011      	str	r1, [r2, #0]
 800987e:	930e      	str	r3, [sp, #56]	; 0x38
 8009880:	f7ff b82a 	b.w	80088d8 <_svfprintf_r+0x39c>
 8009884:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009886:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009888:	3301      	adds	r3, #1
 800988a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800988c:	440c      	add	r4, r1
 800988e:	2b07      	cmp	r3, #7
 8009890:	e9c8 0100 	strd	r0, r1, [r8]
 8009894:	942c      	str	r4, [sp, #176]	; 0xb0
 8009896:	932b      	str	r3, [sp, #172]	; 0xac
 8009898:	f300 80ac 	bgt.w	80099f4 <_svfprintf_r+0x14b8>
 800989c:	f108 0808 	add.w	r8, r8, #8
 80098a0:	2a00      	cmp	r2, #0
 80098a2:	f6bf ab85 	bge.w	8008fb0 <_svfprintf_r+0xa74>
 80098a6:	4255      	negs	r5, r2
 80098a8:	3210      	adds	r2, #16
 80098aa:	f280 83d3 	bge.w	800a054 <_svfprintf_r+0x1b18>
 80098ae:	4651      	mov	r1, sl
 80098b0:	4a7f      	ldr	r2, [pc, #508]	; (8009ab0 <_svfprintf_r+0x1574>)
 80098b2:	46ca      	mov	sl, r9
 80098b4:	9709      	str	r7, [sp, #36]	; 0x24
 80098b6:	2610      	movs	r6, #16
 80098b8:	4617      	mov	r7, r2
 80098ba:	4689      	mov	r9, r1
 80098bc:	920f      	str	r2, [sp, #60]	; 0x3c
 80098be:	e005      	b.n	80098cc <_svfprintf_r+0x1390>
 80098c0:	f108 0808 	add.w	r8, r8, #8
 80098c4:	3d10      	subs	r5, #16
 80098c6:	2d10      	cmp	r5, #16
 80098c8:	f340 82aa 	ble.w	8009e20 <_svfprintf_r+0x18e4>
 80098cc:	3301      	adds	r3, #1
 80098ce:	3410      	adds	r4, #16
 80098d0:	2b07      	cmp	r3, #7
 80098d2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 80098d6:	e9c8 7600 	strd	r7, r6, [r8]
 80098da:	ddf1      	ble.n	80098c0 <_svfprintf_r+0x1384>
 80098dc:	4649      	mov	r1, r9
 80098de:	4650      	mov	r0, sl
 80098e0:	aa2a      	add	r2, sp, #168	; 0xa8
 80098e2:	f001 ff8b 	bl	800b7fc <__ssprint_r>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f040 825f 	bne.w	8009daa <_svfprintf_r+0x186e>
 80098ec:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 80098f0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 80098f4:	e7e6      	b.n	80098c4 <_svfprintf_r+0x1388>
 80098f6:	4638      	mov	r0, r7
 80098f8:	f7fe fc78 	bl	80081ec <strlen>
 80098fc:	462b      	mov	r3, r5
 80098fe:	4602      	mov	r2, r0
 8009900:	9509      	str	r5, [sp, #36]	; 0x24
 8009902:	f7ff b894 	b.w	8008a2e <_svfprintf_r+0x4f2>
 8009906:	9b07      	ldr	r3, [sp, #28]
 8009908:	2500      	movs	r5, #0
 800990a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800990e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009910:	f853 4b04 	ldr.w	r4, [r3], #4
 8009914:	930e      	str	r3, [sp, #56]	; 0x38
 8009916:	bf18      	it	ne
 8009918:	b2e4      	uxtbne	r4, r4
 800991a:	f7fe bf1b 	b.w	8008754 <_svfprintf_r+0x218>
 800991e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009920:	9b08      	ldr	r3, [sp, #32]
 8009922:	f852 4b04 	ldr.w	r4, [r2], #4
 8009926:	f413 7f00 	tst.w	r3, #512	; 0x200
 800992a:	f04f 0500 	mov.w	r5, #0
 800992e:	f04f 0301 	mov.w	r3, #1
 8009932:	920e      	str	r2, [sp, #56]	; 0x38
 8009934:	bf18      	it	ne
 8009936:	b2e4      	uxtbne	r4, r4
 8009938:	f7fe bf11 	b.w	800875e <_svfprintf_r+0x222>
 800993c:	9b07      	ldr	r3, [sp, #28]
 800993e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009944:	f853 4b04 	ldr.w	r4, [r3], #4
 8009948:	bf18      	it	ne
 800994a:	b264      	sxtbne	r4, r4
 800994c:	17e5      	asrs	r5, r4, #31
 800994e:	930e      	str	r3, [sp, #56]	; 0x38
 8009950:	4622      	mov	r2, r4
 8009952:	462b      	mov	r3, r5
 8009954:	f7fe bed4 	b.w	8008700 <_svfprintf_r+0x1c4>
 8009958:	9b07      	ldr	r3, [sp, #28]
 800995a:	2500      	movs	r5, #0
 800995c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009962:	f853 4b04 	ldr.w	r4, [r3], #4
 8009966:	930e      	str	r3, [sp, #56]	; 0x38
 8009968:	bf18      	it	ne
 800996a:	b2e4      	uxtbne	r4, r4
 800996c:	e5a6      	b.n	80094bc <_svfprintf_r+0xf80>
 800996e:	4b50      	ldr	r3, [pc, #320]	; (8009ab0 <_svfprintf_r+0x1574>)
 8009970:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009972:	930f      	str	r3, [sp, #60]	; 0x3c
 8009974:	f7ff ba15 	b.w	8008da2 <_svfprintf_r+0x866>
 8009978:	232d      	movs	r3, #45	; 0x2d
 800997a:	461a      	mov	r2, r3
 800997c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8009980:	f7fe bfee 	b.w	8008960 <_svfprintf_r+0x424>
 8009984:	464a      	mov	r2, r9
 8009986:	46d1      	mov	r9, sl
 8009988:	4692      	mov	sl, r2
 800998a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800998c:	3301      	adds	r3, #1
 800998e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009990:	442c      	add	r4, r5
 8009992:	2b07      	cmp	r3, #7
 8009994:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8009998:	e9c8 2500 	strd	r2, r5, [r8]
 800999c:	dc3b      	bgt.n	8009a16 <_svfprintf_r+0x14da>
 800999e:	f108 0808 	add.w	r8, r8, #8
 80099a2:	f7ff bb8c 	b.w	80090be <_svfprintf_r+0xb82>
 80099a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099aa:	1aff      	subs	r7, r7, r3
 80099ac:	461a      	mov	r2, r3
 80099ae:	4638      	mov	r0, r7
 80099b0:	f001 fef0 	bl	800b794 <strncpy>
 80099b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80099b8:	b10b      	cbz	r3, 80099be <_svfprintf_r+0x1482>
 80099ba:	f108 0801 	add.w	r8, r8, #1
 80099be:	220a      	movs	r2, #10
 80099c0:	2300      	movs	r3, #0
 80099c2:	4620      	mov	r0, r4
 80099c4:	4629      	mov	r1, r5
 80099c6:	f003 f9cb 	bl	800cd60 <__aeabi_uldivmod>
 80099ca:	f04f 0b00 	mov.w	fp, #0
 80099ce:	e6a6      	b.n	800971e <_svfprintf_r+0x11e2>
 80099d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80099d2:	18bd      	adds	r5, r7, r2
 80099d4:	1bad      	subs	r5, r5, r6
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	429d      	cmp	r5, r3
 80099da:	bfa8      	it	ge
 80099dc:	461d      	movge	r5, r3
 80099de:	f7ff bba0 	b.w	8009122 <_svfprintf_r+0xbe6>
 80099e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80099e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ea:	465f      	mov	r7, fp
 80099ec:	8011      	strh	r1, [r2, #0]
 80099ee:	930e      	str	r3, [sp, #56]	; 0x38
 80099f0:	f7fe bf72 	b.w	80088d8 <_svfprintf_r+0x39c>
 80099f4:	4651      	mov	r1, sl
 80099f6:	4648      	mov	r0, r9
 80099f8:	aa2a      	add	r2, sp, #168	; 0xa8
 80099fa:	f001 feff 	bl	800b7fc <__ssprint_r>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f47f a9e4 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009a04:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8009a08:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a0a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8009a0e:	e747      	b.n	80098a0 <_svfprintf_r+0x1364>
 8009a10:	2306      	movs	r3, #6
 8009a12:	9309      	str	r3, [sp, #36]	; 0x24
 8009a14:	e482      	b.n	800931c <_svfprintf_r+0xde0>
 8009a16:	4651      	mov	r1, sl
 8009a18:	4648      	mov	r0, r9
 8009a1a:	aa2a      	add	r2, sp, #168	; 0xa8
 8009a1c:	f001 feee 	bl	800b7fc <__ssprint_r>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f47f a9d3 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009a26:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009a28:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8009a2c:	f7ff bb47 	b.w	80090be <_svfprintf_r+0xb82>
 8009a30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a32:	971a      	str	r7, [sp, #104]	; 0x68
 8009a34:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009a36:	4690      	mov	r8, r2
 8009a38:	18fb      	adds	r3, r7, r3
 8009a3a:	429e      	cmp	r6, r3
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	bf28      	it	cs
 8009a40:	461a      	movcs	r2, r3
 8009a42:	4604      	mov	r4, r0
 8009a44:	4616      	mov	r6, r2
 8009a46:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8009a4a:	f7ff bb3f 	b.w	80090cc <_svfprintf_r+0xb90>
 8009a4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a50:	1cd8      	adds	r0, r3, #3
 8009a52:	9310      	str	r3, [sp, #64]	; 0x40
 8009a54:	db02      	blt.n	8009a5c <_svfprintf_r+0x1520>
 8009a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	dd04      	ble.n	8009a66 <_svfprintf_r+0x152a>
 8009a5c:	3e02      	subs	r6, #2
 8009a5e:	f026 0320 	bic.w	r3, r6, #32
 8009a62:	9308      	str	r3, [sp, #32]
 8009a64:	e49b      	b.n	800939e <_svfprintf_r+0xe62>
 8009a66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a68:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009a6a:	428b      	cmp	r3, r1
 8009a6c:	f2c0 817a 	blt.w	8009d64 <_svfprintf_r+0x1828>
 8009a70:	07ea      	lsls	r2, r5, #31
 8009a72:	f140 8283 	bpl.w	8009f7c <_svfprintf_r+0x1a40>
 8009a76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a78:	4413      	add	r3, r2
 8009a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a7c:	056e      	lsls	r6, r5, #21
 8009a7e:	f140 8277 	bpl.w	8009f70 <_svfprintf_r+0x1a34>
 8009a82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f300 8210 	bgt.w	8009eaa <_svfprintf_r+0x196e>
 8009a8a:	2667      	movs	r6, #103	; 0x67
 8009a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a92:	9308      	str	r3, [sp, #32]
 8009a94:	2300      	movs	r3, #0
 8009a96:	9312      	str	r3, [sp, #72]	; 0x48
 8009a98:	9316      	str	r3, [sp, #88]	; 0x58
 8009a9a:	e4e4      	b.n	8009466 <_svfprintf_r+0xf2a>
 8009a9c:	222d      	movs	r2, #45	; 0x2d
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 8009aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa6:	f7fe bf70 	b.w	800898a <_svfprintf_r+0x44e>
 8009aaa:	bf00      	nop
 8009aac:	0801265c 	.word	0x0801265c
 8009ab0:	08012670 	.word	0x08012670
 8009ab4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	f4bf ac65 	bcs.w	8009386 <_svfprintf_r+0xe4a>
 8009abc:	2130      	movs	r1, #48	; 0x30
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	9228      	str	r2, [sp, #160]	; 0xa0
 8009ac2:	7019      	strb	r1, [r3, #0]
 8009ac4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009ac6:	429c      	cmp	r4, r3
 8009ac8:	d8f9      	bhi.n	8009abe <_svfprintf_r+0x1582>
 8009aca:	e45c      	b.n	8009386 <_svfprintf_r+0xe4a>
 8009acc:	4651      	mov	r1, sl
 8009ace:	4648      	mov	r0, r9
 8009ad0:	aa2a      	add	r2, sp, #168	; 0xa8
 8009ad2:	f001 fe93 	bl	800b7fc <__ssprint_r>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f47f a978 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009adc:	783b      	ldrb	r3, [r7, #0]
 8009ade:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8009ae0:	aa2d      	add	r2, sp, #180	; 0xb4
 8009ae2:	441e      	add	r6, r3
 8009ae4:	e5a4      	b.n	8009630 <_svfprintf_r+0x10f4>
 8009ae6:	4651      	mov	r1, sl
 8009ae8:	4648      	mov	r0, r9
 8009aea:	aa2a      	add	r2, sp, #168	; 0xa8
 8009aec:	f001 fe86 	bl	800b7fc <__ssprint_r>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	f47f a96b 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009af6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009af8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8009afc:	f7ff bad7 	b.w	80090ae <_svfprintf_r+0xb72>
 8009b00:	4651      	mov	r1, sl
 8009b02:	4648      	mov	r0, r9
 8009b04:	aa2a      	add	r2, sp, #168	; 0xa8
 8009b06:	f001 fe79 	bl	800b7fc <__ssprint_r>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	f47f a95e 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009b10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009b12:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009b14:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8009b18:	f7ff baee 	b.w	80090f8 <_svfprintf_r+0xbbc>
 8009b1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009b1e:	a928      	add	r1, sp, #160	; 0xa0
 8009b20:	e9cd 0400 	strd	r0, r4, [sp]
 8009b24:	9104      	str	r1, [sp, #16]
 8009b26:	a825      	add	r0, sp, #148	; 0x94
 8009b28:	a924      	add	r1, sp, #144	; 0x90
 8009b2a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8009b2e:	4648      	mov	r0, r9
 8009b30:	f000 fb3e 	bl	800a1b0 <_dtoa_r>
 8009b34:	2d47      	cmp	r5, #71	; 0x47
 8009b36:	4607      	mov	r7, r0
 8009b38:	d119      	bne.n	8009b6e <_svfprintf_r+0x1632>
 8009b3a:	9d07      	ldr	r5, [sp, #28]
 8009b3c:	462b      	mov	r3, r5
 8009b3e:	07db      	lsls	r3, r3, #31
 8009b40:	f100 812a 	bmi.w	8009d98 <_svfprintf_r+0x185c>
 8009b44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009b48:	9207      	str	r2, [sp, #28]
 8009b4a:	2247      	movs	r2, #71	; 0x47
 8009b4c:	9208      	str	r2, [sp, #32]
 8009b4e:	e41a      	b.n	8009386 <_svfprintf_r+0xe4a>
 8009b50:	2003      	movs	r0, #3
 8009b52:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009b54:	a928      	add	r1, sp, #160	; 0xa0
 8009b56:	e9cd 0400 	strd	r0, r4, [sp]
 8009b5a:	9104      	str	r1, [sp, #16]
 8009b5c:	a825      	add	r0, sp, #148	; 0x94
 8009b5e:	a924      	add	r1, sp, #144	; 0x90
 8009b60:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8009b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b66:	4648      	mov	r0, r9
 8009b68:	f000 fb22 	bl	800a1b0 <_dtoa_r>
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b70:	2d46      	cmp	r5, #70	; 0x46
 8009b72:	eb07 0403 	add.w	r4, r7, r3
 8009b76:	f47f abf9 	bne.w	800936c <_svfprintf_r+0xe30>
 8009b7a:	783b      	ldrb	r3, [r7, #0]
 8009b7c:	2b30      	cmp	r3, #48	; 0x30
 8009b7e:	f000 821c 	beq.w	8009fba <_svfprintf_r+0x1a7e>
 8009b82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b86:	9d07      	ldr	r5, [sp, #28]
 8009b88:	441c      	add	r4, r3
 8009b8a:	9207      	str	r2, [sp, #28]
 8009b8c:	f7ff bbf1 	b.w	8009372 <_svfprintf_r+0xe36>
 8009b90:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
 8009b94:	f7ff b9c3 	b.w	8008f1e <_svfprintf_r+0x9e2>
 8009b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b9a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8009b9e:	9308      	str	r3, [sp, #32]
 8009ba0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ba2:	9009      	str	r0, [sp, #36]	; 0x24
 8009ba4:	940e      	str	r4, [sp, #56]	; 0x38
 8009ba6:	9012      	str	r0, [sp, #72]	; 0x48
 8009ba8:	9016      	str	r0, [sp, #88]	; 0x58
 8009baa:	9010      	str	r0, [sp, #64]	; 0x40
 8009bac:	f7fe beea 	b.w	8008984 <_svfprintf_r+0x448>
 8009bb0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009bb2:	2a00      	cmp	r2, #0
 8009bb4:	9210      	str	r2, [sp, #64]	; 0x40
 8009bb6:	f340 821b 	ble.w	8009ff0 <_svfprintf_r+0x1ab4>
 8009bba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bbc:	f005 0301 	and.w	r3, r5, #1
 8009bc0:	430b      	orrs	r3, r1
 8009bc2:	f040 819a 	bne.w	8009efa <_svfprintf_r+0x19be>
 8009bc6:	2666      	movs	r6, #102	; 0x66
 8009bc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bca:	930c      	str	r3, [sp, #48]	; 0x30
 8009bcc:	056a      	lsls	r2, r5, #21
 8009bce:	f100 816d 	bmi.w	8009eac <_svfprintf_r+0x1970>
 8009bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009bd8:	9308      	str	r3, [sp, #32]
 8009bda:	e75b      	b.n	8009a94 <_svfprintf_r+0x1558>
 8009bdc:	4651      	mov	r1, sl
 8009bde:	4648      	mov	r0, r9
 8009be0:	aa2a      	add	r2, sp, #168	; 0xa8
 8009be2:	f001 fe0b 	bl	800b7fc <__ssprint_r>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	f47f a8f0 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009bec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009bee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bf0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009bf2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	f7ff ba93 	b.w	8009122 <_svfprintf_r+0xbe6>
 8009bfc:	2330      	movs	r3, #48	; 0x30
 8009bfe:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8009c02:	2358      	movs	r3, #88	; 0x58
 8009c04:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
 8009c08:	9b07      	ldr	r3, [sp, #28]
 8009c0a:	f043 0402 	orr.w	r4, r3, #2
 8009c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c10:	2b63      	cmp	r3, #99	; 0x63
 8009c12:	f300 80f2 	bgt.w	8009dfa <_svfprintf_r+0x18be>
 8009c16:	2300      	movs	r3, #0
 8009c18:	af3d      	add	r7, sp, #244	; 0xf4
 8009c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c1c:	9b07      	ldr	r3, [sp, #28]
 8009c1e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8009c22:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8009c26:	9312      	str	r3, [sp, #72]	; 0x48
 8009c28:	4613      	mov	r3, r2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f026 0520 	bic.w	r5, r6, #32
 8009c30:	9407      	str	r4, [sp, #28]
 8009c32:	f2c0 808d 	blt.w	8009d50 <_svfprintf_r+0x1814>
 8009c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c38:	2300      	movs	r3, #0
 8009c3a:	9508      	str	r5, [sp, #32]
 8009c3c:	910c      	str	r1, [sp, #48]	; 0x30
 8009c3e:	931e      	str	r3, [sp, #120]	; 0x78
 8009c40:	2e61      	cmp	r6, #97	; 0x61
 8009c42:	f000 817d 	beq.w	8009f40 <_svfprintf_r+0x1a04>
 8009c46:	2e41      	cmp	r6, #65	; 0x41
 8009c48:	f47f ab77 	bne.w	800933a <_svfprintf_r+0xdfe>
 8009c4c:	aa24      	add	r2, sp, #144	; 0x90
 8009c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009c50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c52:	f001 fd67 	bl	800b724 <frexp>
 8009c56:	2200      	movs	r2, #0
 8009c58:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009c5c:	f002 fab4 	bl	800c1c8 <__aeabi_dmul>
 8009c60:	4604      	mov	r4, r0
 8009c62:	460d      	mov	r5, r1
 8009c64:	2200      	movs	r2, #0
 8009c66:	2300      	movs	r3, #0
 8009c68:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8009c6c:	f002 fd14 	bl	800c698 <__aeabi_dcmpeq>
 8009c70:	b108      	cbz	r0, 8009c76 <_svfprintf_r+0x173a>
 8009c72:	2301      	movs	r3, #1
 8009c74:	9324      	str	r3, [sp, #144]	; 0x90
 8009c76:	4bae      	ldr	r3, [pc, #696]	; (8009f30 <_svfprintf_r+0x19f4>)
 8009c78:	930c      	str	r3, [sp, #48]	; 0x30
 8009c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8009c80:	3b01      	subs	r3, #1
 8009c82:	9613      	str	r6, [sp, #76]	; 0x4c
 8009c84:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8009c88:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
 8009c8c:	9721      	str	r7, [sp, #132]	; 0x84
 8009c8e:	46ba      	mov	sl, r7
 8009c90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009c94:	4699      	mov	r9, r3
 8009c96:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8009c9a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
 8009c9e:	e006      	b.n	8009cae <_svfprintf_r+0x1772>
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f002 fcf8 	bl	800c698 <__aeabi_dcmpeq>
 8009ca8:	f109 39ff 	add.w	r9, r9, #4294967295
 8009cac:	b9e8      	cbnz	r0, 8009cea <_svfprintf_r+0x17ae>
 8009cae:	2200      	movs	r2, #0
 8009cb0:	4ba0      	ldr	r3, [pc, #640]	; (8009f34 <_svfprintf_r+0x19f8>)
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	f002 fa87 	bl	800c1c8 <__aeabi_dmul>
 8009cba:	460d      	mov	r5, r1
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	f002 fd33 	bl	800c728 <__aeabi_d2iz>
 8009cc2:	4680      	mov	r8, r0
 8009cc4:	f002 fa16 	bl	800c0f4 <__aeabi_i2d>
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4602      	mov	r2, r0
 8009ccc:	4629      	mov	r1, r5
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f002 f8c2 	bl	800be58 <__aeabi_dsub>
 8009cd4:	f81b 3008 	ldrb.w	r3, [fp, r8]
 8009cd8:	f1b9 3fff 	cmp.w	r9, #4294967295
 8009cdc:	4655      	mov	r5, sl
 8009cde:	4606      	mov	r6, r0
 8009ce0:	460f      	mov	r7, r1
 8009ce2:	464c      	mov	r4, r9
 8009ce4:	f80a 3b01 	strb.w	r3, [sl], #1
 8009ce8:	d1da      	bne.n	8009ca0 <_svfprintf_r+0x1764>
 8009cea:	4630      	mov	r0, r6
 8009cec:	4639      	mov	r1, r7
 8009cee:	2200      	movs	r2, #0
 8009cf0:	4b91      	ldr	r3, [pc, #580]	; (8009f38 <_svfprintf_r+0x19fc>)
 8009cf2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8009cf6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009cf8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8009cfc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d04:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
 8009d08:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009d0c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8009d0e:	f002 fceb 	bl	800c6e8 <__aeabi_dcmpgt>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d155      	bne.n	8009dc2 <_svfprintf_r+0x1886>
 8009d16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4b86      	ldr	r3, [pc, #536]	; (8009f38 <_svfprintf_r+0x19fc>)
 8009d1e:	f002 fcbb 	bl	800c698 <__aeabi_dcmpeq>
 8009d22:	b110      	cbz	r0, 8009d2a <_svfprintf_r+0x17ee>
 8009d24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d26:	07db      	lsls	r3, r3, #31
 8009d28:	d44b      	bmi.n	8009dc2 <_svfprintf_r+0x1886>
 8009d2a:	2c00      	cmp	r4, #0
 8009d2c:	db08      	blt.n	8009d40 <_svfprintf_r+0x1804>
 8009d2e:	2230      	movs	r2, #48	; 0x30
 8009d30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d32:	1c63      	adds	r3, r4, #1
 8009d34:	440b      	add	r3, r1
 8009d36:	f801 2b01 	strb.w	r2, [r1], #1
 8009d3a:	428b      	cmp	r3, r1
 8009d3c:	d1fb      	bne.n	8009d36 <_svfprintf_r+0x17fa>
 8009d3e:	910f      	str	r1, [sp, #60]	; 0x3c
 8009d40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d42:	9d07      	ldr	r5, [sp, #28]
 8009d44:	1bdb      	subs	r3, r3, r7
 8009d46:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d4a:	9307      	str	r3, [sp, #28]
 8009d4c:	f7ff bb1d 	b.w	800938a <_svfprintf_r+0xe4e>
 8009d50:	9508      	str	r5, [sp, #32]
 8009d52:	232d      	movs	r3, #45	; 0x2d
 8009d54:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8009d58:	931e      	str	r3, [sp, #120]	; 0x78
 8009d5a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8009d5e:	910c      	str	r1, [sp, #48]	; 0x30
 8009d60:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d62:	e76d      	b.n	8009c40 <_svfprintf_r+0x1704>
 8009d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d68:	189a      	adds	r2, r3, r2
 8009d6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d6c:	920c      	str	r2, [sp, #48]	; 0x30
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f340 811a 	ble.w	8009fa8 <_svfprintf_r+0x1a6c>
 8009d74:	2667      	movs	r6, #103	; 0x67
 8009d76:	e729      	b.n	8009bcc <_svfprintf_r+0x1690>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7c:	f7fe bc2b 	b.w	80085d6 <_svfprintf_r+0x9a>
 8009d80:	4648      	mov	r0, r9
 8009d82:	4651      	mov	r1, sl
 8009d84:	aa2a      	add	r2, sp, #168	; 0xa8
 8009d86:	f001 fd39 	bl	800b7fc <__ssprint_r>
 8009d8a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009d8e:	f7fe bdae 	b.w	80088ee <_svfprintf_r+0x3b2>
 8009d92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009d94:	f7ff b95f 	b.w	8009056 <_svfprintf_r+0xb1a>
 8009d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d9a:	9d07      	ldr	r5, [sp, #28]
 8009d9c:	18fc      	adds	r4, r7, r3
 8009d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009da0:	9307      	str	r3, [sp, #28]
 8009da2:	2347      	movs	r3, #71	; 0x47
 8009da4:	9308      	str	r3, [sp, #32]
 8009da6:	f7ff bae4 	b.w	8009372 <_svfprintf_r+0xe36>
 8009daa:	46cb      	mov	fp, r9
 8009dac:	46d1      	mov	r9, sl
 8009dae:	f7ff b80e 	b.w	8008dce <_svfprintf_r+0x892>
 8009db2:	46d1      	mov	r9, sl
 8009db4:	f7ff b80b 	b.w	8008dce <_svfprintf_r+0x892>
 8009db8:	4b60      	ldr	r3, [pc, #384]	; (8009f3c <_svfprintf_r+0x1a00>)
 8009dba:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009dbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dbe:	f7fe bfb7 	b.w	8008d30 <_svfprintf_r+0x7f4>
 8009dc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009dc6:	9528      	str	r5, [sp, #160]	; 0xa0
 8009dc8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8009dcc:	7bc9      	ldrb	r1, [r1, #15]
 8009dce:	428a      	cmp	r2, r1
 8009dd0:	f040 812a 	bne.w	800a028 <_svfprintf_r+0x1aec>
 8009dd4:	2030      	movs	r0, #48	; 0x30
 8009dd6:	f803 0c01 	strb.w	r0, [r3, #-1]
 8009dda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009ddc:	1e5a      	subs	r2, r3, #1
 8009dde:	9228      	str	r2, [sp, #160]	; 0xa0
 8009de0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8009de4:	4291      	cmp	r1, r2
 8009de6:	d0f6      	beq.n	8009dd6 <_svfprintf_r+0x189a>
 8009de8:	2a39      	cmp	r2, #57	; 0x39
 8009dea:	bf0b      	itete	eq
 8009dec:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
 8009dee:	3201      	addne	r2, #1
 8009df0:	7a92      	ldrbeq	r2, [r2, #10]
 8009df2:	b2d2      	uxtbne	r2, r2
 8009df4:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009df8:	e7a2      	b.n	8009d40 <_svfprintf_r+0x1804>
 8009dfa:	4648      	mov	r0, r9
 8009dfc:	1c59      	adds	r1, r3, #1
 8009dfe:	f7fd fd97 	bl	8007930 <_malloc_r>
 8009e02:	4607      	mov	r7, r0
 8009e04:	2800      	cmp	r0, #0
 8009e06:	f000 811d 	beq.w	800a044 <_svfprintf_r+0x1b08>
 8009e0a:	900d      	str	r0, [sp, #52]	; 0x34
 8009e0c:	e706      	b.n	8009c1c <_svfprintf_r+0x16e0>
 8009e0e:	2330      	movs	r3, #48	; 0x30
 8009e10:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8009e14:	2378      	movs	r3, #120	; 0x78
 8009e16:	e6f5      	b.n	8009c04 <_svfprintf_r+0x16c8>
 8009e18:	9b07      	ldr	r3, [sp, #28]
 8009e1a:	9308      	str	r3, [sp, #32]
 8009e1c:	f7ff b894 	b.w	8008f48 <_svfprintf_r+0xa0c>
 8009e20:	464a      	mov	r2, r9
 8009e22:	46d1      	mov	r9, sl
 8009e24:	4692      	mov	sl, r2
 8009e26:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e28:	3301      	adds	r3, #1
 8009e2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e2c:	442c      	add	r4, r5
 8009e2e:	2b07      	cmp	r3, #7
 8009e30:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8009e34:	e9c8 2500 	strd	r2, r5, [r8]
 8009e38:	f77f a8b8 	ble.w	8008fac <_svfprintf_r+0xa70>
 8009e3c:	4651      	mov	r1, sl
 8009e3e:	4648      	mov	r0, r9
 8009e40:	aa2a      	add	r2, sp, #168	; 0xa8
 8009e42:	f001 fcdb 	bl	800b7fc <__ssprint_r>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f47e afc0 	bne.w	8008dcc <_svfprintf_r+0x890>
 8009e4c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8009e50:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
 8009e54:	f7ff b8ac 	b.w	8008fb0 <_svfprintf_r+0xa74>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	bf08      	it	eq
 8009e5c:	2301      	moveq	r3, #1
 8009e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e60:	9b07      	ldr	r3, [sp, #28]
 8009e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e66:	9312      	str	r3, [sp, #72]	; 0x48
 8009e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	930c      	str	r3, [sp, #48]	; 0x30
 8009e6e:	f2c0 80bd 	blt.w	8009fec <_svfprintf_r+0x1ab0>
 8009e72:	2402      	movs	r4, #2
 8009e74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e76:	a828      	add	r0, sp, #160	; 0xa0
 8009e78:	aa25      	add	r2, sp, #148	; 0x94
 8009e7a:	ab24      	add	r3, sp, #144	; 0x90
 8009e7c:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8009e80:	e9cd 4500 	strd	r4, r5, [sp]
 8009e84:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8009e88:	9302      	str	r3, [sp, #8]
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	4648      	mov	r0, r9
 8009e90:	911e      	str	r1, [sp, #120]	; 0x78
 8009e92:	f000 f98d 	bl	800a1b0 <_dtoa_r>
 8009e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e98:	4607      	mov	r7, r0
 8009e9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e9e:	940c      	str	r4, [sp, #48]	; 0x30
 8009ea0:	930d      	str	r3, [sp, #52]	; 0x34
 8009ea2:	e64a      	b.n	8009b3a <_svfprintf_r+0x15fe>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ea8:	e753      	b.n	8009d52 <_svfprintf_r+0x1816>
 8009eaa:	2667      	movs	r6, #103	; 0x67
 8009eac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009eae:	780b      	ldrb	r3, [r1, #0]
 8009eb0:	2bff      	cmp	r3, #255	; 0xff
 8009eb2:	f000 80de 	beq.w	800a072 <_svfprintf_r+0x1b36>
 8009eb6:	2400      	movs	r4, #0
 8009eb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009eba:	4620      	mov	r0, r4
 8009ebc:	e003      	b.n	8009ec6 <_svfprintf_r+0x198a>
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	3101      	adds	r1, #1
 8009ec2:	2bff      	cmp	r3, #255	; 0xff
 8009ec4:	d008      	beq.n	8009ed8 <_svfprintf_r+0x199c>
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	da06      	bge.n	8009ed8 <_svfprintf_r+0x199c>
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	784b      	ldrb	r3, [r1, #1]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f5      	bne.n	8009ebe <_svfprintf_r+0x1982>
 8009ed2:	780b      	ldrb	r3, [r1, #0]
 8009ed4:	3401      	adds	r4, #1
 8009ed6:	e7f4      	b.n	8009ec2 <_svfprintf_r+0x1986>
 8009ed8:	911a      	str	r1, [sp, #104]	; 0x68
 8009eda:	9210      	str	r2, [sp, #64]	; 0x40
 8009edc:	9016      	str	r0, [sp, #88]	; 0x58
 8009ede:	9412      	str	r4, [sp, #72]	; 0x48
 8009ee0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ee2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ee4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ee6:	4413      	add	r3, r2
 8009ee8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009eea:	fb02 1303 	mla	r3, r2, r3, r1
 8009eee:	930c      	str	r3, [sp, #48]	; 0x30
 8009ef0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ef4:	9308      	str	r3, [sp, #32]
 8009ef6:	f7ff bab6 	b.w	8009466 <_svfprintf_r+0xf2a>
 8009efa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009efc:	2666      	movs	r6, #102	; 0x66
 8009efe:	18d3      	adds	r3, r2, r3
 8009f00:	4419      	add	r1, r3
 8009f02:	910c      	str	r1, [sp, #48]	; 0x30
 8009f04:	e662      	b.n	8009bcc <_svfprintf_r+0x1690>
 8009f06:	f106 020f 	add.w	r2, r6, #15
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	b2d2      	uxtb	r2, r2
 8009f0e:	f7ff ba4f 	b.w	80093b0 <_svfprintf_r+0xe74>
 8009f12:	2900      	cmp	r1, #0
 8009f14:	d167      	bne.n	8009fe6 <_svfprintf_r+0x1aaa>
 8009f16:	2230      	movs	r2, #48	; 0x30
 8009f18:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
 8009f1c:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
 8009f20:	3330      	adds	r3, #48	; 0x30
 8009f22:	f802 3b01 	strb.w	r3, [r2], #1
 8009f26:	ab26      	add	r3, sp, #152	; 0x98
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f2c:	f7ff ba83 	b.w	8009436 <_svfprintf_r+0xefa>
 8009f30:	08012640 	.word	0x08012640
 8009f34:	40300000 	.word	0x40300000
 8009f38:	3fe00000 	.word	0x3fe00000
 8009f3c:	08012670 	.word	0x08012670
 8009f40:	aa24      	add	r2, sp, #144	; 0x90
 8009f42:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f46:	f001 fbed 	bl	800b724 <frexp>
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009f50:	f002 f93a 	bl	800c1c8 <__aeabi_dmul>
 8009f54:	4604      	mov	r4, r0
 8009f56:	460d      	mov	r5, r1
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8009f60:	f002 fb9a 	bl	800c698 <__aeabi_dcmpeq>
 8009f64:	b108      	cbz	r0, 8009f6a <_svfprintf_r+0x1a2e>
 8009f66:	2301      	movs	r3, #1
 8009f68:	9324      	str	r3, [sp, #144]	; 0x90
 8009f6a:	4b44      	ldr	r3, [pc, #272]	; (800a07c <_svfprintf_r+0x1b40>)
 8009f6c:	930c      	str	r3, [sp, #48]	; 0x30
 8009f6e:	e684      	b.n	8009c7a <_svfprintf_r+0x173e>
 8009f70:	2667      	movs	r6, #103	; 0x67
 8009f72:	e62e      	b.n	8009bd2 <_svfprintf_r+0x1696>
 8009f74:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009f78:	f7fe bcb9 	b.w	80088ee <_svfprintf_r+0x3b2>
 8009f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f80:	e57c      	b.n	8009a7c <_svfprintf_r+0x1540>
 8009f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f84:	2003      	movs	r0, #3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfb8      	it	lt
 8009f8a:	232d      	movlt	r3, #45	; 0x2d
 8009f8c:	f04f 0100 	mov.w	r1, #0
 8009f90:	bfba      	itte	lt
 8009f92:	461a      	movlt	r2, r3
 8009f94:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
 8009f98:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
 8009f9c:	4f38      	ldr	r7, [pc, #224]	; (800a080 <_svfprintf_r+0x1b44>)
 8009f9e:	4b39      	ldr	r3, [pc, #228]	; (800a084 <_svfprintf_r+0x1b48>)
 8009fa0:	9008      	str	r0, [sp, #32]
 8009fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8009fa4:	f7fe bce2 	b.w	800896c <_svfprintf_r+0x430>
 8009fa8:	f1c3 0301 	rsb	r3, r3, #1
 8009fac:	441a      	add	r2, r3
 8009fae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009fb2:	2667      	movs	r6, #103	; 0x67
 8009fb4:	920c      	str	r2, [sp, #48]	; 0x30
 8009fb6:	9308      	str	r3, [sp, #32]
 8009fb8:	e56c      	b.n	8009a94 <_svfprintf_r+0x1558>
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009fc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009fc2:	f002 fb69 	bl	800c698 <__aeabi_dcmpeq>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	f47f addb 	bne.w	8009b82 <_svfprintf_r+0x1646>
 8009fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fce:	f1c3 0301 	rsb	r3, r3, #1
 8009fd2:	9324      	str	r3, [sp, #144]	; 0x90
 8009fd4:	e5d6      	b.n	8009b84 <_svfprintf_r+0x1648>
 8009fd6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8009fd8:	f7ff bb59 	b.w	800968e <_svfprintf_r+0x1152>
 8009fdc:	07e9      	lsls	r1, r5, #31
 8009fde:	f57f aa35 	bpl.w	800944c <_svfprintf_r+0xf10>
 8009fe2:	f7ff ba2f 	b.w	8009444 <_svfprintf_r+0xf08>
 8009fe6:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 8009fea:	e799      	b.n	8009f20 <_svfprintf_r+0x19e4>
 8009fec:	900d      	str	r0, [sp, #52]	; 0x34
 8009fee:	e6b0      	b.n	8009d52 <_svfprintf_r+0x1816>
 8009ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ff2:	f005 0501 	and.w	r5, r5, #1
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	432b      	orrs	r3, r5
 8009ffa:	d104      	bne.n	800a006 <_svfprintf_r+0x1aca>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	2666      	movs	r6, #102	; 0x66
 800a000:	9308      	str	r3, [sp, #32]
 800a002:	930c      	str	r3, [sp, #48]	; 0x30
 800a004:	e546      	b.n	8009a94 <_svfprintf_r+0x1558>
 800a006:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a008:	2666      	movs	r6, #102	; 0x66
 800a00a:	3301      	adds	r3, #1
 800a00c:	441a      	add	r2, r3
 800a00e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a012:	920c      	str	r2, [sp, #48]	; 0x30
 800a014:	9308      	str	r3, [sp, #32]
 800a016:	e53d      	b.n	8009a94 <_svfprintf_r+0x1558>
 800a018:	4b1b      	ldr	r3, [pc, #108]	; (800a088 <_svfprintf_r+0x1b4c>)
 800a01a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a01c:	f7ff bbe9 	b.w	80097f2 <_svfprintf_r+0x12b6>
 800a020:	4a19      	ldr	r2, [pc, #100]	; (800a088 <_svfprintf_r+0x1b4c>)
 800a022:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800a024:	920f      	str	r2, [sp, #60]	; 0x3c
 800a026:	e4b1      	b.n	800998c <_svfprintf_r+0x1450>
 800a028:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a02a:	e6dd      	b.n	8009de8 <_svfprintf_r+0x18ac>
 800a02c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a02e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800a032:	f853 0b04 	ldr.w	r0, [r3], #4
 800a036:	4693      	mov	fp, r2
 800a038:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 800a03c:	9009      	str	r0, [sp, #36]	; 0x24
 800a03e:	930e      	str	r3, [sp, #56]	; 0x38
 800a040:	f7fe bac7 	b.w	80085d2 <_svfprintf_r+0x96>
 800a044:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800a048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a04c:	f8aa 300c 	strh.w	r3, [sl, #12]
 800a050:	f7fe bc4d 	b.w	80088ee <_svfprintf_r+0x3b2>
 800a054:	4a0c      	ldr	r2, [pc, #48]	; (800a088 <_svfprintf_r+0x1b4c>)
 800a056:	920f      	str	r2, [sp, #60]	; 0x3c
 800a058:	e6e6      	b.n	8009e28 <_svfprintf_r+0x18ec>
 800a05a:	230c      	movs	r3, #12
 800a05c:	f04f 32ff 	mov.w	r2, #4294967295
 800a060:	f8c9 3000 	str.w	r3, [r9]
 800a064:	920a      	str	r2, [sp, #40]	; 0x28
 800a066:	f7fe bc49 	b.w	80088fc <_svfprintf_r+0x3c0>
 800a06a:	2302      	movs	r3, #2
 800a06c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a06e:	f7ff b9e2 	b.w	8009436 <_svfprintf_r+0xefa>
 800a072:	2300      	movs	r3, #0
 800a074:	9312      	str	r3, [sp, #72]	; 0x48
 800a076:	9316      	str	r3, [sp, #88]	; 0x58
 800a078:	e732      	b.n	8009ee0 <_svfprintf_r+0x19a4>
 800a07a:	bf00      	nop
 800a07c:	0801262c 	.word	0x0801262c
 800a080:	08012624 	.word	0x08012624
 800a084:	08012628 	.word	0x08012628
 800a088:	08012670 	.word	0x08012670

0800a08c <quorem>:
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	6903      	ldr	r3, [r0, #16]
 800a092:	690d      	ldr	r5, [r1, #16]
 800a094:	b083      	sub	sp, #12
 800a096:	42ab      	cmp	r3, r5
 800a098:	f2c0 8084 	blt.w	800a1a4 <quorem+0x118>
 800a09c:	3d01      	subs	r5, #1
 800a09e:	f101 0614 	add.w	r6, r1, #20
 800a0a2:	f100 0914 	add.w	r9, r0, #20
 800a0a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0aa:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	468e      	mov	lr, r1
 800a0b2:	00a9      	lsls	r1, r5, #2
 800a0b4:	9100      	str	r1, [sp, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	eb09 0185 	add.w	r1, r9, r5, lsl #2
 800a0bc:	4682      	mov	sl, r0
 800a0be:	fbb2 f7f3 	udiv	r7, r2, r3
 800a0c2:	eb06 0885 	add.w	r8, r6, r5, lsl #2
 800a0c6:	9101      	str	r1, [sp, #4]
 800a0c8:	d337      	bcc.n	800a13a <quorem+0xae>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	46b4      	mov	ip, r6
 800a0ce:	4614      	mov	r4, r2
 800a0d0:	4648      	mov	r0, r9
 800a0d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0d6:	6801      	ldr	r1, [r0, #0]
 800a0d8:	fa1f fb83 	uxth.w	fp, r3
 800a0dc:	fb07 220b 	mla	r2, r7, fp, r2
 800a0e0:	0c1b      	lsrs	r3, r3, #16
 800a0e2:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a0e6:	fb07 bb03 	mla	fp, r7, r3, fp
 800a0ea:	b293      	uxth	r3, r2
 800a0ec:	1ae3      	subs	r3, r4, r3
 800a0ee:	b28a      	uxth	r2, r1
 800a0f0:	fa1f f48b 	uxth.w	r4, fp
 800a0f4:	4413      	add	r3, r2
 800a0f6:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
 800a0fa:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a104:	45e0      	cmp	r8, ip
 800a106:	f840 3b04 	str.w	r3, [r0], #4
 800a10a:	ea4f 4424 	mov.w	r4, r4, asr #16
 800a10e:	ea4f 421b 	mov.w	r2, fp, lsr #16
 800a112:	d2de      	bcs.n	800a0d2 <quorem+0x46>
 800a114:	9b00      	ldr	r3, [sp, #0]
 800a116:	f859 3003 	ldr.w	r3, [r9, r3]
 800a11a:	b973      	cbnz	r3, 800a13a <quorem+0xae>
 800a11c:	9b01      	ldr	r3, [sp, #4]
 800a11e:	3b04      	subs	r3, #4
 800a120:	4599      	cmp	r9, r3
 800a122:	d304      	bcc.n	800a12e <quorem+0xa2>
 800a124:	e007      	b.n	800a136 <quorem+0xaa>
 800a126:	4599      	cmp	r9, r3
 800a128:	f105 35ff 	add.w	r5, r5, #4294967295
 800a12c:	d203      	bcs.n	800a136 <quorem+0xaa>
 800a12e:	f853 2904 	ldr.w	r2, [r3], #-4
 800a132:	2a00      	cmp	r2, #0
 800a134:	d0f7      	beq.n	800a126 <quorem+0x9a>
 800a136:	f8ca 5010 	str.w	r5, [sl, #16]
 800a13a:	4671      	mov	r1, lr
 800a13c:	4650      	mov	r0, sl
 800a13e:	f001 f9e3 	bl	800b508 <__mcmp>
 800a142:	2800      	cmp	r0, #0
 800a144:	db2a      	blt.n	800a19c <quorem+0x110>
 800a146:	4648      	mov	r0, r9
 800a148:	2300      	movs	r3, #0
 800a14a:	3701      	adds	r7, #1
 800a14c:	f856 1b04 	ldr.w	r1, [r6], #4
 800a150:	6804      	ldr	r4, [r0, #0]
 800a152:	b28a      	uxth	r2, r1
 800a154:	1a9a      	subs	r2, r3, r2
 800a156:	0c0b      	lsrs	r3, r1, #16
 800a158:	b2a1      	uxth	r1, r4
 800a15a:	440a      	add	r2, r1
 800a15c:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
 800a160:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800a164:	b292      	uxth	r2, r2
 800a166:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a16a:	45b0      	cmp	r8, r6
 800a16c:	f840 2b04 	str.w	r2, [r0], #4
 800a170:	ea4f 4323 	mov.w	r3, r3, asr #16
 800a174:	d2ea      	bcs.n	800a14c <quorem+0xc0>
 800a176:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 800a17a:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 800a17e:	b96a      	cbnz	r2, 800a19c <quorem+0x110>
 800a180:	3b04      	subs	r3, #4
 800a182:	4599      	cmp	r9, r3
 800a184:	d304      	bcc.n	800a190 <quorem+0x104>
 800a186:	e007      	b.n	800a198 <quorem+0x10c>
 800a188:	4599      	cmp	r9, r3
 800a18a:	f105 35ff 	add.w	r5, r5, #4294967295
 800a18e:	d203      	bcs.n	800a198 <quorem+0x10c>
 800a190:	f853 2904 	ldr.w	r2, [r3], #-4
 800a194:	2a00      	cmp	r2, #0
 800a196:	d0f7      	beq.n	800a188 <quorem+0xfc>
 800a198:	f8ca 5010 	str.w	r5, [sl, #16]
 800a19c:	4638      	mov	r0, r7
 800a19e:	b003      	add	sp, #12
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	b003      	add	sp, #12
 800a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ac:	0000      	movs	r0, r0
	...

0800a1b0 <_dtoa_r>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	4616      	mov	r6, r2
 800a1b6:	461f      	mov	r7, r3
 800a1b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a1ba:	b09b      	sub	sp, #108	; 0x6c
 800a1bc:	4604      	mov	r4, r0
 800a1be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a1c2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800a1c4:	b141      	cbz	r1, 800a1d8 <_dtoa_r+0x28>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1ca:	4093      	lsls	r3, r2
 800a1cc:	e9c1 2301 	strd	r2, r3, [r1, #4]
 800a1d0:	f000 ff9e 	bl	800b110 <_Bfree>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	6423      	str	r3, [r4, #64]	; 0x40
 800a1d8:	f1b7 0900 	subs.w	r9, r7, #0
 800a1dc:	bfb4      	ite	lt
 800a1de:	2301      	movlt	r3, #1
 800a1e0:	2300      	movge	r3, #0
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	4b76      	ldr	r3, [pc, #472]	; (800a3c0 <_dtoa_r+0x210>)
 800a1e6:	bfbc      	itt	lt
 800a1e8:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
 800a1ec:	f8cd 9014 	strlt.w	r9, [sp, #20]
 800a1f0:	ea33 0309 	bics.w	r3, r3, r9
 800a1f4:	f000 80ab 	beq.w	800a34e <_dtoa_r+0x19e>
 800a1f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	4619      	mov	r1, r3
 800a200:	2200      	movs	r2, #0
 800a202:	2300      	movs	r3, #0
 800a204:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a208:	f002 fa46 	bl	800c698 <__aeabi_dcmpeq>
 800a20c:	4680      	mov	r8, r0
 800a20e:	b170      	cbz	r0, 800a22e <_dtoa_r+0x7e>
 800a210:	2301      	movs	r3, #1
 800a212:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 82c5 	beq.w	800a7a8 <_dtoa_r+0x5f8>
 800a21e:	4869      	ldr	r0, [pc, #420]	; (800a3c4 <_dtoa_r+0x214>)
 800a220:	6018      	str	r0, [r3, #0]
 800a222:	1e43      	subs	r3, r0, #1
 800a224:	9303      	str	r3, [sp, #12]
 800a226:	9803      	ldr	r0, [sp, #12]
 800a228:	b01b      	add	sp, #108	; 0x6c
 800a22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22e:	aa18      	add	r2, sp, #96	; 0x60
 800a230:	ab19      	add	r3, sp, #100	; 0x64
 800a232:	e9cd 3200 	strd	r3, r2, [sp]
 800a236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a23a:	4620      	mov	r0, r4
 800a23c:	f001 fa1e 	bl	800b67c <__d2b>
 800a240:	ea5f 5519 	movs.w	r5, r9, lsr #20
 800a244:	4682      	mov	sl, r0
 800a246:	f040 8098 	bne.w	800a37a <_dtoa_r+0x1ca>
 800a24a:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
 800a24e:	4445      	add	r5, r8
 800a250:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a254:	2820      	cmp	r0, #32
 800a256:	f340 8389 	ble.w	800a96c <_dtoa_r+0x7bc>
 800a25a:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
 800a25e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a262:	fa09 f903 	lsl.w	r9, r9, r3
 800a266:	fa26 f000 	lsr.w	r0, r6, r0
 800a26a:	ea49 0000 	orr.w	r0, r9, r0
 800a26e:	f001 ff31 	bl	800c0d4 <__aeabi_ui2d>
 800a272:	2201      	movs	r2, #1
 800a274:	3d01      	subs	r5, #1
 800a276:	9210      	str	r2, [sp, #64]	; 0x40
 800a278:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a27c:	2200      	movs	r2, #0
 800a27e:	4b52      	ldr	r3, [pc, #328]	; (800a3c8 <_dtoa_r+0x218>)
 800a280:	f001 fdea 	bl	800be58 <__aeabi_dsub>
 800a284:	a348      	add	r3, pc, #288	; (adr r3, 800a3a8 <_dtoa_r+0x1f8>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f001 ff9d 	bl	800c1c8 <__aeabi_dmul>
 800a28e:	a348      	add	r3, pc, #288	; (adr r3, 800a3b0 <_dtoa_r+0x200>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	f001 fde2 	bl	800be5c <__adddf3>
 800a298:	4606      	mov	r6, r0
 800a29a:	4628      	mov	r0, r5
 800a29c:	460f      	mov	r7, r1
 800a29e:	f001 ff29 	bl	800c0f4 <__aeabi_i2d>
 800a2a2:	a345      	add	r3, pc, #276	; (adr r3, 800a3b8 <_dtoa_r+0x208>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f001 ff8e 	bl	800c1c8 <__aeabi_dmul>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	4639      	mov	r1, r7
 800a2b4:	f001 fdd2 	bl	800be5c <__adddf3>
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	460f      	mov	r7, r1
 800a2bc:	f002 fa34 	bl	800c728 <__aeabi_d2iz>
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	4683      	mov	fp, r0
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	f002 f9ef 	bl	800c6ac <__aeabi_dcmplt>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	f040 825d 	bne.w	800a78e <_dtoa_r+0x5de>
 800a2d4:	f1bb 0f16 	cmp.w	fp, #22
 800a2d8:	f200 824b 	bhi.w	800a772 <_dtoa_r+0x5c2>
 800a2dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2e0:	4b3a      	ldr	r3, [pc, #232]	; (800a3cc <_dtoa_r+0x21c>)
 800a2e2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	f002 f9df 	bl	800c6ac <__aeabi_dcmplt>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d072      	beq.n	800a3d8 <_dtoa_r+0x228>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	eba8 0505 	sub.w	r5, r8, r5
 800a2f8:	f1b5 0901 	subs.w	r9, r5, #1
 800a2fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a300:	930d      	str	r3, [sp, #52]	; 0x34
 800a302:	f100 823e 	bmi.w	800a782 <_dtoa_r+0x5d2>
 800a306:	2300      	movs	r3, #0
 800a308:	9309      	str	r3, [sp, #36]	; 0x24
 800a30a:	f1bb 0f00 	cmp.w	fp, #0
 800a30e:	da6b      	bge.n	800a3e8 <_dtoa_r+0x238>
 800a310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a312:	f8cd b020 	str.w	fp, [sp, #32]
 800a316:	eba3 030b 	sub.w	r3, r3, fp
 800a31a:	9309      	str	r3, [sp, #36]	; 0x24
 800a31c:	f1cb 0300 	rsb	r3, fp, #0
 800a320:	930c      	str	r3, [sp, #48]	; 0x30
 800a322:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a324:	f04f 0b00 	mov.w	fp, #0
 800a328:	2b09      	cmp	r3, #9
 800a32a:	d865      	bhi.n	800a3f8 <_dtoa_r+0x248>
 800a32c:	2b05      	cmp	r3, #5
 800a32e:	f340 831b 	ble.w	800a968 <_dtoa_r+0x7b8>
 800a332:	2500      	movs	r5, #0
 800a334:	3b04      	subs	r3, #4
 800a336:	9324      	str	r3, [sp, #144]	; 0x90
 800a338:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a33a:	3b02      	subs	r3, #2
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	f200 8662 	bhi.w	800b006 <_dtoa_r+0xe56>
 800a342:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a346:	043b      	.short	0x043b
 800a348:	042f0438 	.word	0x042f0438
 800a34c:	040f      	.short	0x040f
 800a34e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a352:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a354:	f3c9 0913 	ubfx	r9, r9, #0, #20
 800a358:	6013      	str	r3, [r2, #0]
 800a35a:	ea59 0306 	orrs.w	r3, r9, r6
 800a35e:	d11c      	bne.n	800a39a <_dtoa_r+0x1ea>
 800a360:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 8646 	beq.w	800aff4 <_dtoa_r+0xe44>
 800a368:	4b19      	ldr	r3, [pc, #100]	; (800a3d0 <_dtoa_r+0x220>)
 800a36a:	9303      	str	r3, [sp, #12]
 800a36c:	3308      	adds	r3, #8
 800a36e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a370:	9803      	ldr	r0, [sp, #12]
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	b01b      	add	sp, #108	; 0x6c
 800a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a37e:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800a382:	4608      	mov	r0, r1
 800a384:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a388:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a38c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a390:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a394:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a398:	e770      	b.n	800a27c <_dtoa_r+0xcc>
 800a39a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f040 83d1 	bne.w	800ab44 <_dtoa_r+0x994>
 800a3a2:	4b0c      	ldr	r3, [pc, #48]	; (800a3d4 <_dtoa_r+0x224>)
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	e73e      	b.n	800a226 <_dtoa_r+0x76>
 800a3a8:	636f4361 	.word	0x636f4361
 800a3ac:	3fd287a7 	.word	0x3fd287a7
 800a3b0:	8b60c8b3 	.word	0x8b60c8b3
 800a3b4:	3fc68a28 	.word	0x3fc68a28
 800a3b8:	509f79fb 	.word	0x509f79fb
 800a3bc:	3fd34413 	.word	0x3fd34413
 800a3c0:	7ff00000 	.word	0x7ff00000
 800a3c4:	0801265d 	.word	0x0801265d
 800a3c8:	3ff80000 	.word	0x3ff80000
 800a3cc:	080126b8 	.word	0x080126b8
 800a3d0:	08012684 	.word	0x08012684
 800a3d4:	08012680 	.word	0x08012680
 800a3d8:	eba8 0505 	sub.w	r5, r8, r5
 800a3dc:	f1b5 0901 	subs.w	r9, r5, #1
 800a3e0:	f100 8496 	bmi.w	800ad10 <_dtoa_r+0xb60>
 800a3e4:	900d      	str	r0, [sp, #52]	; 0x34
 800a3e6:	9009      	str	r0, [sp, #36]	; 0x24
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a3ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a3ee:	44d9      	add	r9, fp
 800a3f0:	2b09      	cmp	r3, #9
 800a3f2:	f8cd b020 	str.w	fp, [sp, #32]
 800a3f6:	d999      	bls.n	800a32c <_dtoa_r+0x17c>
 800a3f8:	f04f 36ff 	mov.w	r6, #4294967295
 800a3fc:	2501      	movs	r5, #1
 800a3fe:	2300      	movs	r3, #0
 800a400:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
 800a404:	9324      	str	r3, [sp, #144]	; 0x90
 800a406:	9325      	str	r3, [sp, #148]	; 0x94
 800a408:	2100      	movs	r1, #0
 800a40a:	9611      	str	r6, [sp, #68]	; 0x44
 800a40c:	6461      	str	r1, [r4, #68]	; 0x44
 800a40e:	4620      	mov	r0, r4
 800a410:	f000 fe58 	bl	800b0c4 <_Balloc>
 800a414:	2e0e      	cmp	r6, #14
 800a416:	9003      	str	r0, [sp, #12]
 800a418:	6420      	str	r0, [r4, #64]	; 0x40
 800a41a:	f200 80f2 	bhi.w	800a602 <_dtoa_r+0x452>
 800a41e:	2d00      	cmp	r5, #0
 800a420:	f000 80ef 	beq.w	800a602 <_dtoa_r+0x452>
 800a424:	9908      	ldr	r1, [sp, #32]
 800a426:	2900      	cmp	r1, #0
 800a428:	f340 8440 	ble.w	800acac <_dtoa_r+0xafc>
 800a42c:	4bb9      	ldr	r3, [pc, #740]	; (800a714 <_dtoa_r+0x564>)
 800a42e:	f001 020f 	and.w	r2, r1, #15
 800a432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a436:	05ca      	lsls	r2, r1, #23
 800a438:	ea4f 1521 	mov.w	r5, r1, asr #4
 800a43c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a440:	f140 83db 	bpl.w	800abfa <_dtoa_r+0xa4a>
 800a444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a448:	4bb3      	ldr	r3, [pc, #716]	; (800a718 <_dtoa_r+0x568>)
 800a44a:	f005 050f 	and.w	r5, r5, #15
 800a44e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a452:	f001 ffe3 	bl	800c41c <__aeabi_ddiv>
 800a456:	2303      	movs	r3, #3
 800a458:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800a45c:	930e      	str	r3, [sp, #56]	; 0x38
 800a45e:	b1a5      	cbz	r5, 800a48a <_dtoa_r+0x2da>
 800a460:	9414      	str	r4, [sp, #80]	; 0x50
 800a462:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 800a718 <_dtoa_r+0x568>
 800a466:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a468:	07eb      	lsls	r3, r5, #31
 800a46a:	d508      	bpl.n	800a47e <_dtoa_r+0x2ce>
 800a46c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f001 fea8 	bl	800c1c8 <__aeabi_dmul>
 800a478:	4606      	mov	r6, r0
 800a47a:	460f      	mov	r7, r1
 800a47c:	3401      	adds	r4, #1
 800a47e:	106d      	asrs	r5, r5, #1
 800a480:	f108 0808 	add.w	r8, r8, #8
 800a484:	d1f0      	bne.n	800a468 <_dtoa_r+0x2b8>
 800a486:	940e      	str	r4, [sp, #56]	; 0x38
 800a488:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a48a:	463b      	mov	r3, r7
 800a48c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a490:	4632      	mov	r2, r6
 800a492:	f001 ffc3 	bl	800c41c <__aeabi_ddiv>
 800a496:	4607      	mov	r7, r0
 800a498:	4688      	mov	r8, r1
 800a49a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a49c:	b143      	cbz	r3, 800a4b0 <_dtoa_r+0x300>
 800a49e:	2200      	movs	r2, #0
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	4641      	mov	r1, r8
 800a4a4:	4b9d      	ldr	r3, [pc, #628]	; (800a71c <_dtoa_r+0x56c>)
 800a4a6:	f002 f901 	bl	800c6ac <__aeabi_dcmplt>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	f040 852e 	bne.w	800af0c <_dtoa_r+0xd5c>
 800a4b0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a4b2:	f001 fe1f 	bl	800c0f4 <__aeabi_i2d>
 800a4b6:	463a      	mov	r2, r7
 800a4b8:	4643      	mov	r3, r8
 800a4ba:	f001 fe85 	bl	800c1c8 <__aeabi_dmul>
 800a4be:	4b98      	ldr	r3, [pc, #608]	; (800a720 <_dtoa_r+0x570>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f001 fccb 	bl	800be5c <__adddf3>
 800a4c6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a4ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a4ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 83cc 	beq.w	800ac70 <_dtoa_r+0xac0>
 800a4d8:	9b08      	ldr	r3, [sp, #32]
 800a4da:	9314      	str	r3, [sp, #80]	; 0x50
 800a4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4de:	9312      	str	r3, [sp, #72]	; 0x48
 800a4e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 8496 	beq.w	800ae14 <_dtoa_r+0xc64>
 800a4e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4ea:	4b8a      	ldr	r3, [pc, #552]	; (800a714 <_dtoa_r+0x564>)
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4f6:	498b      	ldr	r1, [pc, #556]	; (800a724 <_dtoa_r+0x574>)
 800a4f8:	f001 ff90 	bl	800c41c <__aeabi_ddiv>
 800a4fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a500:	f001 fcaa 	bl	800be58 <__aeabi_dsub>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4638      	mov	r0, r7
 800a50a:	4641      	mov	r1, r8
 800a50c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a510:	f002 f90a 	bl	800c728 <__aeabi_d2iz>
 800a514:	9015      	str	r0, [sp, #84]	; 0x54
 800a516:	f001 fded 	bl	800c0f4 <__aeabi_i2d>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	4638      	mov	r0, r7
 800a520:	4641      	mov	r1, r8
 800a522:	f001 fc99 	bl	800be58 <__aeabi_dsub>
 800a526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a528:	9d03      	ldr	r5, [sp, #12]
 800a52a:	3330      	adds	r3, #48	; 0x30
 800a52c:	4606      	mov	r6, r0
 800a52e:	460f      	mov	r7, r1
 800a530:	4602      	mov	r2, r0
 800a532:	f805 3b01 	strb.w	r3, [r5], #1
 800a536:	460b      	mov	r3, r1
 800a538:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a53c:	f002 f8d4 	bl	800c6e8 <__aeabi_dcmpgt>
 800a540:	2800      	cmp	r0, #0
 800a542:	f040 8524 	bne.w	800af8e <_dtoa_r+0xdde>
 800a546:	2300      	movs	r3, #0
 800a548:	e9cd b916 	strd	fp, r9, [sp, #88]	; 0x58
 800a54c:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 800a550:	4698      	mov	r8, r3
 800a552:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800a556:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800a55a:	940e      	str	r4, [sp, #56]	; 0x38
 800a55c:	e028      	b.n	800a5b0 <_dtoa_r+0x400>
 800a55e:	45c8      	cmp	r8, r9
 800a560:	da4a      	bge.n	800a5f8 <_dtoa_r+0x448>
 800a562:	4650      	mov	r0, sl
 800a564:	4659      	mov	r1, fp
 800a566:	2200      	movs	r2, #0
 800a568:	4b6f      	ldr	r3, [pc, #444]	; (800a728 <_dtoa_r+0x578>)
 800a56a:	f001 fe2d 	bl	800c1c8 <__aeabi_dmul>
 800a56e:	2200      	movs	r2, #0
 800a570:	4b6d      	ldr	r3, [pc, #436]	; (800a728 <_dtoa_r+0x578>)
 800a572:	4682      	mov	sl, r0
 800a574:	468b      	mov	fp, r1
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	f001 fe25 	bl	800c1c8 <__aeabi_dmul>
 800a57e:	460f      	mov	r7, r1
 800a580:	4606      	mov	r6, r0
 800a582:	f002 f8d1 	bl	800c728 <__aeabi_d2iz>
 800a586:	4604      	mov	r4, r0
 800a588:	f001 fdb4 	bl	800c0f4 <__aeabi_i2d>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4630      	mov	r0, r6
 800a592:	4639      	mov	r1, r7
 800a594:	f001 fc60 	bl	800be58 <__aeabi_dsub>
 800a598:	3430      	adds	r4, #48	; 0x30
 800a59a:	4652      	mov	r2, sl
 800a59c:	465b      	mov	r3, fp
 800a59e:	f805 4b01 	strb.w	r4, [r5], #1
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	460f      	mov	r7, r1
 800a5a6:	f002 f881 	bl	800c6ac <__aeabi_dcmplt>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f040 84ec 	bne.w	800af88 <_dtoa_r+0xdd8>
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	463b      	mov	r3, r7
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	4959      	ldr	r1, [pc, #356]	; (800a71c <_dtoa_r+0x56c>)
 800a5b8:	f001 fc4e 	bl	800be58 <__aeabi_dsub>
 800a5bc:	4652      	mov	r2, sl
 800a5be:	465b      	mov	r3, fp
 800a5c0:	f002 f874 	bl	800c6ac <__aeabi_dcmplt>
 800a5c4:	f108 0801 	add.w	r8, r8, #1
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d0c8      	beq.n	800a55e <_dtoa_r+0x3ae>
 800a5cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5ce:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800a5d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a5d4:	9a03      	ldr	r2, [sp, #12]
 800a5d6:	9308      	str	r3, [sp, #32]
 800a5d8:	e002      	b.n	800a5e0 <_dtoa_r+0x430>
 800a5da:	4295      	cmp	r5, r2
 800a5dc:	f000 84be 	beq.w	800af5c <_dtoa_r+0xdac>
 800a5e0:	46a9      	mov	r9, r5
 800a5e2:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 800a5e6:	2b39      	cmp	r3, #57	; 0x39
 800a5e8:	d0f7      	beq.n	800a5da <_dtoa_r+0x42a>
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	702b      	strb	r3, [r5, #0]
 800a5f0:	9b08      	ldr	r3, [sp, #32]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	9308      	str	r3, [sp, #32]
 800a5f6:	e1a0      	b.n	800a93a <_dtoa_r+0x78a>
 800a5f8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800a5fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a5fe:	e9dd b916 	ldrd	fp, r9, [sp, #88]	; 0x58
 800a602:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a604:	2b00      	cmp	r3, #0
 800a606:	f2c0 8093 	blt.w	800a730 <_dtoa_r+0x580>
 800a60a:	9a08      	ldr	r2, [sp, #32]
 800a60c:	2a0e      	cmp	r2, #14
 800a60e:	f300 808f 	bgt.w	800a730 <_dtoa_r+0x580>
 800a612:	4b40      	ldr	r3, [pc, #256]	; (800a714 <_dtoa_r+0x564>)
 800a614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a620:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a622:	2b00      	cmp	r3, #0
 800a624:	da1a      	bge.n	800a65c <_dtoa_r+0x4ac>
 800a626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dc17      	bgt.n	800a65c <_dtoa_r+0x4ac>
 800a62c:	f040 84a7 	bne.w	800af7e <_dtoa_r+0xdce>
 800a630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a634:	2200      	movs	r2, #0
 800a636:	4b3d      	ldr	r3, [pc, #244]	; (800a72c <_dtoa_r+0x57c>)
 800a638:	f001 fdc6 	bl	800c1c8 <__aeabi_dmul>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a644:	f002 f83c 	bl	800c6c0 <__aeabi_dcmple>
 800a648:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800a64c:	4645      	mov	r5, r8
 800a64e:	2800      	cmp	r0, #0
 800a650:	f000 8241 	beq.w	800aad6 <_dtoa_r+0x926>
 800a654:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a656:	9f03      	ldr	r7, [sp, #12]
 800a658:	43de      	mvns	r6, r3
 800a65a:	e244      	b.n	800aae6 <_dtoa_r+0x936>
 800a65c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800a660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a664:	4632      	mov	r2, r6
 800a666:	463b      	mov	r3, r7
 800a668:	f001 fed8 	bl	800c41c <__aeabi_ddiv>
 800a66c:	f002 f85c 	bl	800c728 <__aeabi_d2iz>
 800a670:	4680      	mov	r8, r0
 800a672:	f001 fd3f 	bl	800c0f4 <__aeabi_i2d>
 800a676:	4632      	mov	r2, r6
 800a678:	463b      	mov	r3, r7
 800a67a:	f001 fda5 	bl	800c1c8 <__aeabi_dmul>
 800a67e:	460b      	mov	r3, r1
 800a680:	4602      	mov	r2, r0
 800a682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a686:	f001 fbe7 	bl	800be58 <__aeabi_dsub>
 800a68a:	9d03      	ldr	r5, [sp, #12]
 800a68c:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800a690:	f805 3b01 	strb.w	r3, [r5], #1
 800a694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a696:	2b01      	cmp	r3, #1
 800a698:	f000 8371 	beq.w	800ad7e <_dtoa_r+0xbce>
 800a69c:	f8cd a018 	str.w	sl, [sp, #24]
 800a6a0:	f04f 0901 	mov.w	r9, #1
 800a6a4:	46aa      	mov	sl, r5
 800a6a6:	469b      	mov	fp, r3
 800a6a8:	9409      	str	r4, [sp, #36]	; 0x24
 800a6aa:	e01b      	b.n	800a6e4 <_dtoa_r+0x534>
 800a6ac:	4632      	mov	r2, r6
 800a6ae:	463b      	mov	r3, r7
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f001 feb2 	bl	800c41c <__aeabi_ddiv>
 800a6b8:	f002 f836 	bl	800c728 <__aeabi_d2iz>
 800a6bc:	4680      	mov	r8, r0
 800a6be:	f001 fd19 	bl	800c0f4 <__aeabi_i2d>
 800a6c2:	4632      	mov	r2, r6
 800a6c4:	463b      	mov	r3, r7
 800a6c6:	f001 fd7f 	bl	800c1c8 <__aeabi_dmul>
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f001 fbc1 	bl	800be58 <__aeabi_dsub>
 800a6d6:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800a6da:	45d9      	cmp	r9, fp
 800a6dc:	f80a 3b01 	strb.w	r3, [sl], #1
 800a6e0:	f000 8349 	beq.w	800ad76 <_dtoa_r+0xbc6>
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	4b10      	ldr	r3, [pc, #64]	; (800a728 <_dtoa_r+0x578>)
 800a6e8:	f001 fd6e 	bl	800c1c8 <__aeabi_dmul>
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	460d      	mov	r5, r1
 800a6f4:	f001 ffd0 	bl	800c698 <__aeabi_dcmpeq>
 800a6f8:	f109 0901 	add.w	r9, r9, #1
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	d0d5      	beq.n	800a6ac <_dtoa_r+0x4fc>
 800a700:	4655      	mov	r5, sl
 800a702:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a704:	f8dd a018 	ldr.w	sl, [sp, #24]
 800a708:	9b08      	ldr	r3, [sp, #32]
 800a70a:	46a9      	mov	r9, r5
 800a70c:	3301      	adds	r3, #1
 800a70e:	9308      	str	r3, [sp, #32]
 800a710:	e113      	b.n	800a93a <_dtoa_r+0x78a>
 800a712:	bf00      	nop
 800a714:	080126b8 	.word	0x080126b8
 800a718:	08012690 	.word	0x08012690
 800a71c:	3ff00000 	.word	0x3ff00000
 800a720:	401c0000 	.word	0x401c0000
 800a724:	3fe00000 	.word	0x3fe00000
 800a728:	40240000 	.word	0x40240000
 800a72c:	40140000 	.word	0x40140000
 800a730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a732:	2a00      	cmp	r2, #0
 800a734:	d03e      	beq.n	800a7b4 <_dtoa_r+0x604>
 800a736:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a738:	2a01      	cmp	r2, #1
 800a73a:	f340 827c 	ble.w	800ac36 <_dtoa_r+0xa86>
 800a73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a740:	1e5f      	subs	r7, r3, #1
 800a742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a744:	42bb      	cmp	r3, r7
 800a746:	f280 8256 	bge.w	800abf6 <_dtoa_r+0xa46>
 800a74a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a74c:	970c      	str	r7, [sp, #48]	; 0x30
 800a74e:	1afb      	subs	r3, r7, r3
 800a750:	2700      	movs	r7, #0
 800a752:	449b      	add	fp, r3
 800a754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a756:	2b00      	cmp	r3, #0
 800a758:	f2c0 833f 	blt.w	800adda <_dtoa_r+0xc2a>
 800a75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a75e:	4499      	add	r9, r3
 800a760:	4616      	mov	r6, r2
 800a762:	441a      	add	r2, r3
 800a764:	9209      	str	r2, [sp, #36]	; 0x24
 800a766:	2101      	movs	r1, #1
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fd69 	bl	800b240 <__i2b>
 800a76e:	4605      	mov	r5, r0
 800a770:	e023      	b.n	800a7ba <_dtoa_r+0x60a>
 800a772:	2301      	movs	r3, #1
 800a774:	eba8 0505 	sub.w	r5, r8, r5
 800a778:	f1b5 0901 	subs.w	r9, r5, #1
 800a77c:	930d      	str	r3, [sp, #52]	; 0x34
 800a77e:	f57f adc2 	bpl.w	800a306 <_dtoa_r+0x156>
 800a782:	f1c5 0301 	rsb	r3, r5, #1
 800a786:	f04f 0900 	mov.w	r9, #0
 800a78a:	9309      	str	r3, [sp, #36]	; 0x24
 800a78c:	e5bd      	b.n	800a30a <_dtoa_r+0x15a>
 800a78e:	4658      	mov	r0, fp
 800a790:	f001 fcb0 	bl	800c0f4 <__aeabi_i2d>
 800a794:	4632      	mov	r2, r6
 800a796:	463b      	mov	r3, r7
 800a798:	f001 ff7e 	bl	800c698 <__aeabi_dcmpeq>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	f47f ad99 	bne.w	800a2d4 <_dtoa_r+0x124>
 800a7a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7a6:	e595      	b.n	800a2d4 <_dtoa_r+0x124>
 800a7a8:	4bbf      	ldr	r3, [pc, #764]	; (800aaa8 <_dtoa_r+0x8f8>)
 800a7aa:	9303      	str	r3, [sp, #12]
 800a7ac:	9803      	ldr	r0, [sp, #12]
 800a7ae:	b01b      	add	sp, #108	; 0x6c
 800a7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a7b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a7b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a7ba:	2e00      	cmp	r6, #0
 800a7bc:	dd0c      	ble.n	800a7d8 <_dtoa_r+0x628>
 800a7be:	f1b9 0f00 	cmp.w	r9, #0
 800a7c2:	dd09      	ble.n	800a7d8 <_dtoa_r+0x628>
 800a7c4:	454e      	cmp	r6, r9
 800a7c6:	4633      	mov	r3, r6
 800a7c8:	bfa8      	it	ge
 800a7ca:	464b      	movge	r3, r9
 800a7cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ce:	1af6      	subs	r6, r6, r3
 800a7d0:	1ad2      	subs	r2, r2, r3
 800a7d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a7d4:	eba9 0903 	sub.w	r9, r9, r3
 800a7d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7da:	b1d3      	cbz	r3, 800a812 <_dtoa_r+0x662>
 800a7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f000 81a9 	beq.w	800ab36 <_dtoa_r+0x986>
 800a7e4:	2f00      	cmp	r7, #0
 800a7e6:	dd10      	ble.n	800a80a <_dtoa_r+0x65a>
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	463a      	mov	r2, r7
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fdd3 	bl	800b398 <__pow5mult>
 800a7f2:	4652      	mov	r2, sl
 800a7f4:	4601      	mov	r1, r0
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f000 fd2b 	bl	800b254 <__multiply>
 800a7fe:	4603      	mov	r3, r0
 800a800:	4651      	mov	r1, sl
 800a802:	4620      	mov	r0, r4
 800a804:	469a      	mov	sl, r3
 800a806:	f000 fc83 	bl	800b110 <_Bfree>
 800a80a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a80c:	1bda      	subs	r2, r3, r7
 800a80e:	f040 8193 	bne.w	800ab38 <_dtoa_r+0x988>
 800a812:	2101      	movs	r1, #1
 800a814:	4620      	mov	r0, r4
 800a816:	f000 fd13 	bl	800b240 <__i2b>
 800a81a:	f1bb 0f00 	cmp.w	fp, #0
 800a81e:	4680      	mov	r8, r0
 800a820:	f300 80a9 	bgt.w	800a976 <_dtoa_r+0x7c6>
 800a824:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a826:	2b01      	cmp	r3, #1
 800a828:	f340 8190 	ble.w	800ab4c <_dtoa_r+0x99c>
 800a82c:	2700      	movs	r7, #0
 800a82e:	2001      	movs	r0, #1
 800a830:	f1bb 0f00 	cmp.w	fp, #0
 800a834:	f040 80aa 	bne.w	800a98c <_dtoa_r+0x7dc>
 800a838:	4448      	add	r0, r9
 800a83a:	f010 001f 	ands.w	r0, r0, #31
 800a83e:	f000 8091 	beq.w	800a964 <_dtoa_r+0x7b4>
 800a842:	f1c0 0320 	rsb	r3, r0, #32
 800a846:	2b04      	cmp	r3, #4
 800a848:	f340 83d8 	ble.w	800affc <_dtoa_r+0xe4c>
 800a84c:	f1c0 001c 	rsb	r0, r0, #28
 800a850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a852:	4406      	add	r6, r0
 800a854:	4403      	add	r3, r0
 800a856:	9309      	str	r3, [sp, #36]	; 0x24
 800a858:	4481      	add	r9, r0
 800a85a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	dd05      	ble.n	800a86c <_dtoa_r+0x6bc>
 800a860:	4651      	mov	r1, sl
 800a862:	461a      	mov	r2, r3
 800a864:	4620      	mov	r0, r4
 800a866:	f000 fde7 	bl	800b438 <__lshift>
 800a86a:	4682      	mov	sl, r0
 800a86c:	f1b9 0f00 	cmp.w	r9, #0
 800a870:	dd05      	ble.n	800a87e <_dtoa_r+0x6ce>
 800a872:	4641      	mov	r1, r8
 800a874:	464a      	mov	r2, r9
 800a876:	4620      	mov	r0, r4
 800a878:	f000 fdde 	bl	800b438 <__lshift>
 800a87c:	4680      	mov	r8, r0
 800a87e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a880:	2b00      	cmp	r3, #0
 800a882:	f040 813d 	bne.w	800ab00 <_dtoa_r+0x950>
 800a886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f340 810f 	ble.w	800aaac <_dtoa_r+0x8fc>
 800a88e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a890:	2b00      	cmp	r3, #0
 800a892:	f040 808d 	bne.w	800a9b0 <_dtoa_r+0x800>
 800a896:	9b08      	ldr	r3, [sp, #32]
 800a898:	3301      	adds	r3, #1
 800a89a:	9308      	str	r3, [sp, #32]
 800a89c:	2601      	movs	r6, #1
 800a89e:	9f03      	ldr	r7, [sp, #12]
 800a8a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800a8a4:	e007      	b.n	800a8b6 <_dtoa_r+0x706>
 800a8a6:	4651      	mov	r1, sl
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	220a      	movs	r2, #10
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fc39 	bl	800b124 <__multadd>
 800a8b2:	4682      	mov	sl, r0
 800a8b4:	3601      	adds	r6, #1
 800a8b6:	4641      	mov	r1, r8
 800a8b8:	4650      	mov	r0, sl
 800a8ba:	f7ff fbe7 	bl	800a08c <quorem>
 800a8be:	454e      	cmp	r6, r9
 800a8c0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a8c4:	f807 3b01 	strb.w	r3, [r7], #1
 800a8c8:	dbed      	blt.n	800a8a6 <_dtoa_r+0x6f6>
 800a8ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8cc:	2600      	movs	r6, #0
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	bfcc      	ite	gt
 800a8d2:	4693      	movgt	fp, r2
 800a8d4:	f04f 0b01 	movle.w	fp, #1
 800a8d8:	9a03      	ldr	r2, [sp, #12]
 800a8da:	4493      	add	fp, r2
 800a8dc:	4651      	mov	r1, sl
 800a8de:	2201      	movs	r2, #1
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	f000 fda8 	bl	800b438 <__lshift>
 800a8e8:	4641      	mov	r1, r8
 800a8ea:	4682      	mov	sl, r0
 800a8ec:	f000 fe0c 	bl	800b508 <__mcmp>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	f340 818e 	ble.w	800ac12 <_dtoa_r+0xa62>
 800a8f6:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 800a8fa:	9a03      	ldr	r2, [sp, #12]
 800a8fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a900:	e004      	b.n	800a90c <_dtoa_r+0x75c>
 800a902:	455a      	cmp	r2, fp
 800a904:	f000 8190 	beq.w	800ac28 <_dtoa_r+0xa78>
 800a908:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 800a90c:	2b39      	cmp	r3, #57	; 0x39
 800a90e:	f10b 0901 	add.w	r9, fp, #1
 800a912:	d0f6      	beq.n	800a902 <_dtoa_r+0x752>
 800a914:	3301      	adds	r3, #1
 800a916:	f88b 3000 	strb.w	r3, [fp]
 800a91a:	4641      	mov	r1, r8
 800a91c:	4620      	mov	r0, r4
 800a91e:	f000 fbf7 	bl	800b110 <_Bfree>
 800a922:	b155      	cbz	r5, 800a93a <_dtoa_r+0x78a>
 800a924:	b12e      	cbz	r6, 800a932 <_dtoa_r+0x782>
 800a926:	42ae      	cmp	r6, r5
 800a928:	d003      	beq.n	800a932 <_dtoa_r+0x782>
 800a92a:	4631      	mov	r1, r6
 800a92c:	4620      	mov	r0, r4
 800a92e:	f000 fbef 	bl	800b110 <_Bfree>
 800a932:	4629      	mov	r1, r5
 800a934:	4620      	mov	r0, r4
 800a936:	f000 fbeb 	bl	800b110 <_Bfree>
 800a93a:	4651      	mov	r1, sl
 800a93c:	4620      	mov	r0, r4
 800a93e:	f000 fbe7 	bl	800b110 <_Bfree>
 800a942:	2300      	movs	r3, #0
 800a944:	f889 3000 	strb.w	r3, [r9]
 800a948:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a94a:	461a      	mov	r2, r3
 800a94c:	9b08      	ldr	r3, [sp, #32]
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a952:	2b00      	cmp	r3, #0
 800a954:	f43f ac67 	beq.w	800a226 <_dtoa_r+0x76>
 800a958:	9803      	ldr	r0, [sp, #12]
 800a95a:	f8c3 9000 	str.w	r9, [r3]
 800a95e:	b01b      	add	sp, #108	; 0x6c
 800a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a964:	201c      	movs	r0, #28
 800a966:	e773      	b.n	800a850 <_dtoa_r+0x6a0>
 800a968:	2501      	movs	r5, #1
 800a96a:	e4e5      	b.n	800a338 <_dtoa_r+0x188>
 800a96c:	f1c0 0020 	rsb	r0, r0, #32
 800a970:	fa06 f000 	lsl.w	r0, r6, r0
 800a974:	e47b      	b.n	800a26e <_dtoa_r+0xbe>
 800a976:	4601      	mov	r1, r0
 800a978:	465a      	mov	r2, fp
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 fd0c 	bl	800b398 <__pow5mult>
 800a980:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a982:	4680      	mov	r8, r0
 800a984:	2b01      	cmp	r3, #1
 800a986:	f340 81c5 	ble.w	800ad14 <_dtoa_r+0xb64>
 800a98a:	2700      	movs	r7, #0
 800a98c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a990:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800a994:	6918      	ldr	r0, [r3, #16]
 800a996:	f000 fc03 	bl	800b1a0 <__hi0bits>
 800a99a:	f1c0 0020 	rsb	r0, r0, #32
 800a99e:	e74b      	b.n	800a838 <_dtoa_r+0x688>
 800a9a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	f300 831d 	bgt.w	800afe2 <_dtoa_r+0xe32>
 800a9a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9aa:	f8cd 9020 	str.w	r9, [sp, #32]
 800a9ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a9b0:	9b08      	ldr	r3, [sp, #32]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	9308      	str	r3, [sp, #32]
 800a9b6:	2e00      	cmp	r6, #0
 800a9b8:	f300 8116 	bgt.w	800abe8 <_dtoa_r+0xa38>
 800a9bc:	2f00      	cmp	r7, #0
 800a9be:	f040 81f8 	bne.w	800adb2 <_dtoa_r+0xc02>
 800a9c2:	462f      	mov	r7, r5
 800a9c4:	9903      	ldr	r1, [sp, #12]
 800a9c6:	9b04      	ldr	r3, [sp, #16]
 800a9c8:	460e      	mov	r6, r1
 800a9ca:	f003 0201 	and.w	r2, r3, #1
 800a9ce:	1e4b      	subs	r3, r1, #1
 800a9d0:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a9d2:	920c      	str	r2, [sp, #48]	; 0x30
 800a9d4:	430a      	orrs	r2, r1
 800a9d6:	920b      	str	r2, [sp, #44]	; 0x2c
 800a9d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9da:	441a      	add	r2, r3
 800a9dc:	920a      	str	r2, [sp, #40]	; 0x28
 800a9de:	4641      	mov	r1, r8
 800a9e0:	4650      	mov	r0, sl
 800a9e2:	f7ff fb53 	bl	800a08c <quorem>
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4683      	mov	fp, r0
 800a9ea:	4650      	mov	r0, sl
 800a9ec:	f000 fd8c 	bl	800b508 <__mcmp>
 800a9f0:	463a      	mov	r2, r7
 800a9f2:	4641      	mov	r1, r8
 800a9f4:	4681      	mov	r9, r0
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 fda4 	bl	800b544 <__mdiff>
 800a9fc:	68c2      	ldr	r2, [r0, #12]
 800a9fe:	4601      	mov	r1, r0
 800aa00:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 800aa04:	2a00      	cmp	r2, #0
 800aa06:	d142      	bne.n	800aa8e <_dtoa_r+0x8de>
 800aa08:	9006      	str	r0, [sp, #24]
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0e:	f000 fd7b 	bl	800b508 <__mcmp>
 800aa12:	9906      	ldr	r1, [sp, #24]
 800aa14:	9004      	str	r0, [sp, #16]
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 fb7a 	bl	800b110 <_Bfree>
 800aa1c:	9a04      	ldr	r2, [sp, #16]
 800aa1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa20:	b91a      	cbnz	r2, 800aa2a <_dtoa_r+0x87a>
 800aa22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa24:	2900      	cmp	r1, #0
 800aa26:	f000 82c2 	beq.w	800afae <_dtoa_r+0xdfe>
 800aa2a:	f1b9 0f00 	cmp.w	r9, #0
 800aa2e:	f2c0 8187 	blt.w	800ad40 <_dtoa_r+0xb90>
 800aa32:	9924      	ldr	r1, [sp, #144]	; 0x90
 800aa34:	ea41 0909 	orr.w	r9, r1, r9
 800aa38:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa3a:	ea51 0109 	orrs.w	r1, r1, r9
 800aa3e:	f000 817f 	beq.w	800ad40 <_dtoa_r+0xb90>
 800aa42:	2a00      	cmp	r2, #0
 800aa44:	f300 81cd 	bgt.w	800ade2 <_dtoa_r+0xc32>
 800aa48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa4a:	f106 0901 	add.w	r9, r6, #1
 800aa4e:	42b2      	cmp	r2, r6
 800aa50:	46cb      	mov	fp, r9
 800aa52:	7033      	strb	r3, [r6, #0]
 800aa54:	f000 81cf 	beq.w	800adf6 <_dtoa_r+0xc46>
 800aa58:	4651      	mov	r1, sl
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	220a      	movs	r2, #10
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 fb60 	bl	800b124 <__multadd>
 800aa64:	42bd      	cmp	r5, r7
 800aa66:	4682      	mov	sl, r0
 800aa68:	4629      	mov	r1, r5
 800aa6a:	f04f 0300 	mov.w	r3, #0
 800aa6e:	f04f 020a 	mov.w	r2, #10
 800aa72:	4620      	mov	r0, r4
 800aa74:	d012      	beq.n	800aa9c <_dtoa_r+0x8ec>
 800aa76:	f000 fb55 	bl	800b124 <__multadd>
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	2300      	movs	r3, #0
 800aa80:	220a      	movs	r2, #10
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 fb4e 	bl	800b124 <__multadd>
 800aa88:	464e      	mov	r6, r9
 800aa8a:	4607      	mov	r7, r0
 800aa8c:	e7a7      	b.n	800a9de <_dtoa_r+0x82e>
 800aa8e:	4620      	mov	r0, r4
 800aa90:	9304      	str	r3, [sp, #16]
 800aa92:	f000 fb3d 	bl	800b110 <_Bfree>
 800aa96:	2201      	movs	r2, #1
 800aa98:	9b04      	ldr	r3, [sp, #16]
 800aa9a:	e7c6      	b.n	800aa2a <_dtoa_r+0x87a>
 800aa9c:	f000 fb42 	bl	800b124 <__multadd>
 800aaa0:	464e      	mov	r6, r9
 800aaa2:	4605      	mov	r5, r0
 800aaa4:	4607      	mov	r7, r0
 800aaa6:	e79a      	b.n	800a9de <_dtoa_r+0x82e>
 800aaa8:	0801265c 	.word	0x0801265c
 800aaac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	f340 8087 	ble.w	800abc2 <_dtoa_r+0xa12>
 800aab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f47f adcc 	bne.w	800a654 <_dtoa_r+0x4a4>
 800aabc:	4641      	mov	r1, r8
 800aabe:	2205      	movs	r2, #5
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 fb2f 	bl	800b124 <__multadd>
 800aac6:	4680      	mov	r8, r0
 800aac8:	4650      	mov	r0, sl
 800aaca:	4641      	mov	r1, r8
 800aacc:	f000 fd1c 	bl	800b508 <__mcmp>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	f77f adbf 	ble.w	800a654 <_dtoa_r+0x4a4>
 800aad6:	9f03      	ldr	r7, [sp, #12]
 800aad8:	2231      	movs	r2, #49	; 0x31
 800aada:	463b      	mov	r3, r7
 800aadc:	9e08      	ldr	r6, [sp, #32]
 800aade:	f803 2b01 	strb.w	r2, [r3], #1
 800aae2:	3601      	adds	r6, #1
 800aae4:	9303      	str	r3, [sp, #12]
 800aae6:	4641      	mov	r1, r8
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 fb11 	bl	800b110 <_Bfree>
 800aaee:	1c73      	adds	r3, r6, #1
 800aaf0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aaf4:	9308      	str	r3, [sp, #32]
 800aaf6:	9703      	str	r7, [sp, #12]
 800aaf8:	2d00      	cmp	r5, #0
 800aafa:	f47f af1a 	bne.w	800a932 <_dtoa_r+0x782>
 800aafe:	e71c      	b.n	800a93a <_dtoa_r+0x78a>
 800ab00:	4641      	mov	r1, r8
 800ab02:	4650      	mov	r0, sl
 800ab04:	f000 fd00 	bl	800b508 <__mcmp>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	f6bf aebc 	bge.w	800a886 <_dtoa_r+0x6d6>
 800ab0e:	4651      	mov	r1, sl
 800ab10:	2300      	movs	r3, #0
 800ab12:	220a      	movs	r2, #10
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fb05 	bl	800b124 <__multadd>
 800ab1a:	9b08      	ldr	r3, [sp, #32]
 800ab1c:	4682      	mov	sl, r0
 800ab1e:	f103 39ff 	add.w	r9, r3, #4294967295
 800ab22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f040 8249 	bne.w	800afbc <_dtoa_r+0xe0c>
 800ab2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f340 8252 	ble.w	800afd6 <_dtoa_r+0xe26>
 800ab32:	930a      	str	r3, [sp, #40]	; 0x28
 800ab34:	e6b2      	b.n	800a89c <_dtoa_r+0x6ec>
 800ab36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab38:	4651      	mov	r1, sl
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 fc2c 	bl	800b398 <__pow5mult>
 800ab40:	4682      	mov	sl, r0
 800ab42:	e666      	b.n	800a812 <_dtoa_r+0x662>
 800ab44:	4bad      	ldr	r3, [pc, #692]	; (800adfc <_dtoa_r+0xc4c>)
 800ab46:	9303      	str	r3, [sp, #12]
 800ab48:	3303      	adds	r3, #3
 800ab4a:	e410      	b.n	800a36e <_dtoa_r+0x1be>
 800ab4c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800ab50:	2900      	cmp	r1, #0
 800ab52:	f47f ae6b 	bne.w	800a82c <_dtoa_r+0x67c>
 800ab56:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 80e4 	beq.w	800ad28 <_dtoa_r+0xb78>
 800ab60:	9f04      	ldr	r7, [sp, #16]
 800ab62:	e664      	b.n	800a82e <_dtoa_r+0x67e>
 800ab64:	2301      	movs	r3, #1
 800ab66:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab68:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ab6a:	9a08      	ldr	r2, [sp, #32]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	9311      	str	r3, [sp, #68]	; 0x44
 800ab70:	3301      	adds	r3, #1
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	461e      	mov	r6, r3
 800ab76:	bfb8      	it	lt
 800ab78:	2601      	movlt	r6, #1
 800ab7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	2e17      	cmp	r6, #23
 800ab80:	bfd8      	it	le
 800ab82:	9e0a      	ldrle	r6, [sp, #40]	; 0x28
 800ab84:	6461      	str	r1, [r4, #68]	; 0x44
 800ab86:	f77f ac42 	ble.w	800a40e <_dtoa_r+0x25e>
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	2304      	movs	r3, #4
 800ab8e:	005b      	lsls	r3, r3, #1
 800ab90:	f103 0014 	add.w	r0, r3, #20
 800ab94:	42b0      	cmp	r0, r6
 800ab96:	4611      	mov	r1, r2
 800ab98:	f102 0201 	add.w	r2, r2, #1
 800ab9c:	d9f7      	bls.n	800ab8e <_dtoa_r+0x9de>
 800ab9e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800aba0:	6461      	str	r1, [r4, #68]	; 0x44
 800aba2:	e434      	b.n	800a40e <_dtoa_r+0x25e>
 800aba4:	2301      	movs	r3, #1
 800aba6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aba8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800abaa:	2b00      	cmp	r3, #0
 800abac:	dd2c      	ble.n	800ac08 <_dtoa_r+0xa58>
 800abae:	461e      	mov	r6, r3
 800abb0:	9311      	str	r3, [sp, #68]	; 0x44
 800abb2:	930a      	str	r3, [sp, #40]	; 0x28
 800abb4:	e7e2      	b.n	800ab7c <_dtoa_r+0x9cc>
 800abb6:	2300      	movs	r3, #0
 800abb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800abba:	e7d5      	b.n	800ab68 <_dtoa_r+0x9b8>
 800abbc:	2300      	movs	r3, #0
 800abbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800abc0:	e7f2      	b.n	800aba8 <_dtoa_r+0x9f8>
 800abc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f47f aef3 	bne.w	800a9b0 <_dtoa_r+0x800>
 800abca:	4641      	mov	r1, r8
 800abcc:	4650      	mov	r0, sl
 800abce:	f7ff fa5d 	bl	800a08c <quorem>
 800abd2:	9a08      	ldr	r2, [sp, #32]
 800abd4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800abd8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800abdc:	3201      	adds	r2, #1
 800abde:	2600      	movs	r6, #0
 800abe0:	9208      	str	r2, [sp, #32]
 800abe2:	f80b 3b01 	strb.w	r3, [fp], #1
 800abe6:	e679      	b.n	800a8dc <_dtoa_r+0x72c>
 800abe8:	4629      	mov	r1, r5
 800abea:	4632      	mov	r2, r6
 800abec:	4620      	mov	r0, r4
 800abee:	f000 fc23 	bl	800b438 <__lshift>
 800abf2:	4605      	mov	r5, r0
 800abf4:	e6e2      	b.n	800a9bc <_dtoa_r+0x80c>
 800abf6:	1bdf      	subs	r7, r3, r7
 800abf8:	e5ac      	b.n	800a754 <_dtoa_r+0x5a4>
 800abfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abfe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800ac02:	2302      	movs	r3, #2
 800ac04:	930e      	str	r3, [sp, #56]	; 0x38
 800ac06:	e42a      	b.n	800a45e <_dtoa_r+0x2ae>
 800ac08:	2601      	movs	r6, #1
 800ac0a:	9625      	str	r6, [sp, #148]	; 0x94
 800ac0c:	960a      	str	r6, [sp, #40]	; 0x28
 800ac0e:	f7ff bbfb 	b.w	800a408 <_dtoa_r+0x258>
 800ac12:	d103      	bne.n	800ac1c <_dtoa_r+0xa6c>
 800ac14:	9b04      	ldr	r3, [sp, #16]
 800ac16:	07db      	lsls	r3, r3, #31
 800ac18:	f53f ae6d 	bmi.w	800a8f6 <_dtoa_r+0x746>
 800ac1c:	46d9      	mov	r9, fp
 800ac1e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 800ac22:	2b30      	cmp	r3, #48	; 0x30
 800ac24:	d0fa      	beq.n	800ac1c <_dtoa_r+0xa6c>
 800ac26:	e678      	b.n	800a91a <_dtoa_r+0x76a>
 800ac28:	2331      	movs	r3, #49	; 0x31
 800ac2a:	9a08      	ldr	r2, [sp, #32]
 800ac2c:	3201      	adds	r2, #1
 800ac2e:	9208      	str	r2, [sp, #32]
 800ac30:	9a03      	ldr	r2, [sp, #12]
 800ac32:	7013      	strb	r3, [r2, #0]
 800ac34:	e671      	b.n	800a91a <_dtoa_r+0x76a>
 800ac36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	f000 8157 	beq.w	800aeec <_dtoa_r+0xd3c>
 800ac3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac44:	4616      	mov	r6, r2
 800ac46:	441a      	add	r2, r3
 800ac48:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800ac4a:	4499      	add	r9, r3
 800ac4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac4e:	e58a      	b.n	800a766 <_dtoa_r+0x5b6>
 800ac50:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ac52:	f001 fa4f 	bl	800c0f4 <__aeabi_i2d>
 800ac56:	463a      	mov	r2, r7
 800ac58:	4643      	mov	r3, r8
 800ac5a:	f001 fab5 	bl	800c1c8 <__aeabi_dmul>
 800ac5e:	4b68      	ldr	r3, [pc, #416]	; (800ae00 <_dtoa_r+0xc50>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	f001 f8fb 	bl	800be5c <__adddf3>
 800ac66:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ac6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ac6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac70:	4638      	mov	r0, r7
 800ac72:	4641      	mov	r1, r8
 800ac74:	2200      	movs	r2, #0
 800ac76:	4b63      	ldr	r3, [pc, #396]	; (800ae04 <_dtoa_r+0xc54>)
 800ac78:	f001 f8ee 	bl	800be58 <__aeabi_dsub>
 800ac7c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ac80:	4606      	mov	r6, r0
 800ac82:	460f      	mov	r7, r1
 800ac84:	f001 fd30 	bl	800c6e8 <__aeabi_dcmpgt>
 800ac88:	4680      	mov	r8, r0
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f040 8173 	bne.w	800af76 <_dtoa_r+0xdc6>
 800ac90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ac94:	4602      	mov	r2, r0
 800ac96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	f001 fd05 	bl	800c6ac <__aeabi_dcmplt>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	f43f acad 	beq.w	800a602 <_dtoa_r+0x452>
 800aca8:	4645      	mov	r5, r8
 800acaa:	e4d3      	b.n	800a654 <_dtoa_r+0x4a4>
 800acac:	f000 8128 	beq.w	800af00 <_dtoa_r+0xd50>
 800acb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acb4:	9b08      	ldr	r3, [sp, #32]
 800acb6:	425d      	negs	r5, r3
 800acb8:	4b53      	ldr	r3, [pc, #332]	; (800ae08 <_dtoa_r+0xc58>)
 800acba:	f005 020f 	and.w	r2, r5, #15
 800acbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f001 fa7f 	bl	800c1c8 <__aeabi_dmul>
 800acca:	112d      	asrs	r5, r5, #4
 800accc:	4607      	mov	r7, r0
 800acce:	4688      	mov	r8, r1
 800acd0:	f000 818c 	beq.w	800afec <_dtoa_r+0xe3c>
 800acd4:	2202      	movs	r2, #2
 800acd6:	e9cd 7812 	strd	r7, r8, [sp, #72]	; 0x48
 800acda:	2300      	movs	r3, #0
 800acdc:	46a0      	mov	r8, r4
 800acde:	4614      	mov	r4, r2
 800ace0:	4e4a      	ldr	r6, [pc, #296]	; (800ae0c <_dtoa_r+0xc5c>)
 800ace2:	07ef      	lsls	r7, r5, #31
 800ace4:	d505      	bpl.n	800acf2 <_dtoa_r+0xb42>
 800ace6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acea:	f001 fa6d 	bl	800c1c8 <__aeabi_dmul>
 800acee:	2301      	movs	r3, #1
 800acf0:	441c      	add	r4, r3
 800acf2:	106d      	asrs	r5, r5, #1
 800acf4:	f106 0608 	add.w	r6, r6, #8
 800acf8:	d1f3      	bne.n	800ace2 <_dtoa_r+0xb32>
 800acfa:	940e      	str	r4, [sp, #56]	; 0x38
 800acfc:	4644      	mov	r4, r8
 800acfe:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f43f abc9 	beq.w	800a49a <_dtoa_r+0x2ea>
 800ad08:	4607      	mov	r7, r0
 800ad0a:	4688      	mov	r8, r1
 800ad0c:	f7ff bbc5 	b.w	800a49a <_dtoa_r+0x2ea>
 800ad10:	900d      	str	r0, [sp, #52]	; 0x34
 800ad12:	e536      	b.n	800a782 <_dtoa_r+0x5d2>
 800ad14:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	f47f ae36 	bne.w	800a98a <_dtoa_r+0x7da>
 800ad1e:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f47f ae31 	bne.w	800a98a <_dtoa_r+0x7da>
 800ad28:	4f39      	ldr	r7, [pc, #228]	; (800ae10 <_dtoa_r+0xc60>)
 800ad2a:	4017      	ands	r7, r2
 800ad2c:	2f00      	cmp	r7, #0
 800ad2e:	f43f ad7e 	beq.w	800a82e <_dtoa_r+0x67e>
 800ad32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad34:	2701      	movs	r7, #1
 800ad36:	3301      	adds	r3, #1
 800ad38:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3a:	f109 0901 	add.w	r9, r9, #1
 800ad3e:	e576      	b.n	800a82e <_dtoa_r+0x67e>
 800ad40:	2a00      	cmp	r2, #0
 800ad42:	dd12      	ble.n	800ad6a <_dtoa_r+0xbba>
 800ad44:	4651      	mov	r1, sl
 800ad46:	2201      	movs	r2, #1
 800ad48:	4620      	mov	r0, r4
 800ad4a:	9304      	str	r3, [sp, #16]
 800ad4c:	f000 fb74 	bl	800b438 <__lshift>
 800ad50:	4641      	mov	r1, r8
 800ad52:	4682      	mov	sl, r0
 800ad54:	f000 fbd8 	bl	800b508 <__mcmp>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	9b04      	ldr	r3, [sp, #16]
 800ad5c:	f340 8121 	ble.w	800afa2 <_dtoa_r+0xdf2>
 800ad60:	2b39      	cmp	r3, #57	; 0x39
 800ad62:	f000 8101 	beq.w	800af68 <_dtoa_r+0xdb8>
 800ad66:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 800ad6a:	46b1      	mov	r9, r6
 800ad6c:	462e      	mov	r6, r5
 800ad6e:	f809 3b01 	strb.w	r3, [r9], #1
 800ad72:	463d      	mov	r5, r7
 800ad74:	e5d1      	b.n	800a91a <_dtoa_r+0x76a>
 800ad76:	4655      	mov	r5, sl
 800ad78:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ad7a:	f8dd a018 	ldr.w	sl, [sp, #24]
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	f001 f86b 	bl	800be5c <__adddf3>
 800ad86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	460f      	mov	r7, r1
 800ad8e:	f001 fcab 	bl	800c6e8 <__aeabi_dcmpgt>
 800ad92:	b960      	cbnz	r0, 800adae <_dtoa_r+0xbfe>
 800ad94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad98:	4630      	mov	r0, r6
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	f001 fc7c 	bl	800c698 <__aeabi_dcmpeq>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	f43f acb1 	beq.w	800a708 <_dtoa_r+0x558>
 800ada6:	f018 0f01 	tst.w	r8, #1
 800adaa:	f43f acad 	beq.w	800a708 <_dtoa_r+0x558>
 800adae:	9a03      	ldr	r2, [sp, #12]
 800adb0:	e416      	b.n	800a5e0 <_dtoa_r+0x430>
 800adb2:	6869      	ldr	r1, [r5, #4]
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 f985 	bl	800b0c4 <_Balloc>
 800adba:	4606      	mov	r6, r0
 800adbc:	692b      	ldr	r3, [r5, #16]
 800adbe:	f105 010c 	add.w	r1, r5, #12
 800adc2:	3302      	adds	r3, #2
 800adc4:	009a      	lsls	r2, r3, #2
 800adc6:	300c      	adds	r0, #12
 800adc8:	f7fd f860 	bl	8007e8c <memcpy>
 800adcc:	4631      	mov	r1, r6
 800adce:	2201      	movs	r2, #1
 800add0:	4620      	mov	r0, r4
 800add2:	f000 fb31 	bl	800b438 <__lshift>
 800add6:	4607      	mov	r7, r0
 800add8:	e5f4      	b.n	800a9c4 <_dtoa_r+0x814>
 800adda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800adde:	1a9e      	subs	r6, r3, r2
 800ade0:	e4c1      	b.n	800a766 <_dtoa_r+0x5b6>
 800ade2:	2b39      	cmp	r3, #57	; 0x39
 800ade4:	f000 80c0 	beq.w	800af68 <_dtoa_r+0xdb8>
 800ade8:	46b1      	mov	r9, r6
 800adea:	3301      	adds	r3, #1
 800adec:	462e      	mov	r6, r5
 800adee:	f809 3b01 	strb.w	r3, [r9], #1
 800adf2:	463d      	mov	r5, r7
 800adf4:	e591      	b.n	800a91a <_dtoa_r+0x76a>
 800adf6:	462e      	mov	r6, r5
 800adf8:	463d      	mov	r5, r7
 800adfa:	e56f      	b.n	800a8dc <_dtoa_r+0x72c>
 800adfc:	08012680 	.word	0x08012680
 800ae00:	401c0000 	.word	0x401c0000
 800ae04:	40140000 	.word	0x40140000
 800ae08:	080126b8 	.word	0x080126b8
 800ae0c:	08012690 	.word	0x08012690
 800ae10:	7ff00000 	.word	0x7ff00000
 800ae14:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ae16:	4984      	ldr	r1, [pc, #528]	; (800b028 <_dtoa_r+0xe78>)
 800ae18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ae1c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ae20:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ae24:	f001 f9d0 	bl	800c1c8 <__aeabi_dmul>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	4638      	mov	r0, r7
 800ae2e:	4641      	mov	r1, r8
 800ae30:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ae34:	f001 fc78 	bl	800c728 <__aeabi_d2iz>
 800ae38:	4606      	mov	r6, r0
 800ae3a:	f001 f95b 	bl	800c0f4 <__aeabi_i2d>
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4602      	mov	r2, r0
 800ae42:	4641      	mov	r1, r8
 800ae44:	4638      	mov	r0, r7
 800ae46:	f001 f807 	bl	800be58 <__aeabi_dsub>
 800ae4a:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800ae4e:	4606      	mov	r6, r0
 800ae50:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ae52:	9d03      	ldr	r5, [sp, #12]
 800ae54:	2801      	cmp	r0, #1
 800ae56:	460f      	mov	r7, r1
 800ae58:	f805 3b01 	strb.w	r3, [r5], #1
 800ae5c:	d022      	beq.n	800aea4 <_dtoa_r+0xcf4>
 800ae5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae60:	9a03      	ldr	r2, [sp, #12]
 800ae62:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800ae66:	4413      	add	r3, r2
 800ae68:	4698      	mov	r8, r3
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4b6f      	ldr	r3, [pc, #444]	; (800b02c <_dtoa_r+0xe7c>)
 800ae6e:	4630      	mov	r0, r6
 800ae70:	4639      	mov	r1, r7
 800ae72:	f001 f9a9 	bl	800c1c8 <__aeabi_dmul>
 800ae76:	460f      	mov	r7, r1
 800ae78:	4606      	mov	r6, r0
 800ae7a:	f001 fc55 	bl	800c728 <__aeabi_d2iz>
 800ae7e:	4683      	mov	fp, r0
 800ae80:	f001 f938 	bl	800c0f4 <__aeabi_i2d>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4630      	mov	r0, r6
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	f000 ffe4 	bl	800be58 <__aeabi_dsub>
 800ae90:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800ae94:	f805 bb01 	strb.w	fp, [r5], #1
 800ae98:	4545      	cmp	r5, r8
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	460f      	mov	r7, r1
 800ae9e:	d1e4      	bne.n	800ae6a <_dtoa_r+0xcba>
 800aea0:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800aea4:	2200      	movs	r2, #0
 800aea6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aeaa:	4b61      	ldr	r3, [pc, #388]	; (800b030 <_dtoa_r+0xe80>)
 800aeac:	f000 ffd6 	bl	800be5c <__adddf3>
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	463b      	mov	r3, r7
 800aeb4:	f001 fbfa 	bl	800c6ac <__aeabi_dcmplt>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d16d      	bne.n	800af98 <_dtoa_r+0xde8>
 800aebc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aec0:	2000      	movs	r0, #0
 800aec2:	495b      	ldr	r1, [pc, #364]	; (800b030 <_dtoa_r+0xe80>)
 800aec4:	f000 ffc8 	bl	800be58 <__aeabi_dsub>
 800aec8:	4632      	mov	r2, r6
 800aeca:	463b      	mov	r3, r7
 800aecc:	f001 fc0c 	bl	800c6e8 <__aeabi_dcmpgt>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	f43f ab96 	beq.w	800a602 <_dtoa_r+0x452>
 800aed6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aeda:	46a9      	mov	r9, r5
 800aedc:	2b30      	cmp	r3, #48	; 0x30
 800aede:	f105 35ff 	add.w	r5, r5, #4294967295
 800aee2:	d0f8      	beq.n	800aed6 <_dtoa_r+0xd26>
 800aee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aee6:	3301      	adds	r3, #1
 800aee8:	9308      	str	r3, [sp, #32]
 800aeea:	e526      	b.n	800a93a <_dtoa_r+0x78a>
 800aeec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aeee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aef4:	4616      	mov	r6, r2
 800aef6:	441a      	add	r2, r3
 800aef8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800aefa:	4499      	add	r9, r3
 800aefc:	9209      	str	r2, [sp, #36]	; 0x24
 800aefe:	e432      	b.n	800a766 <_dtoa_r+0x5b6>
 800af00:	2302      	movs	r3, #2
 800af02:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
 800af06:	930e      	str	r3, [sp, #56]	; 0x38
 800af08:	f7ff bac7 	b.w	800a49a <_dtoa_r+0x2ea>
 800af0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f43f ae9e 	beq.w	800ac50 <_dtoa_r+0xaa0>
 800af14:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800af16:	2d00      	cmp	r5, #0
 800af18:	f77f ab73 	ble.w	800a602 <_dtoa_r+0x452>
 800af1c:	4b43      	ldr	r3, [pc, #268]	; (800b02c <_dtoa_r+0xe7c>)
 800af1e:	4638      	mov	r0, r7
 800af20:	4641      	mov	r1, r8
 800af22:	2200      	movs	r2, #0
 800af24:	f001 f950 	bl	800c1c8 <__aeabi_dmul>
 800af28:	4602      	mov	r2, r0
 800af2a:	4688      	mov	r8, r1
 800af2c:	4617      	mov	r7, r2
 800af2e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800af30:	3001      	adds	r0, #1
 800af32:	f001 f8df 	bl	800c0f4 <__aeabi_i2d>
 800af36:	463a      	mov	r2, r7
 800af38:	4643      	mov	r3, r8
 800af3a:	f001 f945 	bl	800c1c8 <__aeabi_dmul>
 800af3e:	2200      	movs	r2, #0
 800af40:	4b3c      	ldr	r3, [pc, #240]	; (800b034 <_dtoa_r+0xe84>)
 800af42:	f000 ff8b 	bl	800be5c <__adddf3>
 800af46:	9a08      	ldr	r2, [sp, #32]
 800af48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800af4c:	3a01      	subs	r2, #1
 800af4e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800af52:	9214      	str	r2, [sp, #80]	; 0x50
 800af54:	930f      	str	r3, [sp, #60]	; 0x3c
 800af56:	9512      	str	r5, [sp, #72]	; 0x48
 800af58:	f7ff bac2 	b.w	800a4e0 <_dtoa_r+0x330>
 800af5c:	9b08      	ldr	r3, [sp, #32]
 800af5e:	3301      	adds	r3, #1
 800af60:	9308      	str	r3, [sp, #32]
 800af62:	2331      	movs	r3, #49	; 0x31
 800af64:	f7ff bb43 	b.w	800a5ee <_dtoa_r+0x43e>
 800af68:	46b3      	mov	fp, r6
 800af6a:	2339      	movs	r3, #57	; 0x39
 800af6c:	462e      	mov	r6, r5
 800af6e:	f80b 3b01 	strb.w	r3, [fp], #1
 800af72:	463d      	mov	r5, r7
 800af74:	e4c1      	b.n	800a8fa <_dtoa_r+0x74a>
 800af76:	f04f 0800 	mov.w	r8, #0
 800af7a:	4645      	mov	r5, r8
 800af7c:	e5ab      	b.n	800aad6 <_dtoa_r+0x926>
 800af7e:	f04f 0800 	mov.w	r8, #0
 800af82:	4645      	mov	r5, r8
 800af84:	f7ff bb66 	b.w	800a654 <_dtoa_r+0x4a4>
 800af88:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800af8c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800af8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af90:	46a9      	mov	r9, r5
 800af92:	3301      	adds	r3, #1
 800af94:	9308      	str	r3, [sp, #32]
 800af96:	e4d0      	b.n	800a93a <_dtoa_r+0x78a>
 800af98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af9a:	9a03      	ldr	r2, [sp, #12]
 800af9c:	9308      	str	r3, [sp, #32]
 800af9e:	f7ff bb1f 	b.w	800a5e0 <_dtoa_r+0x430>
 800afa2:	f47f aee2 	bne.w	800ad6a <_dtoa_r+0xbba>
 800afa6:	07da      	lsls	r2, r3, #31
 800afa8:	f57f aedf 	bpl.w	800ad6a <_dtoa_r+0xbba>
 800afac:	e6d8      	b.n	800ad60 <_dtoa_r+0xbb0>
 800afae:	2b39      	cmp	r3, #57	; 0x39
 800afb0:	d0da      	beq.n	800af68 <_dtoa_r+0xdb8>
 800afb2:	f1b9 0f00 	cmp.w	r9, #0
 800afb6:	f73f aed6 	bgt.w	800ad66 <_dtoa_r+0xbb6>
 800afba:	e6d6      	b.n	800ad6a <_dtoa_r+0xbba>
 800afbc:	4629      	mov	r1, r5
 800afbe:	2300      	movs	r3, #0
 800afc0:	220a      	movs	r2, #10
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 f8ae 	bl	800b124 <__multadd>
 800afc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afca:	4605      	mov	r5, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f77f ace7 	ble.w	800a9a0 <_dtoa_r+0x7f0>
 800afd2:	930a      	str	r3, [sp, #40]	; 0x28
 800afd4:	e4ef      	b.n	800a9b6 <_dtoa_r+0x806>
 800afd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800afd8:	2b02      	cmp	r3, #2
 800afda:	dc02      	bgt.n	800afe2 <_dtoa_r+0xe32>
 800afdc:	f8cd 9020 	str.w	r9, [sp, #32]
 800afe0:	e5f3      	b.n	800abca <_dtoa_r+0xa1a>
 800afe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afe4:	f8cd 9020 	str.w	r9, [sp, #32]
 800afe8:	930a      	str	r3, [sp, #40]	; 0x28
 800afea:	e563      	b.n	800aab4 <_dtoa_r+0x904>
 800afec:	2302      	movs	r3, #2
 800afee:	930e      	str	r3, [sp, #56]	; 0x38
 800aff0:	f7ff ba53 	b.w	800a49a <_dtoa_r+0x2ea>
 800aff4:	4b10      	ldr	r3, [pc, #64]	; (800b038 <_dtoa_r+0xe88>)
 800aff6:	9303      	str	r3, [sp, #12]
 800aff8:	f7ff b915 	b.w	800a226 <_dtoa_r+0x76>
 800affc:	f43f ac2d 	beq.w	800a85a <_dtoa_r+0x6aa>
 800b000:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800b004:	e424      	b.n	800a850 <_dtoa_r+0x6a0>
 800b006:	2500      	movs	r5, #0
 800b008:	4620      	mov	r0, r4
 800b00a:	4629      	mov	r1, r5
 800b00c:	6465      	str	r5, [r4, #68]	; 0x44
 800b00e:	f000 f859 	bl	800b0c4 <_Balloc>
 800b012:	f04f 33ff 	mov.w	r3, #4294967295
 800b016:	9311      	str	r3, [sp, #68]	; 0x44
 800b018:	930a      	str	r3, [sp, #40]	; 0x28
 800b01a:	2301      	movs	r3, #1
 800b01c:	9003      	str	r0, [sp, #12]
 800b01e:	9525      	str	r5, [sp, #148]	; 0x94
 800b020:	6420      	str	r0, [r4, #64]	; 0x40
 800b022:	930b      	str	r3, [sp, #44]	; 0x2c
 800b024:	f7ff baed 	b.w	800a602 <_dtoa_r+0x452>
 800b028:	080126b8 	.word	0x080126b8
 800b02c:	40240000 	.word	0x40240000
 800b030:	3fe00000 	.word	0x3fe00000
 800b034:	401c0000 	.word	0x401c0000
 800b038:	08012684 	.word	0x08012684

0800b03c <_localeconv_r>:
 800b03c:	4800      	ldr	r0, [pc, #0]	; (800b040 <_localeconv_r+0x4>)
 800b03e:	4770      	bx	lr
 800b040:	20000960 	.word	0x20000960

0800b044 <memchr>:
 800b044:	b470      	push	{r4, r5, r6}
 800b046:	0784      	lsls	r4, r0, #30
 800b048:	b2cd      	uxtb	r5, r1
 800b04a:	d012      	beq.n	800b072 <memchr+0x2e>
 800b04c:	4603      	mov	r3, r0
 800b04e:	1e54      	subs	r4, r2, #1
 800b050:	b92a      	cbnz	r2, 800b05e <memchr+0x1a>
 800b052:	e00b      	b.n	800b06c <memchr+0x28>
 800b054:	079a      	lsls	r2, r3, #30
 800b056:	4618      	mov	r0, r3
 800b058:	d00c      	beq.n	800b074 <memchr+0x30>
 800b05a:	3c01      	subs	r4, #1
 800b05c:	d306      	bcc.n	800b06c <memchr+0x28>
 800b05e:	4618      	mov	r0, r3
 800b060:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b064:	42aa      	cmp	r2, r5
 800b066:	d1f5      	bne.n	800b054 <memchr+0x10>
 800b068:	bc70      	pop	{r4, r5, r6}
 800b06a:	4770      	bx	lr
 800b06c:	2000      	movs	r0, #0
 800b06e:	bc70      	pop	{r4, r5, r6}
 800b070:	4770      	bx	lr
 800b072:	4614      	mov	r4, r2
 800b074:	2c03      	cmp	r4, #3
 800b076:	d80d      	bhi.n	800b094 <memchr+0x50>
 800b078:	2c00      	cmp	r4, #0
 800b07a:	d0f7      	beq.n	800b06c <memchr+0x28>
 800b07c:	4602      	mov	r2, r0
 800b07e:	1903      	adds	r3, r0, r4
 800b080:	e001      	b.n	800b086 <memchr+0x42>
 800b082:	429a      	cmp	r2, r3
 800b084:	d0f2      	beq.n	800b06c <memchr+0x28>
 800b086:	4610      	mov	r0, r2
 800b088:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b08c:	42a9      	cmp	r1, r5
 800b08e:	d1f8      	bne.n	800b082 <memchr+0x3e>
 800b090:	bc70      	pop	{r4, r5, r6}
 800b092:	4770      	bx	lr
 800b094:	4606      	mov	r6, r0
 800b096:	020a      	lsls	r2, r1, #8
 800b098:	b292      	uxth	r2, r2
 800b09a:	432a      	orrs	r2, r5
 800b09c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800b0a0:	6833      	ldr	r3, [r6, #0]
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	4053      	eors	r3, r2
 800b0a6:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
 800b0aa:	ea21 0303 	bic.w	r3, r1, r3
 800b0ae:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b0b2:	f106 0604 	add.w	r6, r6, #4
 800b0b6:	d1e1      	bne.n	800b07c <memchr+0x38>
 800b0b8:	3c04      	subs	r4, #4
 800b0ba:	2c03      	cmp	r4, #3
 800b0bc:	4630      	mov	r0, r6
 800b0be:	d8ef      	bhi.n	800b0a0 <memchr+0x5c>
 800b0c0:	e7da      	b.n	800b078 <memchr+0x34>
 800b0c2:	bf00      	nop

0800b0c4 <_Balloc>:
 800b0c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b0c6:	b570      	push	{r4, r5, r6, lr}
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	b14b      	cbz	r3, 800b0e2 <_Balloc+0x1e>
 800b0ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b0d2:	b180      	cbz	r0, 800b0f6 <_Balloc+0x32>
 800b0d4:	6802      	ldr	r2, [r0, #0]
 800b0d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0e0:	bd70      	pop	{r4, r5, r6, pc}
 800b0e2:	2221      	movs	r2, #33	; 0x21
 800b0e4:	2104      	movs	r1, #4
 800b0e6:	f000 fc05 	bl	800b8f4 <_calloc_r>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d1ed      	bne.n	800b0ce <_Balloc+0xa>
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	bd70      	pop	{r4, r5, r6, pc}
 800b0f6:	2101      	movs	r1, #1
 800b0f8:	fa01 f604 	lsl.w	r6, r1, r4
 800b0fc:	1d72      	adds	r2, r6, #5
 800b0fe:	4628      	mov	r0, r5
 800b100:	0092      	lsls	r2, r2, #2
 800b102:	f000 fbf7 	bl	800b8f4 <_calloc_r>
 800b106:	2800      	cmp	r0, #0
 800b108:	d0f3      	beq.n	800b0f2 <_Balloc+0x2e>
 800b10a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800b10e:	e7e4      	b.n	800b0da <_Balloc+0x16>

0800b110 <_Bfree>:
 800b110:	b131      	cbz	r1, 800b120 <_Bfree+0x10>
 800b112:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b114:	684a      	ldr	r2, [r1, #4]
 800b116:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b11a:	6008      	str	r0, [r1, #0]
 800b11c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop

0800b124 <__multadd>:
 800b124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b128:	4680      	mov	r8, r0
 800b12a:	461c      	mov	r4, r3
 800b12c:	2000      	movs	r0, #0
 800b12e:	460f      	mov	r7, r1
 800b130:	690e      	ldr	r6, [r1, #16]
 800b132:	3114      	adds	r1, #20
 800b134:	680d      	ldr	r5, [r1, #0]
 800b136:	3001      	adds	r0, #1
 800b138:	b2ab      	uxth	r3, r5
 800b13a:	fb02 4303 	mla	r3, r2, r3, r4
 800b13e:	0c2c      	lsrs	r4, r5, #16
 800b140:	0c1d      	lsrs	r5, r3, #16
 800b142:	fb02 5404 	mla	r4, r2, r4, r5
 800b146:	b29b      	uxth	r3, r3
 800b148:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 800b14c:	4286      	cmp	r6, r0
 800b14e:	f841 3b04 	str.w	r3, [r1], #4
 800b152:	ea4f 4414 	mov.w	r4, r4, lsr #16
 800b156:	dced      	bgt.n	800b134 <__multadd+0x10>
 800b158:	b13c      	cbz	r4, 800b16a <__multadd+0x46>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	42b3      	cmp	r3, r6
 800b15e:	dd07      	ble.n	800b170 <__multadd+0x4c>
 800b160:	eb07 0386 	add.w	r3, r7, r6, lsl #2
 800b164:	3601      	adds	r6, #1
 800b166:	615c      	str	r4, [r3, #20]
 800b168:	613e      	str	r6, [r7, #16]
 800b16a:	4638      	mov	r0, r7
 800b16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b170:	6879      	ldr	r1, [r7, #4]
 800b172:	4640      	mov	r0, r8
 800b174:	3101      	adds	r1, #1
 800b176:	f7ff ffa5 	bl	800b0c4 <_Balloc>
 800b17a:	4605      	mov	r5, r0
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	f107 010c 	add.w	r1, r7, #12
 800b182:	3202      	adds	r2, #2
 800b184:	0092      	lsls	r2, r2, #2
 800b186:	300c      	adds	r0, #12
 800b188:	f7fc fe80 	bl	8007e8c <memcpy>
 800b18c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b196:	6039      	str	r1, [r7, #0]
 800b198:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800b19c:	462f      	mov	r7, r5
 800b19e:	e7df      	b.n	800b160 <__multadd+0x3c>

0800b1a0 <__hi0bits>:
 800b1a0:	0c02      	lsrs	r2, r0, #16
 800b1a2:	0412      	lsls	r2, r2, #16
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	b9ca      	cbnz	r2, 800b1dc <__hi0bits+0x3c>
 800b1a8:	0403      	lsls	r3, r0, #16
 800b1aa:	2010      	movs	r0, #16
 800b1ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b1b0:	bf04      	itt	eq
 800b1b2:	021b      	lsleq	r3, r3, #8
 800b1b4:	3008      	addeq	r0, #8
 800b1b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b1ba:	bf04      	itt	eq
 800b1bc:	011b      	lsleq	r3, r3, #4
 800b1be:	3004      	addeq	r0, #4
 800b1c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b1c4:	bf04      	itt	eq
 800b1c6:	009b      	lsleq	r3, r3, #2
 800b1c8:	3002      	addeq	r0, #2
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	db05      	blt.n	800b1da <__hi0bits+0x3a>
 800b1ce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b1d2:	f100 0001 	add.w	r0, r0, #1
 800b1d6:	bf08      	it	eq
 800b1d8:	2020      	moveq	r0, #32
 800b1da:	4770      	bx	lr
 800b1dc:	2000      	movs	r0, #0
 800b1de:	e7e5      	b.n	800b1ac <__hi0bits+0xc>

0800b1e0 <__lo0bits>:
 800b1e0:	6803      	ldr	r3, [r0, #0]
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	f013 0207 	ands.w	r2, r3, #7
 800b1e8:	d007      	beq.n	800b1fa <__lo0bits+0x1a>
 800b1ea:	07da      	lsls	r2, r3, #31
 800b1ec:	d420      	bmi.n	800b230 <__lo0bits+0x50>
 800b1ee:	0798      	lsls	r0, r3, #30
 800b1f0:	d522      	bpl.n	800b238 <__lo0bits+0x58>
 800b1f2:	085b      	lsrs	r3, r3, #1
 800b1f4:	2001      	movs	r0, #1
 800b1f6:	600b      	str	r3, [r1, #0]
 800b1f8:	4770      	bx	lr
 800b1fa:	b298      	uxth	r0, r3
 800b1fc:	b1a8      	cbz	r0, 800b22a <__lo0bits+0x4a>
 800b1fe:	4610      	mov	r0, r2
 800b200:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b204:	bf04      	itt	eq
 800b206:	0a1b      	lsreq	r3, r3, #8
 800b208:	3008      	addeq	r0, #8
 800b20a:	071a      	lsls	r2, r3, #28
 800b20c:	bf04      	itt	eq
 800b20e:	091b      	lsreq	r3, r3, #4
 800b210:	3004      	addeq	r0, #4
 800b212:	079a      	lsls	r2, r3, #30
 800b214:	bf04      	itt	eq
 800b216:	089b      	lsreq	r3, r3, #2
 800b218:	3002      	addeq	r0, #2
 800b21a:	07da      	lsls	r2, r3, #31
 800b21c:	d403      	bmi.n	800b226 <__lo0bits+0x46>
 800b21e:	085b      	lsrs	r3, r3, #1
 800b220:	f100 0001 	add.w	r0, r0, #1
 800b224:	d006      	beq.n	800b234 <__lo0bits+0x54>
 800b226:	600b      	str	r3, [r1, #0]
 800b228:	4770      	bx	lr
 800b22a:	2010      	movs	r0, #16
 800b22c:	0c1b      	lsrs	r3, r3, #16
 800b22e:	e7e7      	b.n	800b200 <__lo0bits+0x20>
 800b230:	2000      	movs	r0, #0
 800b232:	4770      	bx	lr
 800b234:	2020      	movs	r0, #32
 800b236:	4770      	bx	lr
 800b238:	089b      	lsrs	r3, r3, #2
 800b23a:	2002      	movs	r0, #2
 800b23c:	600b      	str	r3, [r1, #0]
 800b23e:	4770      	bx	lr

0800b240 <__i2b>:
 800b240:	b510      	push	{r4, lr}
 800b242:	460c      	mov	r4, r1
 800b244:	2101      	movs	r1, #1
 800b246:	f7ff ff3d 	bl	800b0c4 <_Balloc>
 800b24a:	2201      	movs	r2, #1
 800b24c:	e9c0 2404 	strd	r2, r4, [r0, #16]
 800b250:	bd10      	pop	{r4, pc}
 800b252:	bf00      	nop

0800b254 <__multiply>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	690d      	ldr	r5, [r1, #16]
 800b25a:	6917      	ldr	r7, [r2, #16]
 800b25c:	460e      	mov	r6, r1
 800b25e:	42bd      	cmp	r5, r7
 800b260:	4614      	mov	r4, r2
 800b262:	b085      	sub	sp, #20
 800b264:	db05      	blt.n	800b272 <__multiply+0x1e>
 800b266:	463a      	mov	r2, r7
 800b268:	4623      	mov	r3, r4
 800b26a:	462f      	mov	r7, r5
 800b26c:	460c      	mov	r4, r1
 800b26e:	4615      	mov	r5, r2
 800b270:	461e      	mov	r6, r3
 800b272:	68a3      	ldr	r3, [r4, #8]
 800b274:	6861      	ldr	r1, [r4, #4]
 800b276:	eb07 0805 	add.w	r8, r7, r5
 800b27a:	4543      	cmp	r3, r8
 800b27c:	bfb8      	it	lt
 800b27e:	3101      	addlt	r1, #1
 800b280:	f7ff ff20 	bl	800b0c4 <_Balloc>
 800b284:	f100 0914 	add.w	r9, r0, #20
 800b288:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 800b28c:	45d1      	cmp	r9, sl
 800b28e:	9001      	str	r0, [sp, #4]
 800b290:	d205      	bcs.n	800b29e <__multiply+0x4a>
 800b292:	464b      	mov	r3, r9
 800b294:	2200      	movs	r2, #0
 800b296:	f843 2b04 	str.w	r2, [r3], #4
 800b29a:	459a      	cmp	sl, r3
 800b29c:	d8fb      	bhi.n	800b296 <__multiply+0x42>
 800b29e:	f106 0e14 	add.w	lr, r6, #20
 800b2a2:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
 800b2a6:	f104 0314 	add.w	r3, r4, #20
 800b2aa:	45de      	cmp	lr, fp
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b2b2:	d25f      	bcs.n	800b374 <__multiply+0x120>
 800b2b4:	1b3b      	subs	r3, r7, r4
 800b2b6:	3b15      	subs	r3, #21
 800b2b8:	f023 0303 	bic.w	r3, r3, #3
 800b2bc:	3304      	adds	r3, #4
 800b2be:	3415      	adds	r4, #21
 800b2c0:	42a7      	cmp	r7, r4
 800b2c2:	bf38      	it	cc
 800b2c4:	2304      	movcc	r3, #4
 800b2c6:	e9cd a802 	strd	sl, r8, [sp, #8]
 800b2ca:	4698      	mov	r8, r3
 800b2cc:	4692      	mov	sl, r2
 800b2ce:	e005      	b.n	800b2dc <__multiply+0x88>
 800b2d0:	0c00      	lsrs	r0, r0, #16
 800b2d2:	d129      	bne.n	800b328 <__multiply+0xd4>
 800b2d4:	45f3      	cmp	fp, lr
 800b2d6:	f109 0904 	add.w	r9, r9, #4
 800b2da:	d949      	bls.n	800b370 <__multiply+0x11c>
 800b2dc:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b2e0:	b286      	uxth	r6, r0
 800b2e2:	2e00      	cmp	r6, #0
 800b2e4:	d0f4      	beq.n	800b2d0 <__multiply+0x7c>
 800b2e6:	4655      	mov	r5, sl
 800b2e8:	464c      	mov	r4, r9
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f855 1b04 	ldr.w	r1, [r5], #4
 800b2f0:	6820      	ldr	r0, [r4, #0]
 800b2f2:	b28a      	uxth	r2, r1
 800b2f4:	fa1f fc80 	uxth.w	ip, r0
 800b2f8:	fb06 c202 	mla	r2, r6, r2, ip
 800b2fc:	0c09      	lsrs	r1, r1, #16
 800b2fe:	0c00      	lsrs	r0, r0, #16
 800b300:	fb06 0101 	mla	r1, r6, r1, r0
 800b304:	4413      	add	r3, r2
 800b306:	eb01 4213 	add.w	r2, r1, r3, lsr #16
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b310:	42af      	cmp	r7, r5
 800b312:	f844 3b04 	str.w	r3, [r4], #4
 800b316:	ea4f 4312 	mov.w	r3, r2, lsr #16
 800b31a:	d8e7      	bhi.n	800b2ec <__multiply+0x98>
 800b31c:	f849 3008 	str.w	r3, [r9, r8]
 800b320:	f85e 0c04 	ldr.w	r0, [lr, #-4]
 800b324:	0c00      	lsrs	r0, r0, #16
 800b326:	d0d5      	beq.n	800b2d4 <__multiply+0x80>
 800b328:	f8d9 3000 	ldr.w	r3, [r9]
 800b32c:	4654      	mov	r4, sl
 800b32e:	461e      	mov	r6, r3
 800b330:	464d      	mov	r5, r9
 800b332:	f04f 0c00 	mov.w	ip, #0
 800b336:	8822      	ldrh	r2, [r4, #0]
 800b338:	0c36      	lsrs	r6, r6, #16
 800b33a:	fb00 6602 	mla	r6, r0, r2, r6
 800b33e:	b29b      	uxth	r3, r3
 800b340:	44b4      	add	ip, r6
 800b342:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800b346:	f845 3b04 	str.w	r3, [r5], #4
 800b34a:	f854 3b04 	ldr.w	r3, [r4], #4
 800b34e:	682e      	ldr	r6, [r5, #0]
 800b350:	0c1b      	lsrs	r3, r3, #16
 800b352:	b2b2      	uxth	r2, r6
 800b354:	fb00 2303 	mla	r3, r0, r3, r2
 800b358:	42a7      	cmp	r7, r4
 800b35a:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 800b35e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800b362:	d8e8      	bhi.n	800b336 <__multiply+0xe2>
 800b364:	45f3      	cmp	fp, lr
 800b366:	f849 3008 	str.w	r3, [r9, r8]
 800b36a:	f109 0904 	add.w	r9, r9, #4
 800b36e:	d8b5      	bhi.n	800b2dc <__multiply+0x88>
 800b370:	e9dd a802 	ldrd	sl, r8, [sp, #8]
 800b374:	f1b8 0f00 	cmp.w	r8, #0
 800b378:	dc03      	bgt.n	800b382 <__multiply+0x12e>
 800b37a:	e006      	b.n	800b38a <__multiply+0x136>
 800b37c:	f1b8 0801 	subs.w	r8, r8, #1
 800b380:	d003      	beq.n	800b38a <__multiply+0x136>
 800b382:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 800b386:	2b00      	cmp	r3, #0
 800b388:	d0f8      	beq.n	800b37c <__multiply+0x128>
 800b38a:	9801      	ldr	r0, [sp, #4]
 800b38c:	f8c0 8010 	str.w	r8, [r0, #16]
 800b390:	b005      	add	sp, #20
 800b392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b396:	bf00      	nop

0800b398 <__pow5mult>:
 800b398:	f012 0303 	ands.w	r3, r2, #3
 800b39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a0:	4614      	mov	r4, r2
 800b3a2:	4607      	mov	r7, r0
 800b3a4:	d12e      	bne.n	800b404 <__pow5mult+0x6c>
 800b3a6:	460e      	mov	r6, r1
 800b3a8:	10a4      	asrs	r4, r4, #2
 800b3aa:	d01c      	beq.n	800b3e6 <__pow5mult+0x4e>
 800b3ac:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800b3ae:	b395      	cbz	r5, 800b416 <__pow5mult+0x7e>
 800b3b0:	07e3      	lsls	r3, r4, #31
 800b3b2:	f04f 0800 	mov.w	r8, #0
 800b3b6:	d406      	bmi.n	800b3c6 <__pow5mult+0x2e>
 800b3b8:	1064      	asrs	r4, r4, #1
 800b3ba:	d014      	beq.n	800b3e6 <__pow5mult+0x4e>
 800b3bc:	6828      	ldr	r0, [r5, #0]
 800b3be:	b1a8      	cbz	r0, 800b3ec <__pow5mult+0x54>
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	07e3      	lsls	r3, r4, #31
 800b3c4:	d5f8      	bpl.n	800b3b8 <__pow5mult+0x20>
 800b3c6:	462a      	mov	r2, r5
 800b3c8:	4631      	mov	r1, r6
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	f7ff ff42 	bl	800b254 <__multiply>
 800b3d0:	b1b6      	cbz	r6, 800b400 <__pow5mult+0x68>
 800b3d2:	6871      	ldr	r1, [r6, #4]
 800b3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d6:	1064      	asrs	r4, r4, #1
 800b3d8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800b3dc:	6032      	str	r2, [r6, #0]
 800b3de:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	d1ea      	bne.n	800b3bc <__pow5mult+0x24>
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ec:	462a      	mov	r2, r5
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff ff2f 	bl	800b254 <__multiply>
 800b3f6:	6028      	str	r0, [r5, #0]
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	f8c0 8000 	str.w	r8, [r0]
 800b3fe:	e7e0      	b.n	800b3c2 <__pow5mult+0x2a>
 800b400:	4606      	mov	r6, r0
 800b402:	e7d9      	b.n	800b3b8 <__pow5mult+0x20>
 800b404:	4a0b      	ldr	r2, [pc, #44]	; (800b434 <__pow5mult+0x9c>)
 800b406:	3b01      	subs	r3, #1
 800b408:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b40c:	2300      	movs	r3, #0
 800b40e:	f7ff fe89 	bl	800b124 <__multadd>
 800b412:	4606      	mov	r6, r0
 800b414:	e7c8      	b.n	800b3a8 <__pow5mult+0x10>
 800b416:	2101      	movs	r1, #1
 800b418:	4638      	mov	r0, r7
 800b41a:	f7ff fe53 	bl	800b0c4 <_Balloc>
 800b41e:	f240 2171 	movw	r1, #625	; 0x271
 800b422:	2201      	movs	r2, #1
 800b424:	2300      	movs	r3, #0
 800b426:	e9c0 2104 	strd	r2, r1, [r0, #16]
 800b42a:	4605      	mov	r5, r0
 800b42c:	64b8      	str	r0, [r7, #72]	; 0x48
 800b42e:	6003      	str	r3, [r0, #0]
 800b430:	e7be      	b.n	800b3b0 <__pow5mult+0x18>
 800b432:	bf00      	nop
 800b434:	08012780 	.word	0x08012780

0800b438 <__lshift>:
 800b438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b43c:	690e      	ldr	r6, [r1, #16]
 800b43e:	688b      	ldr	r3, [r1, #8]
 800b440:	eb06 1662 	add.w	r6, r6, r2, asr #5
 800b444:	1c75      	adds	r5, r6, #1
 800b446:	429d      	cmp	r5, r3
 800b448:	460c      	mov	r4, r1
 800b44a:	4690      	mov	r8, r2
 800b44c:	4607      	mov	r7, r0
 800b44e:	6849      	ldr	r1, [r1, #4]
 800b450:	ea4f 1962 	mov.w	r9, r2, asr #5
 800b454:	dd04      	ble.n	800b460 <__lshift+0x28>
 800b456:	005b      	lsls	r3, r3, #1
 800b458:	429d      	cmp	r5, r3
 800b45a:	f101 0101 	add.w	r1, r1, #1
 800b45e:	dcfa      	bgt.n	800b456 <__lshift+0x1e>
 800b460:	4638      	mov	r0, r7
 800b462:	f7ff fe2f 	bl	800b0c4 <_Balloc>
 800b466:	f1b9 0f00 	cmp.w	r9, #0
 800b46a:	f100 0114 	add.w	r1, r0, #20
 800b46e:	dd0e      	ble.n	800b48e <__lshift+0x56>
 800b470:	460b      	mov	r3, r1
 800b472:	2200      	movs	r2, #0
 800b474:	f109 0905 	add.w	r9, r9, #5
 800b478:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800b47c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800b480:	f843 2b04 	str.w	r2, [r3], #4
 800b484:	454b      	cmp	r3, r9
 800b486:	d1fb      	bne.n	800b480 <__lshift+0x48>
 800b488:	f1ac 0314 	sub.w	r3, ip, #20
 800b48c:	4419      	add	r1, r3
 800b48e:	6922      	ldr	r2, [r4, #16]
 800b490:	f104 0314 	add.w	r3, r4, #20
 800b494:	f018 081f 	ands.w	r8, r8, #31
 800b498:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 800b49c:	d02c      	beq.n	800b4f8 <__lshift+0xc0>
 800b49e:	468e      	mov	lr, r1
 800b4a0:	f04f 0a00 	mov.w	sl, #0
 800b4a4:	f1c8 0920 	rsb	r9, r8, #32
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	fa02 f208 	lsl.w	r2, r2, r8
 800b4ae:	ea42 020a 	orr.w	r2, r2, sl
 800b4b2:	f84e 2b04 	str.w	r2, [lr], #4
 800b4b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ba:	459c      	cmp	ip, r3
 800b4bc:	fa22 fa09 	lsr.w	sl, r2, r9
 800b4c0:	d8f2      	bhi.n	800b4a8 <__lshift+0x70>
 800b4c2:	ebac 0304 	sub.w	r3, ip, r4
 800b4c6:	3b15      	subs	r3, #21
 800b4c8:	f023 0303 	bic.w	r3, r3, #3
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	f104 0215 	add.w	r2, r4, #21
 800b4d2:	4594      	cmp	ip, r2
 800b4d4:	bf38      	it	cc
 800b4d6:	2304      	movcc	r3, #4
 800b4d8:	f1ba 0f00 	cmp.w	sl, #0
 800b4dc:	bf18      	it	ne
 800b4de:	462e      	movne	r6, r5
 800b4e0:	f841 a003 	str.w	sl, [r1, r3]
 800b4e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e6:	6862      	ldr	r2, [r4, #4]
 800b4e8:	6106      	str	r6, [r0, #16]
 800b4ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4ee:	6021      	str	r1, [r4, #0]
 800b4f0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f8:	3904      	subs	r1, #4
 800b4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4fe:	459c      	cmp	ip, r3
 800b500:	f841 2f04 	str.w	r2, [r1, #4]!
 800b504:	d8f9      	bhi.n	800b4fa <__lshift+0xc2>
 800b506:	e7ed      	b.n	800b4e4 <__lshift+0xac>

0800b508 <__mcmp>:
 800b508:	b430      	push	{r4, r5}
 800b50a:	690b      	ldr	r3, [r1, #16]
 800b50c:	4605      	mov	r5, r0
 800b50e:	6900      	ldr	r0, [r0, #16]
 800b510:	1ac0      	subs	r0, r0, r3
 800b512:	d111      	bne.n	800b538 <__mcmp+0x30>
 800b514:	3514      	adds	r5, #20
 800b516:	3114      	adds	r1, #20
 800b518:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800b51c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b520:	e001      	b.n	800b526 <__mcmp+0x1e>
 800b522:	429d      	cmp	r5, r3
 800b524:	d208      	bcs.n	800b538 <__mcmp+0x30>
 800b526:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b52a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b52e:	428c      	cmp	r4, r1
 800b530:	d0f7      	beq.n	800b522 <__mcmp+0x1a>
 800b532:	d203      	bcs.n	800b53c <__mcmp+0x34>
 800b534:	f04f 30ff 	mov.w	r0, #4294967295
 800b538:	bc30      	pop	{r4, r5}
 800b53a:	4770      	bx	lr
 800b53c:	2001      	movs	r0, #1
 800b53e:	bc30      	pop	{r4, r5}
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop

0800b544 <__mdiff>:
 800b544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	4692      	mov	sl, r2
 800b54a:	690b      	ldr	r3, [r1, #16]
 800b54c:	6912      	ldr	r2, [r2, #16]
 800b54e:	468b      	mov	fp, r1
 800b550:	1a9b      	subs	r3, r3, r2
 800b552:	2b00      	cmp	r3, #0
 800b554:	d119      	bne.n	800b58a <__mdiff+0x46>
 800b556:	f101 0814 	add.w	r8, r1, #20
 800b55a:	f10a 0914 	add.w	r9, sl, #20
 800b55e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 800b562:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800b566:	e001      	b.n	800b56c <__mdiff+0x28>
 800b568:	4598      	cmp	r8, r3
 800b56a:	d27e      	bcs.n	800b66a <__mdiff+0x126>
 800b56c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b570:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b574:	428c      	cmp	r4, r1
 800b576:	d0f7      	beq.n	800b568 <__mdiff+0x24>
 800b578:	d20c      	bcs.n	800b594 <__mdiff+0x50>
 800b57a:	4642      	mov	r2, r8
 800b57c:	465b      	mov	r3, fp
 800b57e:	46c8      	mov	r8, r9
 800b580:	46d3      	mov	fp, sl
 800b582:	4691      	mov	r9, r2
 800b584:	469a      	mov	sl, r3
 800b586:	2701      	movs	r7, #1
 800b588:	e005      	b.n	800b596 <__mdiff+0x52>
 800b58a:	db66      	blt.n	800b65a <__mdiff+0x116>
 800b58c:	f101 0814 	add.w	r8, r1, #20
 800b590:	f10a 0914 	add.w	r9, sl, #20
 800b594:	2700      	movs	r7, #0
 800b596:	f8db 1004 	ldr.w	r1, [fp, #4]
 800b59a:	f7ff fd93 	bl	800b0c4 <_Balloc>
 800b59e:	f100 0614 	add.w	r6, r0, #20
 800b5a2:	46b4      	mov	ip, r6
 800b5a4:	464d      	mov	r5, r9
 800b5a6:	2400      	movs	r4, #0
 800b5a8:	f8db 1010 	ldr.w	r1, [fp, #16]
 800b5ac:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b5b0:	eb08 0e81 	add.w	lr, r8, r1, lsl #2
 800b5b4:	60c7      	str	r7, [r0, #12]
 800b5b6:	eb09 0a83 	add.w	sl, r9, r3, lsl #2
 800b5ba:	f1a8 0704 	sub.w	r7, r8, #4
 800b5be:	f857 bf04 	ldr.w	fp, [r7, #4]!
 800b5c2:	f855 2b04 	ldr.w	r2, [r5], #4
 800b5c6:	fa1f f38b 	uxth.w	r3, fp
 800b5ca:	441c      	add	r4, r3
 800b5cc:	b293      	uxth	r3, r2
 800b5ce:	0c12      	lsrs	r2, r2, #16
 800b5d0:	1ae4      	subs	r4, r4, r3
 800b5d2:	ebc2 421b 	rsb	r2, r2, fp, lsr #16
 800b5d6:	eb02 4224 	add.w	r2, r2, r4, asr #16
 800b5da:	b2a4      	uxth	r4, r4
 800b5dc:	ea44 4302 	orr.w	r3, r4, r2, lsl #16
 800b5e0:	45aa      	cmp	sl, r5
 800b5e2:	f84c 3b04 	str.w	r3, [ip], #4
 800b5e6:	ea4f 4422 	mov.w	r4, r2, asr #16
 800b5ea:	d8e8      	bhi.n	800b5be <__mdiff+0x7a>
 800b5ec:	ea6f 0209 	mvn.w	r2, r9
 800b5f0:	f109 0901 	add.w	r9, r9, #1
 800b5f4:	4452      	add	r2, sl
 800b5f6:	45ca      	cmp	sl, r9
 800b5f8:	f022 0503 	bic.w	r5, r2, #3
 800b5fc:	f105 0504 	add.w	r5, r5, #4
 800b600:	bf38      	it	cc
 800b602:	2504      	movcc	r5, #4
 800b604:	f022 0203 	bic.w	r2, r2, #3
 800b608:	bf38      	it	cc
 800b60a:	2200      	movcc	r2, #0
 800b60c:	44a8      	add	r8, r5
 800b60e:	45c6      	cmp	lr, r8
 800b610:	4435      	add	r5, r6
 800b612:	4416      	add	r6, r2
 800b614:	d918      	bls.n	800b648 <__mdiff+0x104>
 800b616:	462e      	mov	r6, r5
 800b618:	4642      	mov	r2, r8
 800b61a:	f852 7b04 	ldr.w	r7, [r2], #4
 800b61e:	b2bb      	uxth	r3, r7
 800b620:	4423      	add	r3, r4
 800b622:	141c      	asrs	r4, r3, #16
 800b624:	eb04 4417 	add.w	r4, r4, r7, lsr #16
 800b628:	b29b      	uxth	r3, r3
 800b62a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b62e:	4596      	cmp	lr, r2
 800b630:	f846 3b04 	str.w	r3, [r6], #4
 800b634:	ea4f 4424 	mov.w	r4, r4, asr #16
 800b638:	d8ef      	bhi.n	800b61a <__mdiff+0xd6>
 800b63a:	f10e 36ff 	add.w	r6, lr, #4294967295
 800b63e:	eba6 0608 	sub.w	r6, r6, r8
 800b642:	f026 0603 	bic.w	r6, r6, #3
 800b646:	442e      	add	r6, r5
 800b648:	b923      	cbnz	r3, 800b654 <__mdiff+0x110>
 800b64a:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800b64e:	3901      	subs	r1, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	d0fa      	beq.n	800b64a <__mdiff+0x106>
 800b654:	6101      	str	r1, [r0, #16]
 800b656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65a:	46d3      	mov	fp, sl
 800b65c:	f10a 0814 	add.w	r8, sl, #20
 800b660:	2701      	movs	r7, #1
 800b662:	468a      	mov	sl, r1
 800b664:	f101 0914 	add.w	r9, r1, #20
 800b668:	e795      	b.n	800b596 <__mdiff+0x52>
 800b66a:	2100      	movs	r1, #0
 800b66c:	f7ff fd2a 	bl	800b0c4 <_Balloc>
 800b670:	2201      	movs	r2, #1
 800b672:	2300      	movs	r3, #0
 800b674:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b67c <__d2b>:
 800b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b67e:	461c      	mov	r4, r3
 800b680:	b083      	sub	sp, #12
 800b682:	2101      	movs	r1, #1
 800b684:	4617      	mov	r7, r2
 800b686:	9e08      	ldr	r6, [sp, #32]
 800b688:	f7ff fd1c 	bl	800b0c4 <_Balloc>
 800b68c:	4623      	mov	r3, r4
 800b68e:	f3c4 550a 	ubfx	r5, r4, #20, #11
 800b692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b696:	4604      	mov	r4, r0
 800b698:	b10d      	cbz	r5, 800b69e <__d2b+0x22>
 800b69a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b69e:	2f00      	cmp	r7, #0
 800b6a0:	9301      	str	r3, [sp, #4]
 800b6a2:	d01a      	beq.n	800b6da <__d2b+0x5e>
 800b6a4:	4668      	mov	r0, sp
 800b6a6:	9700      	str	r7, [sp, #0]
 800b6a8:	f7ff fd9a 	bl	800b1e0 <__lo0bits>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d12e      	bne.n	800b70e <__d2b+0x92>
 800b6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6b4:	6162      	str	r2, [r4, #20]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bf14      	ite	ne
 800b6ba:	2102      	movne	r1, #2
 800b6bc:	2101      	moveq	r1, #1
 800b6be:	61a3      	str	r3, [r4, #24]
 800b6c0:	6121      	str	r1, [r4, #16]
 800b6c2:	b1ad      	cbz	r5, 800b6f0 <__d2b+0x74>
 800b6c4:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
 800b6c8:	4403      	add	r3, r0
 800b6ca:	6033      	str	r3, [r6, #0]
 800b6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6d2:	6018      	str	r0, [r3, #0]
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	b003      	add	sp, #12
 800b6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6da:	a801      	add	r0, sp, #4
 800b6dc:	f7ff fd80 	bl	800b1e0 <__lo0bits>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	9a01      	ldr	r2, [sp, #4]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800b6ea:	3020      	adds	r0, #32
 800b6ec:	2d00      	cmp	r5, #0
 800b6ee:	d1e9      	bne.n	800b6c4 <__d2b+0x48>
 800b6f0:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b6f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6f8:	6030      	str	r0, [r6, #0]
 800b6fa:	6918      	ldr	r0, [r3, #16]
 800b6fc:	f7ff fd50 	bl	800b1a0 <__hi0bits>
 800b700:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b704:	4620      	mov	r0, r4
 800b706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b708:	6019      	str	r1, [r3, #0]
 800b70a:	b003      	add	sp, #12
 800b70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b70e:	9b01      	ldr	r3, [sp, #4]
 800b710:	9900      	ldr	r1, [sp, #0]
 800b712:	f1c0 0220 	rsb	r2, r0, #32
 800b716:	fa03 f202 	lsl.w	r2, r3, r2
 800b71a:	430a      	orrs	r2, r1
 800b71c:	40c3      	lsrs	r3, r0
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	6162      	str	r2, [r4, #20]
 800b722:	e7c8      	b.n	800b6b6 <__d2b+0x3a>

0800b724 <frexp>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	4617      	mov	r7, r2
 800b728:	2200      	movs	r2, #0
 800b72a:	f8df c060 	ldr.w	ip, [pc, #96]	; 800b78c <frexp+0x68>
 800b72e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b732:	4563      	cmp	r3, ip
 800b734:	4604      	mov	r4, r0
 800b736:	460d      	mov	r5, r1
 800b738:	603a      	str	r2, [r7, #0]
 800b73a:	dc22      	bgt.n	800b782 <frexp+0x5e>
 800b73c:	4684      	mov	ip, r0
 800b73e:	ea53 0c0c 	orrs.w	ip, r3, ip
 800b742:	d01e      	beq.n	800b782 <frexp+0x5e>
 800b744:	f8df c048 	ldr.w	ip, [pc, #72]	; 800b790 <frexp+0x6c>
 800b748:	460e      	mov	r6, r1
 800b74a:	ea01 0c0c 	and.w	ip, r1, ip
 800b74e:	f1bc 0f00 	cmp.w	ip, #0
 800b752:	d109      	bne.n	800b768 <frexp+0x44>
 800b754:	2200      	movs	r2, #0
 800b756:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <frexp+0x64>)
 800b758:	f000 fd36 	bl	800c1c8 <__aeabi_dmul>
 800b75c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800b760:	4604      	mov	r4, r0
 800b762:	460e      	mov	r6, r1
 800b764:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b768:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 800b76c:	151b      	asrs	r3, r3, #20
 800b76e:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 800b772:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b776:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b77a:	4413      	add	r3, r2
 800b77c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b780:	603b      	str	r3, [r7, #0]
 800b782:	4620      	mov	r0, r4
 800b784:	4629      	mov	r1, r5
 800b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b788:	43500000 	.word	0x43500000
 800b78c:	7fefffff 	.word	0x7fefffff
 800b790:	7ff00000 	.word	0x7ff00000

0800b794 <strncpy>:
 800b794:	b470      	push	{r4, r5, r6}
 800b796:	ea40 0401 	orr.w	r4, r0, r1
 800b79a:	07a3      	lsls	r3, r4, #30
 800b79c:	d122      	bne.n	800b7e4 <strncpy+0x50>
 800b79e:	2a03      	cmp	r2, #3
 800b7a0:	d920      	bls.n	800b7e4 <strncpy+0x50>
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7ac:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800b7b0:	ea25 0506 	bic.w	r5, r5, r6
 800b7b4:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800b7b8:	d115      	bne.n	800b7e6 <strncpy+0x52>
 800b7ba:	3a04      	subs	r2, #4
 800b7bc:	2a03      	cmp	r2, #3
 800b7be:	4619      	mov	r1, r3
 800b7c0:	f844 6b04 	str.w	r6, [r4], #4
 800b7c4:	d8ef      	bhi.n	800b7a6 <strncpy+0x12>
 800b7c6:	1e4d      	subs	r5, r1, #1
 800b7c8:	b152      	cbz	r2, 800b7e0 <strncpy+0x4c>
 800b7ca:	4623      	mov	r3, r4
 800b7cc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800b7d0:	1e56      	subs	r6, r2, #1
 800b7d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b7d6:	b141      	cbz	r1, 800b7ea <strncpy+0x56>
 800b7d8:	4632      	mov	r2, r6
 800b7da:	461c      	mov	r4, r3
 800b7dc:	2a00      	cmp	r2, #0
 800b7de:	d1f4      	bne.n	800b7ca <strncpy+0x36>
 800b7e0:	bc70      	pop	{r4, r5, r6}
 800b7e2:	4770      	bx	lr
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	1e4d      	subs	r5, r1, #1
 800b7e8:	e7ee      	b.n	800b7c8 <strncpy+0x34>
 800b7ea:	4422      	add	r2, r4
 800b7ec:	2e00      	cmp	r6, #0
 800b7ee:	d0f7      	beq.n	800b7e0 <strncpy+0x4c>
 800b7f0:	f803 1b01 	strb.w	r1, [r3], #1
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d1fb      	bne.n	800b7f0 <strncpy+0x5c>
 800b7f8:	bc70      	pop	{r4, r5, r6}
 800b7fa:	4770      	bx	lr

0800b7fc <__ssprint_r>:
 800b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	6893      	ldr	r3, [r2, #8]
 800b802:	4691      	mov	r9, r2
 800b804:	b083      	sub	sp, #12
 800b806:	2b00      	cmp	r3, #0
 800b808:	d06d      	beq.n	800b8e6 <__ssprint_r+0xea>
 800b80a:	6817      	ldr	r7, [r2, #0]
 800b80c:	4680      	mov	r8, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	6808      	ldr	r0, [r1, #0]
 800b812:	688d      	ldr	r5, [r1, #8]
 800b814:	3708      	adds	r7, #8
 800b816:	e043      	b.n	800b8a0 <__ssprint_r+0xa4>
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800b81e:	d02e      	beq.n	800b87e <__ssprint_r+0x82>
 800b820:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 800b824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b828:	eba0 0a01 	sub.w	sl, r0, r1
 800b82c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b830:	eb0a 0006 	add.w	r0, sl, r6
 800b834:	106d      	asrs	r5, r5, #1
 800b836:	3001      	adds	r0, #1
 800b838:	42a8      	cmp	r0, r5
 800b83a:	462a      	mov	r2, r5
 800b83c:	bf84      	itt	hi
 800b83e:	4605      	movhi	r5, r0
 800b840:	462a      	movhi	r2, r5
 800b842:	055b      	lsls	r3, r3, #21
 800b844:	d536      	bpl.n	800b8b4 <__ssprint_r+0xb8>
 800b846:	4611      	mov	r1, r2
 800b848:	4640      	mov	r0, r8
 800b84a:	f7fc f871 	bl	8007930 <_malloc_r>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d03a      	beq.n	800b8c8 <__ssprint_r+0xcc>
 800b852:	4652      	mov	r2, sl
 800b854:	6921      	ldr	r1, [r4, #16]
 800b856:	9001      	str	r0, [sp, #4]
 800b858:	f7fc fb18 	bl	8007e8c <memcpy>
 800b85c:	89a2      	ldrh	r2, [r4, #12]
 800b85e:	9b01      	ldr	r3, [sp, #4]
 800b860:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b864:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b868:	81a2      	strh	r2, [r4, #12]
 800b86a:	eba5 020a 	sub.w	r2, r5, sl
 800b86e:	eb03 000a 	add.w	r0, r3, sl
 800b872:	6165      	str	r5, [r4, #20]
 800b874:	46b2      	mov	sl, r6
 800b876:	4635      	mov	r5, r6
 800b878:	6123      	str	r3, [r4, #16]
 800b87a:	6020      	str	r0, [r4, #0]
 800b87c:	60a2      	str	r2, [r4, #8]
 800b87e:	4659      	mov	r1, fp
 800b880:	4652      	mov	r2, sl
 800b882:	f000 f87d 	bl	800b980 <memmove>
 800b886:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b88a:	68a1      	ldr	r1, [r4, #8]
 800b88c:	6820      	ldr	r0, [r4, #0]
 800b88e:	1b4d      	subs	r5, r1, r5
 800b890:	4450      	add	r0, sl
 800b892:	1b9e      	subs	r6, r3, r6
 800b894:	60a5      	str	r5, [r4, #8]
 800b896:	6020      	str	r0, [r4, #0]
 800b898:	f8c9 6008 	str.w	r6, [r9, #8]
 800b89c:	b31e      	cbz	r6, 800b8e6 <__ssprint_r+0xea>
 800b89e:	3708      	adds	r7, #8
 800b8a0:	e957 b602 	ldrd	fp, r6, [r7, #-8]
 800b8a4:	2e00      	cmp	r6, #0
 800b8a6:	d0fa      	beq.n	800b89e <__ssprint_r+0xa2>
 800b8a8:	42b5      	cmp	r5, r6
 800b8aa:	46aa      	mov	sl, r5
 800b8ac:	d9b4      	bls.n	800b818 <__ssprint_r+0x1c>
 800b8ae:	4635      	mov	r5, r6
 800b8b0:	46b2      	mov	sl, r6
 800b8b2:	e7e4      	b.n	800b87e <__ssprint_r+0x82>
 800b8b4:	4640      	mov	r0, r8
 800b8b6:	f000 f8cd 	bl	800ba54 <_realloc_r>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d1d4      	bne.n	800b86a <__ssprint_r+0x6e>
 800b8c0:	4640      	mov	r0, r8
 800b8c2:	6921      	ldr	r1, [r4, #16]
 800b8c4:	f7fc fd30 	bl	8008328 <_free_r>
 800b8c8:	230c      	movs	r3, #12
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d0:	f8c8 3000 	str.w	r3, [r8]
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	e9c9 2201 	strd	r2, r2, [r9, #4]
 800b8e0:	b003      	add	sp, #12
 800b8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	f8c9 0004 	str.w	r0, [r9, #4]
 800b8ec:	b003      	add	sp, #12
 800b8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f2:	bf00      	nop

0800b8f4 <_calloc_r>:
 800b8f4:	b510      	push	{r4, lr}
 800b8f6:	fb02 f101 	mul.w	r1, r2, r1
 800b8fa:	f7fc f819 	bl	8007930 <_malloc_r>
 800b8fe:	4604      	mov	r4, r0
 800b900:	b168      	cbz	r0, 800b91e <_calloc_r+0x2a>
 800b902:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b906:	f022 0203 	bic.w	r2, r2, #3
 800b90a:	3a04      	subs	r2, #4
 800b90c:	2a24      	cmp	r2, #36	; 0x24
 800b90e:	d818      	bhi.n	800b942 <_calloc_r+0x4e>
 800b910:	2a13      	cmp	r2, #19
 800b912:	d806      	bhi.n	800b922 <_calloc_r+0x2e>
 800b914:	4602      	mov	r2, r0
 800b916:	2300      	movs	r3, #0
 800b918:	e9c2 3300 	strd	r3, r3, [r2]
 800b91c:	6093      	str	r3, [r2, #8]
 800b91e:	4620      	mov	r0, r4
 800b920:	bd10      	pop	{r4, pc}
 800b922:	2300      	movs	r3, #0
 800b924:	2a1b      	cmp	r2, #27
 800b926:	e9c0 3300 	strd	r3, r3, [r0]
 800b92a:	d90f      	bls.n	800b94c <_calloc_r+0x58>
 800b92c:	2a24      	cmp	r2, #36	; 0x24
 800b92e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800b932:	bf0a      	itet	eq
 800b934:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800b938:	f100 0210 	addne.w	r2, r0, #16
 800b93c:	f100 0218 	addeq.w	r2, r0, #24
 800b940:	e7e9      	b.n	800b916 <_calloc_r+0x22>
 800b942:	2100      	movs	r1, #0
 800b944:	f7fc fb18 	bl	8007f78 <memset>
 800b948:	4620      	mov	r0, r4
 800b94a:	bd10      	pop	{r4, pc}
 800b94c:	f100 0208 	add.w	r2, r0, #8
 800b950:	e7e1      	b.n	800b916 <_calloc_r+0x22>
 800b952:	bf00      	nop

0800b954 <__ascii_mbtowc>:
 800b954:	b082      	sub	sp, #8
 800b956:	b149      	cbz	r1, 800b96c <__ascii_mbtowc+0x18>
 800b958:	b15a      	cbz	r2, 800b972 <__ascii_mbtowc+0x1e>
 800b95a:	b16b      	cbz	r3, 800b978 <__ascii_mbtowc+0x24>
 800b95c:	7813      	ldrb	r3, [r2, #0]
 800b95e:	600b      	str	r3, [r1, #0]
 800b960:	7812      	ldrb	r2, [r2, #0]
 800b962:	1e10      	subs	r0, r2, #0
 800b964:	bf18      	it	ne
 800b966:	2001      	movne	r0, #1
 800b968:	b002      	add	sp, #8
 800b96a:	4770      	bx	lr
 800b96c:	a901      	add	r1, sp, #4
 800b96e:	2a00      	cmp	r2, #0
 800b970:	d1f3      	bne.n	800b95a <__ascii_mbtowc+0x6>
 800b972:	4610      	mov	r0, r2
 800b974:	b002      	add	sp, #8
 800b976:	4770      	bx	lr
 800b978:	f06f 0001 	mvn.w	r0, #1
 800b97c:	e7f4      	b.n	800b968 <__ascii_mbtowc+0x14>
 800b97e:	bf00      	nop

0800b980 <memmove>:
 800b980:	4288      	cmp	r0, r1
 800b982:	b4f0      	push	{r4, r5, r6, r7}
 800b984:	d90d      	bls.n	800b9a2 <memmove+0x22>
 800b986:	188b      	adds	r3, r1, r2
 800b988:	4283      	cmp	r3, r0
 800b98a:	d90a      	bls.n	800b9a2 <memmove+0x22>
 800b98c:	1884      	adds	r4, r0, r2
 800b98e:	b132      	cbz	r2, 800b99e <memmove+0x1e>
 800b990:	4622      	mov	r2, r4
 800b992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b996:	4299      	cmp	r1, r3
 800b998:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b99c:	d1f9      	bne.n	800b992 <memmove+0x12>
 800b99e:	bcf0      	pop	{r4, r5, r6, r7}
 800b9a0:	4770      	bx	lr
 800b9a2:	2a0f      	cmp	r2, #15
 800b9a4:	d80e      	bhi.n	800b9c4 <memmove+0x44>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	1e54      	subs	r4, r2, #1
 800b9aa:	2a00      	cmp	r2, #0
 800b9ac:	d0f7      	beq.n	800b99e <memmove+0x1e>
 800b9ae:	3401      	adds	r4, #1
 800b9b0:	440c      	add	r4, r1
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9b8:	42a1      	cmp	r1, r4
 800b9ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9be:	d1f9      	bne.n	800b9b4 <memmove+0x34>
 800b9c0:	bcf0      	pop	{r4, r5, r6, r7}
 800b9c2:	4770      	bx	lr
 800b9c4:	ea40 0301 	orr.w	r3, r0, r1
 800b9c8:	079b      	lsls	r3, r3, #30
 800b9ca:	d13e      	bne.n	800ba4a <memmove+0xca>
 800b9cc:	f1a2 0310 	sub.w	r3, r2, #16
 800b9d0:	f023 040f 	bic.w	r4, r3, #15
 800b9d4:	f101 0720 	add.w	r7, r1, #32
 800b9d8:	4427      	add	r7, r4
 800b9da:	091b      	lsrs	r3, r3, #4
 800b9dc:	f101 0410 	add.w	r4, r1, #16
 800b9e0:	f100 0510 	add.w	r5, r0, #16
 800b9e4:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800b9e8:	3410      	adds	r4, #16
 800b9ea:	f845 6c10 	str.w	r6, [r5, #-16]
 800b9ee:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 800b9f2:	3510      	adds	r5, #16
 800b9f4:	f845 6c1c 	str.w	r6, [r5, #-28]
 800b9f8:	f854 6c18 	ldr.w	r6, [r4, #-24]
 800b9fc:	f845 6c18 	str.w	r6, [r5, #-24]
 800ba00:	f854 6c14 	ldr.w	r6, [r4, #-20]
 800ba04:	42bc      	cmp	r4, r7
 800ba06:	f845 6c14 	str.w	r6, [r5, #-20]
 800ba0a:	d1eb      	bne.n	800b9e4 <memmove+0x64>
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	f012 0f0c 	tst.w	r2, #12
 800ba12:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800ba16:	f002 040f 	and.w	r4, r2, #15
 800ba1a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800ba1e:	d017      	beq.n	800ba50 <memmove+0xd0>
 800ba20:	460e      	mov	r6, r1
 800ba22:	3c04      	subs	r4, #4
 800ba24:	f024 0c03 	bic.w	ip, r4, #3
 800ba28:	08a5      	lsrs	r5, r4, #2
 800ba2a:	449c      	add	ip, r3
 800ba2c:	1f1c      	subs	r4, r3, #4
 800ba2e:	f856 7b04 	ldr.w	r7, [r6], #4
 800ba32:	f844 7f04 	str.w	r7, [r4, #4]!
 800ba36:	4564      	cmp	r4, ip
 800ba38:	d1f9      	bne.n	800ba2e <memmove+0xae>
 800ba3a:	1c6c      	adds	r4, r5, #1
 800ba3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba44:	f002 0203 	and.w	r2, r2, #3
 800ba48:	e7ae      	b.n	800b9a8 <memmove+0x28>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	1e54      	subs	r4, r2, #1
 800ba4e:	e7ae      	b.n	800b9ae <memmove+0x2e>
 800ba50:	4622      	mov	r2, r4
 800ba52:	e7a9      	b.n	800b9a8 <memmove+0x28>

0800ba54 <_realloc_r>:
 800ba54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	4616      	mov	r6, r2
 800ba5a:	2900      	cmp	r1, #0
 800ba5c:	f000 80bd 	beq.w	800bbda <_realloc_r+0x186>
 800ba60:	f106 050b 	add.w	r5, r6, #11
 800ba64:	460c      	mov	r4, r1
 800ba66:	4680      	mov	r8, r0
 800ba68:	f7fc fad6 	bl	8008018 <__malloc_lock>
 800ba6c:	2d16      	cmp	r5, #22
 800ba6e:	d85f      	bhi.n	800bb30 <_realloc_r+0xdc>
 800ba70:	2510      	movs	r5, #16
 800ba72:	462a      	mov	r2, r5
 800ba74:	42ae      	cmp	r6, r5
 800ba76:	d860      	bhi.n	800bb3a <_realloc_r+0xe6>
 800ba78:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800ba7c:	f1a4 0908 	sub.w	r9, r4, #8
 800ba80:	f021 0703 	bic.w	r7, r1, #3
 800ba84:	4297      	cmp	r7, r2
 800ba86:	f280 8086 	bge.w	800bb96 <_realloc_r+0x142>
 800ba8a:	4bc9      	ldr	r3, [pc, #804]	; (800bdb0 <_realloc_r+0x35c>)
 800ba8c:	eb09 0007 	add.w	r0, r9, r7
 800ba90:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800ba94:	4584      	cmp	ip, r0
 800ba96:	f000 80b9 	beq.w	800bc0c <_realloc_r+0x1b8>
 800ba9a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800ba9e:	f02c 0301 	bic.w	r3, ip, #1
 800baa2:	4403      	add	r3, r0
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	07db      	lsls	r3, r3, #31
 800baa8:	f100 808c 	bmi.w	800bbc4 <_realloc_r+0x170>
 800baac:	f02c 0c03 	bic.w	ip, ip, #3
 800bab0:	eb07 030c 	add.w	r3, r7, ip
 800bab4:	4293      	cmp	r3, r2
 800bab6:	f280 8115 	bge.w	800bce4 <_realloc_r+0x290>
 800baba:	07cb      	lsls	r3, r1, #31
 800babc:	d40f      	bmi.n	800bade <_realloc_r+0x8a>
 800babe:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800bac2:	eba9 0a03 	sub.w	sl, r9, r3
 800bac6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800baca:	f023 0103 	bic.w	r1, r3, #3
 800bace:	448c      	add	ip, r1
 800bad0:	44bc      	add	ip, r7
 800bad2:	4594      	cmp	ip, r2
 800bad4:	da38      	bge.n	800bb48 <_realloc_r+0xf4>
 800bad6:	187b      	adds	r3, r7, r1
 800bad8:	4293      	cmp	r3, r2
 800bada:	f280 810f 	bge.w	800bcfc <_realloc_r+0x2a8>
 800bade:	4631      	mov	r1, r6
 800bae0:	4640      	mov	r0, r8
 800bae2:	f7fb ff25 	bl	8007930 <_malloc_r>
 800bae6:	4606      	mov	r6, r0
 800bae8:	b1e0      	cbz	r0, 800bb24 <_realloc_r+0xd0>
 800baea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800baee:	f1a0 0208 	sub.w	r2, r0, #8
 800baf2:	f023 0301 	bic.w	r3, r3, #1
 800baf6:	444b      	add	r3, r9
 800baf8:	4293      	cmp	r3, r2
 800bafa:	f000 80f9 	beq.w	800bcf0 <_realloc_r+0x29c>
 800bafe:	1f3a      	subs	r2, r7, #4
 800bb00:	2a24      	cmp	r2, #36	; 0x24
 800bb02:	f200 811c 	bhi.w	800bd3e <_realloc_r+0x2ea>
 800bb06:	2a13      	cmp	r2, #19
 800bb08:	f200 80cd 	bhi.w	800bca6 <_realloc_r+0x252>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	4622      	mov	r2, r4
 800bb10:	6811      	ldr	r1, [r2, #0]
 800bb12:	6019      	str	r1, [r3, #0]
 800bb14:	6851      	ldr	r1, [r2, #4]
 800bb16:	6059      	str	r1, [r3, #4]
 800bb18:	6892      	ldr	r2, [r2, #8]
 800bb1a:	609a      	str	r2, [r3, #8]
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	4640      	mov	r0, r8
 800bb20:	f7fc fc02 	bl	8008328 <_free_r>
 800bb24:	4640      	mov	r0, r8
 800bb26:	f7fc fa7d 	bl	8008024 <__malloc_unlock>
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb30:	f025 0507 	bic.w	r5, r5, #7
 800bb34:	2d00      	cmp	r5, #0
 800bb36:	462a      	mov	r2, r5
 800bb38:	da9c      	bge.n	800ba74 <_realloc_r+0x20>
 800bb3a:	230c      	movs	r3, #12
 800bb3c:	2600      	movs	r6, #0
 800bb3e:	f8c8 3000 	str.w	r3, [r8]
 800bb42:	4630      	mov	r0, r6
 800bb44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb48:	4656      	mov	r6, sl
 800bb4a:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800bb4e:	60cb      	str	r3, [r1, #12]
 800bb50:	6099      	str	r1, [r3, #8]
 800bb52:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800bb56:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bb5a:	1f3a      	subs	r2, r7, #4
 800bb5c:	2a24      	cmp	r2, #36	; 0x24
 800bb5e:	60cb      	str	r3, [r1, #12]
 800bb60:	6099      	str	r1, [r3, #8]
 800bb62:	f200 8107 	bhi.w	800bd74 <_realloc_r+0x320>
 800bb66:	2a13      	cmp	r2, #19
 800bb68:	f240 8102 	bls.w	800bd70 <_realloc_r+0x31c>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	2a1b      	cmp	r2, #27
 800bb70:	f8ca 3008 	str.w	r3, [sl, #8]
 800bb74:	6863      	ldr	r3, [r4, #4]
 800bb76:	f8ca 300c 	str.w	r3, [sl, #12]
 800bb7a:	f200 811b 	bhi.w	800bdb4 <_realloc_r+0x360>
 800bb7e:	3408      	adds	r4, #8
 800bb80:	f10a 0310 	add.w	r3, sl, #16
 800bb84:	6822      	ldr	r2, [r4, #0]
 800bb86:	4667      	mov	r7, ip
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	6862      	ldr	r2, [r4, #4]
 800bb8c:	46d1      	mov	r9, sl
 800bb8e:	605a      	str	r2, [r3, #4]
 800bb90:	68a2      	ldr	r2, [r4, #8]
 800bb92:	4634      	mov	r4, r6
 800bb94:	609a      	str	r2, [r3, #8]
 800bb96:	1b7b      	subs	r3, r7, r5
 800bb98:	2b0f      	cmp	r3, #15
 800bb9a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bb9e:	d821      	bhi.n	800bbe4 <_realloc_r+0x190>
 800bba0:	f002 0201 	and.w	r2, r2, #1
 800bba4:	433a      	orrs	r2, r7
 800bba6:	eb09 0107 	add.w	r1, r9, r7
 800bbaa:	f8c9 2004 	str.w	r2, [r9, #4]
 800bbae:	684b      	ldr	r3, [r1, #4]
 800bbb0:	f043 0301 	orr.w	r3, r3, #1
 800bbb4:	604b      	str	r3, [r1, #4]
 800bbb6:	4626      	mov	r6, r4
 800bbb8:	4640      	mov	r0, r8
 800bbba:	f7fc fa33 	bl	8008024 <__malloc_unlock>
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc4:	07c9      	lsls	r1, r1, #31
 800bbc6:	d48a      	bmi.n	800bade <_realloc_r+0x8a>
 800bbc8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800bbcc:	eba9 0a03 	sub.w	sl, r9, r3
 800bbd0:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bbd4:	f021 0103 	bic.w	r1, r1, #3
 800bbd8:	e77d      	b.n	800bad6 <_realloc_r+0x82>
 800bbda:	4611      	mov	r1, r2
 800bbdc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe0:	f7fb bea6 	b.w	8007930 <_malloc_r>
 800bbe4:	f002 0201 	and.w	r2, r2, #1
 800bbe8:	eb09 0105 	add.w	r1, r9, r5
 800bbec:	f043 0301 	orr.w	r3, r3, #1
 800bbf0:	432a      	orrs	r2, r5
 800bbf2:	f8c9 2004 	str.w	r2, [r9, #4]
 800bbf6:	444f      	add	r7, r9
 800bbf8:	604b      	str	r3, [r1, #4]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4640      	mov	r0, r8
 800bbfe:	f043 0301 	orr.w	r3, r3, #1
 800bc02:	3108      	adds	r1, #8
 800bc04:	607b      	str	r3, [r7, #4]
 800bc06:	f7fc fb8f 	bl	8008328 <_free_r>
 800bc0a:	e7d4      	b.n	800bbb6 <_realloc_r+0x162>
 800bc0c:	f8dc b004 	ldr.w	fp, [ip, #4]
 800bc10:	f105 0010 	add.w	r0, r5, #16
 800bc14:	f02b 0b03 	bic.w	fp, fp, #3
 800bc18:	eb07 0c0b 	add.w	ip, r7, fp
 800bc1c:	4584      	cmp	ip, r0
 800bc1e:	da4d      	bge.n	800bcbc <_realloc_r+0x268>
 800bc20:	07c9      	lsls	r1, r1, #31
 800bc22:	f53f af5c 	bmi.w	800bade <_realloc_r+0x8a>
 800bc26:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800bc2a:	eba9 0a01 	sub.w	sl, r9, r1
 800bc2e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bc32:	f021 0103 	bic.w	r1, r1, #3
 800bc36:	448b      	add	fp, r1
 800bc38:	44bb      	add	fp, r7
 800bc3a:	4558      	cmp	r0, fp
 800bc3c:	f73f af4b 	bgt.w	800bad6 <_realloc_r+0x82>
 800bc40:	4656      	mov	r6, sl
 800bc42:	f8da 100c 	ldr.w	r1, [sl, #12]
 800bc46:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800bc4a:	1f3a      	subs	r2, r7, #4
 800bc4c:	2a24      	cmp	r2, #36	; 0x24
 800bc4e:	60c1      	str	r1, [r0, #12]
 800bc50:	6088      	str	r0, [r1, #8]
 800bc52:	f200 80bd 	bhi.w	800bdd0 <_realloc_r+0x37c>
 800bc56:	2a13      	cmp	r2, #19
 800bc58:	f240 80b8 	bls.w	800bdcc <_realloc_r+0x378>
 800bc5c:	6821      	ldr	r1, [r4, #0]
 800bc5e:	2a1b      	cmp	r2, #27
 800bc60:	f8ca 1008 	str.w	r1, [sl, #8]
 800bc64:	6861      	ldr	r1, [r4, #4]
 800bc66:	f8ca 100c 	str.w	r1, [sl, #12]
 800bc6a:	f200 80c1 	bhi.w	800bdf0 <_realloc_r+0x39c>
 800bc6e:	3408      	adds	r4, #8
 800bc70:	f10a 0210 	add.w	r2, sl, #16
 800bc74:	6821      	ldr	r1, [r4, #0]
 800bc76:	6011      	str	r1, [r2, #0]
 800bc78:	6861      	ldr	r1, [r4, #4]
 800bc7a:	6051      	str	r1, [r2, #4]
 800bc7c:	68a1      	ldr	r1, [r4, #8]
 800bc7e:	6091      	str	r1, [r2, #8]
 800bc80:	ebab 0205 	sub.w	r2, fp, r5
 800bc84:	eb0a 0105 	add.w	r1, sl, r5
 800bc88:	f042 0201 	orr.w	r2, r2, #1
 800bc8c:	6099      	str	r1, [r3, #8]
 800bc8e:	604a      	str	r2, [r1, #4]
 800bc90:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bc94:	4640      	mov	r0, r8
 800bc96:	f003 0301 	and.w	r3, r3, #1
 800bc9a:	431d      	orrs	r5, r3
 800bc9c:	f8ca 5004 	str.w	r5, [sl, #4]
 800bca0:	f7fc f9c0 	bl	8008024 <__malloc_unlock>
 800bca4:	e74d      	b.n	800bb42 <_realloc_r+0xee>
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	2a1b      	cmp	r2, #27
 800bcaa:	6003      	str	r3, [r0, #0]
 800bcac:	6863      	ldr	r3, [r4, #4]
 800bcae:	6043      	str	r3, [r0, #4]
 800bcb0:	d849      	bhi.n	800bd46 <_realloc_r+0x2f2>
 800bcb2:	f104 0208 	add.w	r2, r4, #8
 800bcb6:	f100 0308 	add.w	r3, r0, #8
 800bcba:	e729      	b.n	800bb10 <_realloc_r+0xbc>
 800bcbc:	ebac 0205 	sub.w	r2, ip, r5
 800bcc0:	eb09 0105 	add.w	r1, r9, r5
 800bcc4:	f042 0201 	orr.w	r2, r2, #1
 800bcc8:	6099      	str	r1, [r3, #8]
 800bcca:	604a      	str	r2, [r1, #4]
 800bccc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	431d      	orrs	r5, r3
 800bcd8:	f844 5c04 	str.w	r5, [r4, #-4]
 800bcdc:	f7fc f9a2 	bl	8008024 <__malloc_unlock>
 800bce0:	4626      	mov	r6, r4
 800bce2:	e72e      	b.n	800bb42 <_realloc_r+0xee>
 800bce4:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 800bce8:	461f      	mov	r7, r3
 800bcea:	60ca      	str	r2, [r1, #12]
 800bcec:	6091      	str	r1, [r2, #8]
 800bcee:	e752      	b.n	800bb96 <_realloc_r+0x142>
 800bcf0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800bcf4:	f023 0303 	bic.w	r3, r3, #3
 800bcf8:	441f      	add	r7, r3
 800bcfa:	e74c      	b.n	800bb96 <_realloc_r+0x142>
 800bcfc:	4656      	mov	r6, sl
 800bcfe:	f8da 100c 	ldr.w	r1, [sl, #12]
 800bd02:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800bd06:	1f3a      	subs	r2, r7, #4
 800bd08:	2a24      	cmp	r2, #36	; 0x24
 800bd0a:	60c1      	str	r1, [r0, #12]
 800bd0c:	6088      	str	r0, [r1, #8]
 800bd0e:	d827      	bhi.n	800bd60 <_realloc_r+0x30c>
 800bd10:	2a13      	cmp	r2, #19
 800bd12:	d923      	bls.n	800bd5c <_realloc_r+0x308>
 800bd14:	6821      	ldr	r1, [r4, #0]
 800bd16:	2a1b      	cmp	r2, #27
 800bd18:	f8ca 1008 	str.w	r1, [sl, #8]
 800bd1c:	6861      	ldr	r1, [r4, #4]
 800bd1e:	f8ca 100c 	str.w	r1, [sl, #12]
 800bd22:	d82f      	bhi.n	800bd84 <_realloc_r+0x330>
 800bd24:	3408      	adds	r4, #8
 800bd26:	f10a 0210 	add.w	r2, sl, #16
 800bd2a:	6821      	ldr	r1, [r4, #0]
 800bd2c:	461f      	mov	r7, r3
 800bd2e:	6011      	str	r1, [r2, #0]
 800bd30:	6863      	ldr	r3, [r4, #4]
 800bd32:	46d1      	mov	r9, sl
 800bd34:	6053      	str	r3, [r2, #4]
 800bd36:	68a3      	ldr	r3, [r4, #8]
 800bd38:	4634      	mov	r4, r6
 800bd3a:	6093      	str	r3, [r2, #8]
 800bd3c:	e72b      	b.n	800bb96 <_realloc_r+0x142>
 800bd3e:	4621      	mov	r1, r4
 800bd40:	f7ff fe1e 	bl	800b980 <memmove>
 800bd44:	e6ea      	b.n	800bb1c <_realloc_r+0xc8>
 800bd46:	68a3      	ldr	r3, [r4, #8]
 800bd48:	2a24      	cmp	r2, #36	; 0x24
 800bd4a:	6083      	str	r3, [r0, #8]
 800bd4c:	68e3      	ldr	r3, [r4, #12]
 800bd4e:	60c3      	str	r3, [r0, #12]
 800bd50:	d024      	beq.n	800bd9c <_realloc_r+0x348>
 800bd52:	f104 0210 	add.w	r2, r4, #16
 800bd56:	f100 0310 	add.w	r3, r0, #16
 800bd5a:	e6d9      	b.n	800bb10 <_realloc_r+0xbc>
 800bd5c:	4632      	mov	r2, r6
 800bd5e:	e7e4      	b.n	800bd2a <_realloc_r+0x2d6>
 800bd60:	4621      	mov	r1, r4
 800bd62:	4630      	mov	r0, r6
 800bd64:	461f      	mov	r7, r3
 800bd66:	46d1      	mov	r9, sl
 800bd68:	f7ff fe0a 	bl	800b980 <memmove>
 800bd6c:	4634      	mov	r4, r6
 800bd6e:	e712      	b.n	800bb96 <_realloc_r+0x142>
 800bd70:	4633      	mov	r3, r6
 800bd72:	e707      	b.n	800bb84 <_realloc_r+0x130>
 800bd74:	4621      	mov	r1, r4
 800bd76:	4630      	mov	r0, r6
 800bd78:	4667      	mov	r7, ip
 800bd7a:	46d1      	mov	r9, sl
 800bd7c:	f7ff fe00 	bl	800b980 <memmove>
 800bd80:	4634      	mov	r4, r6
 800bd82:	e708      	b.n	800bb96 <_realloc_r+0x142>
 800bd84:	68a1      	ldr	r1, [r4, #8]
 800bd86:	2a24      	cmp	r2, #36	; 0x24
 800bd88:	f8ca 1010 	str.w	r1, [sl, #16]
 800bd8c:	68e1      	ldr	r1, [r4, #12]
 800bd8e:	f8ca 1014 	str.w	r1, [sl, #20]
 800bd92:	d023      	beq.n	800bddc <_realloc_r+0x388>
 800bd94:	3410      	adds	r4, #16
 800bd96:	f10a 0218 	add.w	r2, sl, #24
 800bd9a:	e7c6      	b.n	800bd2a <_realloc_r+0x2d6>
 800bd9c:	6923      	ldr	r3, [r4, #16]
 800bd9e:	f104 0218 	add.w	r2, r4, #24
 800bda2:	6103      	str	r3, [r0, #16]
 800bda4:	6961      	ldr	r1, [r4, #20]
 800bda6:	f100 0318 	add.w	r3, r0, #24
 800bdaa:	6141      	str	r1, [r0, #20]
 800bdac:	e6b0      	b.n	800bb10 <_realloc_r+0xbc>
 800bdae:	bf00      	nop
 800bdb0:	20000460 	.word	0x20000460
 800bdb4:	68a3      	ldr	r3, [r4, #8]
 800bdb6:	2a24      	cmp	r2, #36	; 0x24
 800bdb8:	f8ca 3010 	str.w	r3, [sl, #16]
 800bdbc:	68e3      	ldr	r3, [r4, #12]
 800bdbe:	f8ca 3014 	str.w	r3, [sl, #20]
 800bdc2:	d021      	beq.n	800be08 <_realloc_r+0x3b4>
 800bdc4:	3410      	adds	r4, #16
 800bdc6:	f10a 0318 	add.w	r3, sl, #24
 800bdca:	e6db      	b.n	800bb84 <_realloc_r+0x130>
 800bdcc:	4632      	mov	r2, r6
 800bdce:	e751      	b.n	800bc74 <_realloc_r+0x220>
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7ff fdd4 	bl	800b980 <memmove>
 800bdd8:	4b15      	ldr	r3, [pc, #84]	; (800be30 <_realloc_r+0x3dc>)
 800bdda:	e751      	b.n	800bc80 <_realloc_r+0x22c>
 800bddc:	6921      	ldr	r1, [r4, #16]
 800bdde:	f10a 0220 	add.w	r2, sl, #32
 800bde2:	f8ca 1018 	str.w	r1, [sl, #24]
 800bde6:	6961      	ldr	r1, [r4, #20]
 800bde8:	3418      	adds	r4, #24
 800bdea:	f8ca 101c 	str.w	r1, [sl, #28]
 800bdee:	e79c      	b.n	800bd2a <_realloc_r+0x2d6>
 800bdf0:	68a1      	ldr	r1, [r4, #8]
 800bdf2:	2a24      	cmp	r2, #36	; 0x24
 800bdf4:	f8ca 1010 	str.w	r1, [sl, #16]
 800bdf8:	68e1      	ldr	r1, [r4, #12]
 800bdfa:	f8ca 1014 	str.w	r1, [sl, #20]
 800bdfe:	d00d      	beq.n	800be1c <_realloc_r+0x3c8>
 800be00:	3410      	adds	r4, #16
 800be02:	f10a 0218 	add.w	r2, sl, #24
 800be06:	e735      	b.n	800bc74 <_realloc_r+0x220>
 800be08:	6922      	ldr	r2, [r4, #16]
 800be0a:	f10a 0320 	add.w	r3, sl, #32
 800be0e:	f8ca 2018 	str.w	r2, [sl, #24]
 800be12:	6962      	ldr	r2, [r4, #20]
 800be14:	3418      	adds	r4, #24
 800be16:	f8ca 201c 	str.w	r2, [sl, #28]
 800be1a:	e6b3      	b.n	800bb84 <_realloc_r+0x130>
 800be1c:	6921      	ldr	r1, [r4, #16]
 800be1e:	f10a 0220 	add.w	r2, sl, #32
 800be22:	f8ca 1018 	str.w	r1, [sl, #24]
 800be26:	6961      	ldr	r1, [r4, #20]
 800be28:	3418      	adds	r4, #24
 800be2a:	f8ca 101c 	str.w	r1, [sl, #28]
 800be2e:	e721      	b.n	800bc74 <_realloc_r+0x220>
 800be30:	20000460 	.word	0x20000460

0800be34 <__ascii_wctomb>:
 800be34:	4603      	mov	r3, r0
 800be36:	b149      	cbz	r1, 800be4c <__ascii_wctomb+0x18>
 800be38:	2aff      	cmp	r2, #255	; 0xff
 800be3a:	d802      	bhi.n	800be42 <__ascii_wctomb+0xe>
 800be3c:	2001      	movs	r0, #1
 800be3e:	700a      	strb	r2, [r1, #0]
 800be40:	4770      	bx	lr
 800be42:	228a      	movs	r2, #138	; 0x8a
 800be44:	f04f 30ff 	mov.w	r0, #4294967295
 800be48:	601a      	str	r2, [r3, #0]
 800be4a:	4770      	bx	lr
 800be4c:	4608      	mov	r0, r1
 800be4e:	4770      	bx	lr

0800be50 <__aeabi_drsub>:
 800be50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800be54:	e002      	b.n	800be5c <__adddf3>
 800be56:	bf00      	nop

0800be58 <__aeabi_dsub>:
 800be58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800be5c <__adddf3>:
 800be5c:	b530      	push	{r4, r5, lr}
 800be5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800be62:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800be66:	ea94 0f05 	teq	r4, r5
 800be6a:	bf08      	it	eq
 800be6c:	ea90 0f02 	teqeq	r0, r2
 800be70:	bf1f      	itttt	ne
 800be72:	ea54 0c00 	orrsne.w	ip, r4, r0
 800be76:	ea55 0c02 	orrsne.w	ip, r5, r2
 800be7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800be7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800be82:	f000 80e2 	beq.w	800c04a <__adddf3+0x1ee>
 800be86:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800be8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800be8e:	bfb8      	it	lt
 800be90:	426d      	neglt	r5, r5
 800be92:	dd0c      	ble.n	800beae <__adddf3+0x52>
 800be94:	442c      	add	r4, r5
 800be96:	ea80 0202 	eor.w	r2, r0, r2
 800be9a:	ea81 0303 	eor.w	r3, r1, r3
 800be9e:	ea82 0000 	eor.w	r0, r2, r0
 800bea2:	ea83 0101 	eor.w	r1, r3, r1
 800bea6:	ea80 0202 	eor.w	r2, r0, r2
 800beaa:	ea81 0303 	eor.w	r3, r1, r3
 800beae:	2d36      	cmp	r5, #54	; 0x36
 800beb0:	bf88      	it	hi
 800beb2:	bd30      	pophi	{r4, r5, pc}
 800beb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800beb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800bebc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800bec0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800bec4:	d002      	beq.n	800becc <__adddf3+0x70>
 800bec6:	4240      	negs	r0, r0
 800bec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800becc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800bed0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800bed4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800bed8:	d002      	beq.n	800bee0 <__adddf3+0x84>
 800beda:	4252      	negs	r2, r2
 800bedc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800bee0:	ea94 0f05 	teq	r4, r5
 800bee4:	f000 80a7 	beq.w	800c036 <__adddf3+0x1da>
 800bee8:	f1a4 0401 	sub.w	r4, r4, #1
 800beec:	f1d5 0e20 	rsbs	lr, r5, #32
 800bef0:	db0d      	blt.n	800bf0e <__adddf3+0xb2>
 800bef2:	fa02 fc0e 	lsl.w	ip, r2, lr
 800bef6:	fa22 f205 	lsr.w	r2, r2, r5
 800befa:	1880      	adds	r0, r0, r2
 800befc:	f141 0100 	adc.w	r1, r1, #0
 800bf00:	fa03 f20e 	lsl.w	r2, r3, lr
 800bf04:	1880      	adds	r0, r0, r2
 800bf06:	fa43 f305 	asr.w	r3, r3, r5
 800bf0a:	4159      	adcs	r1, r3
 800bf0c:	e00e      	b.n	800bf2c <__adddf3+0xd0>
 800bf0e:	f1a5 0520 	sub.w	r5, r5, #32
 800bf12:	f10e 0e20 	add.w	lr, lr, #32
 800bf16:	2a01      	cmp	r2, #1
 800bf18:	fa03 fc0e 	lsl.w	ip, r3, lr
 800bf1c:	bf28      	it	cs
 800bf1e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800bf22:	fa43 f305 	asr.w	r3, r3, r5
 800bf26:	18c0      	adds	r0, r0, r3
 800bf28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800bf2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800bf30:	d507      	bpl.n	800bf42 <__adddf3+0xe6>
 800bf32:	f04f 0e00 	mov.w	lr, #0
 800bf36:	f1dc 0c00 	rsbs	ip, ip, #0
 800bf3a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800bf3e:	eb6e 0101 	sbc.w	r1, lr, r1
 800bf42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bf46:	d31b      	bcc.n	800bf80 <__adddf3+0x124>
 800bf48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bf4c:	d30c      	bcc.n	800bf68 <__adddf3+0x10c>
 800bf4e:	0849      	lsrs	r1, r1, #1
 800bf50:	ea5f 0030 	movs.w	r0, r0, rrx
 800bf54:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800bf58:	f104 0401 	add.w	r4, r4, #1
 800bf5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800bf60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800bf64:	f080 809a 	bcs.w	800c09c <__adddf3+0x240>
 800bf68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800bf6c:	bf08      	it	eq
 800bf6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800bf72:	f150 0000 	adcs.w	r0, r0, #0
 800bf76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800bf7a:	ea41 0105 	orr.w	r1, r1, r5
 800bf7e:	bd30      	pop	{r4, r5, pc}
 800bf80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800bf84:	4140      	adcs	r0, r0
 800bf86:	eb41 0101 	adc.w	r1, r1, r1
 800bf8a:	3c01      	subs	r4, #1
 800bf8c:	bf28      	it	cs
 800bf8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800bf92:	d2e9      	bcs.n	800bf68 <__adddf3+0x10c>
 800bf94:	f091 0f00 	teq	r1, #0
 800bf98:	bf04      	itt	eq
 800bf9a:	4601      	moveq	r1, r0
 800bf9c:	2000      	moveq	r0, #0
 800bf9e:	fab1 f381 	clz	r3, r1
 800bfa2:	bf08      	it	eq
 800bfa4:	3320      	addeq	r3, #32
 800bfa6:	f1a3 030b 	sub.w	r3, r3, #11
 800bfaa:	f1b3 0220 	subs.w	r2, r3, #32
 800bfae:	da0c      	bge.n	800bfca <__adddf3+0x16e>
 800bfb0:	320c      	adds	r2, #12
 800bfb2:	dd08      	ble.n	800bfc6 <__adddf3+0x16a>
 800bfb4:	f102 0c14 	add.w	ip, r2, #20
 800bfb8:	f1c2 020c 	rsb	r2, r2, #12
 800bfbc:	fa01 f00c 	lsl.w	r0, r1, ip
 800bfc0:	fa21 f102 	lsr.w	r1, r1, r2
 800bfc4:	e00c      	b.n	800bfe0 <__adddf3+0x184>
 800bfc6:	f102 0214 	add.w	r2, r2, #20
 800bfca:	bfd8      	it	le
 800bfcc:	f1c2 0c20 	rsble	ip, r2, #32
 800bfd0:	fa01 f102 	lsl.w	r1, r1, r2
 800bfd4:	fa20 fc0c 	lsr.w	ip, r0, ip
 800bfd8:	bfdc      	itt	le
 800bfda:	ea41 010c 	orrle.w	r1, r1, ip
 800bfde:	4090      	lslle	r0, r2
 800bfe0:	1ae4      	subs	r4, r4, r3
 800bfe2:	bfa2      	ittt	ge
 800bfe4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800bfe8:	4329      	orrge	r1, r5
 800bfea:	bd30      	popge	{r4, r5, pc}
 800bfec:	ea6f 0404 	mvn.w	r4, r4
 800bff0:	3c1f      	subs	r4, #31
 800bff2:	da1c      	bge.n	800c02e <__adddf3+0x1d2>
 800bff4:	340c      	adds	r4, #12
 800bff6:	dc0e      	bgt.n	800c016 <__adddf3+0x1ba>
 800bff8:	f104 0414 	add.w	r4, r4, #20
 800bffc:	f1c4 0220 	rsb	r2, r4, #32
 800c000:	fa20 f004 	lsr.w	r0, r0, r4
 800c004:	fa01 f302 	lsl.w	r3, r1, r2
 800c008:	ea40 0003 	orr.w	r0, r0, r3
 800c00c:	fa21 f304 	lsr.w	r3, r1, r4
 800c010:	ea45 0103 	orr.w	r1, r5, r3
 800c014:	bd30      	pop	{r4, r5, pc}
 800c016:	f1c4 040c 	rsb	r4, r4, #12
 800c01a:	f1c4 0220 	rsb	r2, r4, #32
 800c01e:	fa20 f002 	lsr.w	r0, r0, r2
 800c022:	fa01 f304 	lsl.w	r3, r1, r4
 800c026:	ea40 0003 	orr.w	r0, r0, r3
 800c02a:	4629      	mov	r1, r5
 800c02c:	bd30      	pop	{r4, r5, pc}
 800c02e:	fa21 f004 	lsr.w	r0, r1, r4
 800c032:	4629      	mov	r1, r5
 800c034:	bd30      	pop	{r4, r5, pc}
 800c036:	f094 0f00 	teq	r4, #0
 800c03a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c03e:	bf06      	itte	eq
 800c040:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c044:	3401      	addeq	r4, #1
 800c046:	3d01      	subne	r5, #1
 800c048:	e74e      	b.n	800bee8 <__adddf3+0x8c>
 800c04a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c04e:	bf18      	it	ne
 800c050:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c054:	d029      	beq.n	800c0aa <__adddf3+0x24e>
 800c056:	ea94 0f05 	teq	r4, r5
 800c05a:	bf08      	it	eq
 800c05c:	ea90 0f02 	teqeq	r0, r2
 800c060:	d005      	beq.n	800c06e <__adddf3+0x212>
 800c062:	ea54 0c00 	orrs.w	ip, r4, r0
 800c066:	bf04      	itt	eq
 800c068:	4619      	moveq	r1, r3
 800c06a:	4610      	moveq	r0, r2
 800c06c:	bd30      	pop	{r4, r5, pc}
 800c06e:	ea91 0f03 	teq	r1, r3
 800c072:	bf1e      	ittt	ne
 800c074:	2100      	movne	r1, #0
 800c076:	2000      	movne	r0, #0
 800c078:	bd30      	popne	{r4, r5, pc}
 800c07a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c07e:	d105      	bne.n	800c08c <__adddf3+0x230>
 800c080:	0040      	lsls	r0, r0, #1
 800c082:	4149      	adcs	r1, r1
 800c084:	bf28      	it	cs
 800c086:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c08a:	bd30      	pop	{r4, r5, pc}
 800c08c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c090:	bf3c      	itt	cc
 800c092:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c096:	bd30      	popcc	{r4, r5, pc}
 800c098:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c09c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c0a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c0a4:	f04f 0000 	mov.w	r0, #0
 800c0a8:	bd30      	pop	{r4, r5, pc}
 800c0aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c0ae:	bf1a      	itte	ne
 800c0b0:	4619      	movne	r1, r3
 800c0b2:	4610      	movne	r0, r2
 800c0b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c0b8:	bf1c      	itt	ne
 800c0ba:	460b      	movne	r3, r1
 800c0bc:	4602      	movne	r2, r0
 800c0be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c0c2:	bf06      	itte	eq
 800c0c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c0c8:	ea91 0f03 	teqeq	r1, r3
 800c0cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c0d0:	bd30      	pop	{r4, r5, pc}
 800c0d2:	bf00      	nop

0800c0d4 <__aeabi_ui2d>:
 800c0d4:	f090 0f00 	teq	r0, #0
 800c0d8:	bf04      	itt	eq
 800c0da:	2100      	moveq	r1, #0
 800c0dc:	4770      	bxeq	lr
 800c0de:	b530      	push	{r4, r5, lr}
 800c0e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c0e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c0e8:	f04f 0500 	mov.w	r5, #0
 800c0ec:	f04f 0100 	mov.w	r1, #0
 800c0f0:	e750      	b.n	800bf94 <__adddf3+0x138>
 800c0f2:	bf00      	nop

0800c0f4 <__aeabi_i2d>:
 800c0f4:	f090 0f00 	teq	r0, #0
 800c0f8:	bf04      	itt	eq
 800c0fa:	2100      	moveq	r1, #0
 800c0fc:	4770      	bxeq	lr
 800c0fe:	b530      	push	{r4, r5, lr}
 800c100:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c104:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c108:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c10c:	bf48      	it	mi
 800c10e:	4240      	negmi	r0, r0
 800c110:	f04f 0100 	mov.w	r1, #0
 800c114:	e73e      	b.n	800bf94 <__adddf3+0x138>
 800c116:	bf00      	nop

0800c118 <__aeabi_f2d>:
 800c118:	0042      	lsls	r2, r0, #1
 800c11a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c11e:	ea4f 0131 	mov.w	r1, r1, rrx
 800c122:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c126:	bf1f      	itttt	ne
 800c128:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c12c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c130:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c134:	4770      	bxne	lr
 800c136:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800c13a:	bf08      	it	eq
 800c13c:	4770      	bxeq	lr
 800c13e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800c142:	bf04      	itt	eq
 800c144:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800c148:	4770      	bxeq	lr
 800c14a:	b530      	push	{r4, r5, lr}
 800c14c:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c150:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c154:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c158:	e71c      	b.n	800bf94 <__adddf3+0x138>
 800c15a:	bf00      	nop

0800c15c <__aeabi_ul2d>:
 800c15c:	ea50 0201 	orrs.w	r2, r0, r1
 800c160:	bf08      	it	eq
 800c162:	4770      	bxeq	lr
 800c164:	b530      	push	{r4, r5, lr}
 800c166:	f04f 0500 	mov.w	r5, #0
 800c16a:	e00a      	b.n	800c182 <__aeabi_l2d+0x16>

0800c16c <__aeabi_l2d>:
 800c16c:	ea50 0201 	orrs.w	r2, r0, r1
 800c170:	bf08      	it	eq
 800c172:	4770      	bxeq	lr
 800c174:	b530      	push	{r4, r5, lr}
 800c176:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c17a:	d502      	bpl.n	800c182 <__aeabi_l2d+0x16>
 800c17c:	4240      	negs	r0, r0
 800c17e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c182:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c186:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c18a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c18e:	f43f aed8 	beq.w	800bf42 <__adddf3+0xe6>
 800c192:	f04f 0203 	mov.w	r2, #3
 800c196:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c19a:	bf18      	it	ne
 800c19c:	3203      	addne	r2, #3
 800c19e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c1a2:	bf18      	it	ne
 800c1a4:	3203      	addne	r2, #3
 800c1a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c1aa:	f1c2 0320 	rsb	r3, r2, #32
 800c1ae:	fa00 fc03 	lsl.w	ip, r0, r3
 800c1b2:	fa20 f002 	lsr.w	r0, r0, r2
 800c1b6:	fa01 fe03 	lsl.w	lr, r1, r3
 800c1ba:	ea40 000e 	orr.w	r0, r0, lr
 800c1be:	fa21 f102 	lsr.w	r1, r1, r2
 800c1c2:	4414      	add	r4, r2
 800c1c4:	e6bd      	b.n	800bf42 <__adddf3+0xe6>
 800c1c6:	bf00      	nop

0800c1c8 <__aeabi_dmul>:
 800c1c8:	b570      	push	{r4, r5, r6, lr}
 800c1ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c1ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c1d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c1d6:	bf1d      	ittte	ne
 800c1d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c1dc:	ea94 0f0c 	teqne	r4, ip
 800c1e0:	ea95 0f0c 	teqne	r5, ip
 800c1e4:	f000 f8de 	bleq	800c3a4 <__aeabi_dmul+0x1dc>
 800c1e8:	442c      	add	r4, r5
 800c1ea:	ea81 0603 	eor.w	r6, r1, r3
 800c1ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c1f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c1f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c1fa:	bf18      	it	ne
 800c1fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c208:	d038      	beq.n	800c27c <__aeabi_dmul+0xb4>
 800c20a:	fba0 ce02 	umull	ip, lr, r0, r2
 800c20e:	f04f 0500 	mov.w	r5, #0
 800c212:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c21a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c21e:	f04f 0600 	mov.w	r6, #0
 800c222:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c226:	f09c 0f00 	teq	ip, #0
 800c22a:	bf18      	it	ne
 800c22c:	f04e 0e01 	orrne.w	lr, lr, #1
 800c230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c23c:	d204      	bcs.n	800c248 <__aeabi_dmul+0x80>
 800c23e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c242:	416d      	adcs	r5, r5
 800c244:	eb46 0606 	adc.w	r6, r6, r6
 800c248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c24c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c25c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c260:	bf88      	it	hi
 800c262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c266:	d81e      	bhi.n	800c2a6 <__aeabi_dmul+0xde>
 800c268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c26c:	bf08      	it	eq
 800c26e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c272:	f150 0000 	adcs.w	r0, r0, #0
 800c276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c280:	ea46 0101 	orr.w	r1, r6, r1
 800c284:	ea40 0002 	orr.w	r0, r0, r2
 800c288:	ea81 0103 	eor.w	r1, r1, r3
 800c28c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c290:	bfc2      	ittt	gt
 800c292:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c29a:	bd70      	popgt	{r4, r5, r6, pc}
 800c29c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c2a0:	f04f 0e00 	mov.w	lr, #0
 800c2a4:	3c01      	subs	r4, #1
 800c2a6:	f300 80ab 	bgt.w	800c400 <__aeabi_dmul+0x238>
 800c2aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c2ae:	bfde      	ittt	le
 800c2b0:	2000      	movle	r0, #0
 800c2b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c2b6:	bd70      	pople	{r4, r5, r6, pc}
 800c2b8:	f1c4 0400 	rsb	r4, r4, #0
 800c2bc:	3c20      	subs	r4, #32
 800c2be:	da35      	bge.n	800c32c <__aeabi_dmul+0x164>
 800c2c0:	340c      	adds	r4, #12
 800c2c2:	dc1b      	bgt.n	800c2fc <__aeabi_dmul+0x134>
 800c2c4:	f104 0414 	add.w	r4, r4, #20
 800c2c8:	f1c4 0520 	rsb	r5, r4, #32
 800c2cc:	fa00 f305 	lsl.w	r3, r0, r5
 800c2d0:	fa20 f004 	lsr.w	r0, r0, r4
 800c2d4:	fa01 f205 	lsl.w	r2, r1, r5
 800c2d8:	ea40 0002 	orr.w	r0, r0, r2
 800c2dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800c2e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c2e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c2e8:	fa21 f604 	lsr.w	r6, r1, r4
 800c2ec:	eb42 0106 	adc.w	r1, r2, r6
 800c2f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c2f4:	bf08      	it	eq
 800c2f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c2fa:	bd70      	pop	{r4, r5, r6, pc}
 800c2fc:	f1c4 040c 	rsb	r4, r4, #12
 800c300:	f1c4 0520 	rsb	r5, r4, #32
 800c304:	fa00 f304 	lsl.w	r3, r0, r4
 800c308:	fa20 f005 	lsr.w	r0, r0, r5
 800c30c:	fa01 f204 	lsl.w	r2, r1, r4
 800c310:	ea40 0002 	orr.w	r0, r0, r2
 800c314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c31c:	f141 0100 	adc.w	r1, r1, #0
 800c320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c324:	bf08      	it	eq
 800c326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c32a:	bd70      	pop	{r4, r5, r6, pc}
 800c32c:	f1c4 0520 	rsb	r5, r4, #32
 800c330:	fa00 f205 	lsl.w	r2, r0, r5
 800c334:	ea4e 0e02 	orr.w	lr, lr, r2
 800c338:	fa20 f304 	lsr.w	r3, r0, r4
 800c33c:	fa01 f205 	lsl.w	r2, r1, r5
 800c340:	ea43 0302 	orr.w	r3, r3, r2
 800c344:	fa21 f004 	lsr.w	r0, r1, r4
 800c348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c34c:	fa21 f204 	lsr.w	r2, r1, r4
 800c350:	ea20 0002 	bic.w	r0, r0, r2
 800c354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c35c:	bf08      	it	eq
 800c35e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c362:	bd70      	pop	{r4, r5, r6, pc}
 800c364:	f094 0f00 	teq	r4, #0
 800c368:	d10f      	bne.n	800c38a <__aeabi_dmul+0x1c2>
 800c36a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800c36e:	0040      	lsls	r0, r0, #1
 800c370:	eb41 0101 	adc.w	r1, r1, r1
 800c374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c378:	bf08      	it	eq
 800c37a:	3c01      	subeq	r4, #1
 800c37c:	d0f7      	beq.n	800c36e <__aeabi_dmul+0x1a6>
 800c37e:	ea41 0106 	orr.w	r1, r1, r6
 800c382:	f095 0f00 	teq	r5, #0
 800c386:	bf18      	it	ne
 800c388:	4770      	bxne	lr
 800c38a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c38e:	0052      	lsls	r2, r2, #1
 800c390:	eb43 0303 	adc.w	r3, r3, r3
 800c394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c398:	bf08      	it	eq
 800c39a:	3d01      	subeq	r5, #1
 800c39c:	d0f7      	beq.n	800c38e <__aeabi_dmul+0x1c6>
 800c39e:	ea43 0306 	orr.w	r3, r3, r6
 800c3a2:	4770      	bx	lr
 800c3a4:	ea94 0f0c 	teq	r4, ip
 800c3a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c3ac:	bf18      	it	ne
 800c3ae:	ea95 0f0c 	teqne	r5, ip
 800c3b2:	d00c      	beq.n	800c3ce <__aeabi_dmul+0x206>
 800c3b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c3b8:	bf18      	it	ne
 800c3ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c3be:	d1d1      	bne.n	800c364 <__aeabi_dmul+0x19c>
 800c3c0:	ea81 0103 	eor.w	r1, r1, r3
 800c3c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c3c8:	f04f 0000 	mov.w	r0, #0
 800c3cc:	bd70      	pop	{r4, r5, r6, pc}
 800c3ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c3d2:	bf06      	itte	eq
 800c3d4:	4610      	moveq	r0, r2
 800c3d6:	4619      	moveq	r1, r3
 800c3d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c3dc:	d019      	beq.n	800c412 <__aeabi_dmul+0x24a>
 800c3de:	ea94 0f0c 	teq	r4, ip
 800c3e2:	d102      	bne.n	800c3ea <__aeabi_dmul+0x222>
 800c3e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c3e8:	d113      	bne.n	800c412 <__aeabi_dmul+0x24a>
 800c3ea:	ea95 0f0c 	teq	r5, ip
 800c3ee:	d105      	bne.n	800c3fc <__aeabi_dmul+0x234>
 800c3f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c3f4:	bf1c      	itt	ne
 800c3f6:	4610      	movne	r0, r2
 800c3f8:	4619      	movne	r1, r3
 800c3fa:	d10a      	bne.n	800c412 <__aeabi_dmul+0x24a>
 800c3fc:	ea81 0103 	eor.w	r1, r1, r3
 800c400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c40c:	f04f 0000 	mov.w	r0, #0
 800c410:	bd70      	pop	{r4, r5, r6, pc}
 800c412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800c41a:	bd70      	pop	{r4, r5, r6, pc}

0800c41c <__aeabi_ddiv>:
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c422:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c426:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c42a:	bf1d      	ittte	ne
 800c42c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c430:	ea94 0f0c 	teqne	r4, ip
 800c434:	ea95 0f0c 	teqne	r5, ip
 800c438:	f000 f8a7 	bleq	800c58a <__aeabi_ddiv+0x16e>
 800c43c:	eba4 0405 	sub.w	r4, r4, r5
 800c440:	ea81 0e03 	eor.w	lr, r1, r3
 800c444:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c44c:	f000 8088 	beq.w	800c560 <__aeabi_ddiv+0x144>
 800c450:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c454:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c458:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c45c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c460:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c464:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c468:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c46c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c470:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800c474:	429d      	cmp	r5, r3
 800c476:	bf08      	it	eq
 800c478:	4296      	cmpeq	r6, r2
 800c47a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800c47e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800c482:	d202      	bcs.n	800c48a <__aeabi_ddiv+0x6e>
 800c484:	085b      	lsrs	r3, r3, #1
 800c486:	ea4f 0232 	mov.w	r2, r2, rrx
 800c48a:	1ab6      	subs	r6, r6, r2
 800c48c:	eb65 0503 	sbc.w	r5, r5, r3
 800c490:	085b      	lsrs	r3, r3, #1
 800c492:	ea4f 0232 	mov.w	r2, r2, rrx
 800c496:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c49a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800c49e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c4a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c4a6:	bf22      	ittt	cs
 800c4a8:	1ab6      	subcs	r6, r6, r2
 800c4aa:	4675      	movcs	r5, lr
 800c4ac:	ea40 000c 	orrcs.w	r0, r0, ip
 800c4b0:	085b      	lsrs	r3, r3, #1
 800c4b2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c4b6:	ebb6 0e02 	subs.w	lr, r6, r2
 800c4ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c4be:	bf22      	ittt	cs
 800c4c0:	1ab6      	subcs	r6, r6, r2
 800c4c2:	4675      	movcs	r5, lr
 800c4c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c4c8:	085b      	lsrs	r3, r3, #1
 800c4ca:	ea4f 0232 	mov.w	r2, r2, rrx
 800c4ce:	ebb6 0e02 	subs.w	lr, r6, r2
 800c4d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c4d6:	bf22      	ittt	cs
 800c4d8:	1ab6      	subcs	r6, r6, r2
 800c4da:	4675      	movcs	r5, lr
 800c4dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c4e0:	085b      	lsrs	r3, r3, #1
 800c4e2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c4e6:	ebb6 0e02 	subs.w	lr, r6, r2
 800c4ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c4ee:	bf22      	ittt	cs
 800c4f0:	1ab6      	subcs	r6, r6, r2
 800c4f2:	4675      	movcs	r5, lr
 800c4f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c4f8:	ea55 0e06 	orrs.w	lr, r5, r6
 800c4fc:	d018      	beq.n	800c530 <__aeabi_ddiv+0x114>
 800c4fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c502:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c506:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c50a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c50e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c512:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c516:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c51a:	d1c0      	bne.n	800c49e <__aeabi_ddiv+0x82>
 800c51c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c520:	d10b      	bne.n	800c53a <__aeabi_ddiv+0x11e>
 800c522:	ea41 0100 	orr.w	r1, r1, r0
 800c526:	f04f 0000 	mov.w	r0, #0
 800c52a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c52e:	e7b6      	b.n	800c49e <__aeabi_ddiv+0x82>
 800c530:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c534:	bf04      	itt	eq
 800c536:	4301      	orreq	r1, r0
 800c538:	2000      	moveq	r0, #0
 800c53a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c53e:	bf88      	it	hi
 800c540:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c544:	f63f aeaf 	bhi.w	800c2a6 <__aeabi_dmul+0xde>
 800c548:	ebb5 0c03 	subs.w	ip, r5, r3
 800c54c:	bf04      	itt	eq
 800c54e:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c556:	f150 0000 	adcs.w	r0, r0, #0
 800c55a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c55e:	bd70      	pop	{r4, r5, r6, pc}
 800c560:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800c564:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c568:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c56c:	bfc2      	ittt	gt
 800c56e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c572:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c576:	bd70      	popgt	{r4, r5, r6, pc}
 800c578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c57c:	f04f 0e00 	mov.w	lr, #0
 800c580:	3c01      	subs	r4, #1
 800c582:	e690      	b.n	800c2a6 <__aeabi_dmul+0xde>
 800c584:	ea45 0e06 	orr.w	lr, r5, r6
 800c588:	e68d      	b.n	800c2a6 <__aeabi_dmul+0xde>
 800c58a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c58e:	ea94 0f0c 	teq	r4, ip
 800c592:	bf08      	it	eq
 800c594:	ea95 0f0c 	teqeq	r5, ip
 800c598:	f43f af3b 	beq.w	800c412 <__aeabi_dmul+0x24a>
 800c59c:	ea94 0f0c 	teq	r4, ip
 800c5a0:	d10a      	bne.n	800c5b8 <__aeabi_ddiv+0x19c>
 800c5a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c5a6:	f47f af34 	bne.w	800c412 <__aeabi_dmul+0x24a>
 800c5aa:	ea95 0f0c 	teq	r5, ip
 800c5ae:	f47f af25 	bne.w	800c3fc <__aeabi_dmul+0x234>
 800c5b2:	4610      	mov	r0, r2
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	e72c      	b.n	800c412 <__aeabi_dmul+0x24a>
 800c5b8:	ea95 0f0c 	teq	r5, ip
 800c5bc:	d106      	bne.n	800c5cc <__aeabi_ddiv+0x1b0>
 800c5be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c5c2:	f43f aefd 	beq.w	800c3c0 <__aeabi_dmul+0x1f8>
 800c5c6:	4610      	mov	r0, r2
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	e722      	b.n	800c412 <__aeabi_dmul+0x24a>
 800c5cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c5d0:	bf18      	it	ne
 800c5d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c5d6:	f47f aec5 	bne.w	800c364 <__aeabi_dmul+0x19c>
 800c5da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800c5de:	f47f af0d 	bne.w	800c3fc <__aeabi_dmul+0x234>
 800c5e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800c5e6:	f47f aeeb 	bne.w	800c3c0 <__aeabi_dmul+0x1f8>
 800c5ea:	e712      	b.n	800c412 <__aeabi_dmul+0x24a>

0800c5ec <__gedf2>:
 800c5ec:	f04f 3cff 	mov.w	ip, #4294967295
 800c5f0:	e006      	b.n	800c600 <__cmpdf2+0x4>
 800c5f2:	bf00      	nop

0800c5f4 <__ledf2>:
 800c5f4:	f04f 0c01 	mov.w	ip, #1
 800c5f8:	e002      	b.n	800c600 <__cmpdf2+0x4>
 800c5fa:	bf00      	nop

0800c5fc <__cmpdf2>:
 800c5fc:	f04f 0c01 	mov.w	ip, #1
 800c600:	f84d cd04 	str.w	ip, [sp, #-4]!
 800c604:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c60c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c610:	bf18      	it	ne
 800c612:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800c616:	d01b      	beq.n	800c650 <__cmpdf2+0x54>
 800c618:	b001      	add	sp, #4
 800c61a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800c61e:	bf0c      	ite	eq
 800c620:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800c624:	ea91 0f03 	teqne	r1, r3
 800c628:	bf02      	ittt	eq
 800c62a:	ea90 0f02 	teqeq	r0, r2
 800c62e:	2000      	moveq	r0, #0
 800c630:	4770      	bxeq	lr
 800c632:	f110 0f00 	cmn.w	r0, #0
 800c636:	ea91 0f03 	teq	r1, r3
 800c63a:	bf58      	it	pl
 800c63c:	4299      	cmppl	r1, r3
 800c63e:	bf08      	it	eq
 800c640:	4290      	cmpeq	r0, r2
 800c642:	bf2c      	ite	cs
 800c644:	17d8      	asrcs	r0, r3, #31
 800c646:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800c64a:	f040 0001 	orr.w	r0, r0, #1
 800c64e:	4770      	bx	lr
 800c650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c658:	d102      	bne.n	800c660 <__cmpdf2+0x64>
 800c65a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800c65e:	d107      	bne.n	800c670 <__cmpdf2+0x74>
 800c660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c668:	d1d6      	bne.n	800c618 <__cmpdf2+0x1c>
 800c66a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800c66e:	d0d3      	beq.n	800c618 <__cmpdf2+0x1c>
 800c670:	f85d 0b04 	ldr.w	r0, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop

0800c678 <__aeabi_cdrcmple>:
 800c678:	4684      	mov	ip, r0
 800c67a:	4610      	mov	r0, r2
 800c67c:	4662      	mov	r2, ip
 800c67e:	468c      	mov	ip, r1
 800c680:	4619      	mov	r1, r3
 800c682:	4663      	mov	r3, ip
 800c684:	e000      	b.n	800c688 <__aeabi_cdcmpeq>
 800c686:	bf00      	nop

0800c688 <__aeabi_cdcmpeq>:
 800c688:	b501      	push	{r0, lr}
 800c68a:	f7ff ffb7 	bl	800c5fc <__cmpdf2>
 800c68e:	2800      	cmp	r0, #0
 800c690:	bf48      	it	mi
 800c692:	f110 0f00 	cmnmi.w	r0, #0
 800c696:	bd01      	pop	{r0, pc}

0800c698 <__aeabi_dcmpeq>:
 800c698:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c69c:	f7ff fff4 	bl	800c688 <__aeabi_cdcmpeq>
 800c6a0:	bf0c      	ite	eq
 800c6a2:	2001      	moveq	r0, #1
 800c6a4:	2000      	movne	r0, #0
 800c6a6:	f85d fb08 	ldr.w	pc, [sp], #8
 800c6aa:	bf00      	nop

0800c6ac <__aeabi_dcmplt>:
 800c6ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c6b0:	f7ff ffea 	bl	800c688 <__aeabi_cdcmpeq>
 800c6b4:	bf34      	ite	cc
 800c6b6:	2001      	movcc	r0, #1
 800c6b8:	2000      	movcs	r0, #0
 800c6ba:	f85d fb08 	ldr.w	pc, [sp], #8
 800c6be:	bf00      	nop

0800c6c0 <__aeabi_dcmple>:
 800c6c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c6c4:	f7ff ffe0 	bl	800c688 <__aeabi_cdcmpeq>
 800c6c8:	bf94      	ite	ls
 800c6ca:	2001      	movls	r0, #1
 800c6cc:	2000      	movhi	r0, #0
 800c6ce:	f85d fb08 	ldr.w	pc, [sp], #8
 800c6d2:	bf00      	nop

0800c6d4 <__aeabi_dcmpge>:
 800c6d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c6d8:	f7ff ffce 	bl	800c678 <__aeabi_cdrcmple>
 800c6dc:	bf94      	ite	ls
 800c6de:	2001      	movls	r0, #1
 800c6e0:	2000      	movhi	r0, #0
 800c6e2:	f85d fb08 	ldr.w	pc, [sp], #8
 800c6e6:	bf00      	nop

0800c6e8 <__aeabi_dcmpgt>:
 800c6e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c6ec:	f7ff ffc4 	bl	800c678 <__aeabi_cdrcmple>
 800c6f0:	bf34      	ite	cc
 800c6f2:	2001      	movcc	r0, #1
 800c6f4:	2000      	movcs	r0, #0
 800c6f6:	f85d fb08 	ldr.w	pc, [sp], #8
 800c6fa:	bf00      	nop

0800c6fc <__aeabi_dcmpun>:
 800c6fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c700:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c704:	d102      	bne.n	800c70c <__aeabi_dcmpun+0x10>
 800c706:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800c70a:	d10a      	bne.n	800c722 <__aeabi_dcmpun+0x26>
 800c70c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c710:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c714:	d102      	bne.n	800c71c <__aeabi_dcmpun+0x20>
 800c716:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800c71a:	d102      	bne.n	800c722 <__aeabi_dcmpun+0x26>
 800c71c:	f04f 0000 	mov.w	r0, #0
 800c720:	4770      	bx	lr
 800c722:	f04f 0001 	mov.w	r0, #1
 800c726:	4770      	bx	lr

0800c728 <__aeabi_d2iz>:
 800c728:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c72c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800c730:	d215      	bcs.n	800c75e <__aeabi_d2iz+0x36>
 800c732:	d511      	bpl.n	800c758 <__aeabi_d2iz+0x30>
 800c734:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800c738:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800c73c:	d912      	bls.n	800c764 <__aeabi_d2iz+0x3c>
 800c73e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c746:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c74a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c74e:	fa23 f002 	lsr.w	r0, r3, r2
 800c752:	bf18      	it	ne
 800c754:	4240      	negne	r0, r0
 800c756:	4770      	bx	lr
 800c758:	f04f 0000 	mov.w	r0, #0
 800c75c:	4770      	bx	lr
 800c75e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800c762:	d105      	bne.n	800c770 <__aeabi_d2iz+0x48>
 800c764:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800c768:	bf08      	it	eq
 800c76a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800c76e:	4770      	bx	lr
 800c770:	f04f 0000 	mov.w	r0, #0
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop

0800c778 <__aeabi_frsub>:
 800c778:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800c77c:	e002      	b.n	800c784 <__addsf3>
 800c77e:	bf00      	nop

0800c780 <__aeabi_fsub>:
 800c780:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800c784 <__addsf3>:
 800c784:	0042      	lsls	r2, r0, #1
 800c786:	bf1f      	itttt	ne
 800c788:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800c78c:	ea92 0f03 	teqne	r2, r3
 800c790:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800c794:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800c798:	d06a      	beq.n	800c870 <__addsf3+0xec>
 800c79a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800c79e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800c7a2:	bfc1      	itttt	gt
 800c7a4:	18d2      	addgt	r2, r2, r3
 800c7a6:	4041      	eorgt	r1, r0
 800c7a8:	4048      	eorgt	r0, r1
 800c7aa:	4041      	eorgt	r1, r0
 800c7ac:	bfb8      	it	lt
 800c7ae:	425b      	neglt	r3, r3
 800c7b0:	2b19      	cmp	r3, #25
 800c7b2:	bf88      	it	hi
 800c7b4:	4770      	bxhi	lr
 800c7b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800c7ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c7be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800c7c2:	bf18      	it	ne
 800c7c4:	4240      	negne	r0, r0
 800c7c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c7ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800c7ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800c7d2:	bf18      	it	ne
 800c7d4:	4249      	negne	r1, r1
 800c7d6:	ea92 0f03 	teq	r2, r3
 800c7da:	d03f      	beq.n	800c85c <__addsf3+0xd8>
 800c7dc:	f1a2 0201 	sub.w	r2, r2, #1
 800c7e0:	fa41 fc03 	asr.w	ip, r1, r3
 800c7e4:	eb10 000c 	adds.w	r0, r0, ip
 800c7e8:	f1c3 0320 	rsb	r3, r3, #32
 800c7ec:	fa01 f103 	lsl.w	r1, r1, r3
 800c7f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c7f4:	d502      	bpl.n	800c7fc <__addsf3+0x78>
 800c7f6:	4249      	negs	r1, r1
 800c7f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800c7fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800c800:	d313      	bcc.n	800c82a <__addsf3+0xa6>
 800c802:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800c806:	d306      	bcc.n	800c816 <__addsf3+0x92>
 800c808:	0840      	lsrs	r0, r0, #1
 800c80a:	ea4f 0131 	mov.w	r1, r1, rrx
 800c80e:	f102 0201 	add.w	r2, r2, #1
 800c812:	2afe      	cmp	r2, #254	; 0xfe
 800c814:	d251      	bcs.n	800c8ba <__addsf3+0x136>
 800c816:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800c81a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800c81e:	bf08      	it	eq
 800c820:	f020 0001 	biceq.w	r0, r0, #1
 800c824:	ea40 0003 	orr.w	r0, r0, r3
 800c828:	4770      	bx	lr
 800c82a:	0049      	lsls	r1, r1, #1
 800c82c:	eb40 0000 	adc.w	r0, r0, r0
 800c830:	3a01      	subs	r2, #1
 800c832:	bf28      	it	cs
 800c834:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800c838:	d2ed      	bcs.n	800c816 <__addsf3+0x92>
 800c83a:	fab0 fc80 	clz	ip, r0
 800c83e:	f1ac 0c08 	sub.w	ip, ip, #8
 800c842:	ebb2 020c 	subs.w	r2, r2, ip
 800c846:	fa00 f00c 	lsl.w	r0, r0, ip
 800c84a:	bfaa      	itet	ge
 800c84c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800c850:	4252      	neglt	r2, r2
 800c852:	4318      	orrge	r0, r3
 800c854:	bfbc      	itt	lt
 800c856:	40d0      	lsrlt	r0, r2
 800c858:	4318      	orrlt	r0, r3
 800c85a:	4770      	bx	lr
 800c85c:	f092 0f00 	teq	r2, #0
 800c860:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800c864:	bf06      	itte	eq
 800c866:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800c86a:	3201      	addeq	r2, #1
 800c86c:	3b01      	subne	r3, #1
 800c86e:	e7b5      	b.n	800c7dc <__addsf3+0x58>
 800c870:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800c874:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800c878:	bf18      	it	ne
 800c87a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800c87e:	d021      	beq.n	800c8c4 <__addsf3+0x140>
 800c880:	ea92 0f03 	teq	r2, r3
 800c884:	d004      	beq.n	800c890 <__addsf3+0x10c>
 800c886:	f092 0f00 	teq	r2, #0
 800c88a:	bf08      	it	eq
 800c88c:	4608      	moveq	r0, r1
 800c88e:	4770      	bx	lr
 800c890:	ea90 0f01 	teq	r0, r1
 800c894:	bf1c      	itt	ne
 800c896:	2000      	movne	r0, #0
 800c898:	4770      	bxne	lr
 800c89a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800c89e:	d104      	bne.n	800c8aa <__addsf3+0x126>
 800c8a0:	0040      	lsls	r0, r0, #1
 800c8a2:	bf28      	it	cs
 800c8a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800c8a8:	4770      	bx	lr
 800c8aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800c8ae:	bf3c      	itt	cc
 800c8b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800c8b4:	4770      	bxcc	lr
 800c8b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c8ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800c8be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c8c2:	4770      	bx	lr
 800c8c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800c8c8:	bf16      	itet	ne
 800c8ca:	4608      	movne	r0, r1
 800c8cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800c8d0:	4601      	movne	r1, r0
 800c8d2:	0242      	lsls	r2, r0, #9
 800c8d4:	bf06      	itte	eq
 800c8d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800c8da:	ea90 0f01 	teqeq	r0, r1
 800c8de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800c8e2:	4770      	bx	lr

0800c8e4 <__aeabi_ui2f>:
 800c8e4:	f04f 0300 	mov.w	r3, #0
 800c8e8:	e004      	b.n	800c8f4 <__aeabi_i2f+0x8>
 800c8ea:	bf00      	nop

0800c8ec <__aeabi_i2f>:
 800c8ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800c8f0:	bf48      	it	mi
 800c8f2:	4240      	negmi	r0, r0
 800c8f4:	ea5f 0c00 	movs.w	ip, r0
 800c8f8:	bf08      	it	eq
 800c8fa:	4770      	bxeq	lr
 800c8fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800c900:	4601      	mov	r1, r0
 800c902:	f04f 0000 	mov.w	r0, #0
 800c906:	e01c      	b.n	800c942 <__aeabi_l2f+0x2a>

0800c908 <__aeabi_ul2f>:
 800c908:	ea50 0201 	orrs.w	r2, r0, r1
 800c90c:	bf08      	it	eq
 800c90e:	4770      	bxeq	lr
 800c910:	f04f 0300 	mov.w	r3, #0
 800c914:	e00a      	b.n	800c92c <__aeabi_l2f+0x14>
 800c916:	bf00      	nop

0800c918 <__aeabi_l2f>:
 800c918:	ea50 0201 	orrs.w	r2, r0, r1
 800c91c:	bf08      	it	eq
 800c91e:	4770      	bxeq	lr
 800c920:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800c924:	d502      	bpl.n	800c92c <__aeabi_l2f+0x14>
 800c926:	4240      	negs	r0, r0
 800c928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c92c:	ea5f 0c01 	movs.w	ip, r1
 800c930:	bf02      	ittt	eq
 800c932:	4684      	moveq	ip, r0
 800c934:	4601      	moveq	r1, r0
 800c936:	2000      	moveq	r0, #0
 800c938:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800c93c:	bf08      	it	eq
 800c93e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800c942:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800c946:	fabc f28c 	clz	r2, ip
 800c94a:	3a08      	subs	r2, #8
 800c94c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800c950:	db10      	blt.n	800c974 <__aeabi_l2f+0x5c>
 800c952:	fa01 fc02 	lsl.w	ip, r1, r2
 800c956:	4463      	add	r3, ip
 800c958:	fa00 fc02 	lsl.w	ip, r0, r2
 800c95c:	f1c2 0220 	rsb	r2, r2, #32
 800c960:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c964:	fa20 f202 	lsr.w	r2, r0, r2
 800c968:	eb43 0002 	adc.w	r0, r3, r2
 800c96c:	bf08      	it	eq
 800c96e:	f020 0001 	biceq.w	r0, r0, #1
 800c972:	4770      	bx	lr
 800c974:	f102 0220 	add.w	r2, r2, #32
 800c978:	fa01 fc02 	lsl.w	ip, r1, r2
 800c97c:	f1c2 0220 	rsb	r2, r2, #32
 800c980:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800c984:	fa21 f202 	lsr.w	r2, r1, r2
 800c988:	eb43 0002 	adc.w	r0, r3, r2
 800c98c:	bf08      	it	eq
 800c98e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800c992:	4770      	bx	lr

0800c994 <__aeabi_fmul>:
 800c994:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c998:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800c99c:	bf1e      	ittt	ne
 800c99e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800c9a2:	ea92 0f0c 	teqne	r2, ip
 800c9a6:	ea93 0f0c 	teqne	r3, ip
 800c9aa:	d06f      	beq.n	800ca8c <__aeabi_fmul+0xf8>
 800c9ac:	441a      	add	r2, r3
 800c9ae:	ea80 0c01 	eor.w	ip, r0, r1
 800c9b2:	0240      	lsls	r0, r0, #9
 800c9b4:	bf18      	it	ne
 800c9b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800c9ba:	d01e      	beq.n	800c9fa <__aeabi_fmul+0x66>
 800c9bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800c9c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800c9c8:	fba0 3101 	umull	r3, r1, r0, r1
 800c9cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800c9d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c9d4:	bf3e      	ittt	cc
 800c9d6:	0049      	lslcc	r1, r1, #1
 800c9d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800c9dc:	005b      	lslcc	r3, r3, #1
 800c9de:	ea40 0001 	orr.w	r0, r0, r1
 800c9e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800c9e6:	2afd      	cmp	r2, #253	; 0xfd
 800c9e8:	d81d      	bhi.n	800ca26 <__aeabi_fmul+0x92>
 800c9ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800c9f2:	bf08      	it	eq
 800c9f4:	f020 0001 	biceq.w	r0, r0, #1
 800c9f8:	4770      	bx	lr
 800c9fa:	f090 0f00 	teq	r0, #0
 800c9fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800ca02:	bf08      	it	eq
 800ca04:	0249      	lsleq	r1, r1, #9
 800ca06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800ca0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800ca0e:	3a7f      	subs	r2, #127	; 0x7f
 800ca10:	bfc2      	ittt	gt
 800ca12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800ca16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800ca1a:	4770      	bxgt	lr
 800ca1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ca20:	f04f 0300 	mov.w	r3, #0
 800ca24:	3a01      	subs	r2, #1
 800ca26:	dc5d      	bgt.n	800cae4 <__aeabi_fmul+0x150>
 800ca28:	f112 0f19 	cmn.w	r2, #25
 800ca2c:	bfdc      	itt	le
 800ca2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800ca32:	4770      	bxle	lr
 800ca34:	f1c2 0200 	rsb	r2, r2, #0
 800ca38:	0041      	lsls	r1, r0, #1
 800ca3a:	fa21 f102 	lsr.w	r1, r1, r2
 800ca3e:	f1c2 0220 	rsb	r2, r2, #32
 800ca42:	fa00 fc02 	lsl.w	ip, r0, r2
 800ca46:	ea5f 0031 	movs.w	r0, r1, rrx
 800ca4a:	f140 0000 	adc.w	r0, r0, #0
 800ca4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800ca52:	bf08      	it	eq
 800ca54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800ca58:	4770      	bx	lr
 800ca5a:	f092 0f00 	teq	r2, #0
 800ca5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800ca62:	bf02      	ittt	eq
 800ca64:	0040      	lsleq	r0, r0, #1
 800ca66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800ca6a:	3a01      	subeq	r2, #1
 800ca6c:	d0f9      	beq.n	800ca62 <__aeabi_fmul+0xce>
 800ca6e:	ea40 000c 	orr.w	r0, r0, ip
 800ca72:	f093 0f00 	teq	r3, #0
 800ca76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800ca7a:	bf02      	ittt	eq
 800ca7c:	0049      	lsleq	r1, r1, #1
 800ca7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800ca82:	3b01      	subeq	r3, #1
 800ca84:	d0f9      	beq.n	800ca7a <__aeabi_fmul+0xe6>
 800ca86:	ea41 010c 	orr.w	r1, r1, ip
 800ca8a:	e78f      	b.n	800c9ac <__aeabi_fmul+0x18>
 800ca8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800ca90:	ea92 0f0c 	teq	r2, ip
 800ca94:	bf18      	it	ne
 800ca96:	ea93 0f0c 	teqne	r3, ip
 800ca9a:	d00a      	beq.n	800cab2 <__aeabi_fmul+0x11e>
 800ca9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800caa0:	bf18      	it	ne
 800caa2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800caa6:	d1d8      	bne.n	800ca5a <__aeabi_fmul+0xc6>
 800caa8:	ea80 0001 	eor.w	r0, r0, r1
 800caac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800cab0:	4770      	bx	lr
 800cab2:	f090 0f00 	teq	r0, #0
 800cab6:	bf17      	itett	ne
 800cab8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800cabc:	4608      	moveq	r0, r1
 800cabe:	f091 0f00 	teqne	r1, #0
 800cac2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800cac6:	d014      	beq.n	800caf2 <__aeabi_fmul+0x15e>
 800cac8:	ea92 0f0c 	teq	r2, ip
 800cacc:	d101      	bne.n	800cad2 <__aeabi_fmul+0x13e>
 800cace:	0242      	lsls	r2, r0, #9
 800cad0:	d10f      	bne.n	800caf2 <__aeabi_fmul+0x15e>
 800cad2:	ea93 0f0c 	teq	r3, ip
 800cad6:	d103      	bne.n	800cae0 <__aeabi_fmul+0x14c>
 800cad8:	024b      	lsls	r3, r1, #9
 800cada:	bf18      	it	ne
 800cadc:	4608      	movne	r0, r1
 800cade:	d108      	bne.n	800caf2 <__aeabi_fmul+0x15e>
 800cae0:	ea80 0001 	eor.w	r0, r0, r1
 800cae4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800cae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800caec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800caf0:	4770      	bx	lr
 800caf2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800caf6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800cafa:	4770      	bx	lr

0800cafc <__aeabi_fdiv>:
 800cafc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800cb00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800cb04:	bf1e      	ittt	ne
 800cb06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800cb0a:	ea92 0f0c 	teqne	r2, ip
 800cb0e:	ea93 0f0c 	teqne	r3, ip
 800cb12:	d069      	beq.n	800cbe8 <__aeabi_fdiv+0xec>
 800cb14:	eba2 0203 	sub.w	r2, r2, r3
 800cb18:	ea80 0c01 	eor.w	ip, r0, r1
 800cb1c:	0249      	lsls	r1, r1, #9
 800cb1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800cb22:	d037      	beq.n	800cb94 <__aeabi_fdiv+0x98>
 800cb24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800cb2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800cb30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800cb34:	428b      	cmp	r3, r1
 800cb36:	bf38      	it	cc
 800cb38:	005b      	lslcc	r3, r3, #1
 800cb3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800cb3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800cb42:	428b      	cmp	r3, r1
 800cb44:	bf24      	itt	cs
 800cb46:	1a5b      	subcs	r3, r3, r1
 800cb48:	ea40 000c 	orrcs.w	r0, r0, ip
 800cb4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800cb50:	bf24      	itt	cs
 800cb52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800cb56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800cb5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800cb5e:	bf24      	itt	cs
 800cb60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800cb64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800cb68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800cb6c:	bf24      	itt	cs
 800cb6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800cb72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800cb76:	011b      	lsls	r3, r3, #4
 800cb78:	bf18      	it	ne
 800cb7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800cb7e:	d1e0      	bne.n	800cb42 <__aeabi_fdiv+0x46>
 800cb80:	2afd      	cmp	r2, #253	; 0xfd
 800cb82:	f63f af50 	bhi.w	800ca26 <__aeabi_fmul+0x92>
 800cb86:	428b      	cmp	r3, r1
 800cb88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800cb8c:	bf08      	it	eq
 800cb8e:	f020 0001 	biceq.w	r0, r0, #1
 800cb92:	4770      	bx	lr
 800cb94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800cb98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800cb9c:	327f      	adds	r2, #127	; 0x7f
 800cb9e:	bfc2      	ittt	gt
 800cba0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800cba4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800cba8:	4770      	bxgt	lr
 800cbaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cbae:	f04f 0300 	mov.w	r3, #0
 800cbb2:	3a01      	subs	r2, #1
 800cbb4:	e737      	b.n	800ca26 <__aeabi_fmul+0x92>
 800cbb6:	f092 0f00 	teq	r2, #0
 800cbba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800cbbe:	bf02      	ittt	eq
 800cbc0:	0040      	lsleq	r0, r0, #1
 800cbc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800cbc6:	3a01      	subeq	r2, #1
 800cbc8:	d0f9      	beq.n	800cbbe <__aeabi_fdiv+0xc2>
 800cbca:	ea40 000c 	orr.w	r0, r0, ip
 800cbce:	f093 0f00 	teq	r3, #0
 800cbd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800cbd6:	bf02      	ittt	eq
 800cbd8:	0049      	lsleq	r1, r1, #1
 800cbda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800cbde:	3b01      	subeq	r3, #1
 800cbe0:	d0f9      	beq.n	800cbd6 <__aeabi_fdiv+0xda>
 800cbe2:	ea41 010c 	orr.w	r1, r1, ip
 800cbe6:	e795      	b.n	800cb14 <__aeabi_fdiv+0x18>
 800cbe8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800cbec:	ea92 0f0c 	teq	r2, ip
 800cbf0:	d108      	bne.n	800cc04 <__aeabi_fdiv+0x108>
 800cbf2:	0242      	lsls	r2, r0, #9
 800cbf4:	f47f af7d 	bne.w	800caf2 <__aeabi_fmul+0x15e>
 800cbf8:	ea93 0f0c 	teq	r3, ip
 800cbfc:	f47f af70 	bne.w	800cae0 <__aeabi_fmul+0x14c>
 800cc00:	4608      	mov	r0, r1
 800cc02:	e776      	b.n	800caf2 <__aeabi_fmul+0x15e>
 800cc04:	ea93 0f0c 	teq	r3, ip
 800cc08:	d104      	bne.n	800cc14 <__aeabi_fdiv+0x118>
 800cc0a:	024b      	lsls	r3, r1, #9
 800cc0c:	f43f af4c 	beq.w	800caa8 <__aeabi_fmul+0x114>
 800cc10:	4608      	mov	r0, r1
 800cc12:	e76e      	b.n	800caf2 <__aeabi_fmul+0x15e>
 800cc14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800cc18:	bf18      	it	ne
 800cc1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800cc1e:	d1ca      	bne.n	800cbb6 <__aeabi_fdiv+0xba>
 800cc20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800cc24:	f47f af5c 	bne.w	800cae0 <__aeabi_fmul+0x14c>
 800cc28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800cc2c:	f47f af3c 	bne.w	800caa8 <__aeabi_fmul+0x114>
 800cc30:	e75f      	b.n	800caf2 <__aeabi_fmul+0x15e>
 800cc32:	bf00      	nop

0800cc34 <__gesf2>:
 800cc34:	f04f 3cff 	mov.w	ip, #4294967295
 800cc38:	e006      	b.n	800cc48 <__cmpsf2+0x4>
 800cc3a:	bf00      	nop

0800cc3c <__lesf2>:
 800cc3c:	f04f 0c01 	mov.w	ip, #1
 800cc40:	e002      	b.n	800cc48 <__cmpsf2+0x4>
 800cc42:	bf00      	nop

0800cc44 <__cmpsf2>:
 800cc44:	f04f 0c01 	mov.w	ip, #1
 800cc48:	f84d cd04 	str.w	ip, [sp, #-4]!
 800cc4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800cc50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800cc54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800cc58:	bf18      	it	ne
 800cc5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800cc5e:	d011      	beq.n	800cc84 <__cmpsf2+0x40>
 800cc60:	b001      	add	sp, #4
 800cc62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800cc66:	bf18      	it	ne
 800cc68:	ea90 0f01 	teqne	r0, r1
 800cc6c:	bf58      	it	pl
 800cc6e:	ebb2 0003 	subspl.w	r0, r2, r3
 800cc72:	bf88      	it	hi
 800cc74:	17c8      	asrhi	r0, r1, #31
 800cc76:	bf38      	it	cc
 800cc78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800cc7c:	bf18      	it	ne
 800cc7e:	f040 0001 	orrne.w	r0, r0, #1
 800cc82:	4770      	bx	lr
 800cc84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800cc88:	d102      	bne.n	800cc90 <__cmpsf2+0x4c>
 800cc8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800cc8e:	d105      	bne.n	800cc9c <__cmpsf2+0x58>
 800cc90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800cc94:	d1e4      	bne.n	800cc60 <__cmpsf2+0x1c>
 800cc96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800cc9a:	d0e1      	beq.n	800cc60 <__cmpsf2+0x1c>
 800cc9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop

0800cca4 <__aeabi_cfrcmple>:
 800cca4:	4684      	mov	ip, r0
 800cca6:	4608      	mov	r0, r1
 800cca8:	4661      	mov	r1, ip
 800ccaa:	e7ff      	b.n	800ccac <__aeabi_cfcmpeq>

0800ccac <__aeabi_cfcmpeq>:
 800ccac:	b50f      	push	{r0, r1, r2, r3, lr}
 800ccae:	f7ff ffc9 	bl	800cc44 <__cmpsf2>
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	bf48      	it	mi
 800ccb6:	f110 0f00 	cmnmi.w	r0, #0
 800ccba:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800ccbc <__aeabi_fcmpeq>:
 800ccbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ccc0:	f7ff fff4 	bl	800ccac <__aeabi_cfcmpeq>
 800ccc4:	bf0c      	ite	eq
 800ccc6:	2001      	moveq	r0, #1
 800ccc8:	2000      	movne	r0, #0
 800ccca:	f85d fb08 	ldr.w	pc, [sp], #8
 800ccce:	bf00      	nop

0800ccd0 <__aeabi_fcmplt>:
 800ccd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ccd4:	f7ff ffea 	bl	800ccac <__aeabi_cfcmpeq>
 800ccd8:	bf34      	ite	cc
 800ccda:	2001      	movcc	r0, #1
 800ccdc:	2000      	movcs	r0, #0
 800ccde:	f85d fb08 	ldr.w	pc, [sp], #8
 800cce2:	bf00      	nop

0800cce4 <__aeabi_fcmple>:
 800cce4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cce8:	f7ff ffe0 	bl	800ccac <__aeabi_cfcmpeq>
 800ccec:	bf94      	ite	ls
 800ccee:	2001      	movls	r0, #1
 800ccf0:	2000      	movhi	r0, #0
 800ccf2:	f85d fb08 	ldr.w	pc, [sp], #8
 800ccf6:	bf00      	nop

0800ccf8 <__aeabi_fcmpge>:
 800ccf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ccfc:	f7ff ffd2 	bl	800cca4 <__aeabi_cfrcmple>
 800cd00:	bf94      	ite	ls
 800cd02:	2001      	movls	r0, #1
 800cd04:	2000      	movhi	r0, #0
 800cd06:	f85d fb08 	ldr.w	pc, [sp], #8
 800cd0a:	bf00      	nop

0800cd0c <__aeabi_fcmpgt>:
 800cd0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cd10:	f7ff ffc8 	bl	800cca4 <__aeabi_cfrcmple>
 800cd14:	bf34      	ite	cc
 800cd16:	2001      	movcc	r0, #1
 800cd18:	2000      	movcs	r0, #0
 800cd1a:	f85d fb08 	ldr.w	pc, [sp], #8
 800cd1e:	bf00      	nop

0800cd20 <__aeabi_f2uiz>:
 800cd20:	0042      	lsls	r2, r0, #1
 800cd22:	d20e      	bcs.n	800cd42 <__aeabi_f2uiz+0x22>
 800cd24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800cd28:	d30b      	bcc.n	800cd42 <__aeabi_f2uiz+0x22>
 800cd2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800cd2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800cd32:	d409      	bmi.n	800cd48 <__aeabi_f2uiz+0x28>
 800cd34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800cd38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd3c:	fa23 f002 	lsr.w	r0, r3, r2
 800cd40:	4770      	bx	lr
 800cd42:	f04f 0000 	mov.w	r0, #0
 800cd46:	4770      	bx	lr
 800cd48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800cd4c:	d101      	bne.n	800cd52 <__aeabi_f2uiz+0x32>
 800cd4e:	0242      	lsls	r2, r0, #9
 800cd50:	d102      	bne.n	800cd58 <__aeabi_f2uiz+0x38>
 800cd52:	f04f 30ff 	mov.w	r0, #4294967295
 800cd56:	4770      	bx	lr
 800cd58:	f04f 0000 	mov.w	r0, #0
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop

0800cd60 <__aeabi_uldivmod>:
 800cd60:	b953      	cbnz	r3, 800cd78 <__aeabi_uldivmod+0x18>
 800cd62:	b94a      	cbnz	r2, 800cd78 <__aeabi_uldivmod+0x18>
 800cd64:	2900      	cmp	r1, #0
 800cd66:	bf08      	it	eq
 800cd68:	2800      	cmpeq	r0, #0
 800cd6a:	bf1c      	itt	ne
 800cd6c:	f04f 31ff 	movne.w	r1, #4294967295
 800cd70:	f04f 30ff 	movne.w	r0, #4294967295
 800cd74:	f000 b96e 	b.w	800d054 <__aeabi_idiv0>
 800cd78:	f1ad 0c08 	sub.w	ip, sp, #8
 800cd7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800cd80:	f000 f806 	bl	800cd90 <__udivmoddi4>
 800cd84:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cd88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd8c:	b004      	add	sp, #16
 800cd8e:	4770      	bx	lr

0800cd90 <__udivmoddi4>:
 800cd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd94:	9e08      	ldr	r6, [sp, #32]
 800cd96:	460d      	mov	r5, r1
 800cd98:	4604      	mov	r4, r0
 800cd9a:	468e      	mov	lr, r1
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f040 8083 	bne.w	800cea8 <__udivmoddi4+0x118>
 800cda2:	428a      	cmp	r2, r1
 800cda4:	4617      	mov	r7, r2
 800cda6:	d947      	bls.n	800ce38 <__udivmoddi4+0xa8>
 800cda8:	fab2 f382 	clz	r3, r2
 800cdac:	b14b      	cbz	r3, 800cdc2 <__udivmoddi4+0x32>
 800cdae:	f1c3 0120 	rsb	r1, r3, #32
 800cdb2:	fa05 fe03 	lsl.w	lr, r5, r3
 800cdb6:	fa20 f101 	lsr.w	r1, r0, r1
 800cdba:	409f      	lsls	r7, r3
 800cdbc:	ea41 0e0e 	orr.w	lr, r1, lr
 800cdc0:	409c      	lsls	r4, r3
 800cdc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800cdc6:	fbbe fcf8 	udiv	ip, lr, r8
 800cdca:	fa1f f987 	uxth.w	r9, r7
 800cdce:	fb08 e21c 	mls	r2, r8, ip, lr
 800cdd2:	fb0c f009 	mul.w	r0, ip, r9
 800cdd6:	0c21      	lsrs	r1, r4, #16
 800cdd8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800cddc:	4290      	cmp	r0, r2
 800cdde:	d90a      	bls.n	800cdf6 <__udivmoddi4+0x66>
 800cde0:	18ba      	adds	r2, r7, r2
 800cde2:	f10c 31ff 	add.w	r1, ip, #4294967295
 800cde6:	f080 8118 	bcs.w	800d01a <__udivmoddi4+0x28a>
 800cdea:	4290      	cmp	r0, r2
 800cdec:	f240 8115 	bls.w	800d01a <__udivmoddi4+0x28a>
 800cdf0:	f1ac 0c02 	sub.w	ip, ip, #2
 800cdf4:	443a      	add	r2, r7
 800cdf6:	1a12      	subs	r2, r2, r0
 800cdf8:	fbb2 f0f8 	udiv	r0, r2, r8
 800cdfc:	fb08 2210 	mls	r2, r8, r0, r2
 800ce00:	fb00 f109 	mul.w	r1, r0, r9
 800ce04:	b2a4      	uxth	r4, r4
 800ce06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ce0a:	42a1      	cmp	r1, r4
 800ce0c:	d909      	bls.n	800ce22 <__udivmoddi4+0x92>
 800ce0e:	193c      	adds	r4, r7, r4
 800ce10:	f100 32ff 	add.w	r2, r0, #4294967295
 800ce14:	f080 8103 	bcs.w	800d01e <__udivmoddi4+0x28e>
 800ce18:	42a1      	cmp	r1, r4
 800ce1a:	f240 8100 	bls.w	800d01e <__udivmoddi4+0x28e>
 800ce1e:	3802      	subs	r0, #2
 800ce20:	443c      	add	r4, r7
 800ce22:	1a64      	subs	r4, r4, r1
 800ce24:	2100      	movs	r1, #0
 800ce26:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800ce2a:	b11e      	cbz	r6, 800ce34 <__udivmoddi4+0xa4>
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	40dc      	lsrs	r4, r3
 800ce30:	e9c6 4200 	strd	r4, r2, [r6]
 800ce34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce38:	b902      	cbnz	r2, 800ce3c <__udivmoddi4+0xac>
 800ce3a:	deff      	udf	#255	; 0xff
 800ce3c:	fab2 f382 	clz	r3, r2
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d14f      	bne.n	800cee4 <__udivmoddi4+0x154>
 800ce44:	1a8d      	subs	r5, r1, r2
 800ce46:	2101      	movs	r1, #1
 800ce48:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ce4c:	fa1f f882 	uxth.w	r8, r2
 800ce50:	fbb5 fcfe 	udiv	ip, r5, lr
 800ce54:	fb0e 551c 	mls	r5, lr, ip, r5
 800ce58:	fb08 f00c 	mul.w	r0, r8, ip
 800ce5c:	0c22      	lsrs	r2, r4, #16
 800ce5e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800ce62:	42a8      	cmp	r0, r5
 800ce64:	d907      	bls.n	800ce76 <__udivmoddi4+0xe6>
 800ce66:	197d      	adds	r5, r7, r5
 800ce68:	f10c 32ff 	add.w	r2, ip, #4294967295
 800ce6c:	d202      	bcs.n	800ce74 <__udivmoddi4+0xe4>
 800ce6e:	42a8      	cmp	r0, r5
 800ce70:	f200 80e9 	bhi.w	800d046 <__udivmoddi4+0x2b6>
 800ce74:	4694      	mov	ip, r2
 800ce76:	1a2d      	subs	r5, r5, r0
 800ce78:	fbb5 f0fe 	udiv	r0, r5, lr
 800ce7c:	fb0e 5510 	mls	r5, lr, r0, r5
 800ce80:	fb08 f800 	mul.w	r8, r8, r0
 800ce84:	b2a4      	uxth	r4, r4
 800ce86:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800ce8a:	45a0      	cmp	r8, r4
 800ce8c:	d907      	bls.n	800ce9e <__udivmoddi4+0x10e>
 800ce8e:	193c      	adds	r4, r7, r4
 800ce90:	f100 32ff 	add.w	r2, r0, #4294967295
 800ce94:	d202      	bcs.n	800ce9c <__udivmoddi4+0x10c>
 800ce96:	45a0      	cmp	r8, r4
 800ce98:	f200 80d9 	bhi.w	800d04e <__udivmoddi4+0x2be>
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	eba4 0408 	sub.w	r4, r4, r8
 800cea2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800cea6:	e7c0      	b.n	800ce2a <__udivmoddi4+0x9a>
 800cea8:	428b      	cmp	r3, r1
 800ceaa:	d908      	bls.n	800cebe <__udivmoddi4+0x12e>
 800ceac:	2e00      	cmp	r6, #0
 800ceae:	f000 80b1 	beq.w	800d014 <__udivmoddi4+0x284>
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	e9c6 0500 	strd	r0, r5, [r6]
 800ceb8:	4608      	mov	r0, r1
 800ceba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cebe:	fab3 f183 	clz	r1, r3
 800cec2:	2900      	cmp	r1, #0
 800cec4:	d14b      	bne.n	800cf5e <__udivmoddi4+0x1ce>
 800cec6:	42ab      	cmp	r3, r5
 800cec8:	d302      	bcc.n	800ced0 <__udivmoddi4+0x140>
 800ceca:	4282      	cmp	r2, r0
 800cecc:	f200 80b9 	bhi.w	800d042 <__udivmoddi4+0x2b2>
 800ced0:	1a84      	subs	r4, r0, r2
 800ced2:	eb65 0303 	sbc.w	r3, r5, r3
 800ced6:	2001      	movs	r0, #1
 800ced8:	469e      	mov	lr, r3
 800ceda:	2e00      	cmp	r6, #0
 800cedc:	d0aa      	beq.n	800ce34 <__udivmoddi4+0xa4>
 800cede:	e9c6 4e00 	strd	r4, lr, [r6]
 800cee2:	e7a7      	b.n	800ce34 <__udivmoddi4+0xa4>
 800cee4:	409f      	lsls	r7, r3
 800cee6:	f1c3 0220 	rsb	r2, r3, #32
 800ceea:	40d1      	lsrs	r1, r2
 800ceec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800cef0:	fbb1 f0fe 	udiv	r0, r1, lr
 800cef4:	fa1f f887 	uxth.w	r8, r7
 800cef8:	fb0e 1110 	mls	r1, lr, r0, r1
 800cefc:	fa24 f202 	lsr.w	r2, r4, r2
 800cf00:	409d      	lsls	r5, r3
 800cf02:	fb00 fc08 	mul.w	ip, r0, r8
 800cf06:	432a      	orrs	r2, r5
 800cf08:	0c15      	lsrs	r5, r2, #16
 800cf0a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800cf0e:	45ac      	cmp	ip, r5
 800cf10:	fa04 f403 	lsl.w	r4, r4, r3
 800cf14:	d909      	bls.n	800cf2a <__udivmoddi4+0x19a>
 800cf16:	197d      	adds	r5, r7, r5
 800cf18:	f100 31ff 	add.w	r1, r0, #4294967295
 800cf1c:	f080 808f 	bcs.w	800d03e <__udivmoddi4+0x2ae>
 800cf20:	45ac      	cmp	ip, r5
 800cf22:	f240 808c 	bls.w	800d03e <__udivmoddi4+0x2ae>
 800cf26:	3802      	subs	r0, #2
 800cf28:	443d      	add	r5, r7
 800cf2a:	eba5 050c 	sub.w	r5, r5, ip
 800cf2e:	fbb5 f1fe 	udiv	r1, r5, lr
 800cf32:	fb0e 5c11 	mls	ip, lr, r1, r5
 800cf36:	fb01 f908 	mul.w	r9, r1, r8
 800cf3a:	b295      	uxth	r5, r2
 800cf3c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800cf40:	45a9      	cmp	r9, r5
 800cf42:	d907      	bls.n	800cf54 <__udivmoddi4+0x1c4>
 800cf44:	197d      	adds	r5, r7, r5
 800cf46:	f101 32ff 	add.w	r2, r1, #4294967295
 800cf4a:	d274      	bcs.n	800d036 <__udivmoddi4+0x2a6>
 800cf4c:	45a9      	cmp	r9, r5
 800cf4e:	d972      	bls.n	800d036 <__udivmoddi4+0x2a6>
 800cf50:	3902      	subs	r1, #2
 800cf52:	443d      	add	r5, r7
 800cf54:	eba5 0509 	sub.w	r5, r5, r9
 800cf58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cf5c:	e778      	b.n	800ce50 <__udivmoddi4+0xc0>
 800cf5e:	f1c1 0720 	rsb	r7, r1, #32
 800cf62:	408b      	lsls	r3, r1
 800cf64:	fa22 fc07 	lsr.w	ip, r2, r7
 800cf68:	ea4c 0c03 	orr.w	ip, ip, r3
 800cf6c:	fa25 f407 	lsr.w	r4, r5, r7
 800cf70:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800cf74:	fbb4 f9fe 	udiv	r9, r4, lr
 800cf78:	fa1f f88c 	uxth.w	r8, ip
 800cf7c:	fb0e 4419 	mls	r4, lr, r9, r4
 800cf80:	fa20 f307 	lsr.w	r3, r0, r7
 800cf84:	fb09 fa08 	mul.w	sl, r9, r8
 800cf88:	408d      	lsls	r5, r1
 800cf8a:	431d      	orrs	r5, r3
 800cf8c:	0c2b      	lsrs	r3, r5, #16
 800cf8e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800cf92:	45a2      	cmp	sl, r4
 800cf94:	fa02 f201 	lsl.w	r2, r2, r1
 800cf98:	fa00 f301 	lsl.w	r3, r0, r1
 800cf9c:	d909      	bls.n	800cfb2 <__udivmoddi4+0x222>
 800cf9e:	eb1c 0404 	adds.w	r4, ip, r4
 800cfa2:	f109 30ff 	add.w	r0, r9, #4294967295
 800cfa6:	d248      	bcs.n	800d03a <__udivmoddi4+0x2aa>
 800cfa8:	45a2      	cmp	sl, r4
 800cfaa:	d946      	bls.n	800d03a <__udivmoddi4+0x2aa>
 800cfac:	f1a9 0902 	sub.w	r9, r9, #2
 800cfb0:	4464      	add	r4, ip
 800cfb2:	eba4 040a 	sub.w	r4, r4, sl
 800cfb6:	fbb4 f0fe 	udiv	r0, r4, lr
 800cfba:	fb0e 4410 	mls	r4, lr, r0, r4
 800cfbe:	fb00 fa08 	mul.w	sl, r0, r8
 800cfc2:	b2ad      	uxth	r5, r5
 800cfc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800cfc8:	45a2      	cmp	sl, r4
 800cfca:	d908      	bls.n	800cfde <__udivmoddi4+0x24e>
 800cfcc:	eb1c 0404 	adds.w	r4, ip, r4
 800cfd0:	f100 35ff 	add.w	r5, r0, #4294967295
 800cfd4:	d22d      	bcs.n	800d032 <__udivmoddi4+0x2a2>
 800cfd6:	45a2      	cmp	sl, r4
 800cfd8:	d92b      	bls.n	800d032 <__udivmoddi4+0x2a2>
 800cfda:	3802      	subs	r0, #2
 800cfdc:	4464      	add	r4, ip
 800cfde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800cfe2:	fba0 8902 	umull	r8, r9, r0, r2
 800cfe6:	eba4 040a 	sub.w	r4, r4, sl
 800cfea:	454c      	cmp	r4, r9
 800cfec:	46c6      	mov	lr, r8
 800cfee:	464d      	mov	r5, r9
 800cff0:	d319      	bcc.n	800d026 <__udivmoddi4+0x296>
 800cff2:	d016      	beq.n	800d022 <__udivmoddi4+0x292>
 800cff4:	b15e      	cbz	r6, 800d00e <__udivmoddi4+0x27e>
 800cff6:	ebb3 020e 	subs.w	r2, r3, lr
 800cffa:	eb64 0405 	sbc.w	r4, r4, r5
 800cffe:	fa04 f707 	lsl.w	r7, r4, r7
 800d002:	fa22 f301 	lsr.w	r3, r2, r1
 800d006:	431f      	orrs	r7, r3
 800d008:	40cc      	lsrs	r4, r1
 800d00a:	e9c6 7400 	strd	r7, r4, [r6]
 800d00e:	2100      	movs	r1, #0
 800d010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d014:	4631      	mov	r1, r6
 800d016:	4630      	mov	r0, r6
 800d018:	e70c      	b.n	800ce34 <__udivmoddi4+0xa4>
 800d01a:	468c      	mov	ip, r1
 800d01c:	e6eb      	b.n	800cdf6 <__udivmoddi4+0x66>
 800d01e:	4610      	mov	r0, r2
 800d020:	e6ff      	b.n	800ce22 <__udivmoddi4+0x92>
 800d022:	4543      	cmp	r3, r8
 800d024:	d2e6      	bcs.n	800cff4 <__udivmoddi4+0x264>
 800d026:	ebb8 0e02 	subs.w	lr, r8, r2
 800d02a:	eb69 050c 	sbc.w	r5, r9, ip
 800d02e:	3801      	subs	r0, #1
 800d030:	e7e0      	b.n	800cff4 <__udivmoddi4+0x264>
 800d032:	4628      	mov	r0, r5
 800d034:	e7d3      	b.n	800cfde <__udivmoddi4+0x24e>
 800d036:	4611      	mov	r1, r2
 800d038:	e78c      	b.n	800cf54 <__udivmoddi4+0x1c4>
 800d03a:	4681      	mov	r9, r0
 800d03c:	e7b9      	b.n	800cfb2 <__udivmoddi4+0x222>
 800d03e:	4608      	mov	r0, r1
 800d040:	e773      	b.n	800cf2a <__udivmoddi4+0x19a>
 800d042:	4608      	mov	r0, r1
 800d044:	e749      	b.n	800ceda <__udivmoddi4+0x14a>
 800d046:	f1ac 0c02 	sub.w	ip, ip, #2
 800d04a:	443d      	add	r5, r7
 800d04c:	e713      	b.n	800ce76 <__udivmoddi4+0xe6>
 800d04e:	3802      	subs	r0, #2
 800d050:	443c      	add	r4, r7
 800d052:	e724      	b.n	800ce9e <__udivmoddi4+0x10e>

0800d054 <__aeabi_idiv0>:
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop

Disassembly of section .data:

20000000 <FLASHStatus>:
20000000:	0004                                        ..

20000002 <volume>:
20000002:	0040                                        @.

20000004 <vs1003_ram>:
20000004:	0000 0000 00fa                              ......

2000000a <f_kbps>:
2000000a:	ffff                                        ..

2000000c <music_extend>:
2000000c:	24ad 0801 24b1 0801 24b5 0801 24b9 0801     .$...$...$...$..

2000001c <SystemCoreClock>:
2000001c:	a200 044a                                   ..J.

20000020 <ADCPrescTable>:
20000020:	0402 0806                                   ....

20000024 <APBAHBPrescTable>:
20000024:	0000 0000 0201 0403 0201 0403 0706 0908     ................

20000034 <_impure_ptr>:
20000034:	0038 2000                                   8.. 

20000038 <impure_data>:
20000038:	0000 0000 0324 2000 038c 2000 03f4 2000     ....$.. ... ... 
	...
200000e0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000f0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000460 <__malloc_av_>:
	...
20000468:	0460 2000 0460 2000 0468 2000 0468 2000     `.. `.. h.. h.. 
20000478:	0470 2000 0470 2000 0478 2000 0478 2000     p.. p.. x.. x.. 
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 

20000868 <__malloc_sbrk_base>:
20000868:	ffff ffff                                   ....

2000086c <__malloc_trim_threshold>:
2000086c:	0000 0002                                   ....

20000870 <__global_locale>:
20000870:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000890:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000910:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000930:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000950:	be35 0800 b955 0800 0000 0000 2518 0801     5...U........%..
20000960:	2798 0801 2650 0801 2650 0801 2650 0801     .'..P&..P&..P&..
20000970:	2650 0801 2650 0801 2650 0801 2650 0801     P&..P&..P&..P&..
20000980:	2650 0801 2650 0801 ffff ffff ffff ffff     P&..P&..........
20000990:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200009b8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200009e0 <SysTick_Handler>:
      cnt++;
200009e0:	4a1d      	ldr	r2, [pc, #116]	; (20000a58 <SysTick_Handler+0x78>)
{
200009e2:	b510      	push	{r4, lr}
      cnt++;
200009e4:	8813      	ldrh	r3, [r2, #0]
200009e6:	3301      	adds	r3, #1
200009e8:	b29b      	uxth	r3, r3
      if (cnt >= 500) {
200009ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
200009ee:	d21d      	bcs.n	20000a2c <SysTick_Handler+0x4c>
      cnt++;
200009f0:	8013      	strh	r3, [r2, #0]
      tick++;
200009f2:	4a1a      	ldr	r2, [pc, #104]	; (20000a5c <SysTick_Handler+0x7c>)
200009f4:	8813      	ldrh	r3, [r2, #0]
200009f6:	3301      	adds	r3, #1
200009f8:	b29b      	uxth	r3, r3
200009fa:	8013      	strh	r3, [r2, #0]
      if (rxcnt1) rxck1++;
200009fc:	4b18      	ldr	r3, [pc, #96]	; (20000a60 <SysTick_Handler+0x80>)
200009fe:	881b      	ldrh	r3, [r3, #0]
20000a00:	b29b      	uxth	r3, r3
20000a02:	b123      	cbz	r3, 20000a0e <SysTick_Handler+0x2e>
20000a04:	4a17      	ldr	r2, [pc, #92]	; (20000a64 <SysTick_Handler+0x84>)
20000a06:	7813      	ldrb	r3, [r2, #0]
20000a08:	3301      	adds	r3, #1
20000a0a:	b2db      	uxtb	r3, r3
20000a0c:	7013      	strb	r3, [r2, #0]
      if (rxcnt2) rxck2++;
20000a0e:	4b16      	ldr	r3, [pc, #88]	; (20000a68 <SysTick_Handler+0x88>)
20000a10:	881b      	ldrh	r3, [r3, #0]
20000a12:	b29b      	uxth	r3, r3
20000a14:	b123      	cbz	r3, 20000a20 <SysTick_Handler+0x40>
20000a16:	4a15      	ldr	r2, [pc, #84]	; (20000a6c <SysTick_Handler+0x8c>)
20000a18:	7813      	ldrb	r3, [r2, #0]
20000a1a:	3301      	adds	r3, #1
20000a1c:	b2db      	uxtb	r3, r3
20000a1e:	7013      	strb	r3, [r2, #0]
      jiffes++;
20000a20:	4a13      	ldr	r2, [pc, #76]	; (20000a70 <SysTick_Handler+0x90>)
20000a22:	8813      	ldrh	r3, [r2, #0]
20000a24:	3301      	adds	r3, #1
20000a26:	b29b      	uxth	r3, r3
20000a28:	8013      	strh	r3, [r2, #0]
}
20000a2a:	bd10      	pop	{r4, pc}
         cnt = 0;
20000a2c:	2300      	movs	r3, #0
         if (flip) {
20000a2e:	4c11      	ldr	r4, [pc, #68]	; (20000a74 <SysTick_Handler+0x94>)
         cnt = 0;
20000a30:	8013      	strh	r3, [r2, #0]
         if (flip) {
20000a32:	7823      	ldrb	r3, [r4, #0]
         GPIO_SetBits(GPIOD,led);
20000a34:	f44f 7180 	mov.w	r1, #256	; 0x100
20000a38:	480f      	ldr	r0, [pc, #60]	; (20000a78 <SysTick_Handler+0x98>)
         if (flip) {
20000a3a:	b13b      	cbz	r3, 20000a4c <SysTick_Handler+0x6c>
         GPIO_SetBits(GPIOD,led);
20000a3c:	f000 f824 	bl	20000a88 <__GPIO_SetBits_veneer>
      	 flip = !flip;
20000a40:	7823      	ldrb	r3, [r4, #0]
20000a42:	fab3 f383 	clz	r3, r3
20000a46:	095b      	lsrs	r3, r3, #5
20000a48:	7023      	strb	r3, [r4, #0]
20000a4a:	e7d2      	b.n	200009f2 <SysTick_Handler+0x12>
         GPIO_ResetBits(GPIOD,led);
20000a4c:	f000 f818 	bl	20000a80 <__GPIO_ResetBits_veneer>
            sec_tick = 1;
20000a50:	2201      	movs	r2, #1
20000a52:	4b0a      	ldr	r3, [pc, #40]	; (20000a7c <SysTick_Handler+0x9c>)
20000a54:	801a      	strh	r2, [r3, #0]
20000a56:	e7f3      	b.n	20000a40 <SysTick_Handler+0x60>
20000a58:	20000a90 	.word	0x20000a90
20000a5c:	20000af0 	.word	0x20000af0
20000a60:	20001214 	.word	0x20001214
20000a64:	20001318 	.word	0x20001318
20000a68:	2000100a 	.word	0x2000100a
20000a6c:	20000e04 	.word	0x20000e04
20000a70:	20000afe 	.word	0x20000afe
20000a74:	20000a94 	.word	0x20000a94
20000a78:	40011400 	.word	0x40011400
20000a7c:	20000b00 	.word	0x20000b00

20000a80 <__GPIO_ResetBits_veneer>:
20000a80:	f85f f000 	ldr.w	pc, [pc]	; 20000a84 <__GPIO_ResetBits_veneer+0x4>
20000a84:	08007669 	.word	0x08007669

20000a88 <__GPIO_SetBits_veneer>:
20000a88:	f85f f000 	ldr.w	pc, [pc]	; 20000a8c <__GPIO_SetBits_veneer+0x4>
20000a8c:	08007665 	.word	0x08007665
