   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"vs1003.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.delay_ms,"ax",%progbits
  16              		.align	1
  17              		.global	delay_ms
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	delay_ms:
  25              	.LVL0:
  26              	.LFB29:
  27              		.file 1 "vs1003.c"
   1:vs1003.c      **** /********************************************************************************/
   2:vs1003.c      **** /* vs1003.c                                                                     */
   3:vs1003.c      **** /* STM32F103VET6                                                                */
   4:vs1003.c      **** /* (Lee ChangWoo HL2IRW  hl2irw@kpu.ac.kr 011-726-6860)                 	*/
   5:vs1003.c      **** /* stm32f103ve_mp3								*/
   6:vs1003.c      **** /********************************************************************************/
   7:vs1003.c      **** #include "hwdefs.h"
   8:vs1003.c      **** 
   9:vs1003.c      **** #define VS_WRITE_COMMAND 		0x02
  10:vs1003.c      **** #define VS_READ_COMMAND 		0x03
  11:vs1003.c      **** 
  12:vs1003.c      **** #define SPI_MODE        		0x00
  13:vs1003.c      **** #define SPI_STATUS      		0x01
  14:vs1003.c      **** #define SPI_BASS        		0x02
  15:vs1003.c      **** #define SPI_CLOCKF      		0x03
  16:vs1003.c      **** #define SPI_DECODE_TIME 		0x04
  17:vs1003.c      **** #define SPI_AUDATA      		0x05
  18:vs1003.c      **** #define SPI_WRAM        		0x06
  19:vs1003.c      **** #define SPI_WRAMADDR    		0x07
  20:vs1003.c      **** #define SPI_HDAT0       		0x08
  21:vs1003.c      **** #define SPI_HDAT1       		0x09
  22:vs1003.c      **** #define SPI_AIADDR      		0x0a
  23:vs1003.c      **** #define SPI_VOL         		0x0b
  24:vs1003.c      **** #define SPI_AICTRL0     		0x0c
  25:vs1003.c      **** #define SPI_AICTRL1     		0x0d
  26:vs1003.c      **** #define SPI_AICTRL2     		0x0e
  27:vs1003.c      **** #define SPI_AICTRL3     		0x0f
  28:vs1003.c      **** #define SM_DIFF         		0x01
  29:vs1003.c      **** #define SM_JUMP         		0x02
  30:vs1003.c      **** #define SM_RESET        		0x04
  31:vs1003.c      **** #define SM_OUTOFWAV     		0x08
  32:vs1003.c      **** #define SM_PDOWN        		0x10
  33:vs1003.c      **** #define SM_TESTS        		0x20
  34:vs1003.c      **** #define SM_STREAM       		0x40
  35:vs1003.c      **** #define SM_PLUSV        		0x80
  36:vs1003.c      **** #define SM_DACT         		0x100
  37:vs1003.c      **** #define SM_SDIORD       		0x200
  38:vs1003.c      **** #define SM_SDISHARE     		0x400
  39:vs1003.c      **** #define SM_SDINEW       		0x800
  40:vs1003.c      **** #define SM_ADPCM        		0x1000
  41:vs1003.c      **** #define SM_ADPCM_HP     		0x2000
  42:vs1003.c      **** #define MP3_CCS_SET(x)  		GPIOC->ODR = (GPIOC->ODR & ~MP3_CMD_CS) | (x ? MP3_CMD_CS : 0)
  43:vs1003.c      **** #define MP3_DCS_SET(x)  		GPIOC->ODR = (GPIOC->ODR & ~MP3_DATA_CS) | (x ? MP3_DATA_CS : 0)
  44:vs1003.c      **** 
  45:vs1003.c      **** const unsigned char atab [943] = {		/* Register addresses */
  46:vs1003.c      ****       7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  47:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6,
  48:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  49:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  50:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  51:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  52:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  53:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  54:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  55:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  56:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  57:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  58:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  59:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  60:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  61:vs1003.c      ****       7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  62:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  63:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  64:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  65:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  66:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  67:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  68:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  69:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  70:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  71:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  72:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  73:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  74:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  75:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  76:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  77:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  78:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  79:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  80:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  81:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  82:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  83:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  84:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  85:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  86:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  87:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  88:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  89:vs1003.c      ****       6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  90:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6,
  91:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  92:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  93:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  94:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  95:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6,
  96:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  97:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  98:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  99:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
 100:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
 101:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
 102:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
 103:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
 104:vs1003.c      ****       6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10
 105:vs1003.c      **** };
 106:vs1003.c      **** 
 107:vs1003.c      **** 
 108:vs1003.c      **** const unsigned short dtab [943] = { 		/* Data to write */
 109:vs1003.c      ****       0x8050, 0x3613, 0x0024, 0x3e00, 0x3801, 0x0000, 0x16d7, 0xf400,
 110:vs1003.c      ****       0x55c0, 0x0000, 0x0a17, 0xf400, 0x57c0, 0x0006, 0x5017, 0xb080,
 111:vs1003.c      ****       0x0024, 0x3f00, 0x0024, 0x2000, 0x0000, 0x36f0, 0x1801, 0x2800,
 112:vs1003.c      ****       0x31c0, 0x805c, 0x3e12, 0xb817, 0x3e12, 0x3815, 0x3e05, 0xb814,
 113:vs1003.c      ****       0x3615, 0x0024, 0x0000, 0x800a, 0x3e10, 0x3801, 0x0006, 0x0000,
 114:vs1003.c      ****       0x3e10, 0xb803, 0x0000, 0x0303, 0x3e11, 0x3805, 0x3e11, 0xb807,
 115:vs1003.c      ****       0x3e14, 0x3812, 0xb884, 0x130c, 0x3410, 0x4024, 0x4112, 0x10d0,
 116:vs1003.c      ****       0x4010, 0x008c, 0x4010, 0x0024, 0xf400, 0x4012, 0x3000, 0x3840,
 117:vs1003.c      ****       0x3009, 0x3801, 0x0000, 0x0041, 0xfe02, 0x0024, 0x2900, 0x8440,
 118:vs1003.c      ****       0x48b2, 0x0024, 0x36f3, 0x0844, 0x6306, 0x8845, 0xae3a, 0x8840,
 119:vs1003.c      ****       0xbf8e, 0x8b41, 0xac32, 0xa846, 0xffc8, 0xabc7, 0x3e01, 0x7800,
 120:vs1003.c      ****       0xf400, 0x4480, 0x6090, 0x0024, 0x6090, 0x0024, 0xf400, 0x4015,
 121:vs1003.c      ****       0x3009, 0x3446, 0x3009, 0x37c7, 0x3009, 0x1800, 0x3009, 0x3844,
 122:vs1003.c      ****       0x48b3, 0xe1e0, 0x4882, 0x4040, 0xfeca, 0x0024, 0x5ac2, 0x0024,
 123:vs1003.c      ****       0x5a52, 0x0024, 0x4cc2, 0x0024, 0x48ba, 0x4040, 0x4eea, 0x4801,
 124:vs1003.c      ****       0x4eca, 0x9800, 0xff80, 0x1bc1, 0xf1eb, 0xe3e2, 0xf1ea, 0x184c,
 125:vs1003.c      ****       0x4c8b, 0xe5e4, 0x48be, 0x9804, 0x488e, 0x41c6, 0xfe82, 0x0024,
 126:vs1003.c      ****       0x5a8e, 0x0024, 0x525e, 0x1b85, 0x4ffe, 0x0024, 0x48b6, 0x41c6,
 127:vs1003.c      ****       0x4dd6, 0x48c7, 0x4df6, 0x0024, 0xf1d6, 0x0024, 0xf1d6, 0x0024,
 128:vs1003.c      ****       0x4eda, 0x0024, 0x0000, 0x0fc3, 0x2900, 0x8440, 0x4e82, 0x0024,
 129:vs1003.c      ****       0x4084, 0x130c, 0x0006, 0x0100, 0x3440, 0x4024, 0x4010, 0x0024,
 130:vs1003.c      ****       0xf400, 0x4012, 0x3200, 0x4024, 0xb132, 0x0024, 0x4214, 0x0024,
 131:vs1003.c      ****       0xf224, 0x0024, 0x6230, 0x0024, 0x0001, 0x0001, 0x2800, 0x2b49,
 132:vs1003.c      ****       0x0000, 0x0024, 0xf400, 0x40c2, 0x3200, 0x0024, 0xff82, 0x0024,
 133:vs1003.c      ****       0x48b2, 0x0024, 0xb130, 0x0024, 0x6202, 0x0024, 0x003f, 0xf001,
 134:vs1003.c      ****       0x2800, 0x2e51, 0x0000, 0x1046, 0xfe64, 0x0024, 0x48be, 0x0024,
 135:vs1003.c      ****       0x2800, 0x2f40, 0x3a01, 0x8024, 0x3200, 0x0024, 0xb010, 0x0024,
 136:vs1003.c      ****       0xc020, 0x0024, 0x3a00, 0x0024, 0x36f4, 0x1812, 0x36f1, 0x9807,
 137:vs1003.c      ****       0x36f1, 0x1805, 0x36f0, 0x9803, 0x36f0, 0x1801, 0x3405, 0x9014,
 138:vs1003.c      ****       0x36f3, 0x0024, 0x36f2, 0x1815, 0x2000, 0x0000, 0x36f2, 0x9817,
 139:vs1003.c      ****       0x80c7, 0x3e12, 0xb817, 0x3e12, 0x3815, 0x3e05, 0xb814, 0x3625,
 140:vs1003.c      ****       0x0024, 0x0000, 0x800a, 0x3e10, 0x7802, 0x3e10, 0xf804, 0x3e11,
 141:vs1003.c      ****       0x7810, 0x3e14, 0x7813, 0x0006, 0x0051, 0x3e13, 0xf80e, 0x3e13,
 142:vs1003.c      ****       0x4024, 0x3009, 0x3840, 0x3009, 0x3852, 0x2919, 0x64c0, 0x0006,
 143:vs1003.c      ****       0x06d0, 0x3100, 0x5bd2, 0x0006, 0x55d1, 0x3009, 0x1800, 0x3009,
 144:vs1003.c      ****       0x0402, 0x6126, 0x0024, 0x0006, 0x00d1, 0x2800, 0x4d05, 0xb882,
 145:vs1003.c      ****       0x0024, 0x0006, 0x0011, 0x3009, 0x3850, 0x0006, 0x0010, 0x3009,
 146:vs1003.c      ****       0x3800, 0x291d, 0x5800, 0x0000, 0x1800, 0x0006, 0x0010, 0xb882,
 147:vs1003.c      ****       0x0024, 0x291d, 0x5b00, 0x0000, 0x1700, 0x0000, 0x0301, 0x3900,
 148:vs1003.c      ****       0x5bc0, 0x0006, 0x55d1, 0x3009, 0x1bd0, 0x3009, 0x0404, 0x0006,
 149:vs1003.c      ****       0x0051, 0x2800, 0x3d00, 0x3901, 0x0024, 0x4448, 0x0401, 0x4192,
 150:vs1003.c      ****       0x0024, 0x6498, 0x2401, 0x001f, 0x4001, 0x6412, 0x0024, 0x0006,
 151:vs1003.c      ****       0x0011, 0x2800, 0x3c51, 0x0000, 0x058e, 0x2400, 0x4c0e, 0x0000,
 152:vs1003.c      ****       0x0013, 0x0006, 0x0051, 0x0006, 0x1a03, 0x3100, 0x4024, 0xf212,
 153:vs1003.c      ****       0x44c4, 0x4346, 0x0024, 0xf400, 0x40d5, 0x3500, 0x8024, 0x612a,
 154:vs1003.c      ****       0x0024, 0x0000, 0x0024, 0x2800, 0x4c51, 0x0000, 0x0024, 0x3613,
 155:vs1003.c      ****       0x0024, 0x3100, 0x3800, 0x291d, 0x8000, 0xf200, 0x0024, 0x003f,
 156:vs1003.c      ****       0xfec2, 0x4082, 0x4411, 0x3113, 0x1bc0, 0xa122, 0x0024, 0x0000,
 157:vs1003.c      ****       0x2002, 0x6124, 0x2401, 0x0000, 0x1002, 0x2800, 0x4608, 0x0000,
 158:vs1003.c      ****       0x0024, 0x003f, 0xf802, 0x3100, 0x4024, 0xb124, 0x0024, 0x2800,
 159:vs1003.c      ****       0x4bc0, 0x3900, 0x8024, 0x6124, 0x0024, 0x0000, 0x0802, 0x2800,
 160:vs1003.c      ****       0x4848, 0x0000, 0x0024, 0x003f, 0xfe02, 0x3100, 0x4024, 0xb124,
 161:vs1003.c      ****       0x0024, 0x2800, 0x4bc0, 0x3900, 0x8024, 0x6124, 0x0024, 0x0000,
 162:vs1003.c      ****       0x0402, 0x2800, 0x4a88, 0x0000, 0x0024, 0x003f, 0xff02, 0x3100,
 163:vs1003.c      ****       0x4024, 0xb124, 0x0024, 0x2800, 0x4bc0, 0x3900, 0x8024, 0x6124,
 164:vs1003.c      ****       0x0401, 0x003f, 0xff82, 0x2800, 0x4bc8, 0xb124, 0x0024, 0x3900,
 165:vs1003.c      ****       0x8024, 0xb882, 0x8c4c, 0x3830, 0x4024, 0x0006, 0x0091, 0x3904,
 166:vs1003.c      ****       0xd84c, 0x0006, 0x00d1, 0x0000, 0x0013, 0x3100, 0x904c, 0x4202,
 167:vs1003.c      ****       0x9bcc, 0x39f0, 0x4024, 0x3100, 0x4024, 0x3c00, 0x4024, 0xf400,
 168:vs1003.c      ****       0x44c1, 0x34f0, 0x8024, 0x6126, 0x0024, 0x0006, 0x06d0, 0x2800,
 169:vs1003.c      ****       0x5dd8, 0x4294, 0x0024, 0x2400, 0x5d82, 0x0000, 0x0024, 0xf400,
 170:vs1003.c      ****       0x4411, 0x3123, 0x0024, 0x3100, 0x8024, 0x4202, 0x0024, 0x4182,
 171:vs1003.c      ****       0x2401, 0x0000, 0x2002, 0x2800, 0x5d89, 0x0000, 0x0024, 0x3013,
 172:vs1003.c      ****       0x184c, 0x30f0, 0x7852, 0x6124, 0xb850, 0x0006, 0x0001, 0x2800,
 173:vs1003.c      ****       0x5588, 0x4088, 0x44c2, 0x4224, 0x0024, 0x4122, 0x0024, 0x4122,
 174:vs1003.c      ****       0x0024, 0xf400, 0x4051, 0x2900, 0x7440, 0x0000, 0x56c8, 0x4224,
 175:vs1003.c      ****       0x0024, 0x4122, 0x0024, 0x4122, 0x0024, 0x2900, 0x69c0, 0xf400,
 176:vs1003.c      ****       0x4051, 0x0004, 0x0002, 0x3009, 0x1bd0, 0x3023, 0x1bd2, 0x30e0,
 177:vs1003.c      ****       0x4024, 0x6124, 0x0024, 0x0000, 0x4002, 0x2800, 0x5988, 0x0000,
 178:vs1003.c      ****       0x0024, 0x0000, 0x0001, 0x3820, 0x4024, 0x30e0, 0x4024, 0x6124,
 179:vs1003.c      ****       0x0001, 0x003f, 0xff42, 0x2800, 0x5d88, 0x4182, 0x0024, 0x0000,
 180:vs1003.c      ****       0x0024, 0x2800, 0x5d95, 0x0000, 0x0024, 0x3613, 0x0024, 0x3e14,
 181:vs1003.c      ****       0xc024, 0x2900, 0x1700, 0x3e14, 0x0024, 0x36e3, 0x008c, 0x30e0,
 182:vs1003.c      ****       0x4024, 0xfe22, 0x4411, 0x48b6, 0x048c, 0x3900, 0x8024, 0x3033,
 183:vs1003.c      ****       0x0c4c, 0x0006, 0x0011, 0x6892, 0x04c2, 0xa122, 0x0402, 0x6126,
 184:vs1003.c      ****       0x0024, 0x0006, 0x0093, 0x2800, 0x6701, 0x0000, 0x0024, 0xb882,
 185:vs1003.c      ****       0x184c, 0x3413, 0x3812, 0x0006, 0x00d2, 0x3a00, 0x5bd2, 0x3300,
 186:vs1003.c      ****       0x4024, 0x0000, 0x0013, 0x3c00, 0x4024, 0xf400, 0x44c1, 0x34f0,
 187:vs1003.c      ****       0x8024, 0x6126, 0x0024, 0x0006, 0x0111, 0x2800, 0x6718, 0x4294,
 188:vs1003.c      ****       0x0024, 0x2400, 0x66c2, 0x0000, 0x0024, 0x0003, 0xf001, 0x3101,
 189:vs1003.c      ****       0x0024, 0xb412, 0x0024, 0x0028, 0x0001, 0x2800, 0x66c5, 0x6144,
 190:vs1003.c      ****       0x0024, 0x0004, 0x0002, 0x2800, 0x6681, 0x4422, 0x0024, 0x0000,
 191:vs1003.c      ****       0x1002, 0x6422, 0x0024, 0x2800, 0x66c0, 0x3900, 0x4024, 0x3900,
 192:vs1003.c      ****       0x4024, 0x3113, 0x0c4c, 0x36f3, 0x4024, 0x36f3, 0xd80e, 0x36f4,
 193:vs1003.c      ****       0x5813, 0x36f1, 0x5810, 0x36f0, 0xd804, 0x36f0, 0x5802, 0x3405,
 194:vs1003.c      ****       0x9014, 0x36f3, 0x0024, 0x36f2, 0x1815, 0x2000, 0x0000, 0x36f2,
 195:vs1003.c      ****       0x9817, 0x1868, 0x0032, 0x004f, 0x007e, 0x00c8, 0x013d, 0x01f8,
 196:vs1003.c      ****       0x0320, 0x04f6, 0x07e0, 0x0c80, 0x13d8, 0x1f7f, 0x3200, 0x4f5f,
 197:vs1003.c      ****       0x61a8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
 198:vs1003.c      ****       0x0000, 0x81a7, 0x3e12, 0xb814, 0x0000, 0x800a, 0x3e10, 0x3801,
 199:vs1003.c      ****       0x3e10, 0xb803, 0x3e11, 0x7806, 0x3e11, 0xf813, 0x3e13, 0xf80e,
 200:vs1003.c      ****       0x3e13, 0x4024, 0x3e04, 0x7810, 0x449a, 0x0040, 0x0001, 0x0003,
 201:vs1003.c      ****       0x2800, 0x7304, 0x4036, 0x03c1, 0x0003, 0xffc2, 0xb326, 0x0024,
 202:vs1003.c      ****       0x0018, 0x0042, 0x4326, 0x4495, 0x4024, 0x40d2, 0x0000, 0x0180,
 203:vs1003.c      ****       0xa100, 0x4090, 0x0010, 0x0fc2, 0x4204, 0x0024, 0xbc82, 0x4091,
 204:vs1003.c      ****       0x459a, 0x0024, 0x0000, 0x0054, 0x2800, 0x7204, 0xbd86, 0x4093,
 205:vs1003.c      ****       0x2400, 0x71c5, 0xfe01, 0x5e0c, 0x5c43, 0x5f2d, 0x5e46, 0x020c,
 206:vs1003.c      ****       0x5c56, 0x8a0c, 0x5e53, 0x5e0c, 0x5c43, 0x5f2d, 0x5e46, 0x020c,
 207:vs1003.c      ****       0x5c56, 0x8a0c, 0x5e52, 0x0024, 0x4cb2, 0x4405, 0x0018, 0x0044,
 208:vs1003.c      ****       0x654a, 0x0024, 0x2800, 0x8000, 0x36f4, 0x5810, 0x81d1, 0x3e12,
 209:vs1003.c      ****       0xb814, 0x0000, 0x800a, 0x3e10, 0x3801, 0x3e10, 0xb803, 0x3e11,
 210:vs1003.c      ****       0x7806, 0x3e11, 0xf813, 0x3e13, 0xf80e, 0x3e13, 0x4024, 0x3e04,
 211:vs1003.c      ****       0x7810, 0x449a, 0x0040, 0x0000, 0x0803, 0x2800, 0x7ec4, 0x30f0,
 212:vs1003.c      ****       0x4024, 0x0fff, 0xfec2, 0xa020, 0x0024, 0x0fff, 0xff02, 0xa122,
 213:vs1003.c      ****       0x0024, 0x4036, 0x0024, 0x0000, 0x1fc2, 0xb326, 0x0024, 0x0010,
 214:vs1003.c      ****       0x4002, 0x4326, 0x4495, 0x4024, 0x40d2, 0x0000, 0x0180, 0xa100,
 215:vs1003.c      ****       0x4090, 0x0010, 0x0042, 0x4204, 0x0024, 0xbc82, 0x4091, 0x459a,
 216:vs1003.c      ****       0x0024, 0x0000, 0x0054, 0x2800, 0x7dc4, 0xbd86, 0x4093, 0x2400,
 217:vs1003.c      ****       0x7d85, 0xfe01, 0x5e0c, 0x5c43, 0x5f2d, 0x5e46, 0x0024, 0x5c56,
 218:vs1003.c      ****       0x0024, 0x5e53, 0x5e0c, 0x5c43, 0x5f2d, 0x5e46, 0x0024, 0x5c56,
 219:vs1003.c      ****       0x0024, 0x5e52, 0x0024, 0x4cb2, 0x4405, 0x0010, 0x4004, 0x654a,
 220:vs1003.c      ****       0x9810, 0x0000, 0x0144, 0xa54a, 0x1bd1, 0x0006, 0x0013, 0x3301,
 221:vs1003.c      ****       0xc444, 0x687e, 0x2005, 0xad76, 0x8445, 0x4ed6, 0x8784, 0x36f3,
 222:vs1003.c      ****       0x64c2, 0xac72, 0x8785, 0x4ec2, 0xa443, 0x3009, 0x2440, 0x3009,
 223:vs1003.c      ****       0x2741, 0x36f3, 0xd80e, 0x36f1, 0xd813, 0x36f1, 0x5806, 0x36f0,
 224:vs1003.c      ****       0x9803, 0x36f0, 0x1801, 0x2000, 0x0000, 0x36f2, 0x9814, 0x8211,
 225:vs1003.c      ****       0x4c82, 0x0024, 0x0000, 0x0024, 0x2000, 0x0005, 0xf5c2, 0x0024,
 226:vs1003.c      ****       0x0000, 0x0980, 0x2000, 0x0000, 0x6010, 0x0024, 0x0050
 227:vs1003.c      **** };
 228:vs1003.c      **** 
 229:vs1003.c      **** 
 230:vs1003.c      **** 
 231:vs1003.c      **** unsigned short regvalue = 0;
 232:vs1003.c      **** unsigned char vs1003_ram [5] = {0,0,0,0,250};
 233:vs1003.c      **** const unsigned short bitrate [2][16] =
 234:vs1003.c      **** {
 235:vs1003.c      ****       {0,8,16,24,32,40,48,56,64,80,96,112,128,144,160,0},
 236:vs1003.c      ****       {0,32,40,48,56,64,80,96,112,128,160,192,224,256,320,0}
 237:vs1003.c      **** };
 238:vs1003.c      **** extern unsigned short f_kbps;
 239:vs1003.c      **** 
 240:vs1003.c      **** 
 241:vs1003.c      **** void delay_ms (unsigned short nms)
 242:vs1003.c      **** {
  28              		.loc 1 242 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 243:vs1003.c      ****       wait_ms(nms);
  33              		.loc 1 243 7 view .LVU1
  34 0000 FFF7FEBF 		b	wait_ms
  35              	.LVL1:
  36              		.loc 1 243 7 is_stmt 0 view .LVU2
  37              		.cfi_endproc
  38              	.LFE29:
  40              		.section	.text.mp3_reset,"ax",%progbits
  41              		.align	1
  42              		.global	mp3_reset
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu softvfp
  48              	mp3_reset:
  49              	.LFB32:
 244:vs1003.c      **** }
 245:vs1003.c      **** 
 246:vs1003.c      **** 
 247:vs1003.c      **** void vs1003_reset_decode_time(void)
 248:vs1003.c      **** {
 249:vs1003.c      ****       vs1003_cmd_write(SPI_DECODE_TIME,0x0000);
 250:vs1003.c      ****       vs1003_cmd_write(SPI_DECODE_TIME,0x0000);
 251:vs1003.c      **** }
 252:vs1003.c      **** 
 253:vs1003.c      **** 
 254:vs1003.c      **** void vs1003_soft_reset (void)
 255:vs1003.c      **** {
 256:vs1003.c      ****       unsigned char retry;
 257:vs1003.c      ****       while ((GPIOC->IDR & MP3_DREQ) == 0);
 258:vs1003.c      ****       SPI_read_write_byte(0xff);
 259:vs1003.c      ****       retry = 0;
 260:vs1003.c      ****       while (vs1003_reg_read(0) != 0x0804) {
 261:vs1003.c      **** 	    vs1003_cmd_write(SPI_MODE,0x0804);
 262:vs1003.c      **** 	    delay_ms(2);
 263:vs1003.c      **** 	    retry++;
 264:vs1003.c      **** 	    if(retry > 100) break;
 265:vs1003.c      ****       }
 266:vs1003.c      ****       while ((GPIOC->IDR & MP3_DREQ) == 0);
 267:vs1003.c      ****       retry = 0;
 268:vs1003.c      ****       while (vs1003_reg_read(SPI_CLOCKF) != 0x9800) {
 269:vs1003.c      **** 	    vs1003_cmd_write(SPI_CLOCKF,0x9800);
 270:vs1003.c      **** 	    retry++;
 271:vs1003.c      **** 	    if (retry > 100) break;
 272:vs1003.c      ****       }
 273:vs1003.c      ****       retry = 0;
 274:vs1003.c      ****       while (vs1003_reg_read(SPI_AUDATA) != 0xBB81) {
 275:vs1003.c      **** 	    vs1003_cmd_write(SPI_AUDATA,0xBB81);
 276:vs1003.c      **** 	    retry++;
 277:vs1003.c      **** 	    if (retry > 100) break;
 278:vs1003.c      ****       }
 279:vs1003.c      ****       vs1003_cmd_write(11,0x2020);
 280:vs1003.c      ****       vs1003_reset_decode_time();
 281:vs1003.c      ****       MP3_DCS_SET(0);
 282:vs1003.c      ****       SPI_read_write_byte(0xFF);
 283:vs1003.c      ****       SPI_read_write_byte(0xFF);
 284:vs1003.c      ****       SPI_read_write_byte(0xFF);
 285:vs1003.c      ****       SPI_read_write_byte(0xFF);
 286:vs1003.c      ****       MP3_DCS_SET(1);
 287:vs1003.c      ****       delay_ms(20);
 288:vs1003.c      **** }
 289:vs1003.c      **** 
 290:vs1003.c      **** void mp3_reset (void)
 291:vs1003.c      **** {
  50              		.loc 1 291 1 is_stmt 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
 292:vs1003.c      ****       delay_ms(20);
  54              		.loc 1 292 7 view .LVU4
  55              	.LVL2:
  56              	.LBB22:
  57              	.LBI22:
 241:vs1003.c      **** {
  58              		.loc 1 241 6 view .LVU5
  59              	.LBB23:
 243:vs1003.c      **** }
  60              		.loc 1 243 7 view .LVU6
  61              	.LBE23:
  62              	.LBE22:
 291:vs1003.c      ****       delay_ms(20);
  63              		.loc 1 291 1 is_stmt 0 view .LVU7
  64 0000 08B5     		push	{r3, lr}
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 3, -8
  67              		.cfi_offset 14, -4
  68              	.LBB25:
  69              	.LBB24:
 243:vs1003.c      **** }
  70              		.loc 1 243 7 view .LVU8
  71 0002 1420     		movs	r0, #20
  72 0004 FFF7FEFF 		bl	wait_ms
  73              	.LVL3:
 243:vs1003.c      **** }
  74              		.loc 1 243 7 view .LVU9
  75              	.LBE24:
  76              	.LBE25:
 293:vs1003.c      ****       SPI_read_write_byte(0xFF);
  77              		.loc 1 293 7 is_stmt 1 view .LVU10
  78 0008 FF20     		movs	r0, #255
  79 000a FFF7FEFF 		bl	SPI_read_write_byte
  80              	.LVL4:
 294:vs1003.c      ****       MP3_DCS_SET(1);
  81              		.loc 1 294 7 view .LVU11
  82 000e 084B     		ldr	r3, .L6
  83 0010 DA68     		ldr	r2, [r3, #12]
  84 0012 42F40062 		orr	r2, r2, #2048
  85 0016 DA60     		str	r2, [r3, #12]
 295:vs1003.c      ****       MP3_CCS_SET(1);
  86              		.loc 1 295 7 view .LVU12
  87 0018 DA68     		ldr	r2, [r3, #12]
  88 001a 42F48062 		orr	r2, r2, #1024
  89 001e DA60     		str	r2, [r3, #12]
 296:vs1003.c      ****       while ((GPIOC->IDR & MP3_DREQ) == 0);
  90              		.loc 1 296 7 view .LVU13
  91              	.L3:
  92              		.loc 1 296 43 discriminator 1 view .LVU14
  93              		.loc 1 296 13 discriminator 1 view .LVU15
  94              		.loc 1 296 20 is_stmt 0 discriminator 1 view .LVU16
  95 0020 9A68     		ldr	r2, [r3, #8]
  96              		.loc 1 296 13 discriminator 1 view .LVU17
  97 0022 1207     		lsls	r2, r2, #28
  98 0024 FCD5     		bpl	.L3
 297:vs1003.c      ****       delay_ms(20);
  99              		.loc 1 297 7 is_stmt 1 view .LVU18
 100              	.LVL5:
 101              	.LBB26:
 102              	.LBI26:
 241:vs1003.c      **** {
 103              		.loc 1 241 6 view .LVU19
 104              	.LBB27:
 243:vs1003.c      **** }
 105              		.loc 1 243 7 view .LVU20
 106              	.LBE27:
 107              	.LBE26:
 298:vs1003.c      **** }
 108              		.loc 1 298 1 is_stmt 0 view .LVU21
 109 0026 BDE80840 		pop	{r3, lr}
 110              		.cfi_restore 14
 111              		.cfi_restore 3
 112              		.cfi_def_cfa_offset 0
 113              	.LBB29:
 114              	.LBB28:
 243:vs1003.c      **** }
 115              		.loc 1 243 7 view .LVU22
 116 002a 1420     		movs	r0, #20
 117 002c FFF7FEBF 		b	wait_ms
 118              	.LVL6:
 119              	.L7:
 120              		.align	2
 121              	.L6:
 122 0030 00100140 		.word	1073811456
 123              	.LBE28:
 124              	.LBE29:
 125              		.cfi_endproc
 126              	.LFE32:
 128              		.section	.text.vs1003_cmd_write,"ax",%progbits
 129              		.align	1
 130              		.global	vs1003_cmd_write
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu softvfp
 136              	vs1003_cmd_write:
 137              	.LVL7:
 138              	.LFB35:
 299:vs1003.c      **** 
 300:vs1003.c      **** 
 301:vs1003.c      **** void vs1003_sine_test (void)
 302:vs1003.c      **** {
 303:vs1003.c      ****       vs1003_cmd_write(0x0b,0x2020);
 304:vs1003.c      ****       vs1003_cmd_write(SPI_MODE,0x0820);
 305:vs1003.c      ****       while ((GPIOC->IDR & MP3_DREQ) == 0);
 306:vs1003.c      ****       MP3_DCS_SET(0);
 307:vs1003.c      ****       SPI_read_write_byte(0x53);
 308:vs1003.c      ****       SPI_read_write_byte(0xef);
 309:vs1003.c      ****       SPI_read_write_byte(0x6e);
 310:vs1003.c      ****       SPI_read_write_byte(0x24);
 311:vs1003.c      ****       SPI_read_write_byte(0x00);
 312:vs1003.c      ****       SPI_read_write_byte(0x00);
 313:vs1003.c      ****       SPI_read_write_byte(0x00);
 314:vs1003.c      ****       SPI_read_write_byte(0x00);
 315:vs1003.c      ****       delay_ms(100);
 316:vs1003.c      ****       MP3_DCS_SET(1);
 317:vs1003.c      ****       MP3_DCS_SET(0);
 318:vs1003.c      ****       SPI_read_write_byte(0x45);
 319:vs1003.c      ****       SPI_read_write_byte(0x78);
 320:vs1003.c      ****       SPI_read_write_byte(0x69);
 321:vs1003.c      ****       SPI_read_write_byte(0x74);
 322:vs1003.c      ****       SPI_read_write_byte(0x00);
 323:vs1003.c      ****       SPI_read_write_byte(0x00);
 324:vs1003.c      ****       SPI_read_write_byte(0x00);
 325:vs1003.c      ****       SPI_read_write_byte(0x00);
 326:vs1003.c      ****       delay_ms(100);
 327:vs1003.c      ****       MP3_DCS_SET(1);
 328:vs1003.c      ****       MP3_DCS_SET(0);
 329:vs1003.c      ****       SPI_read_write_byte(0x53);
 330:vs1003.c      ****       SPI_read_write_byte(0xef);
 331:vs1003.c      ****       SPI_read_write_byte(0x6e);
 332:vs1003.c      ****       SPI_read_write_byte(0x44);
 333:vs1003.c      ****       SPI_read_write_byte(0x00);
 334:vs1003.c      ****       SPI_read_write_byte(0x00);
 335:vs1003.c      ****       SPI_read_write_byte(0x00);
 336:vs1003.c      ****       SPI_read_write_byte(0x00);
 337:vs1003.c      ****       delay_ms(100);
 338:vs1003.c      ****       MP3_DCS_SET(1);
 339:vs1003.c      ****       MP3_DCS_SET(0);
 340:vs1003.c      ****       SPI_read_write_byte(0x45);
 341:vs1003.c      ****       SPI_read_write_byte(0x78);
 342:vs1003.c      ****       SPI_read_write_byte(0x69);
 343:vs1003.c      ****       SPI_read_write_byte(0x74);
 344:vs1003.c      ****       SPI_read_write_byte(0x00);
 345:vs1003.c      ****       SPI_read_write_byte(0x00);
 346:vs1003.c      ****       SPI_read_write_byte(0x00);
 347:vs1003.c      ****       SPI_read_write_byte(0x00);
 348:vs1003.c      ****       delay_ms(100);
 349:vs1003.c      ****       MP3_DCS_SET(1);
 350:vs1003.c      **** }
 351:vs1003.c      **** 
 352:vs1003.c      **** 
 353:vs1003.c      **** void vs1003_ram_test (void)
 354:vs1003.c      **** {
 355:vs1003.c      ****       mp3_reset();
 356:vs1003.c      ****       vs1003_cmd_write(SPI_MODE,0x0820);
 357:vs1003.c      ****       while ((GPIOC->IDR & MP3_DREQ) == 0);
 358:vs1003.c      ****       MP3_DCS_SET(0);
 359:vs1003.c      ****       SPI_read_write_byte(0x4d);
 360:vs1003.c      ****       SPI_read_write_byte(0xea);
 361:vs1003.c      ****       SPI_read_write_byte(0x6d);
 362:vs1003.c      ****       SPI_read_write_byte(0x54);
 363:vs1003.c      ****       SPI_read_write_byte(0x00);
 364:vs1003.c      ****       SPI_read_write_byte(0x00);
 365:vs1003.c      ****       SPI_read_write_byte(0x00);
 366:vs1003.c      ****       SPI_read_write_byte(0x00);
 367:vs1003.c      ****       delay_ms(50);
 368:vs1003.c      ****       MP3_DCS_SET(1);
 369:vs1003.c      ****       regvalue = vs1003_reg_read(SPI_HDAT0);
 370:vs1003.c      **** }
 371:vs1003.c      **** 
 372:vs1003.c      **** 
 373:vs1003.c      **** void vs1003_cmd_write (unsigned char address,unsigned short data)
 374:vs1003.c      **** {
 139              		.loc 1 374 1 is_stmt 1 view -0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 375:vs1003.c      ****       while((GPIOC->IDR & MP3_DREQ) == 0);
 143              		.loc 1 375 7 view .LVU24
 374:vs1003.c      ****       while((GPIOC->IDR & MP3_DREQ) == 0);
 144              		.loc 1 374 1 is_stmt 0 view .LVU25
 145 0000 70B5     		push	{r4, r5, r6, lr}
 146              		.cfi_def_cfa_offset 16
 147              		.cfi_offset 4, -16
 148              		.cfi_offset 5, -12
 149              		.cfi_offset 6, -8
 150              		.cfi_offset 14, -4
 374:vs1003.c      ****       while((GPIOC->IDR & MP3_DREQ) == 0);
 151              		.loc 1 374 1 view .LVU26
 152 0002 0646     		mov	r6, r0
 153 0004 0D46     		mov	r5, r1
 154              		.loc 1 375 19 view .LVU27
 155 0006 124C     		ldr	r4, .L12
 156              	.L9:
 157              		.loc 1 375 42 is_stmt 1 discriminator 1 view .LVU28
 158              		.loc 1 375 12 discriminator 1 view .LVU29
 159              		.loc 1 375 19 is_stmt 0 discriminator 1 view .LVU30
 160 0008 A368     		ldr	r3, [r4, #8]
 161              		.loc 1 375 12 discriminator 1 view .LVU31
 162 000a 1B07     		lsls	r3, r3, #28
 163 000c FCD5     		bpl	.L9
 376:vs1003.c      ****       SPI_set_speed(0);
 164              		.loc 1 376 7 is_stmt 1 view .LVU32
 165 000e 0020     		movs	r0, #0
 166              	.LVL8:
 167              		.loc 1 376 7 is_stmt 0 view .LVU33
 168 0010 FFF7FEFF 		bl	SPI_set_speed
 169              	.LVL9:
 377:vs1003.c      ****       MP3_DCS_SET(1);
 170              		.loc 1 377 7 is_stmt 1 view .LVU34
 171 0014 E368     		ldr	r3, [r4, #12]
 378:vs1003.c      ****       MP3_CCS_SET(0);
 379:vs1003.c      ****       SPI_read_write_byte(VS_WRITE_COMMAND);
 172              		.loc 1 379 7 is_stmt 0 view .LVU35
 173 0016 0220     		movs	r0, #2
 377:vs1003.c      ****       MP3_DCS_SET(1);
 174              		.loc 1 377 7 view .LVU36
 175 0018 43F40063 		orr	r3, r3, #2048
 176 001c E360     		str	r3, [r4, #12]
 378:vs1003.c      ****       MP3_CCS_SET(0);
 177              		.loc 1 378 7 is_stmt 1 view .LVU37
 178 001e E368     		ldr	r3, [r4, #12]
 179 0020 23F48063 		bic	r3, r3, #1024
 180 0024 E360     		str	r3, [r4, #12]
 181              		.loc 1 379 7 view .LVU38
 182 0026 FFF7FEFF 		bl	SPI_read_write_byte
 183              	.LVL10:
 380:vs1003.c      ****       SPI_read_write_byte(address);
 184              		.loc 1 380 7 view .LVU39
 185 002a 3046     		mov	r0, r6
 186 002c FFF7FEFF 		bl	SPI_read_write_byte
 187              	.LVL11:
 381:vs1003.c      ****       SPI_read_write_byte(data >> 8);
 188              		.loc 1 381 7 view .LVU40
 189 0030 280A     		lsrs	r0, r5, #8
 190 0032 FFF7FEFF 		bl	SPI_read_write_byte
 191              	.LVL12:
 382:vs1003.c      ****       SPI_read_write_byte(data);
 192              		.loc 1 382 7 view .LVU41
 193 0036 E8B2     		uxtb	r0, r5
 194 0038 FFF7FEFF 		bl	SPI_read_write_byte
 195              	.LVL13:
 383:vs1003.c      ****       MP3_CCS_SET(1);
 196              		.loc 1 383 7 view .LVU42
 197 003c E368     		ldr	r3, [r4, #12]
 384:vs1003.c      ****       SPI_set_speed(1);
 198              		.loc 1 384 7 is_stmt 0 view .LVU43
 199 003e 0120     		movs	r0, #1
 383:vs1003.c      ****       MP3_CCS_SET(1);
 200              		.loc 1 383 7 view .LVU44
 201 0040 43F48063 		orr	r3, r3, #1024
 202 0044 E360     		str	r3, [r4, #12]
 203              		.loc 1 384 7 is_stmt 1 view .LVU45
 385:vs1003.c      **** }
 204              		.loc 1 385 1 is_stmt 0 view .LVU46
 205 0046 BDE87040 		pop	{r4, r5, r6, lr}
 206              		.cfi_restore 14
 207              		.cfi_restore 6
 208              		.cfi_restore 5
 209              		.cfi_restore 4
 210              		.cfi_def_cfa_offset 0
 384:vs1003.c      ****       SPI_set_speed(1);
 211              		.loc 1 384 7 view .LVU47
 212 004a FFF7FEBF 		b	SPI_set_speed
 213              	.LVL14:
 214              	.L13:
 215 004e 00BF     		.align	2
 216              	.L12:
 217 0050 00100140 		.word	1073811456
 218              		.cfi_endproc
 219              	.LFE35:
 221              		.section	.text.vs1003_reset_decode_time,"ax",%progbits
 222              		.align	1
 223              		.global	vs1003_reset_decode_time
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 227              		.fpu softvfp
 229              	vs1003_reset_decode_time:
 230              	.LFB30:
 248:vs1003.c      ****       vs1003_cmd_write(SPI_DECODE_TIME,0x0000);
 231              		.loc 1 248 1 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 249:vs1003.c      ****       vs1003_cmd_write(SPI_DECODE_TIME,0x0000);
 235              		.loc 1 249 7 view .LVU49
 248:vs1003.c      ****       vs1003_cmd_write(SPI_DECODE_TIME,0x0000);
 236              		.loc 1 248 1 is_stmt 0 view .LVU50
 237 0000 08B5     		push	{r3, lr}
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 3, -8
 240              		.cfi_offset 14, -4
 249:vs1003.c      ****       vs1003_cmd_write(SPI_DECODE_TIME,0x0000);
 241              		.loc 1 249 7 view .LVU51
 242 0002 0021     		movs	r1, #0
 243 0004 0420     		movs	r0, #4
 244 0006 FFF7FEFF 		bl	vs1003_cmd_write
 245              	.LVL15:
 250:vs1003.c      **** }
 246              		.loc 1 250 7 is_stmt 1 view .LVU52
 251:vs1003.c      **** 
 247              		.loc 1 251 1 is_stmt 0 view .LVU53
 248 000a BDE80840 		pop	{r3, lr}
 249              		.cfi_restore 14
 250              		.cfi_restore 3
 251              		.cfi_def_cfa_offset 0
 250:vs1003.c      **** }
 252              		.loc 1 250 7 view .LVU54
 253 000e 0021     		movs	r1, #0
 254 0010 0420     		movs	r0, #4
 255 0012 FFF7FEBF 		b	vs1003_cmd_write
 256              	.LVL16:
 257              		.cfi_endproc
 258              	.LFE30:
 260              		.section	.text.vs1003_sine_test,"ax",%progbits
 261              		.align	1
 262              		.global	vs1003_sine_test
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 266              		.fpu softvfp
 268              	vs1003_sine_test:
 269              	.LFB33:
 302:vs1003.c      ****       vs1003_cmd_write(0x0b,0x2020);
 270              		.loc 1 302 1 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 303:vs1003.c      ****       vs1003_cmd_write(SPI_MODE,0x0820);
 274              		.loc 1 303 7 view .LVU56
 302:vs1003.c      ****       vs1003_cmd_write(0x0b,0x2020);
 275              		.loc 1 302 1 is_stmt 0 view .LVU57
 276 0000 10B5     		push	{r4, lr}
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 4, -8
 279              		.cfi_offset 14, -4
 303:vs1003.c      ****       vs1003_cmd_write(SPI_MODE,0x0820);
 280              		.loc 1 303 7 view .LVU58
 281 0002 42F22001 		movw	r1, #8224
 282 0006 0B20     		movs	r0, #11
 283 0008 FFF7FEFF 		bl	vs1003_cmd_write
 284              	.LVL17:
 304:vs1003.c      ****       while ((GPIOC->IDR & MP3_DREQ) == 0);
 285              		.loc 1 304 7 is_stmt 1 view .LVU59
 286 000c 4FF40261 		mov	r1, #2080
 287 0010 0020     		movs	r0, #0
 288 0012 FFF7FEFF 		bl	vs1003_cmd_write
 289              	.LVL18:
 305:vs1003.c      ****       MP3_DCS_SET(0);
 290              		.loc 1 305 7 view .LVU60
 305:vs1003.c      ****       MP3_DCS_SET(0);
 291              		.loc 1 305 20 is_stmt 0 view .LVU61
 292 0016 484C     		ldr	r4, .L19
 293              	.L16:
 305:vs1003.c      ****       MP3_DCS_SET(0);
 294              		.loc 1 305 43 is_stmt 1 discriminator 1 view .LVU62
 305:vs1003.c      ****       MP3_DCS_SET(0);
 295              		.loc 1 305 13 discriminator 1 view .LVU63
 305:vs1003.c      ****       MP3_DCS_SET(0);
 296              		.loc 1 305 20 is_stmt 0 discriminator 1 view .LVU64
 297 0018 A368     		ldr	r3, [r4, #8]
 305:vs1003.c      ****       MP3_DCS_SET(0);
 298              		.loc 1 305 13 discriminator 1 view .LVU65
 299 001a 1B07     		lsls	r3, r3, #28
 300 001c FCD5     		bpl	.L16
 306:vs1003.c      ****       SPI_read_write_byte(0x53);
 301              		.loc 1 306 7 is_stmt 1 view .LVU66
 302 001e E368     		ldr	r3, [r4, #12]
 307:vs1003.c      ****       SPI_read_write_byte(0xef);
 303              		.loc 1 307 7 is_stmt 0 view .LVU67
 304 0020 5320     		movs	r0, #83
 306:vs1003.c      ****       SPI_read_write_byte(0x53);
 305              		.loc 1 306 7 view .LVU68
 306 0022 23F40063 		bic	r3, r3, #2048
 307 0026 E360     		str	r3, [r4, #12]
 307:vs1003.c      ****       SPI_read_write_byte(0xef);
 308              		.loc 1 307 7 is_stmt 1 view .LVU69
 309 0028 FFF7FEFF 		bl	SPI_read_write_byte
 310              	.LVL19:
 308:vs1003.c      ****       SPI_read_write_byte(0x6e);
 311              		.loc 1 308 7 view .LVU70
 312 002c EF20     		movs	r0, #239
 313 002e FFF7FEFF 		bl	SPI_read_write_byte
 314              	.LVL20:
 309:vs1003.c      ****       SPI_read_write_byte(0x24);
 315              		.loc 1 309 7 view .LVU71
 316 0032 6E20     		movs	r0, #110
 317 0034 FFF7FEFF 		bl	SPI_read_write_byte
 318              	.LVL21:
 310:vs1003.c      ****       SPI_read_write_byte(0x00);
 319              		.loc 1 310 7 view .LVU72
 320 0038 2420     		movs	r0, #36
 321 003a FFF7FEFF 		bl	SPI_read_write_byte
 322              	.LVL22:
 311:vs1003.c      ****       SPI_read_write_byte(0x00);
 323              		.loc 1 311 7 view .LVU73
 324 003e 0020     		movs	r0, #0
 325 0040 FFF7FEFF 		bl	SPI_read_write_byte
 326              	.LVL23:
 312:vs1003.c      ****       SPI_read_write_byte(0x00);
 327              		.loc 1 312 7 view .LVU74
 328 0044 0020     		movs	r0, #0
 329 0046 FFF7FEFF 		bl	SPI_read_write_byte
 330              	.LVL24:
 313:vs1003.c      ****       SPI_read_write_byte(0x00);
 331              		.loc 1 313 7 view .LVU75
 332 004a 0020     		movs	r0, #0
 333 004c FFF7FEFF 		bl	SPI_read_write_byte
 334              	.LVL25:
 314:vs1003.c      ****       delay_ms(100);
 335              		.loc 1 314 7 view .LVU76
 336 0050 0020     		movs	r0, #0
 337 0052 FFF7FEFF 		bl	SPI_read_write_byte
 338              	.LVL26:
 315:vs1003.c      ****       MP3_DCS_SET(1);
 339              		.loc 1 315 7 view .LVU77
 340              	.LBB30:
 341              	.LBI30:
 241:vs1003.c      **** {
 342              		.loc 1 241 6 view .LVU78
 343              	.LBB31:
 243:vs1003.c      **** }
 344              		.loc 1 243 7 view .LVU79
 345 0056 6420     		movs	r0, #100
 346 0058 FFF7FEFF 		bl	wait_ms
 347              	.LVL27:
 243:vs1003.c      **** }
 348              		.loc 1 243 7 is_stmt 0 view .LVU80
 349              	.LBE31:
 350              	.LBE30:
 316:vs1003.c      ****       MP3_DCS_SET(0);
 351              		.loc 1 316 7 is_stmt 1 view .LVU81
 352 005c E368     		ldr	r3, [r4, #12]
 318:vs1003.c      ****       SPI_read_write_byte(0x78);
 353              		.loc 1 318 7 is_stmt 0 view .LVU82
 354 005e 4520     		movs	r0, #69
 316:vs1003.c      ****       MP3_DCS_SET(0);
 355              		.loc 1 316 7 view .LVU83
 356 0060 43F40063 		orr	r3, r3, #2048
 357 0064 E360     		str	r3, [r4, #12]
 317:vs1003.c      ****       SPI_read_write_byte(0x45);
 358              		.loc 1 317 7 is_stmt 1 view .LVU84
 359 0066 E368     		ldr	r3, [r4, #12]
 360 0068 23F40063 		bic	r3, r3, #2048
 361 006c E360     		str	r3, [r4, #12]
 318:vs1003.c      ****       SPI_read_write_byte(0x78);
 362              		.loc 1 318 7 view .LVU85
 363 006e FFF7FEFF 		bl	SPI_read_write_byte
 364              	.LVL28:
 319:vs1003.c      ****       SPI_read_write_byte(0x69);
 365              		.loc 1 319 7 view .LVU86
 366 0072 7820     		movs	r0, #120
 367 0074 FFF7FEFF 		bl	SPI_read_write_byte
 368              	.LVL29:
 320:vs1003.c      ****       SPI_read_write_byte(0x74);
 369              		.loc 1 320 7 view .LVU87
 370 0078 6920     		movs	r0, #105
 371 007a FFF7FEFF 		bl	SPI_read_write_byte
 372              	.LVL30:
 321:vs1003.c      ****       SPI_read_write_byte(0x00);
 373              		.loc 1 321 7 view .LVU88
 374 007e 7420     		movs	r0, #116
 375 0080 FFF7FEFF 		bl	SPI_read_write_byte
 376              	.LVL31:
 322:vs1003.c      ****       SPI_read_write_byte(0x00);
 377              		.loc 1 322 7 view .LVU89
 378 0084 0020     		movs	r0, #0
 379 0086 FFF7FEFF 		bl	SPI_read_write_byte
 380              	.LVL32:
 323:vs1003.c      ****       SPI_read_write_byte(0x00);
 381              		.loc 1 323 7 view .LVU90
 382 008a 0020     		movs	r0, #0
 383 008c FFF7FEFF 		bl	SPI_read_write_byte
 384              	.LVL33:
 324:vs1003.c      ****       SPI_read_write_byte(0x00);
 385              		.loc 1 324 7 view .LVU91
 386 0090 0020     		movs	r0, #0
 387 0092 FFF7FEFF 		bl	SPI_read_write_byte
 388              	.LVL34:
 325:vs1003.c      ****       delay_ms(100);
 389              		.loc 1 325 7 view .LVU92
 390 0096 0020     		movs	r0, #0
 391 0098 FFF7FEFF 		bl	SPI_read_write_byte
 392              	.LVL35:
 326:vs1003.c      ****       MP3_DCS_SET(1);
 393              		.loc 1 326 7 view .LVU93
 394              	.LBB32:
 395              	.LBI32:
 241:vs1003.c      **** {
 396              		.loc 1 241 6 view .LVU94
 397              	.LBB33:
 243:vs1003.c      **** }
 398              		.loc 1 243 7 view .LVU95
 399 009c 6420     		movs	r0, #100
 400 009e FFF7FEFF 		bl	wait_ms
 401              	.LVL36:
 243:vs1003.c      **** }
 402              		.loc 1 243 7 is_stmt 0 view .LVU96
 403              	.LBE33:
 404              	.LBE32:
 327:vs1003.c      ****       MP3_DCS_SET(0);
 405              		.loc 1 327 7 is_stmt 1 view .LVU97
 406 00a2 E368     		ldr	r3, [r4, #12]
 329:vs1003.c      ****       SPI_read_write_byte(0xef);
 407              		.loc 1 329 7 is_stmt 0 view .LVU98
 408 00a4 5320     		movs	r0, #83
 327:vs1003.c      ****       MP3_DCS_SET(0);
 409              		.loc 1 327 7 view .LVU99
 410 00a6 43F40063 		orr	r3, r3, #2048
 411 00aa E360     		str	r3, [r4, #12]
 328:vs1003.c      ****       SPI_read_write_byte(0x53);
 412              		.loc 1 328 7 is_stmt 1 view .LVU100
 413 00ac E368     		ldr	r3, [r4, #12]
 414 00ae 23F40063 		bic	r3, r3, #2048
 415 00b2 E360     		str	r3, [r4, #12]
 329:vs1003.c      ****       SPI_read_write_byte(0xef);
 416              		.loc 1 329 7 view .LVU101
 417 00b4 FFF7FEFF 		bl	SPI_read_write_byte
 418              	.LVL37:
 330:vs1003.c      ****       SPI_read_write_byte(0x6e);
 419              		.loc 1 330 7 view .LVU102
 420 00b8 EF20     		movs	r0, #239
 421 00ba FFF7FEFF 		bl	SPI_read_write_byte
 422              	.LVL38:
 331:vs1003.c      ****       SPI_read_write_byte(0x44);
 423              		.loc 1 331 7 view .LVU103
 424 00be 6E20     		movs	r0, #110
 425 00c0 FFF7FEFF 		bl	SPI_read_write_byte
 426              	.LVL39:
 332:vs1003.c      ****       SPI_read_write_byte(0x00);
 427              		.loc 1 332 7 view .LVU104
 428 00c4 4420     		movs	r0, #68
 429 00c6 FFF7FEFF 		bl	SPI_read_write_byte
 430              	.LVL40:
 333:vs1003.c      ****       SPI_read_write_byte(0x00);
 431              		.loc 1 333 7 view .LVU105
 432 00ca 0020     		movs	r0, #0
 433 00cc FFF7FEFF 		bl	SPI_read_write_byte
 434              	.LVL41:
 334:vs1003.c      ****       SPI_read_write_byte(0x00);
 435              		.loc 1 334 7 view .LVU106
 436 00d0 0020     		movs	r0, #0
 437 00d2 FFF7FEFF 		bl	SPI_read_write_byte
 438              	.LVL42:
 335:vs1003.c      ****       SPI_read_write_byte(0x00);
 439              		.loc 1 335 7 view .LVU107
 440 00d6 0020     		movs	r0, #0
 441 00d8 FFF7FEFF 		bl	SPI_read_write_byte
 442              	.LVL43:
 336:vs1003.c      ****       delay_ms(100);
 443              		.loc 1 336 7 view .LVU108
 444 00dc 0020     		movs	r0, #0
 445 00de FFF7FEFF 		bl	SPI_read_write_byte
 446              	.LVL44:
 337:vs1003.c      ****       MP3_DCS_SET(1);
 447              		.loc 1 337 7 view .LVU109
 448              	.LBB34:
 449              	.LBI34:
 241:vs1003.c      **** {
 450              		.loc 1 241 6 view .LVU110
 451              	.LBB35:
 243:vs1003.c      **** }
 452              		.loc 1 243 7 view .LVU111
 453 00e2 6420     		movs	r0, #100
 454 00e4 FFF7FEFF 		bl	wait_ms
 455              	.LVL45:
 243:vs1003.c      **** }
 456              		.loc 1 243 7 is_stmt 0 view .LVU112
 457              	.LBE35:
 458              	.LBE34:
 338:vs1003.c      ****       MP3_DCS_SET(0);
 459              		.loc 1 338 7 is_stmt 1 view .LVU113
 460 00e8 E368     		ldr	r3, [r4, #12]
 340:vs1003.c      ****       SPI_read_write_byte(0x78);
 461              		.loc 1 340 7 is_stmt 0 view .LVU114
 462 00ea 4520     		movs	r0, #69
 338:vs1003.c      ****       MP3_DCS_SET(0);
 463              		.loc 1 338 7 view .LVU115
 464 00ec 43F40063 		orr	r3, r3, #2048
 465 00f0 E360     		str	r3, [r4, #12]
 339:vs1003.c      ****       SPI_read_write_byte(0x45);
 466              		.loc 1 339 7 is_stmt 1 view .LVU116
 467 00f2 E368     		ldr	r3, [r4, #12]
 468 00f4 23F40063 		bic	r3, r3, #2048
 469 00f8 E360     		str	r3, [r4, #12]
 340:vs1003.c      ****       SPI_read_write_byte(0x78);
 470              		.loc 1 340 7 view .LVU117
 471 00fa FFF7FEFF 		bl	SPI_read_write_byte
 472              	.LVL46:
 341:vs1003.c      ****       SPI_read_write_byte(0x69);
 473              		.loc 1 341 7 view .LVU118
 474 00fe 7820     		movs	r0, #120
 475 0100 FFF7FEFF 		bl	SPI_read_write_byte
 476              	.LVL47:
 342:vs1003.c      ****       SPI_read_write_byte(0x74);
 477              		.loc 1 342 7 view .LVU119
 478 0104 6920     		movs	r0, #105
 479 0106 FFF7FEFF 		bl	SPI_read_write_byte
 480              	.LVL48:
 343:vs1003.c      ****       SPI_read_write_byte(0x00);
 481              		.loc 1 343 7 view .LVU120
 482 010a 7420     		movs	r0, #116
 483 010c FFF7FEFF 		bl	SPI_read_write_byte
 484              	.LVL49:
 344:vs1003.c      ****       SPI_read_write_byte(0x00);
 485              		.loc 1 344 7 view .LVU121
 486 0110 0020     		movs	r0, #0
 487 0112 FFF7FEFF 		bl	SPI_read_write_byte
 488              	.LVL50:
 345:vs1003.c      ****       SPI_read_write_byte(0x00);
 489              		.loc 1 345 7 view .LVU122
 490 0116 0020     		movs	r0, #0
 491 0118 FFF7FEFF 		bl	SPI_read_write_byte
 492              	.LVL51:
 346:vs1003.c      ****       SPI_read_write_byte(0x00);
 493              		.loc 1 346 7 view .LVU123
 494 011c 0020     		movs	r0, #0
 495 011e FFF7FEFF 		bl	SPI_read_write_byte
 496              	.LVL52:
 347:vs1003.c      ****       delay_ms(100);
 497              		.loc 1 347 7 view .LVU124
 498 0122 0020     		movs	r0, #0
 499 0124 FFF7FEFF 		bl	SPI_read_write_byte
 500              	.LVL53:
 348:vs1003.c      ****       MP3_DCS_SET(1);
 501              		.loc 1 348 7 view .LVU125
 502              	.LBB36:
 503              	.LBI36:
 241:vs1003.c      **** {
 504              		.loc 1 241 6 view .LVU126
 505              	.LBB37:
 243:vs1003.c      **** }
 506              		.loc 1 243 7 view .LVU127
 507 0128 6420     		movs	r0, #100
 508 012a FFF7FEFF 		bl	wait_ms
 509              	.LVL54:
 243:vs1003.c      **** }
 510              		.loc 1 243 7 is_stmt 0 view .LVU128
 511              	.LBE37:
 512              	.LBE36:
 349:vs1003.c      **** }
 513              		.loc 1 349 7 is_stmt 1 view .LVU129
 514 012e E368     		ldr	r3, [r4, #12]
 515 0130 43F40063 		orr	r3, r3, #2048
 516 0134 E360     		str	r3, [r4, #12]
 350:vs1003.c      **** 
 517              		.loc 1 350 1 is_stmt 0 view .LVU130
 518 0136 10BD     		pop	{r4, pc}
 519              	.L20:
 520              		.align	2
 521              	.L19:
 522 0138 00100140 		.word	1073811456
 523              		.cfi_endproc
 524              	.LFE33:
 526              		.section	.text.vs1003_reg_read,"ax",%progbits
 527              		.align	1
 528              		.global	vs1003_reg_read
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 532              		.fpu softvfp
 534              	vs1003_reg_read:
 535              	.LVL55:
 536              	.LFB36:
 386:vs1003.c      **** 
 387:vs1003.c      **** 
 388:vs1003.c      **** unsigned short vs1003_reg_read (unsigned char address)
 389:vs1003.c      **** {
 537              		.loc 1 389 1 is_stmt 1 view -0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 390:vs1003.c      ****       unsigned short temp = 0;
 541              		.loc 1 390 7 view .LVU132
 391:vs1003.c      ****       while((GPIOC->IDR & MP3_DREQ) == 0);
 542              		.loc 1 391 7 view .LVU133
 389:vs1003.c      ****       unsigned short temp = 0;
 543              		.loc 1 389 1 is_stmt 0 view .LVU134
 544 0000 38B5     		push	{r3, r4, r5, lr}
 545              		.cfi_def_cfa_offset 16
 546              		.cfi_offset 3, -16
 547              		.cfi_offset 4, -12
 548              		.cfi_offset 5, -8
 549              		.cfi_offset 14, -4
 389:vs1003.c      ****       unsigned short temp = 0;
 550              		.loc 1 389 1 view .LVU135
 551 0002 0446     		mov	r4, r0
 552              		.loc 1 391 19 view .LVU136
 553 0004 144D     		ldr	r5, .L25
 554              	.L22:
 555              		.loc 1 391 42 is_stmt 1 discriminator 1 view .LVU137
 556              		.loc 1 391 12 discriminator 1 view .LVU138
 557              		.loc 1 391 19 is_stmt 0 discriminator 1 view .LVU139
 558 0006 AB68     		ldr	r3, [r5, #8]
 559              		.loc 1 391 12 discriminator 1 view .LVU140
 560 0008 1B07     		lsls	r3, r3, #28
 561 000a FCD5     		bpl	.L22
 392:vs1003.c      ****       SPI_set_speed(0);
 562              		.loc 1 392 7 is_stmt 1 view .LVU141
 563 000c 0020     		movs	r0, #0
 564              	.LVL56:
 565              		.loc 1 392 7 is_stmt 0 view .LVU142
 566 000e FFF7FEFF 		bl	SPI_set_speed
 567              	.LVL57:
 393:vs1003.c      ****       MP3_DCS_SET(1);
 568              		.loc 1 393 7 is_stmt 1 view .LVU143
 569 0012 EB68     		ldr	r3, [r5, #12]
 394:vs1003.c      ****       MP3_CCS_SET(0);
 395:vs1003.c      ****       SPI_read_write_byte(VS_READ_COMMAND);
 570              		.loc 1 395 7 is_stmt 0 view .LVU144
 571 0014 0320     		movs	r0, #3
 393:vs1003.c      ****       MP3_DCS_SET(1);
 572              		.loc 1 393 7 view .LVU145
 573 0016 43F40063 		orr	r3, r3, #2048
 574 001a EB60     		str	r3, [r5, #12]
 394:vs1003.c      ****       MP3_CCS_SET(0);
 575              		.loc 1 394 7 is_stmt 1 view .LVU146
 576 001c EB68     		ldr	r3, [r5, #12]
 577 001e 23F48063 		bic	r3, r3, #1024
 578 0022 EB60     		str	r3, [r5, #12]
 579              		.loc 1 395 7 view .LVU147
 580 0024 FFF7FEFF 		bl	SPI_read_write_byte
 581              	.LVL58:
 396:vs1003.c      ****       SPI_read_write_byte(address);
 582              		.loc 1 396 7 view .LVU148
 583 0028 2046     		mov	r0, r4
 584 002a FFF7FEFF 		bl	SPI_read_write_byte
 585              	.LVL59:
 397:vs1003.c      ****       temp = SPI_read_write_byte(0xff);
 586              		.loc 1 397 7 view .LVU149
 587              		.loc 1 397 14 is_stmt 0 view .LVU150
 588 002e FF20     		movs	r0, #255
 589 0030 FFF7FEFF 		bl	SPI_read_write_byte
 590              	.LVL60:
 398:vs1003.c      ****       temp = temp << 8;
 591              		.loc 1 398 7 is_stmt 1 view .LVU151
 592              		.loc 1 398 12 is_stmt 0 view .LVU152
 593 0034 0402     		lsls	r4, r0, #8
 399:vs1003.c      ****       temp |= SPI_read_write_byte(0xff);
 594              		.loc 1 399 15 view .LVU153
 595 0036 FF20     		movs	r0, #255
 596              	.LVL61:
 597              		.loc 1 399 15 view .LVU154
 598 0038 FFF7FEFF 		bl	SPI_read_write_byte
 599              	.LVL62:
 400:vs1003.c      ****       MP3_CCS_SET(1);
 600              		.loc 1 400 7 view .LVU155
 601 003c EB68     		ldr	r3, [r5, #12]
 398:vs1003.c      ****       temp = temp << 8;
 602              		.loc 1 398 12 view .LVU156
 603 003e 04F47F44 		and	r4, r4, #65280
 604              	.LVL63:
 399:vs1003.c      ****       temp |= SPI_read_write_byte(0xff);
 605              		.loc 1 399 7 is_stmt 1 view .LVU157
 606              		.loc 1 400 7 is_stmt 0 view .LVU158
 607 0042 43F48063 		orr	r3, r3, #1024
 399:vs1003.c      ****       temp |= SPI_read_write_byte(0xff);
 608              		.loc 1 399 12 view .LVU159
 609 0046 0443     		orrs	r4, r4, r0
 610              	.LVL64:
 399:vs1003.c      ****       temp |= SPI_read_write_byte(0xff);
 611              		.loc 1 399 12 view .LVU160
 612 0048 A4B2     		uxth	r4, r4
 613              	.LVL65:
 614              		.loc 1 400 7 is_stmt 1 view .LVU161
 401:vs1003.c      ****       SPI_set_speed(1);
 615              		.loc 1 401 7 is_stmt 0 view .LVU162
 616 004a 0120     		movs	r0, #1
 400:vs1003.c      ****       MP3_CCS_SET(1);
 617              		.loc 1 400 7 view .LVU163
 618 004c EB60     		str	r3, [r5, #12]
 619              		.loc 1 401 7 is_stmt 1 view .LVU164
 620 004e FFF7FEFF 		bl	SPI_set_speed
 621              	.LVL66:
 402:vs1003.c      ****       return temp;
 622              		.loc 1 402 7 view .LVU165
 403:vs1003.c      **** }
 623              		.loc 1 403 1 is_stmt 0 view .LVU166
 624 0052 2046     		mov	r0, r4
 625 0054 38BD     		pop	{r3, r4, r5, pc}
 626              	.LVL67:
 627              	.L26:
 628              		.loc 1 403 1 view .LVU167
 629 0056 00BF     		.align	2
 630              	.L25:
 631 0058 00100140 		.word	1073811456
 632              		.cfi_endproc
 633              	.LFE36:
 635              		.section	.text.vs1003_soft_reset,"ax",%progbits
 636              		.align	1
 637              		.global	vs1003_soft_reset
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu softvfp
 643              	vs1003_soft_reset:
 644              	.LFB31:
 255:vs1003.c      ****       unsigned char retry;
 645              		.loc 1 255 1 is_stmt 1 view -0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 0, uses_anonymous_args = 0
 256:vs1003.c      ****       while ((GPIOC->IDR & MP3_DREQ) == 0);
 649              		.loc 1 256 7 view .LVU169
 257:vs1003.c      ****       SPI_read_write_byte(0xff);
 650              		.loc 1 257 7 view .LVU170
 257:vs1003.c      ****       SPI_read_write_byte(0xff);
 651              		.loc 1 257 20 is_stmt 0 view .LVU171
 652 0000 304B     		ldr	r3, .L46
 255:vs1003.c      ****       unsigned char retry;
 653              		.loc 1 255 1 view .LVU172
 654 0002 70B5     		push	{r4, r5, r6, lr}
 655              		.cfi_def_cfa_offset 16
 656              		.cfi_offset 4, -16
 657              		.cfi_offset 5, -12
 658              		.cfi_offset 6, -8
 659              		.cfi_offset 14, -4
 660 0004 1C46     		mov	r4, r3
 661              	.L28:
 257:vs1003.c      ****       SPI_read_write_byte(0xff);
 662              		.loc 1 257 43 is_stmt 1 discriminator 1 view .LVU173
 257:vs1003.c      ****       SPI_read_write_byte(0xff);
 663              		.loc 1 257 13 discriminator 1 view .LVU174
 257:vs1003.c      ****       SPI_read_write_byte(0xff);
 664              		.loc 1 257 20 is_stmt 0 discriminator 1 view .LVU175
 665 0006 9A68     		ldr	r2, [r3, #8]
 257:vs1003.c      ****       SPI_read_write_byte(0xff);
 666              		.loc 1 257 13 discriminator 1 view .LVU176
 667 0008 1207     		lsls	r2, r2, #28
 668 000a FCD5     		bpl	.L28
 258:vs1003.c      ****       retry = 0;
 669              		.loc 1 258 7 is_stmt 1 view .LVU177
 670 000c FF20     		movs	r0, #255
 671 000e FFF7FEFF 		bl	SPI_read_write_byte
 672              	.LVL68:
 259:vs1003.c      ****       while (vs1003_reg_read(0) != 0x0804) {
 673              		.loc 1 259 7 view .LVU178
 260:vs1003.c      **** 	    vs1003_cmd_write(SPI_MODE,0x0804);
 674              		.loc 1 260 7 view .LVU179
 260:vs1003.c      **** 	    vs1003_cmd_write(SPI_MODE,0x0804);
 675              		.loc 1 260 13 is_stmt 0 view .LVU180
 676 0012 6525     		movs	r5, #101
 677 0014 40F60406 		movw	r6, #2052
 678              	.LVL69:
 679              	.L29:
 260:vs1003.c      **** 	    vs1003_cmd_write(SPI_MODE,0x0804);
 680              		.loc 1 260 13 is_stmt 1 view .LVU181
 260:vs1003.c      **** 	    vs1003_cmd_write(SPI_MODE,0x0804);
 681              		.loc 1 260 14 is_stmt 0 view .LVU182
 682 0018 0020     		movs	r0, #0
 683 001a FFF7FEFF 		bl	vs1003_reg_read
 684              	.LVL70:
 260:vs1003.c      **** 	    vs1003_cmd_write(SPI_MODE,0x0804);
 685              		.loc 1 260 13 view .LVU183
 686 001e B042     		cmp	r0, r6
 687 0020 0BD0     		beq	.L30
 261:vs1003.c      **** 	    delay_ms(2);
 688              		.loc 1 261 6 is_stmt 1 view .LVU184
 689 0022 40F60401 		movw	r1, #2052
 690 0026 0020     		movs	r0, #0
 691 0028 FFF7FEFF 		bl	vs1003_cmd_write
 692              	.LVL71:
 262:vs1003.c      **** 	    retry++;
 693              		.loc 1 262 6 view .LVU185
 694              	.LBB38:
 695              	.LBI38:
 241:vs1003.c      **** {
 696              		.loc 1 241 6 view .LVU186
 697              	.LBB39:
 243:vs1003.c      **** }
 698              		.loc 1 243 7 view .LVU187
 699 002c 013D     		subs	r5, r5, #1
 700              	.LVL72:
 243:vs1003.c      **** }
 701              		.loc 1 243 7 is_stmt 0 view .LVU188
 702 002e 0220     		movs	r0, #2
 703 0030 FFF7FEFF 		bl	wait_ms
 704              	.LVL73:
 243:vs1003.c      **** }
 705              		.loc 1 243 7 view .LVU189
 706              	.LBE39:
 707              	.LBE38:
 263:vs1003.c      **** 	    if(retry > 100) break;
 708              		.loc 1 263 6 is_stmt 1 view .LVU190
 264:vs1003.c      ****       }
 709              		.loc 1 264 6 view .LVU191
 264:vs1003.c      ****       }
 710              		.loc 1 264 8 is_stmt 0 view .LVU192
 711 0034 15F0FF05 		ands	r5, r5, #255
 712 0038 EED1     		bne	.L29
 713              	.L30:
 266:vs1003.c      ****       retry = 0;
 714              		.loc 1 266 43 is_stmt 1 discriminator 1 view .LVU193
 266:vs1003.c      ****       retry = 0;
 715              		.loc 1 266 13 discriminator 1 view .LVU194
 266:vs1003.c      ****       retry = 0;
 716              		.loc 1 266 20 is_stmt 0 discriminator 1 view .LVU195
 717 003a A368     		ldr	r3, [r4, #8]
 266:vs1003.c      ****       retry = 0;
 718              		.loc 1 266 13 discriminator 1 view .LVU196
 719 003c 1B07     		lsls	r3, r3, #28
 720 003e FCD5     		bpl	.L30
 721 0040 6525     		movs	r5, #101
 722              	.L33:
 723              	.LVL74:
 268:vs1003.c      **** 	    vs1003_cmd_write(SPI_CLOCKF,0x9800);
 724              		.loc 1 268 13 is_stmt 1 view .LVU197
 268:vs1003.c      **** 	    vs1003_cmd_write(SPI_CLOCKF,0x9800);
 725              		.loc 1 268 14 is_stmt 0 view .LVU198
 726 0042 0320     		movs	r0, #3
 727 0044 FFF7FEFF 		bl	vs1003_reg_read
 728              	.LVL75:
 268:vs1003.c      **** 	    vs1003_cmd_write(SPI_CLOCKF,0x9800);
 729              		.loc 1 268 13 view .LVU199
 730 0048 B0F5184F 		cmp	r0, #38912
 731 004c 08D0     		beq	.L36
 269:vs1003.c      **** 	    retry++;
 732              		.loc 1 269 6 is_stmt 1 view .LVU200
 733 004e 4FF41841 		mov	r1, #38912
 734 0052 0320     		movs	r0, #3
 735 0054 013D     		subs	r5, r5, #1
 736              	.LVL76:
 269:vs1003.c      **** 	    retry++;
 737              		.loc 1 269 6 is_stmt 0 view .LVU201
 738 0056 FFF7FEFF 		bl	vs1003_cmd_write
 739              	.LVL77:
 270:vs1003.c      **** 	    if (retry > 100) break;
 740              		.loc 1 270 6 is_stmt 1 view .LVU202
 271:vs1003.c      ****       }
 741              		.loc 1 271 6 view .LVU203
 271:vs1003.c      ****       }
 742              		.loc 1 271 9 is_stmt 0 view .LVU204
 743 005a 15F0FF05 		ands	r5, r5, #255
 744 005e F0D1     		bne	.L33
 745              	.L36:
 746 0060 6525     		movs	r5, #101
 274:vs1003.c      **** 	    vs1003_cmd_write(SPI_AUDATA,0xBB81);
 747              		.loc 1 274 13 view .LVU205
 748 0062 4BF68136 		movw	r6, #48001
 749              	.L34:
 750              	.LVL78:
 274:vs1003.c      **** 	    vs1003_cmd_write(SPI_AUDATA,0xBB81);
 751              		.loc 1 274 13 is_stmt 1 view .LVU206
 274:vs1003.c      **** 	    vs1003_cmd_write(SPI_AUDATA,0xBB81);
 752              		.loc 1 274 14 is_stmt 0 view .LVU207
 753 0066 0520     		movs	r0, #5
 754 0068 FFF7FEFF 		bl	vs1003_reg_read
 755              	.LVL79:
 274:vs1003.c      **** 	    vs1003_cmd_write(SPI_AUDATA,0xBB81);
 756              		.loc 1 274 13 view .LVU208
 757 006c B042     		cmp	r0, r6
 758 006e 08D0     		beq	.L38
 275:vs1003.c      **** 	    retry++;
 759              		.loc 1 275 6 is_stmt 1 view .LVU209
 760 0070 4BF68131 		movw	r1, #48001
 761 0074 0520     		movs	r0, #5
 762 0076 013D     		subs	r5, r5, #1
 763              	.LVL80:
 275:vs1003.c      **** 	    retry++;
 764              		.loc 1 275 6 is_stmt 0 view .LVU210
 765 0078 FFF7FEFF 		bl	vs1003_cmd_write
 766              	.LVL81:
 276:vs1003.c      **** 	    if (retry > 100) break;
 767              		.loc 1 276 6 is_stmt 1 view .LVU211
 277:vs1003.c      ****       }
 768              		.loc 1 277 6 view .LVU212
 277:vs1003.c      ****       }
 769              		.loc 1 277 9 is_stmt 0 view .LVU213
 770 007c 15F0FF05 		ands	r5, r5, #255
 771 0080 F1D1     		bne	.L34
 772              	.L38:
 279:vs1003.c      ****       vs1003_reset_decode_time();
 773              		.loc 1 279 7 is_stmt 1 view .LVU214
 774 0082 42F22001 		movw	r1, #8224
 775 0086 0B20     		movs	r0, #11
 776 0088 FFF7FEFF 		bl	vs1003_cmd_write
 777              	.LVL82:
 280:vs1003.c      ****       MP3_DCS_SET(0);
 778              		.loc 1 280 7 view .LVU215
 779 008c FFF7FEFF 		bl	vs1003_reset_decode_time
 780              	.LVL83:
 281:vs1003.c      ****       SPI_read_write_byte(0xFF);
 781              		.loc 1 281 7 view .LVU216
 782 0090 E368     		ldr	r3, [r4, #12]
 282:vs1003.c      ****       SPI_read_write_byte(0xFF);
 783              		.loc 1 282 7 is_stmt 0 view .LVU217
 784 0092 FF20     		movs	r0, #255
 281:vs1003.c      ****       SPI_read_write_byte(0xFF);
 785              		.loc 1 281 7 view .LVU218
 786 0094 23F40063 		bic	r3, r3, #2048
 787 0098 E360     		str	r3, [r4, #12]
 282:vs1003.c      ****       SPI_read_write_byte(0xFF);
 788              		.loc 1 282 7 is_stmt 1 view .LVU219
 789 009a FFF7FEFF 		bl	SPI_read_write_byte
 790              	.LVL84:
 283:vs1003.c      ****       SPI_read_write_byte(0xFF);
 791              		.loc 1 283 7 view .LVU220
 792 009e FF20     		movs	r0, #255
 793 00a0 FFF7FEFF 		bl	SPI_read_write_byte
 794              	.LVL85:
 284:vs1003.c      ****       SPI_read_write_byte(0xFF);
 795              		.loc 1 284 7 view .LVU221
 796 00a4 FF20     		movs	r0, #255
 797 00a6 FFF7FEFF 		bl	SPI_read_write_byte
 798              	.LVL86:
 285:vs1003.c      ****       MP3_DCS_SET(1);
 799              		.loc 1 285 7 view .LVU222
 800 00aa FF20     		movs	r0, #255
 801 00ac FFF7FEFF 		bl	SPI_read_write_byte
 802              	.LVL87:
 286:vs1003.c      ****       delay_ms(20);
 803              		.loc 1 286 7 view .LVU223
 804 00b0 E368     		ldr	r3, [r4, #12]
 805              	.LBB40:
 806              	.LBB41:
 243:vs1003.c      **** }
 807              		.loc 1 243 7 is_stmt 0 view .LVU224
 808 00b2 1420     		movs	r0, #20
 809              	.LBE41:
 810              	.LBE40:
 286:vs1003.c      ****       delay_ms(20);
 811              		.loc 1 286 7 view .LVU225
 812 00b4 43F40063 		orr	r3, r3, #2048
 813 00b8 E360     		str	r3, [r4, #12]
 287:vs1003.c      **** }
 814              		.loc 1 287 7 is_stmt 1 view .LVU226
 815              	.LVL88:
 816              	.LBB44:
 817              	.LBI40:
 241:vs1003.c      **** {
 818              		.loc 1 241 6 view .LVU227
 819              	.LBB42:
 243:vs1003.c      **** }
 820              		.loc 1 243 7 view .LVU228
 821              	.LBE42:
 822              	.LBE44:
 288:vs1003.c      **** 
 823              		.loc 1 288 1 is_stmt 0 view .LVU229
 824 00ba BDE87040 		pop	{r4, r5, r6, lr}
 825              		.cfi_restore 14
 826              		.cfi_restore 6
 827              		.cfi_restore 5
 828              		.cfi_restore 4
 829              		.cfi_def_cfa_offset 0
 830              	.LBB45:
 831              	.LBB43:
 243:vs1003.c      **** }
 832              		.loc 1 243 7 view .LVU230
 833 00be FFF7FEBF 		b	wait_ms
 834              	.LVL89:
 835              	.L47:
 836 00c2 00BF     		.align	2
 837              	.L46:
 838 00c4 00100140 		.word	1073811456
 839              	.LBE43:
 840              	.LBE45:
 841              		.cfi_endproc
 842              	.LFE31:
 844              		.section	.text.vs1003_ram_test,"ax",%progbits
 845              		.align	1
 846              		.global	vs1003_ram_test
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 850              		.fpu softvfp
 852              	vs1003_ram_test:
 853              	.LFB34:
 354:vs1003.c      ****       mp3_reset();
 854              		.loc 1 354 1 is_stmt 1 view -0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 355:vs1003.c      ****       vs1003_cmd_write(SPI_MODE,0x0820);
 858              		.loc 1 355 7 view .LVU232
 354:vs1003.c      ****       mp3_reset();
 859              		.loc 1 354 1 is_stmt 0 view .LVU233
 860 0000 10B5     		push	{r4, lr}
 861              		.cfi_def_cfa_offset 8
 862              		.cfi_offset 4, -8
 863              		.cfi_offset 14, -4
 355:vs1003.c      ****       vs1003_cmd_write(SPI_MODE,0x0820);
 864              		.loc 1 355 7 view .LVU234
 865 0002 FFF7FEFF 		bl	mp3_reset
 866              	.LVL90:
 356:vs1003.c      ****       while ((GPIOC->IDR & MP3_DREQ) == 0);
 867              		.loc 1 356 7 is_stmt 1 view .LVU235
 868 0006 4FF40261 		mov	r1, #2080
 869 000a 0020     		movs	r0, #0
 870 000c FFF7FEFF 		bl	vs1003_cmd_write
 871              	.LVL91:
 357:vs1003.c      ****       MP3_DCS_SET(0);
 872              		.loc 1 357 7 view .LVU236
 357:vs1003.c      ****       MP3_DCS_SET(0);
 873              		.loc 1 357 20 is_stmt 0 view .LVU237
 874 0010 164C     		ldr	r4, .L52
 875              	.L49:
 357:vs1003.c      ****       MP3_DCS_SET(0);
 876              		.loc 1 357 43 is_stmt 1 discriminator 1 view .LVU238
 357:vs1003.c      ****       MP3_DCS_SET(0);
 877              		.loc 1 357 13 discriminator 1 view .LVU239
 357:vs1003.c      ****       MP3_DCS_SET(0);
 878              		.loc 1 357 20 is_stmt 0 discriminator 1 view .LVU240
 879 0012 A368     		ldr	r3, [r4, #8]
 357:vs1003.c      ****       MP3_DCS_SET(0);
 880              		.loc 1 357 13 discriminator 1 view .LVU241
 881 0014 1B07     		lsls	r3, r3, #28
 882 0016 FCD5     		bpl	.L49
 358:vs1003.c      ****       SPI_read_write_byte(0x4d);
 883              		.loc 1 358 7 is_stmt 1 view .LVU242
 884 0018 E368     		ldr	r3, [r4, #12]
 359:vs1003.c      ****       SPI_read_write_byte(0xea);
 885              		.loc 1 359 7 is_stmt 0 view .LVU243
 886 001a 4D20     		movs	r0, #77
 358:vs1003.c      ****       SPI_read_write_byte(0x4d);
 887              		.loc 1 358 7 view .LVU244
 888 001c 23F40063 		bic	r3, r3, #2048
 889 0020 E360     		str	r3, [r4, #12]
 359:vs1003.c      ****       SPI_read_write_byte(0xea);
 890              		.loc 1 359 7 is_stmt 1 view .LVU245
 891 0022 FFF7FEFF 		bl	SPI_read_write_byte
 892              	.LVL92:
 360:vs1003.c      ****       SPI_read_write_byte(0x6d);
 893              		.loc 1 360 7 view .LVU246
 894 0026 EA20     		movs	r0, #234
 895 0028 FFF7FEFF 		bl	SPI_read_write_byte
 896              	.LVL93:
 361:vs1003.c      ****       SPI_read_write_byte(0x54);
 897              		.loc 1 361 7 view .LVU247
 898 002c 6D20     		movs	r0, #109
 899 002e FFF7FEFF 		bl	SPI_read_write_byte
 900              	.LVL94:
 362:vs1003.c      ****       SPI_read_write_byte(0x00);
 901              		.loc 1 362 7 view .LVU248
 902 0032 5420     		movs	r0, #84
 903 0034 FFF7FEFF 		bl	SPI_read_write_byte
 904              	.LVL95:
 363:vs1003.c      ****       SPI_read_write_byte(0x00);
 905              		.loc 1 363 7 view .LVU249
 906 0038 0020     		movs	r0, #0
 907 003a FFF7FEFF 		bl	SPI_read_write_byte
 908              	.LVL96:
 364:vs1003.c      ****       SPI_read_write_byte(0x00);
 909              		.loc 1 364 7 view .LVU250
 910 003e 0020     		movs	r0, #0
 911 0040 FFF7FEFF 		bl	SPI_read_write_byte
 912              	.LVL97:
 365:vs1003.c      ****       SPI_read_write_byte(0x00);
 913              		.loc 1 365 7 view .LVU251
 914 0044 0020     		movs	r0, #0
 915 0046 FFF7FEFF 		bl	SPI_read_write_byte
 916              	.LVL98:
 366:vs1003.c      ****       delay_ms(50);
 917              		.loc 1 366 7 view .LVU252
 918 004a 0020     		movs	r0, #0
 919 004c FFF7FEFF 		bl	SPI_read_write_byte
 920              	.LVL99:
 367:vs1003.c      ****       MP3_DCS_SET(1);
 921              		.loc 1 367 7 view .LVU253
 922              	.LBB46:
 923              	.LBI46:
 241:vs1003.c      **** {
 924              		.loc 1 241 6 view .LVU254
 925              	.LBB47:
 243:vs1003.c      **** }
 926              		.loc 1 243 7 view .LVU255
 927 0050 3220     		movs	r0, #50
 928 0052 FFF7FEFF 		bl	wait_ms
 929              	.LVL100:
 243:vs1003.c      **** }
 930              		.loc 1 243 7 is_stmt 0 view .LVU256
 931              	.LBE47:
 932              	.LBE46:
 368:vs1003.c      ****       regvalue = vs1003_reg_read(SPI_HDAT0);
 933              		.loc 1 368 7 is_stmt 1 view .LVU257
 934 0056 E368     		ldr	r3, [r4, #12]
 369:vs1003.c      **** }
 935              		.loc 1 369 18 is_stmt 0 view .LVU258
 936 0058 0820     		movs	r0, #8
 368:vs1003.c      ****       regvalue = vs1003_reg_read(SPI_HDAT0);
 937              		.loc 1 368 7 view .LVU259
 938 005a 43F40063 		orr	r3, r3, #2048
 939 005e E360     		str	r3, [r4, #12]
 369:vs1003.c      **** }
 940              		.loc 1 369 7 is_stmt 1 view .LVU260
 369:vs1003.c      **** }
 941              		.loc 1 369 18 is_stmt 0 view .LVU261
 942 0060 FFF7FEFF 		bl	vs1003_reg_read
 943              	.LVL101:
 369:vs1003.c      **** }
 944              		.loc 1 369 16 view .LVU262
 945 0064 024B     		ldr	r3, .L52+4
 946 0066 1880     		strh	r0, [r3]	@ movhi
 370:vs1003.c      **** 
 947              		.loc 1 370 1 view .LVU263
 948 0068 10BD     		pop	{r4, pc}
 949              	.L53:
 950 006a 00BF     		.align	2
 951              	.L52:
 952 006c 00100140 		.word	1073811456
 953 0070 00000000 		.word	.LANCHOR0
 954              		.cfi_endproc
 955              	.LFE34:
 957              		.section	.text.get_head_info,"ax",%progbits
 958              		.align	1
 959              		.global	get_head_info
 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu softvfp
 965              	get_head_info:
 966              	.LFB37:
 404:vs1003.c      **** 
 405:vs1003.c      **** 
 406:vs1003.c      **** unsigned short get_head_info (void)
 407:vs1003.c      **** {
 967              		.loc 1 407 1 is_stmt 1 view -0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 408:vs1003.c      ****       unsigned int HEAD0;
 971              		.loc 1 408 7 view .LVU265
 409:vs1003.c      ****       unsigned int HEAD1;
 972              		.loc 1 409 7 view .LVU266
 410:vs1003.c      ****       HEAD0 = vs1003_reg_read(SPI_HDAT0);
 973              		.loc 1 410 7 view .LVU267
 407:vs1003.c      ****       unsigned int HEAD0;
 974              		.loc 1 407 1 is_stmt 0 view .LVU268
 975 0000 10B5     		push	{r4, lr}
 976              		.cfi_def_cfa_offset 8
 977              		.cfi_offset 4, -8
 978              		.cfi_offset 14, -4
 979              		.loc 1 410 15 view .LVU269
 980 0002 0820     		movs	r0, #8
 981 0004 FFF7FEFF 		bl	vs1003_reg_read
 982              	.LVL102:
 983 0008 0446     		mov	r4, r0
 984              	.LVL103:
 411:vs1003.c      ****       HEAD1 = vs1003_reg_read(SPI_HDAT1);
 985              		.loc 1 411 7 is_stmt 1 view .LVU270
 986              		.loc 1 411 15 is_stmt 0 view .LVU271
 987 000a 0920     		movs	r0, #9
 988              	.LVL104:
 989              		.loc 1 411 15 view .LVU272
 990 000c FFF7FEFF 		bl	vs1003_reg_read
 991              	.LVL105:
 412:vs1003.c      ****       switch (HEAD1) {
 992              		.loc 1 412 7 is_stmt 1 view .LVU273
 993 0010 45F24D73 		movw	r3, #22349
 994 0014 9842     		cmp	r0, r3
 995 0016 09D0     		beq	.L55
 996 0018 47F26563 		movw	r3, #30309
 997 001c 9842     		cmp	r0, r3
 998 001e 20D0     		beq	.L58
 999 0020 44F65453 		movw	r3, #19796
 1000 0024 9842     		cmp	r0, r3
 1001 0026 10D1     		bne	.L60
 1002 0028 0120     		movs	r0, #1
 1003              	.LVL106:
 1004              		.loc 1 412 7 is_stmt 0 view .LVU274
 1005 002a 0DE0     		b	.L56
 1006              	.LVL107:
 1007              	.L55:
 413:vs1003.c      ****          case 0x7665:
 414:vs1003.c      ****            return 0;
 415:vs1003.c      ****          case 0x4D54:
 416:vs1003.c      ****            return 1;
 417:vs1003.c      ****          case 0x574D:
 418:vs1003.c      ****          {
 419:vs1003.c      ****            HEAD1 = HEAD0 * 2 / 25;
 1008              		.loc 1 419 12 is_stmt 1 view .LVU275
 1009              		.loc 1 419 18 is_stmt 0 view .LVU276
 1010 002c 1920     		movs	r0, #25
 1011              	.LVL108:
 1012              		.loc 1 419 26 view .LVU277
 1013 002e 6400     		lsls	r4, r4, #1
 1014              	.LVL109:
 1015              		.loc 1 419 18 view .LVU278
 1016 0030 B4FBF0F4 		udiv	r4, r4, r0
 1017              	.LVL110:
 420:vs1003.c      ****            if ((HEAD1 % 10) > 5) return HEAD1 / 10 + 1;else return HEAD1 / 10;
 1018              		.loc 1 420 12 is_stmt 1 view .LVU279
 1019 0034 0A22     		movs	r2, #10
 1020 0036 B4FBF2F3 		udiv	r3, r4, r2
 1021              		.loc 1 420 23 is_stmt 0 view .LVU280
 1022 003a 02FB1344 		mls	r4, r2, r3, r4
 1023              	.LVL111:
 1024              		.loc 1 420 15 view .LVU281
 1025 003e 052C     		cmp	r4, #5
 1026 0040 98B2     		uxth	r0, r3
 1027 0042 01D9     		bls	.L56
 1028              		.loc 1 420 34 is_stmt 1 discriminator 1 view .LVU282
 1029              		.loc 1 420 52 is_stmt 0 discriminator 1 view .LVU283
 1030 0044 0130     		adds	r0, r0, #1
 1031 0046 80B2     		uxth	r0, r0
 1032              	.L56:
 421:vs1003.c      ****          }
 422:vs1003.c      ****          default:
 423:vs1003.c      ****          {
 424:vs1003.c      ****            HEAD1 >>= 3;
 425:vs1003.c      ****            HEAD1 = HEAD1 & 0x03;
 426:vs1003.c      ****            if (HEAD1 == 3) HEAD1 = 1;else HEAD1 = 0;
 427:vs1003.c      ****            return bitrate[HEAD1][HEAD0 >> 12];
 428:vs1003.c      ****          }
 429:vs1003.c      ****       }
 430:vs1003.c      **** }
 1033              		.loc 1 430 1 view .LVU284
 1034 0048 10BD     		pop	{r4, pc}
 1035              	.LVL112:
 1036              	.L60:
 424:vs1003.c      ****            HEAD1 = HEAD1 & 0x03;
 1037              		.loc 1 424 12 is_stmt 1 view .LVU285
 425:vs1003.c      ****            if (HEAD1 == 3) HEAD1 = 1;else HEAD1 = 0;
 1038              		.loc 1 425 12 view .LVU286
 426:vs1003.c      ****            return bitrate[HEAD1][HEAD0 >> 12];
 1039              		.loc 1 426 12 view .LVU287
 427:vs1003.c      ****          }
 1040              		.loc 1 427 12 view .LVU288
 425:vs1003.c      ****            if (HEAD1 == 3) HEAD1 = 1;else HEAD1 = 0;
 1041              		.loc 1 425 18 is_stmt 0 view .LVU289
 1042 004a C0F3C103 		ubfx	r3, r0, #3, #2
 426:vs1003.c      ****            return bitrate[HEAD1][HEAD0 >> 12];
 1043              		.loc 1 426 15 view .LVU290
 1044 004e DA1E     		subs	r2, r3, #3
 1045 0050 5342     		rsbs	r3, r2, #0
 1046 0052 5341     		adcs	r3, r3, r2
 427:vs1003.c      ****          }
 1047              		.loc 1 427 33 view .LVU291
 1048 0054 1B01     		lsls	r3, r3, #4
 1049 0056 03EB1430 		add	r0, r3, r4, lsr #12
 1050              	.LVL113:
 427:vs1003.c      ****          }
 1051              		.loc 1 427 33 view .LVU292
 1052 005a 034B     		ldr	r3, .L61
 1053 005c 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 1054 0060 F2E7     		b	.L56
 1055              	.LVL114:
 1056              	.L58:
 414:vs1003.c      ****          case 0x4D54:
 1057              		.loc 1 414 19 view .LVU293
 1058 0062 0020     		movs	r0, #0
 1059              	.LVL115:
 414:vs1003.c      ****          case 0x4D54:
 1060              		.loc 1 414 19 view .LVU294
 1061 0064 F0E7     		b	.L56
 1062              	.L62:
 1063 0066 00BF     		.align	2
 1064              	.L61:
 1065 0068 00000000 		.word	.LANCHOR1
 1066              		.cfi_endproc
 1067              	.LFE37:
 1069              		.section	.rodata.vs1003_get_mp3info.str1.1,"aMS",%progbits,1
 1070              	.LC0:
 1071 0000 4269745F 		.ascii	"Bit_Rate 192Kbps \000"
 1071      52617465 
 1071      20313932 
 1071      4B627073 
 1071      2000
 1072              		.section	.text.vs1003_get_mp3info,"ax",%progbits
 1073              		.align	1
 1074              		.global	vs1003_get_mp3info
 1075              		.syntax unified
 1076              		.thumb
 1077              		.thumb_func
 1078              		.fpu softvfp
 1080              	vs1003_get_mp3info:
 1081              	.LFB38:
 431:vs1003.c      **** 
 432:vs1003.c      **** 
 433:vs1003.c      **** void vs1003_get_mp3info (void)
 434:vs1003.c      **** {
 1082              		.loc 1 434 1 is_stmt 1 view -0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 0
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 435:vs1003.c      ****       unsigned short temp = 0;
 1086              		.loc 1 435 7 view .LVU296
 1087              	.LVL116:
 436:vs1003.c      ****       unsigned char mp3_id,sample_rate,bit_rate;
 1088              		.loc 1 436 7 view .LVU297
 437:vs1003.c      ****       temp = vs1003_reg_read(SPI_HDAT1);
 1089              		.loc 1 437 7 view .LVU298
 434:vs1003.c      ****       unsigned short temp = 0;
 1090              		.loc 1 434 1 is_stmt 0 view .LVU299
 1091 0000 70B5     		push	{r4, r5, r6, lr}
 1092              		.cfi_def_cfa_offset 16
 1093              		.cfi_offset 4, -16
 1094              		.cfi_offset 5, -12
 1095              		.cfi_offset 6, -8
 1096              		.cfi_offset 14, -4
 1097              		.loc 1 437 14 view .LVU300
 1098 0002 0920     		movs	r0, #9
 1099 0004 FFF7FEFF 		bl	vs1003_reg_read
 1100              	.LVL117:
 438:vs1003.c      ****       mp3_id = (unsigned char)((temp & 0x0018) >> 3);
 1101              		.loc 1 438 7 is_stmt 1 view .LVU301
 1102              		.loc 1 438 16 is_stmt 0 view .LVU302
 1103 0008 C0F3C706 		ubfx	r6, r0, #3, #8
 1104              	.LVL118:
 439:vs1003.c      ****       temp = vs1003_reg_read(SPI_HDAT0);
 1105              		.loc 1 439 7 is_stmt 1 view .LVU303
 1106              		.loc 1 439 14 is_stmt 0 view .LVU304
 1107 000c 0820     		movs	r0, #8
 1108              	.LVL119:
 1109              		.loc 1 439 14 view .LVU305
 1110 000e FFF7FEFF 		bl	vs1003_reg_read
 1111              	.LVL120:
 1112 0012 0546     		mov	r5, r0
 1113              	.LVL121:
 440:vs1003.c      ****       sample_rate = (unsigned char)((temp & 0x0C00) >> 10);
 1114              		.loc 1 440 7 is_stmt 1 view .LVU306
 441:vs1003.c      ****       bit_rate = (unsigned char)((temp & 0xF000) >> 12);
 1115              		.loc 1 441 7 view .LVU307
 442:vs1003.c      ****       f_kbps = get_head_info();
 1116              		.loc 1 442 7 view .LVU308
 1117              		.loc 1 442 16 is_stmt 0 view .LVU309
 1118 0014 FFF7FEFF 		bl	get_head_info
 1119              	.LVL122:
 1120              		.loc 1 442 14 view .LVU310
 1121 0018 424C     		ldr	r4, .L115
 443:vs1003.c      ****       if (mp3_id == 0 || mp3_id == 1) {
 1122              		.loc 1 443 10 view .LVU311
 1123 001a B307     		lsls	r3, r6, #30
 442:vs1003.c      ****       f_kbps = get_head_info();
 1124              		.loc 1 442 14 view .LVU312
 1125 001c 2080     		strh	r0, [r4]	@ movhi
 1126              		.loc 1 443 7 is_stmt 1 view .LVU313
 1127              		.loc 1 443 10 is_stmt 0 view .LVU314
 1128 001e 16D5     		bpl	.L63
 438:vs1003.c      ****       temp = vs1003_reg_read(SPI_HDAT0);
 1129              		.loc 1 438 14 view .LVU315
 1130 0020 06F00306 		and	r6, r6, #3
 1131              	.LVL123:
 444:vs1003.c      ****          switch (sample_rate) {
 445:vs1003.c      ****             default:
 446:vs1003.c      ****             case 0:
 447:vs1003.c      ****               //lcd_printf(2,4,"Sample_Rate 11KHz  ");
 448:vs1003.c      ****               break;
 449:vs1003.c      ****             case 1:
 450:vs1003.c      ****               //lcd_printf(2,4,"Sample_Rate 12KHz  ");
 451:vs1003.c      ****               break;
 452:vs1003.c      ****             case 2:
 453:vs1003.c      ****               //lcd_printf(2,4,"Sample_Rate  8KHz  ");
 454:vs1003.c      ****               break;
 455:vs1003.c      ****          }
 456:vs1003.c      ****       } else if (mp3_id == 2) {
 1132              		.loc 1 456 14 is_stmt 1 view .LVU316
 1133              		.loc 1 456 17 is_stmt 0 view .LVU317
 1134 0024 022E     		cmp	r6, #2
 1135 0026 12D0     		beq	.L63
 457:vs1003.c      ****          switch(sample_rate) {
 458:vs1003.c      ****             default:
 459:vs1003.c      ****             case 0:
 460:vs1003.c      ****               //lcd_printf(2,4,"Sample_Rate 22KHz  ");
 461:vs1003.c      ****               break;
 462:vs1003.c      ****             case 1:
 463:vs1003.c      ****               //lcd_printf(2,4,"Sample_Rate 24KHz  ");
 464:vs1003.c      ****               break;
 465:vs1003.c      ****             case 2:
 466:vs1003.c      ****               //lcd_printf(2,4,"Sample_Rate 16KHz  ");
 467:vs1003.c      ****               break;
 468:vs1003.c      ****          }
 469:vs1003.c      ****       } else if (mp3_id == 3) {
 1136              		.loc 1 469 17 view .LVU318
 1137 0028 032E     		cmp	r6, #3
 441:vs1003.c      ****       f_kbps = get_head_info();
 1138              		.loc 1 441 16 view .LVU319
 1139 002a C5F30733 		ubfx	r3, r5, #12, #8
 1140              		.loc 1 469 14 is_stmt 1 view .LVU320
 1141              		.loc 1 469 17 is_stmt 0 view .LVU321
 1142 002e 27D1     		bne	.L67
 470:vs1003.c      ****          switch(sample_rate) {
 1143              		.loc 1 470 10 is_stmt 1 view .LVU322
 471:vs1003.c      ****             default:
 472:vs1003.c      ****             case 0:
 473:vs1003.c      ****               //lcd_printf(2,4,"Sample_Rate 44KHz  ");
 474:vs1003.c      ****               break;
 475:vs1003.c      ****             case 1:
 476:vs1003.c      ****               //lcd_printf(2,4,"Sample_Rate 48KHz  ");
 477:vs1003.c      ****               break;
 478:vs1003.c      ****             case 2:
 479:vs1003.c      ****               //lcd_printf(2,4,"Sample_Rate 32KHz  ");
 480:vs1003.c      ****               break;
 481:vs1003.c      ****          }
 482:vs1003.c      ****          switch (bit_rate) {
 1144              		.loc 1 482 10 view .LVU323
 1145 0030 023B     		subs	r3, r3, #2
 1146 0032 0C2B     		cmp	r3, #12
 1147 0034 0BD8     		bhi	.L63
 1148 0036 DFE803F0 		tbb	[pc, r3]
 1149              	.L69:
 1150 003a 51       		.byte	(.L91-.L69)/2
 1151 003b 55       		.byte	(.L90-.L69)/2
 1152 003c 59       		.byte	(.L89-.L69)/2
 1153 003d 5D       		.byte	(.L88-.L69)/2
 1154 003e 61       		.byte	(.L87-.L69)/2
 1155 003f 65       		.byte	(.L86-.L69)/2
 1156 0040 69       		.byte	(.L85-.L69)/2
 1157 0041 07       		.byte	(.L74-.L69)/2
 1158 0042 71       		.byte	(.L82-.L69)/2
 1159 0043 0B       		.byte	(.L72-.L69)/2
 1160 0044 15       		.byte	(.L71-.L69)/2
 1161 0045 19       		.byte	(.L70-.L69)/2
 1162 0046 1E       		.byte	(.L68-.L69)/2
 1163 0047 00       		.p2align 1
 1164              	.L74:
 483:vs1003.c      ****             case 2:
 484:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 40Kbps ");
 485:vs1003.c      ****               if (f_kbps == 0) f_kbps = 40;
 486:vs1003.c      ****               break;
 487:vs1003.c      ****             case 3:
 488:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 48Kbps ");
 489:vs1003.c      ****               if (f_kbps == 0) f_kbps = 48;
 490:vs1003.c      ****               break;
 491:vs1003.c      ****             case 4:
 492:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 56Kbps ");
 493:vs1003.c      ****               if (f_kbps == 0) f_kbps = 56;
 494:vs1003.c      ****               break;
 495:vs1003.c      ****             case 5:
 496:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 64Kbps ");
 497:vs1003.c      ****               if (f_kbps == 0) f_kbps = 64;
 498:vs1003.c      ****               break;
 499:vs1003.c      ****             case 6:
 500:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 80Kbps ");
 501:vs1003.c      ****               if (f_kbps == 0) f_kbps = 80;
 502:vs1003.c      ****               break;
 503:vs1003.c      ****             case 7:
 504:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 96Kbps ");
 505:vs1003.c      ****               if (f_kbps == 0) f_kbps = 96;
 506:vs1003.c      ****               break;
 507:vs1003.c      ****             case 8:
 508:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 112Kbps ");
 509:vs1003.c      ****               if (f_kbps == 0) f_kbps = 112;
 510:vs1003.c      ****               break;
 511:vs1003.c      ****             case 9:
 512:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 128Kbps ");
 513:vs1003.c      ****               if (f_kbps == 0) f_kbps = 128;
 1165              		.loc 1 513 15 view .LVU324
 1166              		.loc 1 513 18 is_stmt 0 view .LVU325
 1167 0048 08B9     		cbnz	r0, .L63
 1168              		.loc 1 513 32 is_stmt 1 discriminator 1 view .LVU326
 1169              		.loc 1 513 39 is_stmt 0 discriminator 1 view .LVU327
 1170 004a 8023     		movs	r3, #128
 1171              	.L98:
 514:vs1003.c      ****               break;
 515:vs1003.c      ****             case 10:
 516:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 160Kbps ");
 517:vs1003.c      ****               if (f_kbps == 0) f_kbps = 160;
 518:vs1003.c      ****               break;
 519:vs1003.c      ****             case 11:
 520:vs1003.c      ****               lcd_printf(2,5,"Bit_Rate 192Kbps ");
 521:vs1003.c      ****               if (f_kbps == 0) f_kbps = 192;
 522:vs1003.c      ****               break;
 523:vs1003.c      ****             case 12:
 524:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 224Kbps ");
 525:vs1003.c      ****               if (f_kbps == 0) f_kbps = 224;
 526:vs1003.c      ****               break;
 527:vs1003.c      ****             case 13:
 528:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 256Kbps ");
 529:vs1003.c      ****               if (f_kbps == 0) f_kbps = 256;
 530:vs1003.c      ****               break;
 531:vs1003.c      ****             case 14:
 532:vs1003.c      ****               //lcd_printf(2,5,"Bit_Rate 320Kbps ");
 533:vs1003.c      ****               if (f_kbps == 0) f_kbps = 320;
 534:vs1003.c      ****               break;
 535:vs1003.c      ****          }
 536:vs1003.c      ****       } else if (mp3_id == 0 || mp3_id == 1 || mp3_id == 2) {
 537:vs1003.c      ****          switch (bit_rate) {
 538:vs1003.c      ****              case 1:
 539:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 8Kbps ");
 540:vs1003.c      ****                if (f_kbps == 0) f_kbps = 8;
 541:vs1003.c      ****                break;
 542:vs1003.c      ****              case 2:
 543:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 16Kbps ");
 544:vs1003.c      ****                if (f_kbps == 0) f_kbps = 16;
 545:vs1003.c      ****                break;
 546:vs1003.c      ****              case 3:
 547:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 24Kbps ");
 548:vs1003.c      ****                if (f_kbps == 0) f_kbps = 24;
 549:vs1003.c      ****                break;
 550:vs1003.c      ****              case 5:
 551:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 40Kbps ");
 552:vs1003.c      ****                if (f_kbps == 0) f_kbps = 40;
 553:vs1003.c      ****                break;
 554:vs1003.c      ****              case 6:
 555:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 48Kbps ");
 556:vs1003.c      ****                if (f_kbps == 0) f_kbps = 48;
 557:vs1003.c      ****                break;
 558:vs1003.c      ****              case 7:
 559:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 56Kbps ");
 560:vs1003.c      ****                if (f_kbps == 0) f_kbps = 56;
 561:vs1003.c      ****                break;
 562:vs1003.c      ****              case 8:
 563:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 64Kbps ");
 564:vs1003.c      ****                if (f_kbps == 0) f_kbps = 64;
 565:vs1003.c      ****                break;
 566:vs1003.c      ****              case 9:
 567:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 80Kbps ");
 568:vs1003.c      ****                if (f_kbps == 0) f_kbps = 80;
 569:vs1003.c      ****                break;
 570:vs1003.c      ****              case 10:
 571:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 96Kbps ");
 572:vs1003.c      ****                if (f_kbps == 0) f_kbps = 96;
 573:vs1003.c      ****                break;
 574:vs1003.c      ****              case 11:
 575:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 112Kbps ");
 576:vs1003.c      ****                if (f_kbps == 0) f_kbps = 112;
 577:vs1003.c      ****                break;
 578:vs1003.c      ****              case 12:
 579:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 128Kbps ");
 580:vs1003.c      ****                //if (f_kbps == 0) f_kbps = 128;
 581:vs1003.c      ****                break;
 582:vs1003.c      ****              case 13:
 583:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 144Kbps ");
 584:vs1003.c      ****                if (f_kbps == 0) f_kbps = 144;
 585:vs1003.c      ****                break;
 586:vs1003.c      ****              case 14:
 587:vs1003.c      ****                //lcd_printf(2,5,"Bit_Rate 160Kbps ");
 588:vs1003.c      ****                if (f_kbps == 0) f_kbps = 160;
 1172              		.loc 1 588 40 discriminator 1 view .LVU328
 1173 004c 2380     		strh	r3, [r4]	@ movhi
 1174              	.L63:
 589:vs1003.c      ****                break;
 590:vs1003.c      ****          }
 591:vs1003.c      ****       }
 592:vs1003.c      **** }
 1175              		.loc 1 592 1 view .LVU329
 1176 004e 70BD     		pop	{r4, r5, r6, pc}
 1177              	.LVL124:
 1178              	.L72:
 520:vs1003.c      ****               if (f_kbps == 0) f_kbps = 192;
 1179              		.loc 1 520 15 is_stmt 1 view .LVU330
 1180 0050 0521     		movs	r1, #5
 1181 0052 0220     		movs	r0, #2
 1182 0054 344A     		ldr	r2, .L115+4
 1183 0056 FFF7FEFF 		bl	lcd_printf
 1184              	.LVL125:
 521:vs1003.c      ****               break;
 1185              		.loc 1 521 15 view .LVU331
 521:vs1003.c      ****               break;
 1186              		.loc 1 521 18 is_stmt 0 view .LVU332
 1187 005a 2388     		ldrh	r3, [r4]
 1188 005c 002B     		cmp	r3, #0
 1189 005e F6D1     		bne	.L63
 521:vs1003.c      ****               break;
 1190              		.loc 1 521 32 is_stmt 1 discriminator 1 view .LVU333
 521:vs1003.c      ****               break;
 1191              		.loc 1 521 39 is_stmt 0 discriminator 1 view .LVU334
 1192 0060 C023     		movs	r3, #192
 1193 0062 F3E7     		b	.L98
 1194              	.L71:
 525:vs1003.c      ****               break;
 1195              		.loc 1 525 15 is_stmt 1 view .LVU335
 525:vs1003.c      ****               break;
 1196              		.loc 1 525 18 is_stmt 0 view .LVU336
 1197 0064 0028     		cmp	r0, #0
 1198 0066 F2D1     		bne	.L63
 525:vs1003.c      ****               break;
 1199              		.loc 1 525 32 is_stmt 1 discriminator 1 view .LVU337
 525:vs1003.c      ****               break;
 1200              		.loc 1 525 39 is_stmt 0 discriminator 1 view .LVU338
 1201 0068 E023     		movs	r3, #224
 1202 006a EFE7     		b	.L98
 1203              	.L70:
 529:vs1003.c      ****               break;
 1204              		.loc 1 529 15 is_stmt 1 view .LVU339
 529:vs1003.c      ****               break;
 1205              		.loc 1 529 18 is_stmt 0 view .LVU340
 1206 006c 0028     		cmp	r0, #0
 1207 006e EED1     		bne	.L63
 529:vs1003.c      ****               break;
 1208              		.loc 1 529 32 is_stmt 1 discriminator 1 view .LVU341
 529:vs1003.c      ****               break;
 1209              		.loc 1 529 39 is_stmt 0 discriminator 1 view .LVU342
 1210 0070 4FF48073 		mov	r3, #256
 1211 0074 EAE7     		b	.L98
 1212              	.L68:
 533:vs1003.c      ****               break;
 1213              		.loc 1 533 15 is_stmt 1 view .LVU343
 533:vs1003.c      ****               break;
 1214              		.loc 1 533 18 is_stmt 0 view .LVU344
 1215 0076 0028     		cmp	r0, #0
 1216 0078 E9D1     		bne	.L63
 533:vs1003.c      ****               break;
 1217              		.loc 1 533 32 is_stmt 1 discriminator 1 view .LVU345
 533:vs1003.c      ****               break;
 1218              		.loc 1 533 39 is_stmt 0 discriminator 1 view .LVU346
 1219 007a 4FF4A073 		mov	r3, #320
 1220 007e E5E7     		b	.L98
 1221              	.L67:
 536:vs1003.c      ****          switch (bit_rate) {
 1222              		.loc 1 536 14 is_stmt 1 view .LVU347
 537:vs1003.c      ****              case 1:
 1223              		.loc 1 537 10 view .LVU348
 1224 0080 013B     		subs	r3, r3, #1
 1225 0082 0D2B     		cmp	r3, #13
 1226 0084 E3D8     		bhi	.L63
 1227 0086 01A2     		adr	r2, .L83
 1228 0088 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1229              		.p2align 2
 1230              	.L83:
 1231 008c C5000000 		.word	.L94+1
 1232 0090 CD000000 		.word	.L93+1
 1233 0094 D5000000 		.word	.L92+1
 1234 0098 4F000000 		.word	.L63+1
 1235 009c DD000000 		.word	.L91+1
 1236 00a0 E5000000 		.word	.L90+1
 1237 00a4 ED000000 		.word	.L89+1
 1238 00a8 F5000000 		.word	.L88+1
 1239 00ac FD000000 		.word	.L87+1
 1240 00b0 05010000 		.word	.L86+1
 1241 00b4 0D010000 		.word	.L85+1
 1242 00b8 4F000000 		.word	.L63+1
 1243 00bc 15010000 		.word	.L84+1
 1244 00c0 1D010000 		.word	.L82+1
 1245              		.p2align 1
 1246              	.L94:
 540:vs1003.c      ****                break;
 1247              		.loc 1 540 16 view .LVU349
 540:vs1003.c      ****                break;
 1248              		.loc 1 540 19 is_stmt 0 view .LVU350
 1249 00c4 0028     		cmp	r0, #0
 1250 00c6 C2D1     		bne	.L63
 540:vs1003.c      ****                break;
 1251              		.loc 1 540 33 is_stmt 1 discriminator 1 view .LVU351
 540:vs1003.c      ****                break;
 1252              		.loc 1 540 40 is_stmt 0 discriminator 1 view .LVU352
 1253 00c8 0823     		movs	r3, #8
 1254 00ca BFE7     		b	.L98
 1255              	.L93:
 544:vs1003.c      ****                break;
 1256              		.loc 1 544 16 is_stmt 1 view .LVU353
 544:vs1003.c      ****                break;
 1257              		.loc 1 544 19 is_stmt 0 view .LVU354
 1258 00cc 0028     		cmp	r0, #0
 1259 00ce BED1     		bne	.L63
 544:vs1003.c      ****                break;
 1260              		.loc 1 544 33 is_stmt 1 discriminator 1 view .LVU355
 544:vs1003.c      ****                break;
 1261              		.loc 1 544 40 is_stmt 0 discriminator 1 view .LVU356
 1262 00d0 1023     		movs	r3, #16
 1263 00d2 BBE7     		b	.L98
 1264              	.L92:
 548:vs1003.c      ****                break;
 1265              		.loc 1 548 16 is_stmt 1 view .LVU357
 548:vs1003.c      ****                break;
 1266              		.loc 1 548 19 is_stmt 0 view .LVU358
 1267 00d4 0028     		cmp	r0, #0
 1268 00d6 BAD1     		bne	.L63
 548:vs1003.c      ****                break;
 1269              		.loc 1 548 33 is_stmt 1 discriminator 1 view .LVU359
 548:vs1003.c      ****                break;
 1270              		.loc 1 548 40 is_stmt 0 discriminator 1 view .LVU360
 1271 00d8 1823     		movs	r3, #24
 1272 00da B7E7     		b	.L98
 1273              	.L91:
 552:vs1003.c      ****                break;
 1274              		.loc 1 552 16 is_stmt 1 view .LVU361
 552:vs1003.c      ****                break;
 1275              		.loc 1 552 19 is_stmt 0 view .LVU362
 1276 00dc 0028     		cmp	r0, #0
 1277 00de B6D1     		bne	.L63
 552:vs1003.c      ****                break;
 1278              		.loc 1 552 33 is_stmt 1 discriminator 1 view .LVU363
 552:vs1003.c      ****                break;
 1279              		.loc 1 552 40 is_stmt 0 discriminator 1 view .LVU364
 1280 00e0 2823     		movs	r3, #40
 1281 00e2 B3E7     		b	.L98
 1282              	.L90:
 556:vs1003.c      ****                break;
 1283              		.loc 1 556 16 is_stmt 1 view .LVU365
 556:vs1003.c      ****                break;
 1284              		.loc 1 556 19 is_stmt 0 view .LVU366
 1285 00e4 0028     		cmp	r0, #0
 1286 00e6 B2D1     		bne	.L63
 556:vs1003.c      ****                break;
 1287              		.loc 1 556 33 is_stmt 1 discriminator 1 view .LVU367
 556:vs1003.c      ****                break;
 1288              		.loc 1 556 40 is_stmt 0 discriminator 1 view .LVU368
 1289 00e8 3023     		movs	r3, #48
 1290 00ea AFE7     		b	.L98
 1291              	.L89:
 560:vs1003.c      ****                break;
 1292              		.loc 1 560 16 is_stmt 1 view .LVU369
 560:vs1003.c      ****                break;
 1293              		.loc 1 560 19 is_stmt 0 view .LVU370
 1294 00ec 0028     		cmp	r0, #0
 1295 00ee AED1     		bne	.L63
 560:vs1003.c      ****                break;
 1296              		.loc 1 560 33 is_stmt 1 discriminator 1 view .LVU371
 560:vs1003.c      ****                break;
 1297              		.loc 1 560 40 is_stmt 0 discriminator 1 view .LVU372
 1298 00f0 3823     		movs	r3, #56
 1299 00f2 ABE7     		b	.L98
 1300              	.L88:
 564:vs1003.c      ****                break;
 1301              		.loc 1 564 16 is_stmt 1 view .LVU373
 564:vs1003.c      ****                break;
 1302              		.loc 1 564 19 is_stmt 0 view .LVU374
 1303 00f4 0028     		cmp	r0, #0
 1304 00f6 AAD1     		bne	.L63
 564:vs1003.c      ****                break;
 1305              		.loc 1 564 33 is_stmt 1 discriminator 1 view .LVU375
 564:vs1003.c      ****                break;
 1306              		.loc 1 564 40 is_stmt 0 discriminator 1 view .LVU376
 1307 00f8 4023     		movs	r3, #64
 1308 00fa A7E7     		b	.L98
 1309              	.L87:
 568:vs1003.c      ****                break;
 1310              		.loc 1 568 16 is_stmt 1 view .LVU377
 568:vs1003.c      ****                break;
 1311              		.loc 1 568 19 is_stmt 0 view .LVU378
 1312 00fc 0028     		cmp	r0, #0
 1313 00fe A6D1     		bne	.L63
 568:vs1003.c      ****                break;
 1314              		.loc 1 568 33 is_stmt 1 discriminator 1 view .LVU379
 568:vs1003.c      ****                break;
 1315              		.loc 1 568 40 is_stmt 0 discriminator 1 view .LVU380
 1316 0100 5023     		movs	r3, #80
 1317 0102 A3E7     		b	.L98
 1318              	.L86:
 572:vs1003.c      ****                break;
 1319              		.loc 1 572 16 is_stmt 1 view .LVU381
 572:vs1003.c      ****                break;
 1320              		.loc 1 572 19 is_stmt 0 view .LVU382
 1321 0104 0028     		cmp	r0, #0
 1322 0106 A2D1     		bne	.L63
 572:vs1003.c      ****                break;
 1323              		.loc 1 572 33 is_stmt 1 discriminator 1 view .LVU383
 572:vs1003.c      ****                break;
 1324              		.loc 1 572 40 is_stmt 0 discriminator 1 view .LVU384
 1325 0108 6023     		movs	r3, #96
 1326 010a 9FE7     		b	.L98
 1327              	.L85:
 576:vs1003.c      ****                break;
 1328              		.loc 1 576 16 is_stmt 1 view .LVU385
 576:vs1003.c      ****                break;
 1329              		.loc 1 576 19 is_stmt 0 view .LVU386
 1330 010c 0028     		cmp	r0, #0
 1331 010e 9ED1     		bne	.L63
 576:vs1003.c      ****                break;
 1332              		.loc 1 576 33 is_stmt 1 discriminator 1 view .LVU387
 576:vs1003.c      ****                break;
 1333              		.loc 1 576 40 is_stmt 0 discriminator 1 view .LVU388
 1334 0110 7023     		movs	r3, #112
 1335 0112 9BE7     		b	.L98
 1336              	.L84:
 584:vs1003.c      ****                break;
 1337              		.loc 1 584 16 is_stmt 1 view .LVU389
 584:vs1003.c      ****                break;
 1338              		.loc 1 584 19 is_stmt 0 view .LVU390
 1339 0114 0028     		cmp	r0, #0
 1340 0116 9AD1     		bne	.L63
 584:vs1003.c      ****                break;
 1341              		.loc 1 584 33 is_stmt 1 discriminator 1 view .LVU391
 584:vs1003.c      ****                break;
 1342              		.loc 1 584 40 is_stmt 0 discriminator 1 view .LVU392
 1343 0118 9023     		movs	r3, #144
 1344 011a 97E7     		b	.L98
 1345              	.L82:
 588:vs1003.c      ****                break;
 1346              		.loc 1 588 16 is_stmt 1 view .LVU393
 588:vs1003.c      ****                break;
 1347              		.loc 1 588 19 is_stmt 0 view .LVU394
 1348 011c 0028     		cmp	r0, #0
 1349 011e 96D1     		bne	.L63
 588:vs1003.c      ****                break;
 1350              		.loc 1 588 33 is_stmt 1 discriminator 1 view .LVU395
 588:vs1003.c      ****                break;
 1351              		.loc 1 588 40 is_stmt 0 discriminator 1 view .LVU396
 1352 0120 A023     		movs	r3, #160
 1353 0122 93E7     		b	.L98
 1354              	.L116:
 1355              		.align	2
 1356              	.L115:
 1357 0124 00000000 		.word	f_kbps
 1358 0128 00000000 		.word	.LC0
 1359              		.cfi_endproc
 1360              	.LFE38:
 1362              		.section	.text.get_decode_time,"ax",%progbits
 1363              		.align	1
 1364              		.global	get_decode_time
 1365              		.syntax unified
 1366              		.thumb
 1367              		.thumb_func
 1368              		.fpu softvfp
 1370              	get_decode_time:
 1371              	.LFB39:
 593:vs1003.c      **** 
 594:vs1003.c      **** 
 595:vs1003.c      **** unsigned short get_decode_time (void)
 596:vs1003.c      **** {
 1372              		.loc 1 596 1 is_stmt 1 view -0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 0
 1375              		@ frame_needed = 0, uses_anonymous_args = 0
 1376              		@ link register save eliminated.
 597:vs1003.c      ****       return vs1003_reg_read(SPI_DECODE_TIME);
 1377              		.loc 1 597 7 view .LVU398
 1378              		.loc 1 597 14 is_stmt 0 view .LVU399
 1379 0000 0420     		movs	r0, #4
 1380 0002 FFF7FEBF 		b	vs1003_reg_read
 1381              	.LVL126:
 1382              		.cfi_endproc
 1383              	.LFE39:
 1385              		.section	.text.load_patch,"ax",%progbits
 1386              		.align	1
 1387              		.global	load_patch
 1388              		.syntax unified
 1389              		.thumb
 1390              		.thumb_func
 1391              		.fpu softvfp
 1393              	load_patch:
 1394              	.LFB40:
 598:vs1003.c      **** }
 599:vs1003.c      **** 
 600:vs1003.c      **** 
 601:vs1003.c      **** void load_patch (void)
 602:vs1003.c      **** {
 1395              		.loc 1 602 1 is_stmt 1 view -0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 603:vs1003.c      ****       unsigned short idx;
 1399              		.loc 1 603 7 view .LVU401
 604:vs1003.c      ****       for (idx=0;idx<943;idx++) vs1003_cmd_write(atab[idx],dtab[idx]);
 1400              		.loc 1 604 7 view .LVU402
 1401              	.LVL127:
 1402              		.loc 1 604 18 view .LVU403
 602:vs1003.c      ****       unsigned short idx;
 1403              		.loc 1 602 1 is_stmt 0 view .LVU404
 1404 0000 70B5     		push	{r4, r5, r6, lr}
 1405              		.cfi_def_cfa_offset 16
 1406              		.cfi_offset 4, -16
 1407              		.cfi_offset 5, -12
 1408              		.cfi_offset 6, -8
 1409              		.cfi_offset 14, -4
 602:vs1003.c      ****       unsigned short idx;
 1410              		.loc 1 602 1 view .LVU405
 1411 0002 40F2AF34 		movw	r4, #943
 1412 0006 084D     		ldr	r5, .L121
 1413 0008 084E     		ldr	r6, .L121+4
 1414              	.LVL128:
 1415              	.L119:
 1416              		.loc 1 604 33 is_stmt 1 discriminator 3 view .LVU406
 1417 000a 013C     		subs	r4, r4, #1
 1418 000c 36F8021B 		ldrh	r1, [r6], #2
 1419 0010 15F8010B 		ldrb	r0, [r5], #1	@ zero_extendqisi2
 1420              	.LVL129:
 1421              		.loc 1 604 33 is_stmt 0 discriminator 3 view .LVU407
 1422 0014 A4B2     		uxth	r4, r4
 1423 0016 FFF7FEFF 		bl	vs1003_cmd_write
 1424              	.LVL130:
 1425              		.loc 1 604 26 is_stmt 1 discriminator 3 view .LVU408
 1426              		.loc 1 604 18 discriminator 3 view .LVU409
 1427              		.loc 1 604 7 is_stmt 0 discriminator 3 view .LVU410
 1428 001a 002C     		cmp	r4, #0
 1429 001c F5D1     		bne	.L119
 605:vs1003.c      ****       delay_ms(10);
 1430              		.loc 1 605 7 is_stmt 1 view .LVU411
 1431              	.LVL131:
 1432              	.LBB48:
 1433              	.LBI48:
 241:vs1003.c      **** {
 1434              		.loc 1 241 6 view .LVU412
 1435              	.LBB49:
 243:vs1003.c      **** }
 1436              		.loc 1 243 7 view .LVU413
 1437 001e 0A20     		movs	r0, #10
 1438              	.LBE49:
 1439              	.LBE48:
 606:vs1003.c      **** }
 1440              		.loc 1 606 1 is_stmt 0 view .LVU414
 1441 0020 BDE87040 		pop	{r4, r5, r6, lr}
 1442              		.cfi_restore 14
 1443              		.cfi_restore 6
 1444              		.cfi_restore 5
 1445              		.cfi_restore 4
 1446              		.cfi_def_cfa_offset 0
 1447              	.LVL132:
 1448              	.LBB51:
 1449              	.LBB50:
 243:vs1003.c      **** }
 1450              		.loc 1 243 7 view .LVU415
 1451 0024 FFF7FEBF 		b	wait_ms
 1452              	.LVL133:
 1453              	.L122:
 1454              		.align	2
 1455              	.L121:
 1456 0028 00000000 		.word	.LANCHOR2
 1457 002c 00000000 		.word	.LANCHOR3
 1458              	.LBE50:
 1459              	.LBE51:
 1460              		.cfi_endproc
 1461              	.LFE40:
 1463              		.section	.text.get_spec,"ax",%progbits
 1464              		.align	1
 1465              		.global	get_spec
 1466              		.syntax unified
 1467              		.thumb
 1468              		.thumb_func
 1469              		.fpu softvfp
 1471              	get_spec:
 1472              	.LVL134:
 1473              	.LFB41:
 607:vs1003.c      **** 
 608:vs1003.c      **** 
 609:vs1003.c      **** void get_spec (unsigned char *p)
 610:vs1003.c      **** {
 1474              		.loc 1 610 1 is_stmt 1 view -0
 1475              		.cfi_startproc
 1476              		@ args = 0, pretend = 0, frame = 0
 1477              		@ frame_needed = 0, uses_anonymous_args = 0
 611:vs1003.c      ****       unsigned char byteIndex = 0;
 1478              		.loc 1 611 7 view .LVU417
 612:vs1003.c      ****       unsigned char temp;
 1479              		.loc 1 612 7 view .LVU418
 613:vs1003.c      ****       vs1003_cmd_write(SPI_WRAMADDR,0x1804);
 1480              		.loc 1 613 7 view .LVU419
 610:vs1003.c      ****       unsigned char byteIndex = 0;
 1481              		.loc 1 610 1 is_stmt 0 view .LVU420
 1482 0000 38B5     		push	{r3, r4, r5, lr}
 1483              		.cfi_def_cfa_offset 16
 1484              		.cfi_offset 3, -16
 1485              		.cfi_offset 4, -12
 1486              		.cfi_offset 5, -8
 1487              		.cfi_offset 14, -4
 1488              		.loc 1 613 7 view .LVU421
 1489 0002 41F60401 		movw	r1, #6148
 610:vs1003.c      ****       unsigned char byteIndex = 0;
 1490              		.loc 1 610 1 view .LVU422
 1491 0006 0446     		mov	r4, r0
 1492              		.loc 1 613 7 view .LVU423
 1493 0008 0720     		movs	r0, #7
 1494              	.LVL135:
 1495              		.loc 1 613 7 view .LVU424
 1496 000a FFF7FEFF 		bl	vs1003_cmd_write
 1497              	.LVL136:
 614:vs1003.c      ****       for (byteIndex=0;byteIndex<14;byteIndex++) {
 1498              		.loc 1 614 7 is_stmt 1 view .LVU425
 1499              		.loc 1 614 24 view .LVU426
 1500 000e 04F10E05 		add	r5, r4, #14
 1501              	.L124:
 615:vs1003.c      **** 	  temp = vs1003_reg_read(SPI_WRAM) & 0x63;
 1502              		.loc 1 615 4 discriminator 3 view .LVU427
 1503              		.loc 1 615 11 is_stmt 0 discriminator 3 view .LVU428
 1504 0012 0620     		movs	r0, #6
 1505 0014 FFF7FEFF 		bl	vs1003_reg_read
 1506              	.LVL137:
 616:vs1003.c      **** 	  *p++ = temp;
 1507              		.loc 1 616 4 is_stmt 1 discriminator 3 view .LVU429
 615:vs1003.c      **** 	  temp = vs1003_reg_read(SPI_WRAM) & 0x63;
 1508              		.loc 1 615 9 is_stmt 0 discriminator 3 view .LVU430
 1509 0018 00F06300 		and	r0, r0, #99
 1510              	.LVL138:
 1511              		.loc 1 616 9 discriminator 3 view .LVU431
 1512 001c 04F8010B 		strb	r0, [r4], #1
 1513              	.LVL139:
 614:vs1003.c      ****       for (byteIndex=0;byteIndex<14;byteIndex++) {
 1514              		.loc 1 614 37 is_stmt 1 discriminator 3 view .LVU432
 614:vs1003.c      ****       for (byteIndex=0;byteIndex<14;byteIndex++) {
 1515              		.loc 1 614 24 discriminator 3 view .LVU433
 614:vs1003.c      ****       for (byteIndex=0;byteIndex<14;byteIndex++) {
 1516              		.loc 1 614 7 is_stmt 0 discriminator 3 view .LVU434
 1517 0020 A542     		cmp	r5, r4
 1518 0022 F6D1     		bne	.L124
 617:vs1003.c      ****       }
 618:vs1003.c      **** }
 1519              		.loc 1 618 1 view .LVU435
 1520 0024 38BD     		pop	{r3, r4, r5, pc}
 1521              		.loc 1 618 1 view .LVU436
 1522              		.cfi_endproc
 1523              	.LFE41:
 1525              		.section	.text.set_vs1003,"ax",%progbits
 1526              		.align	1
 1527              		.global	set_vs1003
 1528              		.syntax unified
 1529              		.thumb
 1530              		.thumb_func
 1531              		.fpu softvfp
 1533              	set_vs1003:
 1534              	.LFB42:
 619:vs1003.c      **** 
 620:vs1003.c      **** 
 621:vs1003.c      **** void set_vs1003 (void)
 622:vs1003.c      **** {
 1535              		.loc 1 622 1 is_stmt 1 view -0
 1536              		.cfi_startproc
 1537              		@ args = 0, pretend = 0, frame = 0
 1538              		@ frame_needed = 0, uses_anonymous_args = 0
 623:vs1003.c      ****       unsigned char t;
 1539              		.loc 1 623 7 view .LVU438
 624:vs1003.c      ****       unsigned short bass = 0;
 1540              		.loc 1 624 7 view .LVU439
 1541              	.LVL140:
 625:vs1003.c      ****       unsigned short volt = 0;
 1542              		.loc 1 625 7 view .LVU440
 626:vs1003.c      ****       unsigned char vset = 0;
 1543              		.loc 1 626 7 view .LVU441
 627:vs1003.c      ****       vset = 255 - vs1003_ram[4];
 1544              		.loc 1 627 7 view .LVU442
 628:vs1003.c      ****       volt = vset;
 1545              		.loc 1 628 7 view .LVU443
 622:vs1003.c      ****       unsigned char t;
 1546              		.loc 1 622 1 is_stmt 0 view .LVU444
 1547 0000 10B5     		push	{r4, lr}
 1548              		.cfi_def_cfa_offset 8
 1549              		.cfi_offset 4, -8
 1550              		.cfi_offset 14, -4
 627:vs1003.c      ****       vset = 255 - vs1003_ram[4];
 1551              		.loc 1 627 30 view .LVU445
 1552 0002 0D4A     		ldr	r2, .L129
 629:vs1003.c      ****       volt <<= 8;
 630:vs1003.c      ****       volt += vset;
 1553              		.loc 1 630 12 view .LVU446
 1554 0004 0423     		movs	r3, #4
 627:vs1003.c      ****       volt = vset;
 1555              		.loc 1 627 12 view .LVU447
 1556 0006 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 1557 0008 C943     		mvns	r1, r1
 628:vs1003.c      ****       volt <<= 8;
 1558              		.loc 1 628 12 view .LVU448
 1559 000a C9B2     		uxtb	r1, r1
 1560              	.LVL141:
 629:vs1003.c      ****       volt <<= 8;
 1561              		.loc 1 629 7 is_stmt 1 view .LVU449
 1562              		.loc 1 630 7 view .LVU450
 1563              		.loc 1 630 12 is_stmt 0 view .LVU451
 1564 000c 01EB0121 		add	r1, r1, r1, lsl #8
 1565              	.LVL142:
 1566              		.loc 1 630 12 view .LVU452
 1567 0010 8CB2     		uxth	r4, r1
 1568              	.LVL143:
 631:vs1003.c      ****       for (t=0;t<4;t++) {
 1569              		.loc 1 631 7 is_stmt 1 view .LVU453
 1570              		.loc 1 631 16 view .LVU454
 624:vs1003.c      ****       unsigned short volt = 0;
 1571              		.loc 1 624 22 is_stmt 0 view .LVU455
 1572 0012 0021     		movs	r1, #0
 1573              	.LVL144:
 1574              	.L127:
 632:vs1003.c      ****           bass <<= 4;
 1575              		.loc 1 632 11 is_stmt 1 discriminator 3 view .LVU456
 633:vs1003.c      ****           bass += vs1003_ram[t];
 1576              		.loc 1 633 11 discriminator 3 view .LVU457
 1577              		.loc 1 633 29 is_stmt 0 discriminator 3 view .LVU458
 1578 0014 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 1579              	.LVL145:
 1580              		.loc 1 633 29 discriminator 3 view .LVU459
 1581 0018 013B     		subs	r3, r3, #1
 1582              		.loc 1 633 16 discriminator 3 view .LVU460
 1583 001a 00EB0111 		add	r1, r0, r1, lsl #4
 1584              	.LVL146:
 631:vs1003.c      ****           bass <<= 4;
 1585              		.loc 1 631 7 discriminator 3 view .LVU461
 1586 001e 13F0FF03 		ands	r3, r3, #255
 1587              		.loc 1 633 16 discriminator 3 view .LVU462
 1588 0022 89B2     		uxth	r1, r1
 1589              	.LVL147:
 631:vs1003.c      ****           bass <<= 4;
 1590              		.loc 1 631 20 is_stmt 1 discriminator 3 view .LVU463
 631:vs1003.c      ****           bass <<= 4;
 1591              		.loc 1 631 16 discriminator 3 view .LVU464
 631:vs1003.c      ****           bass <<= 4;
 1592              		.loc 1 631 7 is_stmt 0 discriminator 3 view .LVU465
 1593 0024 F6D1     		bne	.L127
 634:vs1003.c      ****       }
 635:vs1003.c      ****       vs1003_cmd_write(SPI_BASS,bass);
 1594              		.loc 1 635 7 is_stmt 1 view .LVU466
 1595 0026 0220     		movs	r0, #2
 1596 0028 FFF7FEFF 		bl	vs1003_cmd_write
 1597              	.LVL148:
 636:vs1003.c      ****       vs1003_cmd_write(SPI_VOL,volt);
 1598              		.loc 1 636 7 view .LVU467
 1599 002c 2146     		mov	r1, r4
 637:vs1003.c      **** }
 1600              		.loc 1 637 1 is_stmt 0 view .LVU468
 1601 002e BDE81040 		pop	{r4, lr}
 1602              		.cfi_restore 14
 1603              		.cfi_restore 4
 1604              		.cfi_def_cfa_offset 0
 1605              	.LVL149:
 636:vs1003.c      ****       vs1003_cmd_write(SPI_VOL,volt);
 1606              		.loc 1 636 7 view .LVU469
 1607 0032 0B20     		movs	r0, #11
 1608 0034 FFF7FEBF 		b	vs1003_cmd_write
 1609              	.LVL150:
 1610              	.L130:
 636:vs1003.c      ****       vs1003_cmd_write(SPI_VOL,volt);
 1611              		.loc 1 636 7 view .LVU470
 1612              		.align	2
 1613              	.L129:
 1614 0038 00000000 		.word	.LANCHOR4
 1615              		.cfi_endproc
 1616              	.LFE42:
 1618              		.section	.text.vs1003_set_volume,"ax",%progbits
 1619              		.align	1
 1620              		.global	vs1003_set_volume
 1621              		.syntax unified
 1622              		.thumb
 1623              		.thumb_func
 1624              		.fpu softvfp
 1626              	vs1003_set_volume:
 1627              	.LVL151:
 1628              	.LFB43:
 638:vs1003.c      **** 
 639:vs1003.c      **** 
 640:vs1003.c      **** void vs1003_set_volume (unsigned short volume)
 641:vs1003.c      **** {
 1629              		.loc 1 641 1 is_stmt 1 view -0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 0
 1632              		@ frame_needed = 0, uses_anonymous_args = 0
 1633              		@ link register save eliminated.
 642:vs1003.c      ****       unsigned short volt = 0;
 1634              		.loc 1 642 7 view .LVU472
 643:vs1003.c      ****       volt = volume;
 1635              		.loc 1 643 7 view .LVU473
 644:vs1003.c      ****       volt <<= 8;
 1636              		.loc 1 644 7 view .LVU474
 645:vs1003.c      ****       volt += volume;
 1637              		.loc 1 645 7 view .LVU475
 646:vs1003.c      ****       vs1003_cmd_write(SPI_VOL,volt);
 1638              		.loc 1 646 7 view .LVU476
 645:vs1003.c      ****       volt += volume;
 1639              		.loc 1 645 12 is_stmt 0 view .LVU477
 1640 0000 00EB0020 		add	r0, r0, r0, lsl #8
 1641              	.LVL152:
 1642              		.loc 1 646 7 view .LVU478
 1643 0004 81B2     		uxth	r1, r0
 1644 0006 0B20     		movs	r0, #11
 1645 0008 FFF7FEBF 		b	vs1003_cmd_write
 1646              	.LVL153:
 1647              		.cfi_endproc
 1648              	.LFE43:
 1650              		.section	.text.vs1003_init,"ax",%progbits
 1651              		.align	1
 1652              		.global	vs1003_init
 1653              		.syntax unified
 1654              		.thumb
 1655              		.thumb_func
 1656              		.fpu softvfp
 1658              	vs1003_init:
 1659              	.LFB44:
 647:vs1003.c      **** }
 648:vs1003.c      **** 
 649:vs1003.c      **** 
 650:vs1003.c      **** void vs1003_init (void)
 651:vs1003.c      **** {
 1660              		.loc 1 651 1 is_stmt 1 view -0
 1661              		.cfi_startproc
 1662              		@ args = 0, pretend = 0, frame = 0
 1663              		@ frame_needed = 0, uses_anonymous_args = 0
 652:vs1003.c      ****       GPIO_Init_Pin(GPIOC,GPIO_Pin_3,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 1664              		.loc 1 652 7 view .LVU480
 651:vs1003.c      ****       GPIO_Init_Pin(GPIOC,GPIO_Pin_3,GPIO_Speed_50MHz,GPIO_Mode_IPU);
 1665              		.loc 1 651 1 is_stmt 0 view .LVU481
 1666 0000 10B5     		push	{r4, lr}
 1667              		.cfi_def_cfa_offset 8
 1668              		.cfi_offset 4, -8
 1669              		.cfi_offset 14, -4
 1670              		.loc 1 652 7 view .LVU482
 1671 0002 0F4C     		ldr	r4, .L133
 1672 0004 4823     		movs	r3, #72
 1673 0006 0322     		movs	r2, #3
 1674 0008 0821     		movs	r1, #8
 1675 000a 2046     		mov	r0, r4
 1676 000c FFF7FEFF 		bl	GPIO_Init_Pin
 1677              	.LVL154:
 653:vs1003.c      ****       GPIO_Init_Pin(GPIOC,GPIO_Pin_10,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 1678              		.loc 1 653 7 is_stmt 1 view .LVU483
 1679 0010 1023     		movs	r3, #16
 1680 0012 0322     		movs	r2, #3
 1681 0014 4FF48061 		mov	r1, #1024
 1682 0018 2046     		mov	r0, r4
 1683 001a FFF7FEFF 		bl	GPIO_Init_Pin
 1684              	.LVL155:
 654:vs1003.c      ****       GPIO_Init_Pin(GPIOC,GPIO_Pin_11,GPIO_Speed_50MHz,GPIO_Mode_Out_PP);
 1685              		.loc 1 654 7 view .LVU484
 1686 001e 1023     		movs	r3, #16
 1687 0020 0322     		movs	r2, #3
 1688 0022 4FF40061 		mov	r1, #2048
 1689 0026 2046     		mov	r0, r4
 1690 0028 FFF7FEFF 		bl	GPIO_Init_Pin
 1691              	.LVL156:
 655:vs1003.c      ****       MP3_DCS_SET(1);
 1692              		.loc 1 655 7 view .LVU485
 1693 002c E368     		ldr	r3, [r4, #12]
 1694 002e 43F40063 		orr	r3, r3, #2048
 1695 0032 E360     		str	r3, [r4, #12]
 656:vs1003.c      ****       MP3_CCS_SET(1);
 1696              		.loc 1 656 7 view .LVU486
 1697 0034 E368     		ldr	r3, [r4, #12]
 1698 0036 43F48063 		orr	r3, r3, #1024
 1699 003a E360     		str	r3, [r4, #12]
 657:vs1003.c      **** }
 1700              		.loc 1 657 1 is_stmt 0 view .LVU487
 1701 003c 10BD     		pop	{r4, pc}
 1702              	.L134:
 1703 003e 00BF     		.align	2
 1704              	.L133:
 1705 0040 00100140 		.word	1073811456
 1706              		.cfi_endproc
 1707              	.LFE44:
 1709              		.section	.text.vs1003_data_write,"ax",%progbits
 1710              		.align	1
 1711              		.global	vs1003_data_write
 1712              		.syntax unified
 1713              		.thumb
 1714              		.thumb_func
 1715              		.fpu softvfp
 1717              	vs1003_data_write:
 1718              	.LVL157:
 1719              	.LFB45:
 658:vs1003.c      **** 
 659:vs1003.c      **** void vs1003_data_write (unsigned char * buff)
 660:vs1003.c      **** {
 1720              		.loc 1 660 1 is_stmt 1 view -0
 1721              		.cfi_startproc
 1722              		@ args = 0, pretend = 0, frame = 0
 1723              		@ frame_needed = 0, uses_anonymous_args = 0
 661:vs1003.c      ****       unsigned char n = 32;
 1724              		.loc 1 661 7 view .LVU489
 662:vs1003.c      ****       MP3_DCS_SET(0);;
 1725              		.loc 1 662 7 view .LVU490
 660:vs1003.c      ****       unsigned char n = 32;
 1726              		.loc 1 660 1 is_stmt 0 view .LVU491
 1727 0000 70B5     		push	{r4, r5, r6, lr}
 1728              		.cfi_def_cfa_offset 16
 1729              		.cfi_offset 4, -16
 1730              		.cfi_offset 5, -12
 1731              		.cfi_offset 6, -8
 1732              		.cfi_offset 14, -4
 660:vs1003.c      ****       unsigned char n = 32;
 1733              		.loc 1 660 1 view .LVU492
 1734 0002 0546     		mov	r5, r0
 1735              		.loc 1 662 7 view .LVU493
 1736 0004 0B4C     		ldr	r4, .L138
 1737 0006 00F12006 		add	r6, r0, #32
 1738 000a E368     		ldr	r3, [r4, #12]
 1739 000c 23F40063 		bic	r3, r3, #2048
 1740 0010 E360     		str	r3, [r4, #12]
 1741              		.loc 1 662 22 is_stmt 1 view .LVU494
 663:vs1003.c      ****       while (n--) {
 1742              		.loc 1 663 7 view .LVU495
 1743              	.LVL158:
 1744              	.L136:
 1745              		.loc 1 663 13 view .LVU496
 1746              		.loc 1 663 13 is_stmt 0 view .LVU497
 1747 0012 B542     		cmp	r5, r6
 1748 0014 08D1     		bne	.L137
 664:vs1003.c      **** 	    SPI_read_write_byte(*buff++);
 665:vs1003.c      ****       }
 666:vs1003.c      ****       MP3_DCS_SET(1);
 1749              		.loc 1 666 7 is_stmt 1 view .LVU498
 1750 0016 E368     		ldr	r3, [r4, #12]
 1751 0018 43F40063 		orr	r3, r3, #2048
 1752 001c E360     		str	r3, [r4, #12]
 667:vs1003.c      ****       MP3_CCS_SET(1);
 1753              		.loc 1 667 7 view .LVU499
 1754 001e E368     		ldr	r3, [r4, #12]
 1755 0020 43F48063 		orr	r3, r3, #1024
 1756 0024 E360     		str	r3, [r4, #12]
 668:vs1003.c      **** }
 1757              		.loc 1 668 1 is_stmt 0 view .LVU500
 1758 0026 70BD     		pop	{r4, r5, r6, pc}
 1759              	.LVL159:
 1760              	.L137:
 664:vs1003.c      **** 	    SPI_read_write_byte(*buff++);
 1761              		.loc 1 664 6 is_stmt 1 view .LVU501
 664:vs1003.c      **** 	    SPI_read_write_byte(*buff++);
 1762              		.loc 1 664 6 is_stmt 0 view .LVU502
 1763 0028 15F8010B 		ldrb	r0, [r5], #1	@ zero_extendqisi2
 1764              	.LVL160:
 664:vs1003.c      **** 	    SPI_read_write_byte(*buff++);
 1765              		.loc 1 664 6 view .LVU503
 1766 002c FFF7FEFF 		bl	SPI_read_write_byte
 1767              	.LVL161:
 1768 0030 EFE7     		b	.L136
 1769              	.L139:
 1770 0032 00BF     		.align	2
 1771              	.L138:
 1772 0034 00100140 		.word	1073811456
 1773              		.cfi_endproc
 1774              	.LFE45:
 1776              		.global	bitrate
 1777              		.global	vs1003_ram
 1778              		.global	regvalue
 1779              		.global	dtab
 1780              		.global	atab
 1781              		.section	.bss.regvalue,"aw",%nobits
 1782              		.align	1
 1783              		.set	.LANCHOR0,. + 0
 1786              	regvalue:
 1787 0000 0000     		.space	2
 1788              		.section	.data.vs1003_ram,"aw"
 1789              		.set	.LANCHOR4,. + 0
 1792              	vs1003_ram:
 1793 0000 00000000 		.ascii	"\000\000\000\000\372"
 1793      FA
 1794              		.section	.rodata.atab,"a"
 1795              		.set	.LANCHOR2,. + 0
 1798              	atab:
 1799 0000 07060606 		.ascii	"\007\006\006\006\006\006\006\006\006\006\006\006\006"
 1799      06060606 
 1799      06060606 
 1799      06
 1800 000d 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\007"
 1800      06060606 
 1800      06060606 
 1800      07
 1801 001a 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1801      06060606 
 1801      06060606 
 1801      06
 1802 0027 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1802      06060606 
 1802      06060606 
 1802      06
 1803 0034 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1803      06060606 
 1803      06060606 
 1803      06
 1804 0041 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1804      06060606 
 1804      06060606 
 1804      06
 1805 004e 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1805      06060606 
 1805      06060606 
 1805      06
 1806 005b 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1806      06060606 
 1806      06060606 
 1806      06
 1807 0068 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1807      06060606 
 1807      06060606 
 1807      06
 1808 0075 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1808      06060606 
 1808      06060606 
 1808      06
 1809 0082 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1809      06060606 
 1809      06060606 
 1809      06
 1810 008f 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1810      06060606 
 1810      06060606 
 1810      06
 1811 009c 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1811      06060606 
 1811      06060606 
 1811      06
 1812 00a9 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1812      06060606 
 1812      06060606 
 1812      06
 1813 00b6 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1813      06060606 
 1813      06060606 
 1813      06
 1814 00c3 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1814      06060606 
 1814      06060606 
 1814      06
 1815 00d0 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1815      06060606 
 1815      06060606 
 1815      06
 1816 00dd 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1816      06060606 
 1816      06060606 
 1816      06
 1817 00ea 06060606 		.ascii	"\006\006\006\006\006\006\007\006\006\006\006\006\006"
 1817      06060706 
 1817      06060606 
 1817      06
 1818 00f7 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1818      06060606 
 1818      06060606 
 1818      06
 1819 0104 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1819      06060606 
 1819      06060606 
 1819      06
 1820 0111 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1820      06060606 
 1820      06060606 
 1820      06
 1821 011e 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1821      06060606 
 1821      06060606 
 1821      06
 1822 012b 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1822      06060606 
 1822      06060606 
 1822      06
 1823 0138 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1823      06060606 
 1823      06060606 
 1823      06
 1824 0145 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1824      06060606 
 1824      06060606 
 1824      06
 1825 0152 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1825      06060606 
 1825      06060606 
 1825      06
 1826 015f 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1826      06060606 
 1826      06060606 
 1826      06
 1827 016c 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1827      06060606 
 1827      06060606 
 1827      06
 1828 0179 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1828      06060606 
 1828      06060606 
 1828      06
 1829 0186 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1829      06060606 
 1829      06060606 
 1829      06
 1830 0193 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1830      06060606 
 1830      06060606 
 1830      06
 1831 01a0 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1831      06060606 
 1831      06060606 
 1831      06
 1832 01ad 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1832      06060606 
 1832      06060606 
 1832      06
 1833 01ba 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1833      06060606 
 1833      06060606 
 1833      06
 1834 01c7 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1834      06060606 
 1834      06060606 
 1834      06
 1835 01d4 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1835      06060606 
 1835      06060606 
 1835      06
 1836 01e1 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1836      06060606 
 1836      06060606 
 1836      06
 1837 01ee 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1837      06060606 
 1837      06060606 
 1837      06
 1838 01fb 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1838      06060606 
 1838      06060606 
 1838      06
 1839 0208 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1839      06060606 
 1839      06060606 
 1839      06
 1840 0215 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1840      06060606 
 1840      06060606 
 1840      06
 1841 0222 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1841      06060606 
 1841      06060606 
 1841      06
 1842 022f 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1842      06060606 
 1842      06060606 
 1842      06
 1843 023c 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1843      06060606 
 1843      06060606 
 1843      06
 1844 0249 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1844      06060606 
 1844      06060606 
 1844      06
 1845 0256 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1845      06060606 
 1845      06060606 
 1845      06
 1846 0263 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1846      06060606 
 1846      06060606 
 1846      06
 1847 0270 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1847      06060606 
 1847      06060606 
 1847      06
 1848 027d 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1848      06060606 
 1848      06060606 
 1848      06
 1849 028a 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1849      06060606 
 1849      06060606 
 1849      06
 1850 0297 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1850      06060606 
 1850      06060606 
 1850      06
 1851 02a4 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1851      06060606 
 1851      06060606 
 1851      06
 1852 02b1 07060606 		.ascii	"\007\006\006\006\006\006\006\006\006\006\006\006\006"
 1852      06060606 
 1852      06060606 
 1852      06
 1853 02be 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\007\006"
 1853      06060606 
 1853      06060607 
 1853      06
 1854 02cb 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1854      06060606 
 1854      06060606 
 1854      06
 1855 02d8 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1855      06060606 
 1855      06060606 
 1855      06
 1856 02e5 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1856      06060606 
 1856      06060606 
 1856      06
 1857 02f2 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1857      06060606 
 1857      06060606 
 1857      06
 1858 02ff 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1858      06060606 
 1858      06060606 
 1858      06
 1859 030c 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1859      06060606 
 1859      06060606 
 1859      06
 1860 0319 06060606 		.ascii	"\006\006\006\006\006\007\006\006\006\006\006\006\006"
 1860      06070606 
 1860      06060606 
 1860      06
 1861 0326 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1861      06060606 
 1861      06060606 
 1861      06
 1862 0333 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1862      06060606 
 1862      06060606 
 1862      06
 1863 0340 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1863      06060606 
 1863      06060606 
 1863      06
 1864 034d 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1864      06060606 
 1864      06060606 
 1864      06
 1865 035a 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1865      06060606 
 1865      06060606 
 1865      06
 1866 0367 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1866      06060606 
 1866      06060606 
 1866      06
 1867 0374 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1867      06060606 
 1867      06060606 
 1867      06
 1868 0381 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1868      06060606 
 1868      06060606 
 1868      06
 1869 038e 06060606 		.ascii	"\006\006\006\006\006\006\006\006\006\006\006\006\006"
 1869      06060606 
 1869      06060606 
 1869      06
 1870 039b 06060606 		.ascii	"\006\006\006\006\007\006\006\006\006\006\006\006\006"
 1870      07060606 
 1870      06060606 
 1870      06
 1871 03a8 06060606 		.ascii	"\006\006\006\006\006\006\012"
 1871      06060A
 1872              		.section	.rodata.bitrate,"a"
 1873              		.align	1
 1874              		.set	.LANCHOR1,. + 0
 1877              	bitrate:
 1878 0000 0000     		.short	0
 1879 0002 0800     		.short	8
 1880 0004 1000     		.short	16
 1881 0006 1800     		.short	24
 1882 0008 2000     		.short	32
 1883 000a 2800     		.short	40
 1884 000c 3000     		.short	48
 1885 000e 3800     		.short	56
 1886 0010 4000     		.short	64
 1887 0012 5000     		.short	80
 1888 0014 6000     		.short	96
 1889 0016 7000     		.short	112
 1890 0018 8000     		.short	128
 1891 001a 9000     		.short	144
 1892 001c A000     		.short	160
 1893 001e 0000     		.short	0
 1894 0020 0000     		.short	0
 1895 0022 2000     		.short	32
 1896 0024 2800     		.short	40
 1897 0026 3000     		.short	48
 1898 0028 3800     		.short	56
 1899 002a 4000     		.short	64
 1900 002c 5000     		.short	80
 1901 002e 6000     		.short	96
 1902 0030 7000     		.short	112
 1903 0032 8000     		.short	128
 1904 0034 A000     		.short	160
 1905 0036 C000     		.short	192
 1906 0038 E000     		.short	224
 1907 003a 0001     		.short	256
 1908 003c 4001     		.short	320
 1909 003e 0000     		.short	0
 1910              		.section	.rodata.dtab,"a"
 1911              		.align	1
 1912              		.set	.LANCHOR3,. + 0
 1915              	dtab:
 1916 0000 5080     		.short	-32688
 1917 0002 1336     		.short	13843
 1918 0004 2400     		.short	36
 1919 0006 003E     		.short	15872
 1920 0008 0138     		.short	14337
 1921 000a 0000     		.short	0
 1922 000c D716     		.short	5847
 1923 000e 00F4     		.short	-3072
 1924 0010 C055     		.short	21952
 1925 0012 0000     		.short	0
 1926 0014 170A     		.short	2583
 1927 0016 00F4     		.short	-3072
 1928 0018 C057     		.short	22464
 1929 001a 0600     		.short	6
 1930 001c 1750     		.short	20503
 1931 001e 80B0     		.short	-20352
 1932 0020 2400     		.short	36
 1933 0022 003F     		.short	16128
 1934 0024 2400     		.short	36
 1935 0026 0020     		.short	8192
 1936 0028 0000     		.short	0
 1937 002a F036     		.short	14064
 1938 002c 0118     		.short	6145
 1939 002e 0028     		.short	10240
 1940 0030 C031     		.short	12736
 1941 0032 5C80     		.short	-32676
 1942 0034 123E     		.short	15890
 1943 0036 17B8     		.short	-18409
 1944 0038 123E     		.short	15890
 1945 003a 1538     		.short	14357
 1946 003c 053E     		.short	15877
 1947 003e 14B8     		.short	-18412
 1948 0040 1536     		.short	13845
 1949 0042 2400     		.short	36
 1950 0044 0000     		.short	0
 1951 0046 0A80     		.short	-32758
 1952 0048 103E     		.short	15888
 1953 004a 0138     		.short	14337
 1954 004c 0600     		.short	6
 1955 004e 0000     		.short	0
 1956 0050 103E     		.short	15888
 1957 0052 03B8     		.short	-18429
 1958 0054 0000     		.short	0
 1959 0056 0303     		.short	771
 1960 0058 113E     		.short	15889
 1961 005a 0538     		.short	14341
 1962 005c 113E     		.short	15889
 1963 005e 07B8     		.short	-18425
 1964 0060 143E     		.short	15892
 1965 0062 1238     		.short	14354
 1966 0064 84B8     		.short	-18300
 1967 0066 0C13     		.short	4876
 1968 0068 1034     		.short	13328
 1969 006a 2440     		.short	16420
 1970 006c 1241     		.short	16658
 1971 006e D010     		.short	4304
 1972 0070 1040     		.short	16400
 1973 0072 8C00     		.short	140
 1974 0074 1040     		.short	16400
 1975 0076 2400     		.short	36
 1976 0078 00F4     		.short	-3072
 1977 007a 1240     		.short	16402
 1978 007c 0030     		.short	12288
 1979 007e 4038     		.short	14400
 1980 0080 0930     		.short	12297
 1981 0082 0138     		.short	14337
 1982 0084 0000     		.short	0
 1983 0086 4100     		.short	65
 1984 0088 02FE     		.short	-510
 1985 008a 2400     		.short	36
 1986 008c 0029     		.short	10496
 1987 008e 4084     		.short	-31680
 1988 0090 B248     		.short	18610
 1989 0092 2400     		.short	36
 1990 0094 F336     		.short	14067
 1991 0096 4408     		.short	2116
 1992 0098 0663     		.short	25350
 1993 009a 4588     		.short	-30651
 1994 009c 3AAE     		.short	-20934
 1995 009e 4088     		.short	-30656
 1996 00a0 8EBF     		.short	-16498
 1997 00a2 418B     		.short	-29887
 1998 00a4 32AC     		.short	-21454
 1999 00a6 46A8     		.short	-22458
 2000 00a8 C8FF     		.short	-56
 2001 00aa C7AB     		.short	-21561
 2002 00ac 013E     		.short	15873
 2003 00ae 0078     		.short	30720
 2004 00b0 00F4     		.short	-3072
 2005 00b2 8044     		.short	17536
 2006 00b4 9060     		.short	24720
 2007 00b6 2400     		.short	36
 2008 00b8 9060     		.short	24720
 2009 00ba 2400     		.short	36
 2010 00bc 00F4     		.short	-3072
 2011 00be 1540     		.short	16405
 2012 00c0 0930     		.short	12297
 2013 00c2 4634     		.short	13382
 2014 00c4 0930     		.short	12297
 2015 00c6 C737     		.short	14279
 2016 00c8 0930     		.short	12297
 2017 00ca 0018     		.short	6144
 2018 00cc 0930     		.short	12297
 2019 00ce 4438     		.short	14404
 2020 00d0 B348     		.short	18611
 2021 00d2 E0E1     		.short	-7712
 2022 00d4 8248     		.short	18562
 2023 00d6 4040     		.short	16448
 2024 00d8 CAFE     		.short	-310
 2025 00da 2400     		.short	36
 2026 00dc C25A     		.short	23234
 2027 00de 2400     		.short	36
 2028 00e0 525A     		.short	23122
 2029 00e2 2400     		.short	36
 2030 00e4 C24C     		.short	19650
 2031 00e6 2400     		.short	36
 2032 00e8 BA48     		.short	18618
 2033 00ea 4040     		.short	16448
 2034 00ec EA4E     		.short	20202
 2035 00ee 0148     		.short	18433
 2036 00f0 CA4E     		.short	20170
 2037 00f2 0098     		.short	-26624
 2038 00f4 80FF     		.short	-128
 2039 00f6 C11B     		.short	7105
 2040 00f8 EBF1     		.short	-3605
 2041 00fa E2E3     		.short	-7198
 2042 00fc EAF1     		.short	-3606
 2043 00fe 4C18     		.short	6220
 2044 0100 8B4C     		.short	19595
 2045 0102 E4E5     		.short	-6684
 2046 0104 BE48     		.short	18622
 2047 0106 0498     		.short	-26620
 2048 0108 8E48     		.short	18574
 2049 010a C641     		.short	16838
 2050 010c 82FE     		.short	-382
 2051 010e 2400     		.short	36
 2052 0110 8E5A     		.short	23182
 2053 0112 2400     		.short	36
 2054 0114 5E52     		.short	21086
 2055 0116 851B     		.short	7045
 2056 0118 FE4F     		.short	20478
 2057 011a 2400     		.short	36
 2058 011c B648     		.short	18614
 2059 011e C641     		.short	16838
 2060 0120 D64D     		.short	19926
 2061 0122 C748     		.short	18631
 2062 0124 F64D     		.short	19958
 2063 0126 2400     		.short	36
 2064 0128 D6F1     		.short	-3626
 2065 012a 2400     		.short	36
 2066 012c D6F1     		.short	-3626
 2067 012e 2400     		.short	36
 2068 0130 DA4E     		.short	20186
 2069 0132 2400     		.short	36
 2070 0134 0000     		.short	0
 2071 0136 C30F     		.short	4035
 2072 0138 0029     		.short	10496
 2073 013a 4084     		.short	-31680
 2074 013c 824E     		.short	20098
 2075 013e 2400     		.short	36
 2076 0140 8440     		.short	16516
 2077 0142 0C13     		.short	4876
 2078 0144 0600     		.short	6
 2079 0146 0001     		.short	256
 2080 0148 4034     		.short	13376
 2081 014a 2440     		.short	16420
 2082 014c 1040     		.short	16400
 2083 014e 2400     		.short	36
 2084 0150 00F4     		.short	-3072
 2085 0152 1240     		.short	16402
 2086 0154 0032     		.short	12800
 2087 0156 2440     		.short	16420
 2088 0158 32B1     		.short	-20174
 2089 015a 2400     		.short	36
 2090 015c 1442     		.short	16916
 2091 015e 2400     		.short	36
 2092 0160 24F2     		.short	-3548
 2093 0162 2400     		.short	36
 2094 0164 3062     		.short	25136
 2095 0166 2400     		.short	36
 2096 0168 0100     		.short	1
 2097 016a 0100     		.short	1
 2098 016c 0028     		.short	10240
 2099 016e 492B     		.short	11081
 2100 0170 0000     		.short	0
 2101 0172 2400     		.short	36
 2102 0174 00F4     		.short	-3072
 2103 0176 C240     		.short	16578
 2104 0178 0032     		.short	12800
 2105 017a 2400     		.short	36
 2106 017c 82FF     		.short	-126
 2107 017e 2400     		.short	36
 2108 0180 B248     		.short	18610
 2109 0182 2400     		.short	36
 2110 0184 30B1     		.short	-20176
 2111 0186 2400     		.short	36
 2112 0188 0262     		.short	25090
 2113 018a 2400     		.short	36
 2114 018c 3F00     		.short	63
 2115 018e 01F0     		.short	-4095
 2116 0190 0028     		.short	10240
 2117 0192 512E     		.short	11857
 2118 0194 0000     		.short	0
 2119 0196 4610     		.short	4166
 2120 0198 64FE     		.short	-412
 2121 019a 2400     		.short	36
 2122 019c BE48     		.short	18622
 2123 019e 2400     		.short	36
 2124 01a0 0028     		.short	10240
 2125 01a2 402F     		.short	12096
 2126 01a4 013A     		.short	14849
 2127 01a6 2480     		.short	-32732
 2128 01a8 0032     		.short	12800
 2129 01aa 2400     		.short	36
 2130 01ac 10B0     		.short	-20464
 2131 01ae 2400     		.short	36
 2132 01b0 20C0     		.short	-16352
 2133 01b2 2400     		.short	36
 2134 01b4 003A     		.short	14848
 2135 01b6 2400     		.short	36
 2136 01b8 F436     		.short	14068
 2137 01ba 1218     		.short	6162
 2138 01bc F136     		.short	14065
 2139 01be 0798     		.short	-26617
 2140 01c0 F136     		.short	14065
 2141 01c2 0518     		.short	6149
 2142 01c4 F036     		.short	14064
 2143 01c6 0398     		.short	-26621
 2144 01c8 F036     		.short	14064
 2145 01ca 0118     		.short	6145
 2146 01cc 0534     		.short	13317
 2147 01ce 1490     		.short	-28652
 2148 01d0 F336     		.short	14067
 2149 01d2 2400     		.short	36
 2150 01d4 F236     		.short	14066
 2151 01d6 1518     		.short	6165
 2152 01d8 0020     		.short	8192
 2153 01da 0000     		.short	0
 2154 01dc F236     		.short	14066
 2155 01de 1798     		.short	-26601
 2156 01e0 C780     		.short	-32569
 2157 01e2 123E     		.short	15890
 2158 01e4 17B8     		.short	-18409
 2159 01e6 123E     		.short	15890
 2160 01e8 1538     		.short	14357
 2161 01ea 053E     		.short	15877
 2162 01ec 14B8     		.short	-18412
 2163 01ee 2536     		.short	13861
 2164 01f0 2400     		.short	36
 2165 01f2 0000     		.short	0
 2166 01f4 0A80     		.short	-32758
 2167 01f6 103E     		.short	15888
 2168 01f8 0278     		.short	30722
 2169 01fa 103E     		.short	15888
 2170 01fc 04F8     		.short	-2044
 2171 01fe 113E     		.short	15889
 2172 0200 1078     		.short	30736
 2173 0202 143E     		.short	15892
 2174 0204 1378     		.short	30739
 2175 0206 0600     		.short	6
 2176 0208 5100     		.short	81
 2177 020a 133E     		.short	15891
 2178 020c 0EF8     		.short	-2034
 2179 020e 133E     		.short	15891
 2180 0210 2440     		.short	16420
 2181 0212 0930     		.short	12297
 2182 0214 4038     		.short	14400
 2183 0216 0930     		.short	12297
 2184 0218 5238     		.short	14418
 2185 021a 1929     		.short	10521
 2186 021c C064     		.short	25792
 2187 021e 0600     		.short	6
 2188 0220 D006     		.short	1744
 2189 0222 0031     		.short	12544
 2190 0224 D25B     		.short	23506
 2191 0226 0600     		.short	6
 2192 0228 D155     		.short	21969
 2193 022a 0930     		.short	12297
 2194 022c 0018     		.short	6144
 2195 022e 0930     		.short	12297
 2196 0230 0204     		.short	1026
 2197 0232 2661     		.short	24870
 2198 0234 2400     		.short	36
 2199 0236 0600     		.short	6
 2200 0238 D100     		.short	209
 2201 023a 0028     		.short	10240
 2202 023c 054D     		.short	19717
 2203 023e 82B8     		.short	-18302
 2204 0240 2400     		.short	36
 2205 0242 0600     		.short	6
 2206 0244 1100     		.short	17
 2207 0246 0930     		.short	12297
 2208 0248 5038     		.short	14416
 2209 024a 0600     		.short	6
 2210 024c 1000     		.short	16
 2211 024e 0930     		.short	12297
 2212 0250 0038     		.short	14336
 2213 0252 1D29     		.short	10525
 2214 0254 0058     		.short	22528
 2215 0256 0000     		.short	0
 2216 0258 0018     		.short	6144
 2217 025a 0600     		.short	6
 2218 025c 1000     		.short	16
 2219 025e 82B8     		.short	-18302
 2220 0260 2400     		.short	36
 2221 0262 1D29     		.short	10525
 2222 0264 005B     		.short	23296
 2223 0266 0000     		.short	0
 2224 0268 0017     		.short	5888
 2225 026a 0000     		.short	0
 2226 026c 0103     		.short	769
 2227 026e 0039     		.short	14592
 2228 0270 C05B     		.short	23488
 2229 0272 0600     		.short	6
 2230 0274 D155     		.short	21969
 2231 0276 0930     		.short	12297
 2232 0278 D01B     		.short	7120
 2233 027a 0930     		.short	12297
 2234 027c 0404     		.short	1028
 2235 027e 0600     		.short	6
 2236 0280 5100     		.short	81
 2237 0282 0028     		.short	10240
 2238 0284 003D     		.short	15616
 2239 0286 0139     		.short	14593
 2240 0288 2400     		.short	36
 2241 028a 4844     		.short	17480
 2242 028c 0104     		.short	1025
 2243 028e 9241     		.short	16786
 2244 0290 2400     		.short	36
 2245 0292 9864     		.short	25752
 2246 0294 0124     		.short	9217
 2247 0296 1F00     		.short	31
 2248 0298 0140     		.short	16385
 2249 029a 1264     		.short	25618
 2250 029c 2400     		.short	36
 2251 029e 0600     		.short	6
 2252 02a0 1100     		.short	17
 2253 02a2 0028     		.short	10240
 2254 02a4 513C     		.short	15441
 2255 02a6 0000     		.short	0
 2256 02a8 8E05     		.short	1422
 2257 02aa 0024     		.short	9216
 2258 02ac 0E4C     		.short	19470
 2259 02ae 0000     		.short	0
 2260 02b0 1300     		.short	19
 2261 02b2 0600     		.short	6
 2262 02b4 5100     		.short	81
 2263 02b6 0600     		.short	6
 2264 02b8 031A     		.short	6659
 2265 02ba 0031     		.short	12544
 2266 02bc 2440     		.short	16420
 2267 02be 12F2     		.short	-3566
 2268 02c0 C444     		.short	17604
 2269 02c2 4643     		.short	17222
 2270 02c4 2400     		.short	36
 2271 02c6 00F4     		.short	-3072
 2272 02c8 D540     		.short	16597
 2273 02ca 0035     		.short	13568
 2274 02cc 2480     		.short	-32732
 2275 02ce 2A61     		.short	24874
 2276 02d0 2400     		.short	36
 2277 02d2 0000     		.short	0
 2278 02d4 2400     		.short	36
 2279 02d6 0028     		.short	10240
 2280 02d8 514C     		.short	19537
 2281 02da 0000     		.short	0
 2282 02dc 2400     		.short	36
 2283 02de 1336     		.short	13843
 2284 02e0 2400     		.short	36
 2285 02e2 0031     		.short	12544
 2286 02e4 0038     		.short	14336
 2287 02e6 1D29     		.short	10525
 2288 02e8 0080     		.short	-32768
 2289 02ea 00F2     		.short	-3584
 2290 02ec 2400     		.short	36
 2291 02ee 3F00     		.short	63
 2292 02f0 C2FE     		.short	-318
 2293 02f2 8240     		.short	16514
 2294 02f4 1144     		.short	17425
 2295 02f6 1331     		.short	12563
 2296 02f8 C01B     		.short	7104
 2297 02fa 22A1     		.short	-24286
 2298 02fc 2400     		.short	36
 2299 02fe 0000     		.short	0
 2300 0300 0220     		.short	8194
 2301 0302 2461     		.short	24868
 2302 0304 0124     		.short	9217
 2303 0306 0000     		.short	0
 2304 0308 0210     		.short	4098
 2305 030a 0028     		.short	10240
 2306 030c 0846     		.short	17928
 2307 030e 0000     		.short	0
 2308 0310 2400     		.short	36
 2309 0312 3F00     		.short	63
 2310 0314 02F8     		.short	-2046
 2311 0316 0031     		.short	12544
 2312 0318 2440     		.short	16420
 2313 031a 24B1     		.short	-20188
 2314 031c 2400     		.short	36
 2315 031e 0028     		.short	10240
 2316 0320 C04B     		.short	19392
 2317 0322 0039     		.short	14592
 2318 0324 2480     		.short	-32732
 2319 0326 2461     		.short	24868
 2320 0328 2400     		.short	36
 2321 032a 0000     		.short	0
 2322 032c 0208     		.short	2050
 2323 032e 0028     		.short	10240
 2324 0330 4848     		.short	18504
 2325 0332 0000     		.short	0
 2326 0334 2400     		.short	36
 2327 0336 3F00     		.short	63
 2328 0338 02FE     		.short	-510
 2329 033a 0031     		.short	12544
 2330 033c 2440     		.short	16420
 2331 033e 24B1     		.short	-20188
 2332 0340 2400     		.short	36
 2333 0342 0028     		.short	10240
 2334 0344 C04B     		.short	19392
 2335 0346 0039     		.short	14592
 2336 0348 2480     		.short	-32732
 2337 034a 2461     		.short	24868
 2338 034c 2400     		.short	36
 2339 034e 0000     		.short	0
 2340 0350 0204     		.short	1026
 2341 0352 0028     		.short	10240
 2342 0354 884A     		.short	19080
 2343 0356 0000     		.short	0
 2344 0358 2400     		.short	36
 2345 035a 3F00     		.short	63
 2346 035c 02FF     		.short	-254
 2347 035e 0031     		.short	12544
 2348 0360 2440     		.short	16420
 2349 0362 24B1     		.short	-20188
 2350 0364 2400     		.short	36
 2351 0366 0028     		.short	10240
 2352 0368 C04B     		.short	19392
 2353 036a 0039     		.short	14592
 2354 036c 2480     		.short	-32732
 2355 036e 2461     		.short	24868
 2356 0370 0104     		.short	1025
 2357 0372 3F00     		.short	63
 2358 0374 82FF     		.short	-126
 2359 0376 0028     		.short	10240
 2360 0378 C84B     		.short	19400
 2361 037a 24B1     		.short	-20188
 2362 037c 2400     		.short	36
 2363 037e 0039     		.short	14592
 2364 0380 2480     		.short	-32732
 2365 0382 82B8     		.short	-18302
 2366 0384 4C8C     		.short	-29620
 2367 0386 3038     		.short	14384
 2368 0388 2440     		.short	16420
 2369 038a 0600     		.short	6
 2370 038c 9100     		.short	145
 2371 038e 0439     		.short	14596
 2372 0390 4CD8     		.short	-10164
 2373 0392 0600     		.short	6
 2374 0394 D100     		.short	209
 2375 0396 0000     		.short	0
 2376 0398 1300     		.short	19
 2377 039a 0031     		.short	12544
 2378 039c 4C90     		.short	-28596
 2379 039e 0242     		.short	16898
 2380 03a0 CC9B     		.short	-25652
 2381 03a2 F039     		.short	14832
 2382 03a4 2440     		.short	16420
 2383 03a6 0031     		.short	12544
 2384 03a8 2440     		.short	16420
 2385 03aa 003C     		.short	15360
 2386 03ac 2440     		.short	16420
 2387 03ae 00F4     		.short	-3072
 2388 03b0 C144     		.short	17601
 2389 03b2 F034     		.short	13552
 2390 03b4 2480     		.short	-32732
 2391 03b6 2661     		.short	24870
 2392 03b8 2400     		.short	36
 2393 03ba 0600     		.short	6
 2394 03bc D006     		.short	1744
 2395 03be 0028     		.short	10240
 2396 03c0 D85D     		.short	24024
 2397 03c2 9442     		.short	17044
 2398 03c4 2400     		.short	36
 2399 03c6 0024     		.short	9216
 2400 03c8 825D     		.short	23938
 2401 03ca 0000     		.short	0
 2402 03cc 2400     		.short	36
 2403 03ce 00F4     		.short	-3072
 2404 03d0 1144     		.short	17425
 2405 03d2 2331     		.short	12579
 2406 03d4 2400     		.short	36
 2407 03d6 0031     		.short	12544
 2408 03d8 2480     		.short	-32732
 2409 03da 0242     		.short	16898
 2410 03dc 2400     		.short	36
 2411 03de 8241     		.short	16770
 2412 03e0 0124     		.short	9217
 2413 03e2 0000     		.short	0
 2414 03e4 0220     		.short	8194
 2415 03e6 0028     		.short	10240
 2416 03e8 895D     		.short	23945
 2417 03ea 0000     		.short	0
 2418 03ec 2400     		.short	36
 2419 03ee 1330     		.short	12307
 2420 03f0 4C18     		.short	6220
 2421 03f2 F030     		.short	12528
 2422 03f4 5278     		.short	30802
 2423 03f6 2461     		.short	24868
 2424 03f8 50B8     		.short	-18352
 2425 03fa 0600     		.short	6
 2426 03fc 0100     		.short	1
 2427 03fe 0028     		.short	10240
 2428 0400 8855     		.short	21896
 2429 0402 8840     		.short	16520
 2430 0404 C244     		.short	17602
 2431 0406 2442     		.short	16932
 2432 0408 2400     		.short	36
 2433 040a 2241     		.short	16674
 2434 040c 2400     		.short	36
 2435 040e 2241     		.short	16674
 2436 0410 2400     		.short	36
 2437 0412 00F4     		.short	-3072
 2438 0414 5140     		.short	16465
 2439 0416 0029     		.short	10496
 2440 0418 4074     		.short	29760
 2441 041a 0000     		.short	0
 2442 041c C856     		.short	22216
 2443 041e 2442     		.short	16932
 2444 0420 2400     		.short	36
 2445 0422 2241     		.short	16674
 2446 0424 2400     		.short	36
 2447 0426 2241     		.short	16674
 2448 0428 2400     		.short	36
 2449 042a 0029     		.short	10496
 2450 042c C069     		.short	27072
 2451 042e 00F4     		.short	-3072
 2452 0430 5140     		.short	16465
 2453 0432 0400     		.short	4
 2454 0434 0200     		.short	2
 2455 0436 0930     		.short	12297
 2456 0438 D01B     		.short	7120
 2457 043a 2330     		.short	12323
 2458 043c D21B     		.short	7122
 2459 043e E030     		.short	12512
 2460 0440 2440     		.short	16420
 2461 0442 2461     		.short	24868
 2462 0444 2400     		.short	36
 2463 0446 0000     		.short	0
 2464 0448 0240     		.short	16386
 2465 044a 0028     		.short	10240
 2466 044c 8859     		.short	22920
 2467 044e 0000     		.short	0
 2468 0450 2400     		.short	36
 2469 0452 0000     		.short	0
 2470 0454 0100     		.short	1
 2471 0456 2038     		.short	14368
 2472 0458 2440     		.short	16420
 2473 045a E030     		.short	12512
 2474 045c 2440     		.short	16420
 2475 045e 2461     		.short	24868
 2476 0460 0100     		.short	1
 2477 0462 3F00     		.short	63
 2478 0464 42FF     		.short	-190
 2479 0466 0028     		.short	10240
 2480 0468 885D     		.short	23944
 2481 046a 8241     		.short	16770
 2482 046c 2400     		.short	36
 2483 046e 0000     		.short	0
 2484 0470 2400     		.short	36
 2485 0472 0028     		.short	10240
 2486 0474 955D     		.short	23957
 2487 0476 0000     		.short	0
 2488 0478 2400     		.short	36
 2489 047a 1336     		.short	13843
 2490 047c 2400     		.short	36
 2491 047e 143E     		.short	15892
 2492 0480 24C0     		.short	-16348
 2493 0482 0029     		.short	10496
 2494 0484 0017     		.short	5888
 2495 0486 143E     		.short	15892
 2496 0488 2400     		.short	36
 2497 048a E336     		.short	14051
 2498 048c 8C00     		.short	140
 2499 048e E030     		.short	12512
 2500 0490 2440     		.short	16420
 2501 0492 22FE     		.short	-478
 2502 0494 1144     		.short	17425
 2503 0496 B648     		.short	18614
 2504 0498 8C04     		.short	1164
 2505 049a 0039     		.short	14592
 2506 049c 2480     		.short	-32732
 2507 049e 3330     		.short	12339
 2508 04a0 4C0C     		.short	3148
 2509 04a2 0600     		.short	6
 2510 04a4 1100     		.short	17
 2511 04a6 9268     		.short	26770
 2512 04a8 C204     		.short	1218
 2513 04aa 22A1     		.short	-24286
 2514 04ac 0204     		.short	1026
 2515 04ae 2661     		.short	24870
 2516 04b0 2400     		.short	36
 2517 04b2 0600     		.short	6
 2518 04b4 9300     		.short	147
 2519 04b6 0028     		.short	10240
 2520 04b8 0167     		.short	26369
 2521 04ba 0000     		.short	0
 2522 04bc 2400     		.short	36
 2523 04be 82B8     		.short	-18302
 2524 04c0 4C18     		.short	6220
 2525 04c2 1334     		.short	13331
 2526 04c4 1238     		.short	14354
 2527 04c6 0600     		.short	6
 2528 04c8 D200     		.short	210
 2529 04ca 003A     		.short	14848
 2530 04cc D25B     		.short	23506
 2531 04ce 0033     		.short	13056
 2532 04d0 2440     		.short	16420
 2533 04d2 0000     		.short	0
 2534 04d4 1300     		.short	19
 2535 04d6 003C     		.short	15360
 2536 04d8 2440     		.short	16420
 2537 04da 00F4     		.short	-3072
 2538 04dc C144     		.short	17601
 2539 04de F034     		.short	13552
 2540 04e0 2480     		.short	-32732
 2541 04e2 2661     		.short	24870
 2542 04e4 2400     		.short	36
 2543 04e6 0600     		.short	6
 2544 04e8 1101     		.short	273
 2545 04ea 0028     		.short	10240
 2546 04ec 1867     		.short	26392
 2547 04ee 9442     		.short	17044
 2548 04f0 2400     		.short	36
 2549 04f2 0024     		.short	9216
 2550 04f4 C266     		.short	26306
 2551 04f6 0000     		.short	0
 2552 04f8 2400     		.short	36
 2553 04fa 0300     		.short	3
 2554 04fc 01F0     		.short	-4095
 2555 04fe 0131     		.short	12545
 2556 0500 2400     		.short	36
 2557 0502 12B4     		.short	-19438
 2558 0504 2400     		.short	36
 2559 0506 2800     		.short	40
 2560 0508 0100     		.short	1
 2561 050a 0028     		.short	10240
 2562 050c C566     		.short	26309
 2563 050e 4461     		.short	24900
 2564 0510 2400     		.short	36
 2565 0512 0400     		.short	4
 2566 0514 0200     		.short	2
 2567 0516 0028     		.short	10240
 2568 0518 8166     		.short	26241
 2569 051a 2244     		.short	17442
 2570 051c 2400     		.short	36
 2571 051e 0000     		.short	0
 2572 0520 0210     		.short	4098
 2573 0522 2264     		.short	25634
 2574 0524 2400     		.short	36
 2575 0526 0028     		.short	10240
 2576 0528 C066     		.short	26304
 2577 052a 0039     		.short	14592
 2578 052c 2440     		.short	16420
 2579 052e 0039     		.short	14592
 2580 0530 2440     		.short	16420
 2581 0532 1331     		.short	12563
 2582 0534 4C0C     		.short	3148
 2583 0536 F336     		.short	14067
 2584 0538 2440     		.short	16420
 2585 053a F336     		.short	14067
 2586 053c 0ED8     		.short	-10226
 2587 053e F436     		.short	14068
 2588 0540 1358     		.short	22547
 2589 0542 F136     		.short	14065
 2590 0544 1058     		.short	22544
 2591 0546 F036     		.short	14064
 2592 0548 04D8     		.short	-10236
 2593 054a F036     		.short	14064
 2594 054c 0258     		.short	22530
 2595 054e 0534     		.short	13317
 2596 0550 1490     		.short	-28652
 2597 0552 F336     		.short	14067
 2598 0554 2400     		.short	36
 2599 0556 F236     		.short	14066
 2600 0558 1518     		.short	6165
 2601 055a 0020     		.short	8192
 2602 055c 0000     		.short	0
 2603 055e F236     		.short	14066
 2604 0560 1798     		.short	-26601
 2605 0562 6818     		.short	6248
 2606 0564 3200     		.short	50
 2607 0566 4F00     		.short	79
 2608 0568 7E00     		.short	126
 2609 056a C800     		.short	200
 2610 056c 3D01     		.short	317
 2611 056e F801     		.short	504
 2612 0570 2003     		.short	800
 2613 0572 F604     		.short	1270
 2614 0574 E007     		.short	2016
 2615 0576 800C     		.short	3200
 2616 0578 D813     		.short	5080
 2617 057a 7F1F     		.short	8063
 2618 057c 0032     		.short	12800
 2619 057e 5F4F     		.short	20319
 2620 0580 A861     		.short	25000
 2621 0582 0000     		.short	0
 2622 0584 0000     		.short	0
 2623 0586 0000     		.short	0
 2624 0588 0000     		.short	0
 2625 058a 0000     		.short	0
 2626 058c 0000     		.short	0
 2627 058e 0000     		.short	0
 2628 0590 0000     		.short	0
 2629 0592 A781     		.short	-32345
 2630 0594 123E     		.short	15890
 2631 0596 14B8     		.short	-18412
 2632 0598 0000     		.short	0
 2633 059a 0A80     		.short	-32758
 2634 059c 103E     		.short	15888
 2635 059e 0138     		.short	14337
 2636 05a0 103E     		.short	15888
 2637 05a2 03B8     		.short	-18429
 2638 05a4 113E     		.short	15889
 2639 05a6 0678     		.short	30726
 2640 05a8 113E     		.short	15889
 2641 05aa 13F8     		.short	-2029
 2642 05ac 133E     		.short	15891
 2643 05ae 0EF8     		.short	-2034
 2644 05b0 133E     		.short	15891
 2645 05b2 2440     		.short	16420
 2646 05b4 043E     		.short	15876
 2647 05b6 1078     		.short	30736
 2648 05b8 9A44     		.short	17562
 2649 05ba 4000     		.short	64
 2650 05bc 0100     		.short	1
 2651 05be 0300     		.short	3
 2652 05c0 0028     		.short	10240
 2653 05c2 0473     		.short	29444
 2654 05c4 3640     		.short	16438
 2655 05c6 C103     		.short	961
 2656 05c8 0300     		.short	3
 2657 05ca C2FF     		.short	-62
 2658 05cc 26B3     		.short	-19674
 2659 05ce 2400     		.short	36
 2660 05d0 1800     		.short	24
 2661 05d2 4200     		.short	66
 2662 05d4 2643     		.short	17190
 2663 05d6 9544     		.short	17557
 2664 05d8 2440     		.short	16420
 2665 05da D240     		.short	16594
 2666 05dc 0000     		.short	0
 2667 05de 8001     		.short	384
 2668 05e0 00A1     		.short	-24320
 2669 05e2 9040     		.short	16528
 2670 05e4 1000     		.short	16
 2671 05e6 C20F     		.short	4034
 2672 05e8 0442     		.short	16900
 2673 05ea 2400     		.short	36
 2674 05ec 82BC     		.short	-17278
 2675 05ee 9140     		.short	16529
 2676 05f0 9A45     		.short	17818
 2677 05f2 2400     		.short	36
 2678 05f4 0000     		.short	0
 2679 05f6 5400     		.short	84
 2680 05f8 0028     		.short	10240
 2681 05fa 0472     		.short	29188
 2682 05fc 86BD     		.short	-17018
 2683 05fe 9340     		.short	16531
 2684 0600 0024     		.short	9216
 2685 0602 C571     		.short	29125
 2686 0604 01FE     		.short	-511
 2687 0606 0C5E     		.short	24076
 2688 0608 435C     		.short	23619
 2689 060a 2D5F     		.short	24365
 2690 060c 465E     		.short	24134
 2691 060e 0C02     		.short	524
 2692 0610 565C     		.short	23638
 2693 0612 0C8A     		.short	-30196
 2694 0614 535E     		.short	24147
 2695 0616 0C5E     		.short	24076
 2696 0618 435C     		.short	23619
 2697 061a 2D5F     		.short	24365
 2698 061c 465E     		.short	24134
 2699 061e 0C02     		.short	524
 2700 0620 565C     		.short	23638
 2701 0622 0C8A     		.short	-30196
 2702 0624 525E     		.short	24146
 2703 0626 2400     		.short	36
 2704 0628 B24C     		.short	19634
 2705 062a 0544     		.short	17413
 2706 062c 1800     		.short	24
 2707 062e 4400     		.short	68
 2708 0630 4A65     		.short	25930
 2709 0632 2400     		.short	36
 2710 0634 0028     		.short	10240
 2711 0636 0080     		.short	-32768
 2712 0638 F436     		.short	14068
 2713 063a 1058     		.short	22544
 2714 063c D181     		.short	-32303
 2715 063e 123E     		.short	15890
 2716 0640 14B8     		.short	-18412
 2717 0642 0000     		.short	0
 2718 0644 0A80     		.short	-32758
 2719 0646 103E     		.short	15888
 2720 0648 0138     		.short	14337
 2721 064a 103E     		.short	15888
 2722 064c 03B8     		.short	-18429
 2723 064e 113E     		.short	15889
 2724 0650 0678     		.short	30726
 2725 0652 113E     		.short	15889
 2726 0654 13F8     		.short	-2029
 2727 0656 133E     		.short	15891
 2728 0658 0EF8     		.short	-2034
 2729 065a 133E     		.short	15891
 2730 065c 2440     		.short	16420
 2731 065e 043E     		.short	15876
 2732 0660 1078     		.short	30736
 2733 0662 9A44     		.short	17562
 2734 0664 4000     		.short	64
 2735 0666 0000     		.short	0
 2736 0668 0308     		.short	2051
 2737 066a 0028     		.short	10240
 2738 066c C47E     		.short	32452
 2739 066e F030     		.short	12528
 2740 0670 2440     		.short	16420
 2741 0672 FF0F     		.short	4095
 2742 0674 C2FE     		.short	-318
 2743 0676 20A0     		.short	-24544
 2744 0678 2400     		.short	36
 2745 067a FF0F     		.short	4095
 2746 067c 02FF     		.short	-254
 2747 067e 22A1     		.short	-24286
 2748 0680 2400     		.short	36
 2749 0682 3640     		.short	16438
 2750 0684 2400     		.short	36
 2751 0686 0000     		.short	0
 2752 0688 C21F     		.short	8130
 2753 068a 26B3     		.short	-19674
 2754 068c 2400     		.short	36
 2755 068e 1000     		.short	16
 2756 0690 0240     		.short	16386
 2757 0692 2643     		.short	17190
 2758 0694 9544     		.short	17557
 2759 0696 2440     		.short	16420
 2760 0698 D240     		.short	16594
 2761 069a 0000     		.short	0
 2762 069c 8001     		.short	384
 2763 069e 00A1     		.short	-24320
 2764 06a0 9040     		.short	16528
 2765 06a2 1000     		.short	16
 2766 06a4 4200     		.short	66
 2767 06a6 0442     		.short	16900
 2768 06a8 2400     		.short	36
 2769 06aa 82BC     		.short	-17278
 2770 06ac 9140     		.short	16529
 2771 06ae 9A45     		.short	17818
 2772 06b0 2400     		.short	36
 2773 06b2 0000     		.short	0
 2774 06b4 5400     		.short	84
 2775 06b6 0028     		.short	10240
 2776 06b8 C47D     		.short	32196
 2777 06ba 86BD     		.short	-17018
 2778 06bc 9340     		.short	16531
 2779 06be 0024     		.short	9216
 2780 06c0 857D     		.short	32133
 2781 06c2 01FE     		.short	-511
 2782 06c4 0C5E     		.short	24076
 2783 06c6 435C     		.short	23619
 2784 06c8 2D5F     		.short	24365
 2785 06ca 465E     		.short	24134
 2786 06cc 2400     		.short	36
 2787 06ce 565C     		.short	23638
 2788 06d0 2400     		.short	36
 2789 06d2 535E     		.short	24147
 2790 06d4 0C5E     		.short	24076
 2791 06d6 435C     		.short	23619
 2792 06d8 2D5F     		.short	24365
 2793 06da 465E     		.short	24134
 2794 06dc 2400     		.short	36
 2795 06de 565C     		.short	23638
 2796 06e0 2400     		.short	36
 2797 06e2 525E     		.short	24146
 2798 06e4 2400     		.short	36
 2799 06e6 B24C     		.short	19634
 2800 06e8 0544     		.short	17413
 2801 06ea 1000     		.short	16
 2802 06ec 0440     		.short	16388
 2803 06ee 4A65     		.short	25930
 2804 06f0 1098     		.short	-26608
 2805 06f2 0000     		.short	0
 2806 06f4 4401     		.short	324
 2807 06f6 4AA5     		.short	-23222
 2808 06f8 D11B     		.short	7121
 2809 06fa 0600     		.short	6
 2810 06fc 1300     		.short	19
 2811 06fe 0133     		.short	13057
 2812 0700 44C4     		.short	-15292
 2813 0702 7E68     		.short	26750
 2814 0704 0520     		.short	8197
 2815 0706 76AD     		.short	-21130
 2816 0708 4584     		.short	-31675
 2817 070a D64E     		.short	20182
 2818 070c 8487     		.short	-30844
 2819 070e F336     		.short	14067
 2820 0710 C264     		.short	25794
 2821 0712 72AC     		.short	-21390
 2822 0714 8587     		.short	-30843
 2823 0716 C24E     		.short	20162
 2824 0718 43A4     		.short	-23485
 2825 071a 0930     		.short	12297
 2826 071c 4024     		.short	9280
 2827 071e 0930     		.short	12297
 2828 0720 4127     		.short	10049
 2829 0722 F336     		.short	14067
 2830 0724 0ED8     		.short	-10226
 2831 0726 F136     		.short	14065
 2832 0728 13D8     		.short	-10221
 2833 072a F136     		.short	14065
 2834 072c 0658     		.short	22534
 2835 072e F036     		.short	14064
 2836 0730 0398     		.short	-26621
 2837 0732 F036     		.short	14064
 2838 0734 0118     		.short	6145
 2839 0736 0020     		.short	8192
 2840 0738 0000     		.short	0
 2841 073a F236     		.short	14066
 2842 073c 1498     		.short	-26604
 2843 073e 1182     		.short	-32239
 2844 0740 824C     		.short	19586
 2845 0742 2400     		.short	36
 2846 0744 0000     		.short	0
 2847 0746 2400     		.short	36
 2848 0748 0020     		.short	8192
 2849 074a 0500     		.short	5
 2850 074c C2F5     		.short	-2622
 2851 074e 2400     		.short	36
 2852 0750 0000     		.short	0
 2853 0752 8009     		.short	2432
 2854 0754 0020     		.short	8192
 2855 0756 0000     		.short	0
 2856 0758 1060     		.short	24592
 2857 075a 2400     		.short	36
 2858 075c 5000     		.short	80
 2859              		.text
 2860              	.Letext0:
 2861              		.file 2 "c:\\project\\stm32fx_lib\\stm32f1x_iolib\\include\\core.h"
 2862              		.file 3 "/project/stm32fx_lib/stm32f1x_iolib/include/cmsis/stm32f1xx.h"
 2863              		.file 4 "/project/stm32fx_lib/stm32f1x_iolib/include/gpio.h"
 2864              		.file 5 "userdefs.h"
 2865              		.file 6 "/project/stm32fx_lib/stm32f1x_iolib/include/fundefs.h"
DEFINED SYMBOLS
                            *ABS*:00000000 vs1003.c
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:16     .text.delay_ms:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:24     .text.delay_ms:00000000 delay_ms
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:41     .text.mp3_reset:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:48     .text.mp3_reset:00000000 mp3_reset
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:122    .text.mp3_reset:00000030 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:129    .text.vs1003_cmd_write:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:136    .text.vs1003_cmd_write:00000000 vs1003_cmd_write
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:217    .text.vs1003_cmd_write:00000050 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:222    .text.vs1003_reset_decode_time:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:229    .text.vs1003_reset_decode_time:00000000 vs1003_reset_decode_time
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:261    .text.vs1003_sine_test:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:268    .text.vs1003_sine_test:00000000 vs1003_sine_test
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:522    .text.vs1003_sine_test:00000138 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:527    .text.vs1003_reg_read:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:534    .text.vs1003_reg_read:00000000 vs1003_reg_read
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:631    .text.vs1003_reg_read:00000058 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:636    .text.vs1003_soft_reset:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:643    .text.vs1003_soft_reset:00000000 vs1003_soft_reset
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:838    .text.vs1003_soft_reset:000000c4 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:845    .text.vs1003_ram_test:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:852    .text.vs1003_ram_test:00000000 vs1003_ram_test
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:952    .text.vs1003_ram_test:0000006c $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:958    .text.get_head_info:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:965    .text.get_head_info:00000000 get_head_info
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1065   .text.get_head_info:00000068 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1073   .text.vs1003_get_mp3info:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1080   .text.vs1003_get_mp3info:00000000 vs1003_get_mp3info
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1150   .text.vs1003_get_mp3info:0000003a $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1231   .text.vs1003_get_mp3info:0000008c $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1245   .text.vs1003_get_mp3info:000000c4 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1357   .text.vs1003_get_mp3info:00000124 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1363   .text.get_decode_time:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1370   .text.get_decode_time:00000000 get_decode_time
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1386   .text.load_patch:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1393   .text.load_patch:00000000 load_patch
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1456   .text.load_patch:00000028 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1464   .text.get_spec:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1471   .text.get_spec:00000000 get_spec
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1526   .text.set_vs1003:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1533   .text.set_vs1003:00000000 set_vs1003
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1614   .text.set_vs1003:00000038 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1619   .text.vs1003_set_volume:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1626   .text.vs1003_set_volume:00000000 vs1003_set_volume
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1651   .text.vs1003_init:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1658   .text.vs1003_init:00000000 vs1003_init
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1705   .text.vs1003_init:00000040 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1710   .text.vs1003_data_write:00000000 $t
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1717   .text.vs1003_data_write:00000000 vs1003_data_write
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1772   .text.vs1003_data_write:00000034 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1877   .rodata.bitrate:00000000 bitrate
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1792   .data.vs1003_ram:00000000 vs1003_ram
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1786   .bss.regvalue:00000000 regvalue
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1915   .rodata.dtab:00000000 dtab
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1798   .rodata.atab:00000000 atab
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1782   .bss.regvalue:00000000 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1873   .rodata.bitrate:00000000 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1911   .rodata.dtab:00000000 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1163   .text.vs1003_get_mp3info:00000047 $d
C:\Users\gowoo\AppData\Local\Temp\ccUBY5lP.s:1163   .text.vs1003_get_mp3info:00000048 $t

UNDEFINED SYMBOLS
wait_ms
SPI_read_write_byte
SPI_set_speed
lcd_printf
f_kbps
GPIO_Init_Pin
